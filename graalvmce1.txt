[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 8, 2018 11:55:16 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d14(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e8(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e14(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.4-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47848.523 ops/s
[info] # Warmup Iteration   2: 678902.780 ops/s
[info] # Warmup Iteration   3: 808797.500 ops/s
[info] # Warmup Iteration   4: 828314.342 ops/s
[info] # Warmup Iteration   5: 832534.353 ops/s
[info] Iteration   1: 815614.663 ops/s
[info]                  ·gc.alloc.rate:                   2351.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              4537.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5157.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 817690.909 ops/s
[info]                  ·gc.alloc.rate:                   2350.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              4523.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3870.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 799861.612 ops/s
[info]                  ·gc.alloc.rate:               2345.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          4614.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5288.861 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 831238.706 ops/s
[info]                  ·gc.alloc.rate:               2407.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          4559.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3827.509 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 828210.492 ops/s
[info]                  ·gc.alloc.rate:               2427.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          4612.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5134.512 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   818523.276 ±(99.9%) 47666.199 ops/s [Average]
[info]   (min, avg, max) = (799861.612, 818523.276, 831238.706), stdev = 12378.761
[info]   CI (99.9%): [770857.077, 866189.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2376.449 ±(99.9%) 147.106 MB/sec [Average]
[info]   (min, avg, max) = (2345.014, 2376.449, 2427.120), stdev = 38.203
[info]   CI (99.9%): [2229.343, 2523.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4569.324 ±(99.9%) 161.689 B/op [Average]
[info]   (min, avg, max) = (4523.872, 4569.324, 4614.042), stdev = 41.990
[info]   CI (99.9%): [4407.636, 4731.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2419.041 ±(99.9%) 1416.139 MB/sec [Average]
[info]   (min, avg, max) = (2011.115, 2419.041, 2701.874), stdev = 367.767
[info]   CI (99.9%): [1002.902, 3835.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4655.660 ±(99.9%) 2845.478 B/op [Average]
[info]   (min, avg, max) = (3827.509, 4655.660, 5288.861), stdev = 738.962
[info]   CI (99.9%): [1810.182, 7501.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.040), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:53:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50791.584 ops/s
[info] # Warmup Iteration   2: 1669537.114 ops/s
[info] # Warmup Iteration   3: 1857370.762 ops/s
[info] # Warmup Iteration   4: 1986978.157 ops/s
[info] # Warmup Iteration   5: 1969481.005 ops/s
[info] Iteration   1: 1990972.399 ops/s
[info]                  ·gc.alloc.rate:               1302.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          1029.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 527.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1906284.950 ops/s
[info]                  ·gc.alloc.rate:                   1261.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              1041.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1102.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1942095.529 ops/s
[info]                  ·gc.alloc.rate:                   1305.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1058.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1945351.342 ops/s
[info]                  ·gc.alloc.rate:                   1283.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              1038.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1081.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1948774.486 ops/s
[info]                  ·gc.alloc.rate:               1298.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1078.666 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1946695.741 ±(99.9%) 115851.680 ops/s [Average]
[info]   (min, avg, max) = (1906284.950, 1946695.741, 1990972.399), stdev = 30086.313
[info]   CI (99.9%): [1830844.061, 2062547.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1290.235 ±(99.9%) 69.429 MB/sec [Average]
[info]   (min, avg, max) = (1261.889, 1290.235, 1305.835), stdev = 18.030
[info]   CI (99.9%): [1220.806, 1359.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1043.138 ±(99.9%) 42.050 B/op [Average]
[info]   (min, avg, max) = (1029.213, 1043.138, 1058.215), stdev = 10.920
[info]   CI (99.9%): [1001.088, 1085.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.459 ±(99.9%) 1151.501 MB/sec [Average]
[info]   (min, avg, max) = (667.519, 1202.459, 1337.250), stdev = 299.041
[info]   CI (99.9%): [50.958, 2353.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   974.720 ±(99.9%) 963.020 B/op [Average]
[info]   (min, avg, max) = (527.653, 974.720, 1102.466), stdev = 250.093
[info]   CI (99.9%): [11.700, 1937.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 7.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 4.236), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 8.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.697 ±(99.9%) 5.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.697, 3.427), stdev = 1.526
[info]   CI (99.9%): [≈ 0, 6.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1256282.891 ops/s
[info] # Warmup Iteration   2: 5608280.897 ops/s
[info] # Warmup Iteration   3: 5870083.334 ops/s
[info] # Warmup Iteration   4: 5517980.715 ops/s
[info] # Warmup Iteration   5: 5682946.963 ops/s
[info] Iteration   1: 5619284.227 ops/s
[info]                  ·gc.alloc.rate:                   389.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              109.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5648543.079 ops/s
[info]                  ·gc.alloc.rate:               391.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5677388.616 ops/s
[info]                  ·gc.alloc.rate:      375.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5883884.392 ops/s
[info]                  ·gc.alloc.rate:                   408.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              109.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5891678.668 ops/s
[info]                  ·gc.alloc.rate:      389.307 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5744155.796 ±(99.9%) 511134.491 ops/s [Average]
[info]   (min, avg, max) = (5619284.227, 5744155.796, 5891678.668), stdev = 132740.004
[info]   CI (99.9%): [5233021.305, 6255290.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   390.691 ±(99.9%) 45.639 MB/sec [Average]
[info]   (min, avg, max) = (375.159, 390.691, 408.500), stdev = 11.852
[info]   CI (99.9%): [345.052, 436.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.051 ±(99.9%) 10.733 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.051, 109.262), stdev = 2.787
[info]   CI (99.9%): [96.318, 117.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339.113 ±(99.9%) 1218.436 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.113, 672.179), stdev = 316.424
[info]   CI (99.9%): [≈ 0, 1557.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   93.125 ±(99.9%) 332.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.125, 179.788), stdev = 86.333
[info]   CI (99.9%): [≈ 0, 425.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:52:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711.735 ops/s
[info] # Warmup Iteration   2: 214333.374 ops/s
[info] # Warmup Iteration   3: 296514.356 ops/s
[info] # Warmup Iteration   4: 303768.376 ops/s
[info] # Warmup Iteration   5: 306992.706 ops/s
[info] Iteration   1: 306721.216 ops/s
[info]                  ·gc.alloc.rate:                   2718.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              13949.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13770.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.463 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 307451.832 ops/s
[info]                  ·gc.alloc.rate:                   2698.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              13815.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13759.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 307585.262 ops/s
[info]                  ·gc.alloc.rate:               2729.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          13963.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13784.226 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 300178.650 ops/s
[info]                  ·gc.alloc.rate:               2666.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          13974.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14157.061 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 307195.327 ops/s
[info]                  ·gc.alloc.rate:               2725.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          13965.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13862.659 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   305826.457 ±(99.9%) 12223.498 ops/s [Average]
[info]   (min, avg, max) = (300178.650, 305826.457, 307585.262), stdev = 3174.404
[info]   CI (99.9%): [293602.959, 318049.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2707.823 ±(99.9%) 100.914 MB/sec [Average]
[info]   (min, avg, max) = (2666.093, 2707.823, 2729.835), stdev = 26.207
[info]   CI (99.9%): [2606.909, 2808.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13933.766 ±(99.9%) 256.985 B/op [Average]
[info]   (min, avg, max) = (13815.453, 13933.766, 13974.917), stdev = 66.738
[info]   CI (99.9%): [13676.781, 14190.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2694.569 ±(99.9%) 35.346 MB/sec [Average]
[info]   (min, avg, max) = (2683.410, 2694.569, 2705.890), stdev = 9.179
[info]   CI (99.9%): [2659.223, 2729.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13866.693 ±(99.9%) 644.249 B/op [Average]
[info]   (min, avg, max) = (13759.363, 13866.693, 14157.061), stdev = 167.309
[info]   CI (99.9%): [13222.444, 14510.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.256 ±(99.9%) 2.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.256, 1.259), stdev = 0.561
[info]   CI (99.9%): [≈ 0, 2.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.314 ±(99.9%) 11.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.314, 6.463), stdev = 2.879
[info]   CI (99.9%): [≈ 0, 12.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41524.160 ops/s
[info] # Warmup Iteration   2: 810837.261 ops/s
[info] # Warmup Iteration   3: 888421.475 ops/s
[info] # Warmup Iteration   4: 907306.372 ops/s
[info] # Warmup Iteration   5: 900576.829 ops/s
[info] Iteration   1: 899420.956 ops/s
[info]                  ·gc.alloc.rate:                   2399.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              4197.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4690.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.630 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 898178.405 ops/s
[info]                  ·gc.alloc.rate:                   2403.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              4211.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3514.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 894498.327 ops/s
[info]                  ·gc.alloc.rate:                   2411.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              4242.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4707.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 919368.272 ops/s
[info]                  ·gc.alloc.rate:                   2463.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3440.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 897246.388 ops/s
[info]                  ·gc.alloc.rate:               2433.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          4267.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4712.562 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   901742.470 ±(99.9%) 38576.326 ops/s [Average]
[info]   (min, avg, max) = (894498.327, 901742.470, 919368.272), stdev = 10018.149
[info]   CI (99.9%): [863166.144, 940318.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2422.128 ±(99.9%) 102.077 MB/sec [Average]
[info]   (min, avg, max) = (2399.031, 2422.128, 2463.203), stdev = 26.509
[info]   CI (99.9%): [2320.051, 2524.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4227.346 ±(99.9%) 107.294 B/op [Average]
[info]   (min, avg, max) = (4197.967, 4227.346, 4267.800), stdev = 27.864
[info]   CI (99.9%): [4120.053, 4334.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2411.723 ±(99.9%) 1419.964 MB/sec [Average]
[info]   (min, avg, max) = (2005.745, 2411.723, 2687.039), stdev = 368.760
[info]   CI (99.9%): [991.759, 3831.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4213.093 ±(99.9%) 2587.465 B/op [Average]
[info]   (min, avg, max) = (3440.568, 4213.093, 4712.562), stdev = 671.956
[info]   CI (99.9%): [1625.628, 6800.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.789), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.348 ±(99.9%) 11.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.348, 6.630), stdev = 2.953
[info]   CI (99.9%): [≈ 0, 12.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167162.200 ops/s
[info] # Warmup Iteration   2: 2690332.345 ops/s
[info] # Warmup Iteration   3: 2828113.840 ops/s
[info] # Warmup Iteration   4: 2868929.921 ops/s
[info] # Warmup Iteration   5: 2945204.532 ops/s
[info] Iteration   1: 2883425.333 ops/s
[info]                  ·gc.alloc.rate:               1237.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          675.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 729.037 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2921594.471 ops/s
[info]                  ·gc.alloc.rate:                   1248.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              672.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     720.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2827713.349 ops/s
[info]                  ·gc.alloc.rate:                   1206.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              671.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2904454.575 ops/s
[info]                  ·gc.alloc.rate:                   1250.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              677.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     725.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2973282.175 ops/s
[info]                  ·gc.alloc.rate:                   1265.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              669.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2902093.981 ±(99.9%) 204977.606 ops/s [Average]
[info]   (min, avg, max) = (2827713.349, 2902093.981, 2973282.175), stdev = 53232.033
[info]   CI (99.9%): [2697116.375, 3107071.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1241.762 ±(99.9%) 84.623 MB/sec [Average]
[info]   (min, avg, max) = (1206.841, 1241.762, 1265.475), stdev = 21.976
[info]   CI (99.9%): [1157.140, 1326.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   673.415 ±(99.9%) 12.136 B/op [Average]
[info]   (min, avg, max) = (669.828, 673.415, 677.843), stdev = 3.152
[info]   CI (99.9%): [661.279, 685.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.929 ±(99.9%) 1149.635 MB/sec [Average]
[info]   (min, avg, max) = (669.859, 1203.929, 1339.066), stdev = 298.556
[info]   CI (99.9%): [54.294, 2353.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   654.817 ±(99.9%) 647.270 B/op [Average]
[info]   (min, avg, max) = (354.563, 654.817, 744.688), stdev = 168.094
[info]   CI (99.9%): [7.547, 1302.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.810), stdev = 1.690
[info]   CI (99.9%): [≈ 0, 7.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.426 ±(99.9%) 3.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 2.064), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.600, 7.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1613206.765 ops/s
[info] # Warmup Iteration   2: 13596254.079 ops/s
[info] # Warmup Iteration   3: 14377875.481 ops/s
[info] # Warmup Iteration   4: 14347445.954 ops/s
[info] # Warmup Iteration   5: 14660288.723 ops/s
[info] Iteration   1: 14473760.227 ops/s
[info]                  ·gc.alloc.rate:                   757.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14373864.607 ops/s
[info]                  ·gc.alloc.rate:               753.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.489 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 14362877.571 ops/s
[info]                  ·gc.alloc.rate:               771.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          84.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14535741.296 ops/s
[info]                  ·gc.alloc.rate:               758.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 14523160.613 ops/s
[info]                  ·gc.alloc.rate:               756.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.769 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14453880.863 ±(99.9%) 313893.642 ops/s [Average]
[info]   (min, avg, max) = (14362877.571, 14453880.863, 14535741.296), stdev = 81517.182
[info]   CI (99.9%): [14139987.221, 14767774.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   759.424 ±(99.9%) 26.039 MB/sec [Average]
[info]   (min, avg, max) = (753.690, 759.424, 771.087), stdev = 6.762
[info]   CI (99.9%): [733.385, 785.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.682 ±(99.9%) 3.943 B/op [Average]
[info]   (min, avg, max) = (81.998, 82.682, 84.483), stdev = 1.024
[info]   CI (99.9%): [78.740, 86.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.265 ±(99.9%) 1.527 MB/sec [Average]
[info]   (min, avg, max) = (670.597, 671.265, 671.621), stdev = 0.397
[info]   CI (99.9%): [669.737, 672.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   73.083 ±(99.9%) 1.550 B/op [Average]
[info]   (min, avg, max) = (72.706, 73.083, 73.543), stdev = 0.403
[info]   CI (99.9%): [71.532, 74.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1147075.643 ops/s
[info] # Warmup Iteration   2: 14789665.926 ops/s
[info] # Warmup Iteration   3: 16687494.803 ops/s
[info] # Warmup Iteration   4: 16666851.962 ops/s
[info] # Warmup Iteration   5: 16715255.217 ops/s
[info] Iteration   1: 16713417.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16629992.078 ops/s
[info]                  ·gc.alloc.rate:      2.534 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.240 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16687426.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16718334.814 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16689933.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   16687820.911 ±(99.9%) 135253.955 ops/s [Average]
[info]   (min, avg, max) = (16629992.078, 16687820.911, 16718334.814), stdev = 35125.023
[info]   CI (99.9%): [16552566.956, 16823074.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.507 ±(99.9%) 4.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.507, 2.534), stdev = 1.133
[info]   CI (99.9%): [≈ 0, 4.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.048 ±(99.9%) 0.413 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.048, 0.240), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10071.316 ops/s
[info] # Warmup Iteration   2: 99753.632 ops/s
[info] # Warmup Iteration   3: 478925.799 ops/s
[info] # Warmup Iteration   4: 483576.338 ops/s
[info] # Warmup Iteration   5: 497842.139 ops/s
[info] Iteration   1: 497395.717 ops/s
[info]                  ·gc.alloc.rate:                   1486.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              4703.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4215.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 494848.929 ops/s
[info]                  ·gc.alloc.rate:                   1486.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              4728.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4241.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 495166.656 ops/s
[info]                  ·gc.alloc.rate:                   1469.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              4669.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4243.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 488284.455 ops/s
[info]                  ·gc.alloc.rate:                   1448.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              4668.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4307.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 490234.922 ops/s
[info]                  ·gc.alloc.rate:                   1479.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              4749.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6413.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.671 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   493186.136 ±(99.9%) 14554.218 ops/s [Average]
[info]   (min, avg, max) = (488284.455, 493186.136, 497395.717), stdev = 3779.684
[info]   CI (99.9%): [478631.918, 507740.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1474.135 ±(99.9%) 61.944 MB/sec [Average]
[info]   (min, avg, max) = (1448.374, 1474.135, 1486.889), stdev = 16.087
[info]   CI (99.9%): [1412.190, 1536.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4703.894 ±(99.9%) 136.920 B/op [Average]
[info]   (min, avg, max) = (4668.492, 4703.894, 4749.006), stdev = 35.558
[info]   CI (99.9%): [4566.973, 4840.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.151 ±(99.9%) 1143.623 MB/sec [Average]
[info]   (min, avg, max) = (1332.314, 1467.151, 1998.426), stdev = 296.995
[info]   CI (99.9%): [323.528, 2610.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4684.292 ±(99.9%) 3725.177 B/op [Average]
[info]   (min, avg, max) = (4215.762, 4684.292, 6413.812), stdev = 967.417
[info]   CI (99.9%): [959.115, 8409.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.956 ±(99.9%) 7.022 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.956, 4.195), stdev = 1.824
[info]   CI (99.9%): [≈ 0, 7.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.078 ±(99.9%) 22.636 B/op [Average]
[info]   (min, avg, max) = (0.033, 3.078, 13.520), stdev = 5.879
[info]   CI (99.9%): [≈ 0, 25.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177713.830 ops/s
[info] # Warmup Iteration   2: 1870710.609 ops/s
[info] # Warmup Iteration   3: 2035501.584 ops/s
[info] # Warmup Iteration   4: 2125019.251 ops/s
[info] # Warmup Iteration   5: 2094981.143 ops/s
[info] Iteration   1: 2144682.570 ops/s
[info]                  ·gc.alloc.rate:                   2992.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              2195.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1964.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2142909.419 ops/s
[info]                  ·gc.alloc.rate:                   3003.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              2206.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2458.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2142331.523 ops/s
[info]                  ·gc.alloc.rate:               3002.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          2205.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1971.289 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2146155.533 ops/s
[info]                  ·gc.alloc.rate:               3009.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1973.631 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2122687.199 ops/s
[info]                  ·gc.alloc.rate:               3003.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          2226.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2501.924 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2139753.249 ±(99.9%) 37191.441 ops/s [Average]
[info]   (min, avg, max) = (2122687.199, 2139753.249, 2146155.533), stdev = 9658.499
[info]   CI (99.9%): [2102561.808, 2176944.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3002.323 ±(99.9%) 24.024 MB/sec [Average]
[info]   (min, avg, max) = (2992.442, 3002.323, 3009.764), stdev = 6.239
[info]   CI (99.9%): [2978.298, 3026.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2208.321 ±(99.9%) 43.253 B/op [Average]
[info]   (min, avg, max) = (2195.779, 2208.321, 2226.629), stdev = 11.233
[info]   CI (99.9%): [2165.067, 2251.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2954.490 ±(99.9%) 1428.321 MB/sec [Average]
[info]   (min, avg, max) = (2676.731, 2954.490, 3374.404), stdev = 370.930
[info]   CI (99.9%): [1526.169, 4382.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2173.806 ±(99.9%) 1078.039 B/op [Average]
[info]   (min, avg, max) = (1964.118, 2173.806, 2501.924), stdev = 279.963
[info]   CI (99.9%): [1095.767, 3251.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:49:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.569 ops/s
[info] # Warmup Iteration   2: 9163362.608 ops/s
[info] # Warmup Iteration   3: 10237567.921 ops/s
[info] # Warmup Iteration   4: 10183743.811 ops/s
[info] # Warmup Iteration   5: 10141400.260 ops/s
[info] Iteration   1: 10212050.587 ops/s
[info]                  ·gc.alloc.rate:                   1279.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10229033.953 ops/s
[info]                  ·gc.alloc.rate:                   1279.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10216665.062 ops/s
[info]                  ·gc.alloc.rate:                   1294.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10207296.098 ops/s
[info]                  ·gc.alloc.rate:                   1283.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10220954.465 ops/s
[info]                  ·gc.alloc.rate:                   1273.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10217200.033 ±(99.9%) 32160.850 ops/s [Average]
[info]   (min, avg, max) = (10207296.098, 10217200.033, 10229033.953), stdev = 8352.071
[info]   CI (99.9%): [10185039.182, 10249360.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1282.002 ±(99.9%) 30.452 MB/sec [Average]
[info]   (min, avg, max) = (1273.467, 1282.002, 1294.731), stdev = 7.908
[info]   CI (99.9%): [1251.550, 1312.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   197.479 ±(99.9%) 4.898 B/op [Average]
[info]   (min, avg, max) = (196.093, 197.479, 199.452), stdev = 1.272
[info]   CI (99.9%): [192.581, 202.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1195.904 ±(99.9%) 1141.079 MB/sec [Average]
[info]   (min, avg, max) = (665.811, 1195.904, 1330.734), stdev = 296.335
[info]   CI (99.9%): [54.824, 2336.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   184.224 ±(99.9%) 175.870 B/op [Average]
[info]   (min, avg, max) = (102.524, 184.224, 205.176), stdev = 45.673
[info]   CI (99.9%): [8.354, 360.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.025, 0.042), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117441.914 ops/s
[info] # Warmup Iteration   2: 2899181.475 ops/s
[info] # Warmup Iteration   3: 3173553.836 ops/s
[info] # Warmup Iteration   4: 3115323.605 ops/s
[info] # Warmup Iteration   5: 3170913.213 ops/s
[info] Iteration   1: 3171708.241 ops/s
[info]                  ·gc.alloc.rate:                   1955.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              970.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     663.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3134485.183 ops/s
[info]                  ·gc.alloc.rate:                   1949.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              978.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1007.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3085967.576 ops/s
[info]                  ·gc.alloc.rate:               1944.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          991.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1020.601 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3152072.635 ops/s
[info]                  ·gc.alloc.rate:               1973.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          985.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 998.828 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3152809.397 ops/s
[info]                  ·gc.alloc.rate:               1986.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          991.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 999.573 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3139408.607 ±(99.9%) 125713.485 ops/s [Average]
[info]   (min, avg, max) = (3085967.576, 3139408.607, 3171708.241), stdev = 32647.393
[info]   CI (99.9%): [3013695.122, 3265122.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1962.159 ±(99.9%) 67.194 MB/sec [Average]
[info]   (min, avg, max) = (1944.971, 1962.159, 1986.810), stdev = 17.450
[info]   CI (99.9%): [1894.965, 2029.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   983.608 ±(99.9%) 35.064 B/op [Average]
[info]   (min, avg, max) = (970.616, 983.608, 991.915), stdev = 9.106
[info]   CI (99.9%): [948.544, 1018.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1869.840 ±(99.9%) 1145.719 MB/sec [Average]
[info]   (min, avg, max) = (1337.604, 1869.840, 2007.141), stdev = 297.540
[info]   CI (99.9%): [724.121, 3015.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   938.041 ±(99.9%) 591.353 B/op [Average]
[info]   (min, avg, max) = (663.769, 938.041, 1020.601), stdev = 153.573
[info]   CI (99.9%): [346.688, 1529.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.207), stdev = 1.879
[info]   CI (99.9%): [≈ 0, 8.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 3.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.424, 2.111), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 4.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3549957.449 ops/s
[info] # Warmup Iteration   2: 12824726.692 ops/s
[info] # Warmup Iteration   3: 13696279.815 ops/s
[info] # Warmup Iteration   4: 13088319.416 ops/s
[info] # Warmup Iteration   5: 13263346.716 ops/s
[info] Iteration   1: 13355255.329 ops/s
[info]                  ·gc.alloc.rate:                   1736.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13344189.843 ops/s
[info]                  ·gc.alloc.rate:                   1762.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13594790.071 ops/s
[info]                  ·gc.alloc.rate:               1779.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          206.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.781 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13376311.051 ops/s
[info]                  ·gc.alloc.rate:                   1766.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 13738876.980 ops/s
[info]                  ·gc.alloc.rate:                   1812.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13481884.655 ±(99.9%) 680522.530 ops/s [Average]
[info]   (min, avg, max) = (13344189.843, 13481884.655, 13738876.980), stdev = 176729.540
[info]   CI (99.9%): [12801362.125, 14162407.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1771.628 ±(99.9%) 107.501 MB/sec [Average]
[info]   (min, avg, max) = (1736.301, 1771.628, 1812.872), stdev = 27.918
[info]   CI (99.9%): [1664.127, 1879.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.766 ±(99.9%) 5.560 B/op [Average]
[info]   (min, avg, max) = (204.560, 206.766, 207.850), stdev = 1.444
[info]   CI (99.9%): [201.206, 212.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1749.577 ±(99.9%) 1415.910 MB/sec [Average]
[info]   (min, avg, max) = (1345.596, 1749.577, 2023.301), stdev = 367.707
[info]   CI (99.9%): [333.666, 3165.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   204.208 ±(99.9%) 165.356 B/op [Average]
[info]   (min, avg, max) = (155.781, 204.208, 238.538), stdev = 42.942
[info]   CI (99.9%): [38.852, 369.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 2.853), stdev = 1.248
[info]   CI (99.9%): [≈ 0, 5.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.336), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8669.024 ops/s
[info] # Warmup Iteration   2: 243484.338 ops/s
[info] # Warmup Iteration   3: 1196357.453 ops/s
[info] # Warmup Iteration   4: 1242180.633 ops/s
[info] # Warmup Iteration   5: 1251482.630 ops/s
[info] Iteration   1: 1256995.765 ops/s
[info]                  ·gc.alloc.rate:                   3036.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              3801.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3362.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1259531.639 ops/s
[info]                  ·gc.alloc.rate:                   3018.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              3770.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3359.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1259896.301 ops/s
[info]                  ·gc.alloc.rate:               3071.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          3835.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4207.875 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1260827.227 ops/s
[info]                  ·gc.alloc.rate:               3061.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          3820.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3372.203 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 1237733.713 ops/s
[info]                  ·gc.alloc.rate:               3008.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          3823.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3442.370 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1254996.929 ±(99.9%) 37559.760 ops/s [Average]
[info]   (min, avg, max) = (1237733.713, 1254996.929, 1260827.227), stdev = 9754.150
[info]   CI (99.9%): [1217437.169, 1292556.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3039.270 ±(99.9%) 104.236 MB/sec [Average]
[info]   (min, avg, max) = (3008.379, 3039.270, 3071.209), stdev = 27.070
[info]   CI (99.9%): [2935.035, 3143.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3810.480 ±(99.9%) 97.149 B/op [Average]
[info]   (min, avg, max) = (3770.859, 3810.480, 3835.444), stdev = 25.229
[info]   CI (99.9%): [3713.331, 3907.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2831.068 ±(99.9%) 1159.417 MB/sec [Average]
[info]   (min, avg, max) = (2685.883, 2831.068, 3369.431), stdev = 301.097
[info]   CI (99.9%): [1671.651, 3990.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3548.959 ±(99.9%) 1424.358 B/op [Average]
[info]   (min, avg, max) = (3359.385, 3548.959, 4207.875), stdev = 369.901
[info]   CI (99.9%): [2124.601, 4973.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.187), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.235), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236549.046 ops/s
[info] # Warmup Iteration   2: 2354465.722 ops/s
[info] # Warmup Iteration   3: 2441798.027 ops/s
[info] # Warmup Iteration   4: 2364647.094 ops/s
[info] # Warmup Iteration   5: 2472361.320 ops/s
[info] Iteration   1: 2489075.481 ops/s
[info]                  ·gc.alloc.rate:                   2202.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1392.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1272.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2496479.101 ops/s
[info]                  ·gc.alloc.rate:                   2197.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1385.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1265.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2428797.961 ops/s
[info]                  ·gc.alloc.rate:                   2127.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1378.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1299.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2494450.926 ops/s
[info]                  ·gc.alloc.rate:                   2236.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1411.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1688.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2495148.947 ops/s
[info]                  ·gc.alloc.rate:               2211.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          1394.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1269.144 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2480790.483 ±(99.9%) 112442.255 ops/s [Average]
[info]   (min, avg, max) = (2428797.961, 2480790.483, 2496479.101), stdev = 29200.897
[info]   CI (99.9%): [2368348.228, 2593232.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2195.011 ±(99.9%) 156.490 MB/sec [Average]
[info]   (min, avg, max) = (2127.508, 2195.011, 2236.617), stdev = 40.640
[info]   CI (99.9%): [2038.521, 2351.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1392.355 ±(99.9%) 47.387 B/op [Average]
[info]   (min, avg, max) = (1378.270, 1392.355, 1411.171), stdev = 12.306
[info]   CI (99.9%): [1344.968, 1439.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2143.052 ±(99.9%) 1148.556 MB/sec [Average]
[info]   (min, avg, max) = (2006.289, 2143.052, 2676.604), stdev = 298.276
[info]   CI (99.9%): [994.496, 3291.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1359.142 ±(99.9%) 711.459 B/op [Average]
[info]   (min, avg, max) = (1265.792, 1359.142, 1688.777), stdev = 184.764
[info]   CI (99.9%): [647.682, 2070.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.685), stdev = 1.639
[info]   CI (99.9%): [≈ 0, 7.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.477 ±(99.9%) 3.989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 2.330), stdev = 1.036
[info]   CI (99.9%): [≈ 0, 4.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.665 ops/s
[info] # Warmup Iteration   2: 17203242.275 ops/s
[info] # Warmup Iteration   3: 18909117.778 ops/s
[info] # Warmup Iteration   4: 18380004.910 ops/s
[info] # Warmup Iteration   5: 18774700.816 ops/s
[info] Iteration   1: 18799239.423 ops/s
[info]                  ·gc.alloc.rate:                   589.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 18730087.019 ops/s
[info]                  ·gc.alloc.rate:               593.221 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 18769294.414 ops/s
[info]                  ·gc.alloc.rate:                   592.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18769298.175 ops/s
[info]                  ·gc.alloc.rate:               597.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55.887 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 18725879.444 ops/s
[info]                  ·gc.alloc.rate:                   594.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18758759.695 ±(99.9%) 118119.429 ops/s [Average]
[info]   (min, avg, max) = (18725879.444, 18758759.695, 18799239.423), stdev = 30675.241
[info]   CI (99.9%): [18640640.266, 18876879.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   593.433 ±(99.9%) 11.122 MB/sec [Average]
[info]   (min, avg, max) = (589.731, 593.433, 597.640), stdev = 2.888
[info]   CI (99.9%): [582.311, 604.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.780 ±(99.9%) 1.071 B/op [Average]
[info]   (min, avg, max) = (49.370, 49.780, 50.103), stdev = 0.278
[info]   CI (99.9%): [48.709, 50.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.410 ±(99.9%) 2.005 MB/sec [Average]
[info]   (min, avg, max) = (665.843, 666.410, 667.115), stdev = 0.521
[info]   CI (99.9%): [664.404, 668.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   55.902 ±(99.9%) 0.426 B/op [Average]
[info]   (min, avg, max) = (55.741, 55.902, 56.045), stdev = 0.111
[info]   CI (99.9%): [55.476, 56.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.026), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132989.293 ops/s
[info] # Warmup Iteration   2: 5719957.876 ops/s
[info] # Warmup Iteration   3: 6002059.014 ops/s
[info] # Warmup Iteration   4: 6129266.841 ops/s
[info] # Warmup Iteration   5: 6125684.304 ops/s
[info] Iteration   1: 5985746.225 ops/s
[info]                  ·gc.alloc.rate:                   1723.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              453.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     527.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 6030947.616 ops/s
[info]                  ·gc.alloc.rate:                   1695.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6144094.003 ops/s
[info]                  ·gc.alloc.rate:                   1753.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     513.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6056297.582 ops/s
[info]                  ·gc.alloc.rate:                   1714.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6013936.336 ops/s
[info]                  ·gc.alloc.rate:               1717.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          449.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 524.222 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6046204.352 ±(99.9%) 232744.551 ops/s [Average]
[info]   (min, avg, max) = (5985746.225, 6046204.352, 6144094.003), stdev = 60443.021
[info]   CI (99.9%): [5813459.802, 6278948.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1720.761 ±(99.9%) 80.904 MB/sec [Average]
[info]   (min, avg, max) = (1695.387, 1720.761, 1753.341), stdev = 21.010
[info]   CI (99.9%): [1639.857, 1801.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   447.890 ±(99.9%) 15.893 B/op [Average]
[info]   (min, avg, max) = (442.298, 447.890, 453.150), stdev = 4.127
[info]   CI (99.9%): [431.997, 463.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.588 ±(99.9%) 1408.703 MB/sec [Average]
[info]   (min, avg, max) = (1334.940, 1737.588, 2006.069), stdev = 365.836
[info]   CI (99.9%): [328.885, 3146.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   452.278 ±(99.9%) 366.770 B/op [Average]
[info]   (min, avg, max) = (346.915, 452.278, 527.196), stdev = 95.249
[info]   CI (99.9%): [85.508, 819.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.748), stdev = 1.669
[info]   CI (99.9%): [≈ 0, 7.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.199 ±(99.9%) 1.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.978), stdev = 0.436
[info]   CI (99.9%): [≈ 0, 1.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8499955.164 ops/s
[info] # Warmup Iteration   2: 28376875.087 ops/s
[info] # Warmup Iteration   3: 28954734.477 ops/s
[info] # Warmup Iteration   4: 26602301.943 ops/s
[info] # Warmup Iteration   5: 28913809.760 ops/s
[info] Iteration   1: 28480326.117 ops/s
[info]                  ·gc.alloc.rate:                   885.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28897173.642 ops/s
[info]                  ·gc.alloc.rate:               913.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.537 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28903359.303 ops/s
[info]                  ·gc.alloc.rate:                   918.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 28593935.034 ops/s
[info]                  ·gc.alloc.rate:               887.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.979 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 29003804.211 ops/s
[info]                  ·gc.alloc.rate:               910.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   28775719.661 ±(99.9%) 868250.844 ops/s [Average]
[info]   (min, avg, max) = (28480326.117, 28775719.661, 29003804.211), stdev = 225481.987
[info]   CI (99.9%): [27907468.818, 29643970.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   903.400 ±(99.9%) 58.898 MB/sec [Average]
[info]   (min, avg, max) = (885.927, 903.400, 918.414), stdev = 15.296
[info]   CI (99.9%): [844.502, 962.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.396 ±(99.9%) 1.946 B/op [Average]
[info]   (min, avg, max) = (48.848, 49.396, 50.010), stdev = 0.505
[info]   CI (99.9%): [47.450, 51.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.842 ±(99.9%) 1156.353 MB/sec [Average]
[info]   (min, avg, max) = (671.036, 805.842, 1343.037), stdev = 300.301
[info]   CI (99.9%): [≈ 0, 1962.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.035 ±(99.9%) 62.640 B/op [Average]
[info]   (min, avg, max) = (36.456, 44.035, 73.131), stdev = 16.267
[info]   CI (99.9%): [≈ 0, 106.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7466519.991 ops/s
[info] # Warmup Iteration   2: 31116076.645 ops/s
[info] # Warmup Iteration   3: 34725379.497 ops/s
[info] # Warmup Iteration   4: 34740300.551 ops/s
[info] # Warmup Iteration   5: 34779813.105 ops/s
[info] Iteration   1: 34708205.713 ops/s
[info]                  ·gc.alloc.rate:      1.013 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.046 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34770309.555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34758734.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34769668.254 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34744111.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34750205.813 ±(99.9%) 99239.754 ops/s [Average]
[info]   (min, avg, max) = (34708205.713, 34750205.813, 34770309.555), stdev = 25772.249
[info]   CI (99.9%): [34650966.059, 34849445.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.203 ±(99.9%) 1.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.203, 1.013), stdev = 0.453
[info]   CI (99.9%): [≈ 0, 1.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46231.688 ops/s
[info] # Warmup Iteration   2: 1571593.092 ops/s
[info] # Warmup Iteration   3: 1813167.146 ops/s
[info] # Warmup Iteration   4: 1812888.059 ops/s
[info] # Warmup Iteration   5: 1806129.963 ops/s
[info] Iteration   1: 1845671.459 ops/s
[info]                  ·gc.alloc.rate:                   2890.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              2464.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2841.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1852433.949 ops/s
[info]                  ·gc.alloc.rate:                   2874.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              2442.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2265.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1856320.445 ops/s
[info]                  ·gc.alloc.rate:                   2908.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              2465.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2266.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1826769.500 ops/s
[info]                  ·gc.alloc.rate:                   2865.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              2467.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2310.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1814348.065 ops/s
[info]                  ·gc.alloc.rate:               2846.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          2468.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2334.598 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1839108.683 ±(99.9%) 68942.151 ops/s [Average]
[info]   (min, avg, max) = (1814348.065, 1839108.683, 1856320.445), stdev = 17904.058
[info]   CI (99.9%): [1770166.533, 1908050.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2877.124 ±(99.9%) 91.240 MB/sec [Average]
[info]   (min, avg, max) = (2846.146, 2877.124, 2908.046), stdev = 23.695
[info]   CI (99.9%): [2785.884, 2968.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2461.788 ±(99.9%) 42.766 B/op [Average]
[info]   (min, avg, max) = (2442.165, 2461.788, 2468.853), stdev = 11.106
[info]   CI (99.9%): [2419.022, 2504.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2809.485 ±(99.9%) 1126.799 MB/sec [Average]
[info]   (min, avg, max) = (2666.656, 2809.485, 3332.683), stdev = 292.626
[info]   CI (99.9%): [1682.686, 3936.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2403.699 ±(99.9%) 948.859 B/op [Average]
[info]   (min, avg, max) = (2265.312, 2403.699, 2841.312), stdev = 246.416
[info]   CI (99.9%): [1454.840, 3352.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.167), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.142), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55769.024 ops/s
[info] # Warmup Iteration   2: 301156.519 ops/s
[info] # Warmup Iteration   3: 306309.715 ops/s
[info] # Warmup Iteration   4: 318987.222 ops/s
[info] # Warmup Iteration   5: 319047.453 ops/s
[info] Iteration   1: 315245.050 ops/s
[info]                  ·gc.alloc.rate:                   1926.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              9619.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10063.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 319952.608 ops/s
[info]                  ·gc.alloc.rate:                   1952.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              9598.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6602.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 314149.999 ops/s
[info]                  ·gc.alloc.rate:                   1934.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              9689.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10065.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 321116.800 ops/s
[info]                  ·gc.alloc.rate:               1985.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          9728.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9843.868 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 320978.040 ops/s
[info]                  ·gc.alloc.rate:               1987.303 MB/sec
[info]                  ·gc.alloc.rate.norm:          9744.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9854.602 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   318288.499 ±(99.9%) 12827.896 ops/s [Average]
[info]   (min, avg, max) = (314149.999, 318288.499, 321116.800), stdev = 3331.364
[info]   CI (99.9%): [305460.604, 331116.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1957.044 ±(99.9%) 108.403 MB/sec [Average]
[info]   (min, avg, max) = (1926.740, 1957.044, 1987.303), stdev = 28.152
[info]   CI (99.9%): [1848.641, 2065.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9676.195 ±(99.9%) 249.391 B/op [Average]
[info]   (min, avg, max) = (9598.972, 9676.195, 9744.461), stdev = 64.766
[info]   CI (99.9%): [9426.803, 9925.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.186 ±(99.9%) 1150.389 MB/sec [Average]
[info]   (min, avg, max) = (1342.786, 1877.186, 2015.695), stdev = 298.752
[info]   CI (99.9%): [726.797, 3027.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9286.102 ±(99.9%) 5790.683 B/op [Average]
[info]   (min, avg, max) = (6602.896, 9286.102, 10065.614), stdev = 1503.822
[info]   CI (99.9%): [3495.419, 15076.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.060), stdev = 1.327
[info]   CI (99.9%): [≈ 0, 5.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.588 ±(99.9%) 25.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.588, 15.277), stdev = 6.625
[info]   CI (99.9%): [≈ 0, 29.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94822.463 ops/s
[info] # Warmup Iteration   2: 466934.265 ops/s
[info] # Warmup Iteration   3: 500600.156 ops/s
[info] # Warmup Iteration   4: 457295.580 ops/s
[info] # Warmup Iteration   5: 521434.396 ops/s
[info] Iteration   1: 507496.782 ops/s
[info]                  ·gc.alloc.rate:                   656.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2036.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2062.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 520671.628 ops/s
[info]                  ·gc.alloc.rate:               671.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          2029.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2010.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 521299.111 ops/s
[info]                  ·gc.alloc.rate:                   669.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              2022.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2011.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 515201.471 ops/s
[info]                  ·gc.alloc.rate:                   665.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              2031.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2035.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 511610.705 ops/s
[info]                  ·gc.alloc.rate:               668.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          2057.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2051.386 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   515255.939 ±(99.9%) 22727.350 ops/s [Average]
[info]   (min, avg, max) = (507496.782, 515255.939, 521299.111), stdev = 5902.221
[info]   CI (99.9%): [492528.590, 537983.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   666.411 ±(99.9%) 23.105 MB/sec [Average]
[info]   (min, avg, max) = (656.574, 666.411, 671.562), stdev = 6.000
[info]   CI (99.9%): [643.306, 689.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2035.585 ±(99.9%) 51.021 B/op [Average]
[info]   (min, avg, max) = (2022.709, 2035.585, 2057.647), stdev = 13.250
[info]   CI (99.9%): [1984.564, 2086.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.912 ±(99.9%) 2.810 MB/sec [Average]
[info]   (min, avg, max) = (665.131, 665.912, 666.857), stdev = 0.730
[info]   CI (99.9%): [663.101, 668.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2034.197 ±(99.9%) 90.150 B/op [Average]
[info]   (min, avg, max) = (2010.626, 2034.197, 2062.715), stdev = 23.412
[info]   CI (99.9%): [1944.047, 2124.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.064 ±(99.9%) 0.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.194), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605420.301 ops/s
[info] # Warmup Iteration   2: 1253460.027 ops/s
[info] # Warmup Iteration   3: 1350822.038 ops/s
[info] # Warmup Iteration   4: 1352321.595 ops/s
[info] # Warmup Iteration   5: 1355092.977 ops/s
[info] Iteration   1: 1216821.590 ops/s
[info]                  ·gc.alloc.rate:                   832.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              1076.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1333550.101 ops/s
[info]                  ·gc.alloc.rate:               931.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          1099.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1585.756 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1361588.535 ops/s
[info]                  ·gc.alloc.rate:               920.106 MB/sec
[info]                  ·gc.alloc.rate.norm:          1063.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 776.928 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1326641.685 ops/s
[info]                  ·gc.alloc.rate:               897.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          1065.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 797.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1338974.434 ops/s
[info]                  ·gc.alloc.rate:                   931.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              1095.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1580.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1315515.269 ±(99.9%) 218357.084 ops/s [Average]
[info]   (min, avg, max) = (1216821.590, 1315515.269, 1361588.535), stdev = 56706.641
[info]   CI (99.9%): [1097158.185, 1533872.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   902.670 ±(99.9%) 161.097 MB/sec [Average]
[info]   (min, avg, max) = (832.071, 902.670, 931.771), stdev = 41.836
[info]   CI (99.9%): [741.573, 1063.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1079.918 ±(99.9%) 64.606 B/op [Average]
[info]   (min, avg, max) = (1063.535, 1079.918, 1099.684), stdev = 16.778
[info]   CI (99.9%): [1015.312, 1144.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.869 ±(99.9%) 1418.158 MB/sec [Average]
[info]   (min, avg, max) = (671.428, 940.869, 1344.999), stdev = 368.291
[info]   CI (99.9%): [≈ 0, 2359.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1121.896 ±(99.9%) 1627.348 B/op [Average]
[info]   (min, avg, max) = (776.928, 1121.896, 1585.756), stdev = 422.617
[info]   CI (99.9%): [≈ 0, 2749.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16950.482 ops/s
[info] # Warmup Iteration   2: 98927.892 ops/s
[info] # Warmup Iteration   3: 117216.038 ops/s
[info] # Warmup Iteration   4: 119683.782 ops/s
[info] # Warmup Iteration   5: 119925.203 ops/s
[info] Iteration   1: 120704.124 ops/s
[info]                  ·gc.alloc.rate:                   3690.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              48100.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4007.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52226.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.814 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 117578.249 ops/s
[info]                  ·gc.alloc.rate:                   3585.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              47995.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44864.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.836 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 118928.752 ops/s
[info]                  ·gc.alloc.rate:                   3626.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              47997.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44540.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 118397.363 ops/s
[info]                  ·gc.alloc.rate:               3611.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          48005.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44891.659 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 120755.253 ops/s
[info]                  ·gc.alloc.rate:                   3682.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              47981.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44139.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   119272.748 ±(99.9%) 5446.524 ops/s [Average]
[info]   (min, avg, max) = (117578.249, 119272.748, 120755.253), stdev = 1414.445
[info]   CI (99.9%): [113826.224, 124719.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3639.362 ±(99.9%) 175.627 MB/sec [Average]
[info]   (min, avg, max) = (3585.614, 3639.362, 3690.680), stdev = 45.610
[info]   CI (99.9%): [3463.735, 3814.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48016.111 ±(99.9%) 185.514 B/op [Average]
[info]   (min, avg, max) = (47981.693, 48016.111, 48100.961), stdev = 48.177
[info]   CI (99.9%): [47830.598, 48201.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3497.833 ±(99.9%) 1097.772 MB/sec [Average]
[info]   (min, avg, max) = (3351.735, 3497.833, 4007.260), stdev = 285.088
[info]   CI (99.9%): [2400.060, 4595.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   46132.568 ±(99.9%) 13170.940 B/op [Average]
[info]   (min, avg, max) = (44139.236, 46132.568, 52226.975), stdev = 3420.451
[info]   CI (99.9%): [32961.628, 59303.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.439 ±(99.9%) 1.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.439, 0.836), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143667.821 ops/s
[info] # Warmup Iteration   2: 338751.445 ops/s
[info] # Warmup Iteration   3: 344194.333 ops/s
[info] # Warmup Iteration   4: 349026.515 ops/s
[info] # Warmup Iteration   5: 342127.541 ops/s
[info] Iteration   1: 342318.356 ops/s
[info]                  ·gc.alloc.rate:               1165.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          5357.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3081.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 343229.802 ops/s
[info]                  ·gc.alloc.rate:                   1182.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              5422.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6148.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 349447.285 ops/s
[info]                  ·gc.alloc.rate:                   1212.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              5460.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6043.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 349756.953 ops/s
[info]                  ·gc.alloc.rate:                   1214.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              5463.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6041.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 342460.732 ops/s
[info]                  ·gc.alloc.rate:                   1175.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              5402.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3085.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   345442.625 ±(99.9%) 14688.081 ops/s [Average]
[info]   (min, avg, max) = (342318.356, 345442.625, 349756.953), stdev = 3814.448
[info]   CI (99.9%): [330754.544, 360130.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1190.028 ±(99.9%) 85.109 MB/sec [Average]
[info]   (min, avg, max) = (1165.394, 1190.028, 1214.239), stdev = 22.103
[info]   CI (99.9%): [1104.918, 1275.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5421.406 ±(99.9%) 169.220 B/op [Average]
[info]   (min, avg, max) = (5357.851, 5421.406, 5463.943), stdev = 43.946
[info]   CI (99.9%): [5252.186, 5590.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.420 ±(99.9%) 1415.088 MB/sec [Average]
[info]   (min, avg, max) = (670.167, 1073.420, 1342.614), stdev = 367.494
[info]   CI (99.9%): [≈ 0, 2488.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4880.224 ±(99.9%) 6318.062 B/op [Average]
[info]   (min, avg, max) = (3081.065, 4880.224, 6148.725), stdev = 1640.781
[info]   CI (99.9%): [≈ 0, 11198.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.039), stdev = 1.323
[info]   CI (99.9%): [≈ 0, 5.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.098 ±(99.9%) 22.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.098, 13.676), stdev = 5.952
[info]   CI (99.9%): [≈ 0, 26.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257281.173 ops/s
[info] # Warmup Iteration   2: 875761.789 ops/s
[info] # Warmup Iteration   3: 875563.001 ops/s
[info] # Warmup Iteration   4: 880740.907 ops/s
[info] # Warmup Iteration   5: 899667.907 ops/s
[info] Iteration   1: 899290.997 ops/s
[info]                  ·gc.alloc.rate:               664.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          1162.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1165.239 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 875519.622 ops/s
[info]                  ·gc.alloc.rate:               647.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          1163.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1196.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 874138.714 ops/s
[info]                  ·gc.alloc.rate:               654.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          1178.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1200.533 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 898093.218 ops/s
[info]                  ·gc.alloc.rate:               667.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          1170.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1168.588 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 896246.292 ops/s
[info]                  ·gc.alloc.rate:               662.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          1162.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1172.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   888657.769 ±(99.9%) 48824.766 ops/s [Average]
[info]   (min, avg, max) = (874138.714, 888657.769, 899290.997), stdev = 12679.637
[info]   CI (99.9%): [839833.002, 937482.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   659.241 ±(99.9%) 31.845 MB/sec [Average]
[info]   (min, avg, max) = (647.159, 659.241, 667.899), stdev = 8.270
[info]   CI (99.9%): [627.396, 691.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1167.386 ±(99.9%) 27.489 B/op [Average]
[info]   (min, avg, max) = (1162.175, 1167.386, 1178.638), stdev = 7.139
[info]   CI (99.9%): [1139.897, 1194.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.664 ±(99.9%) 2.541 MB/sec [Average]
[info]   (min, avg, max) = (665.964, 666.664, 667.487), stdev = 0.660
[info]   CI (99.9%): [664.123, 669.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1180.682 ±(99.9%) 64.263 B/op [Average]
[info]   (min, avg, max) = (1165.239, 1180.682, 1200.533), stdev = 16.689
[info]   CI (99.9%): [1116.419, 1244.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1274661.381 ops/s
[info] # Warmup Iteration   2: 2509317.066 ops/s
[info] # Warmup Iteration   3: 2559945.807 ops/s
[info] # Warmup Iteration   4: 2536185.519 ops/s
[info] # Warmup Iteration   5: 2537184.687 ops/s
[info] Iteration   1: 2485096.005 ops/s
[info]                  ·gc.alloc.rate:                   1181.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     850.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2597224.378 ops/s
[info]                  ·gc.alloc.rate:               1215.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          736.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 407.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2589227.496 ops/s
[info]                  ·gc.alloc.rate:                   1238.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     817.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2547766.277 ops/s
[info]                  ·gc.alloc.rate:                   1218.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2427719.233 ops/s
[info]                  ·gc.alloc.rate:                   1172.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              759.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     871.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2529406.678 ±(99.9%) 277798.127 ops/s [Average]
[info]   (min, avg, max) = (2427719.233, 2529406.678, 2597224.378), stdev = 72143.291
[info]   CI (99.9%): [2251608.551, 2807204.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1205.325 ±(99.9%) 106.906 MB/sec [Average]
[info]   (min, avg, max) = (1172.004, 1205.325, 1238.624), stdev = 27.763
[info]   CI (99.9%): [1098.418, 1312.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.067 ±(99.9%) 33.016 B/op [Average]
[info]   (min, avg, max) = (736.640, 750.067, 759.802), stdev = 8.574
[info]   CI (99.9%): [717.051, 783.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.905 ±(99.9%) 1157.385 MB/sec [Average]
[info]   (min, avg, max) = (672.233, 1209.905, 1345.230), stdev = 300.569
[info]   CI (99.9%): [52.520, 2367.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   755.528 ±(99.9%) 753.690 B/op [Average]
[info]   (min, avg, max) = (407.305, 755.528, 871.468), stdev = 195.731
[info]   CI (99.9%): [1.838, 1509.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.852), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 5.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.382 ±(99.9%) 2.975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.762), stdev = 0.773
[info]   CI (99.9%): [≈ 0, 3.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1667300.899 ops/s
[info] # Warmup Iteration   2: 2817761.520 ops/s
[info] # Warmup Iteration   3: 2923378.147 ops/s
[info] # Warmup Iteration   4: 2854567.465 ops/s
[info] # Warmup Iteration   5: 2808192.322 ops/s
[info] Iteration   1: 2783344.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2771089.450 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2777385.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2770282.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2787148.635 ops/s
[info]                  ·gc.alloc.rate:      0.304 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.172 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2777850.058 ±(99.9%) 28547.089 ops/s [Average]
[info]   (min, avg, max) = (2770282.352, 2777850.058, 2787148.635), stdev = 7413.588
[info]   CI (99.9%): [2749302.969, 2806397.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.061 ±(99.9%) 0.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.061, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.034 ±(99.9%) 0.295 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160505.811 ops/s
[info] # Warmup Iteration   2: 441801.004 ops/s
[info] # Warmup Iteration   3: 459260.003 ops/s
[info] # Warmup Iteration   4: 440491.310 ops/s
[info] # Warmup Iteration   5: 456931.957 ops/s
[info] Iteration   1: 455580.904 ops/s
[info]                  ·gc.alloc.rate:               677.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          2339.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2308.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 456549.573 ops/s
[info]                  ·gc.alloc.rate:               675.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          2327.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2303.286 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 457997.561 ops/s
[info]                  ·gc.alloc.rate:               683.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          2348.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2298.354 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 456612.746 ops/s
[info]                  ·gc.alloc.rate:               679.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          2342.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2305.244 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 457312.987 ops/s
[info]                  ·gc.alloc.rate:                   678.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              2333.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2302.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   456810.754 ±(99.9%) 3487.280 ops/s [Average]
[info]   (min, avg, max) = (455580.904, 456810.754, 457997.561), stdev = 905.635
[info]   CI (99.9%): [453323.474, 460298.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   678.992 ±(99.9%) 12.143 MB/sec [Average]
[info]   (min, avg, max) = (675.339, 678.992, 683.784), stdev = 3.153
[info]   CI (99.9%): [666.850, 691.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2338.394 ±(99.9%) 31.661 B/op [Average]
[info]   (min, avg, max) = (2327.226, 2338.394, 2348.754), stdev = 8.222
[info]   CI (99.9%): [2306.732, 2370.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.887 ±(99.9%) 1.720 MB/sec [Average]
[info]   (min, avg, max) = (668.392, 668.887, 669.419), stdev = 0.447
[info]   CI (99.9%): [667.167, 670.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2303.603 ±(99.9%) 13.937 B/op [Average]
[info]   (min, avg, max) = (2298.354, 2303.603, 2308.245), stdev = 3.619
[info]   CI (99.9%): [2289.666, 2317.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4912.038 ops/s
[info] # Warmup Iteration   2: 14396.498 ops/s
[info] # Warmup Iteration   3: 16294.929 ops/s
[info] # Warmup Iteration   4: 17083.069 ops/s
[info] # Warmup Iteration   5: 16998.591 ops/s
[info] Iteration   1: 16828.063 ops/s
[info]                  ·gc.alloc.rate:                   1343.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              125554.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125535.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16791.109 ops/s
[info]                  ·gc.alloc.rate:               1362.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          127636.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125866.580 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 16762.910 ops/s
[info]                  ·gc.alloc.rate:               1351.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          126819.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126146.832 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 17003.525 ops/s
[info]                  ·gc.alloc.rate:                   1354.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              125337.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124420.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17339.149 ops/s
[info]                  ·gc.alloc.rate:                   1392.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              126325.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121775.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   16944.951 ±(99.9%) 921.930 ops/s [Average]
[info]   (min, avg, max) = (16762.910, 16944.951, 17339.149), stdev = 239.422
[info]   CI (99.9%): [16023.021, 17866.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1360.674 ±(99.9%) 73.105 MB/sec [Average]
[info]   (min, avg, max) = (1343.002, 1360.674, 1392.296), stdev = 18.985
[info]   CI (99.9%): [1287.569, 1433.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126334.638 ±(99.9%) 3619.382 B/op [Average]
[info]   (min, avg, max) = (125337.372, 126334.638, 127636.882), stdev = 939.942
[info]   CI (99.9%): [122715.256, 129954.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1343.411 ±(99.9%) 3.702 MB/sec [Average]
[info]   (min, avg, max) = (1342.151, 1343.411, 1344.482), stdev = 0.962
[info]   CI (99.9%): [1339.708, 1347.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   124748.992 ±(99.9%) 6880.084 B/op [Average]
[info]   (min, avg, max) = (121775.577, 124748.992, 126146.832), stdev = 1786.736
[info]   CI (99.9%): [117868.908, 131629.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.623), stdev = 1.605
[info]   CI (99.9%): [≈ 0, 6.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69.765 ±(99.9%) 571.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.765, 335.252), stdev = 148.491
[info]   CI (99.9%): [≈ 0, 641.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8438.083 ops/s
[info] # Warmup Iteration   2: 32820.867 ops/s
[info] # Warmup Iteration   3: 35212.255 ops/s
[info] # Warmup Iteration   4: 35436.127 ops/s
[info] # Warmup Iteration   5: 36341.624 ops/s
[info] Iteration   1: 35857.166 ops/s
[info]                  ·gc.alloc.rate:                   1009.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              44307.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58592.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 36246.730 ops/s
[info]                  ·gc.alloc.rate:               989.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          42943.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29011.413 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 35754.453 ops/s
[info]                  ·gc.alloc.rate:                   989.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              43553.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58835.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 36146.124 ops/s
[info]                  ·gc.alloc.rate:               995.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          43312.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29106.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 36059.507 ops/s
[info]                  ·gc.alloc.rate:               981.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          42808.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29206.261 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   36012.796 ±(99.9%) 783.598 ops/s [Average]
[info]   (min, avg, max) = (35754.453, 36012.796, 36246.730), stdev = 203.498
[info]   CI (99.9%): [35229.198, 36796.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   993.096 ±(99.9%) 40.747 MB/sec [Average]
[info]   (min, avg, max) = (981.109, 993.096, 1009.719), stdev = 10.582
[info]   CI (99.9%): [952.349, 1033.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43384.877 ±(99.9%) 2287.182 B/op [Average]
[info]   (min, avg, max) = (42808.745, 43384.877, 44307.213), stdev = 593.974
[info]   CI (99.9%): [41097.695, 45672.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.846 ±(99.9%) 1407.632 MB/sec [Average]
[info]   (min, avg, max) = (668.443, 935.846, 1337.329), stdev = 365.558
[info]   CI (99.9%): [≈ 0, 2343.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40950.501 ±(99.9%) 62442.409 B/op [Average]
[info]   (min, avg, max) = (29011.413, 40950.501, 58835.787), stdev = 16216.095
[info]   CI (99.9%): [≈ 0, 103392.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.549 ±(99.9%) 3.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 1.827), stdev = 0.818
[info]   CI (99.9%): [≈ 0, 3.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23342.656 ops/s
[info] # Warmup Iteration   2: 41511.638 ops/s
[info] # Warmup Iteration   3: 43360.905 ops/s
[info] # Warmup Iteration   4: 42839.570 ops/s
[info] # Warmup Iteration   5: 43015.500 ops/s
[info] Iteration   1: 40136.342 ops/s
[info]                  ·gc.alloc.rate:                   560.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              21977.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26303.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 43227.515 ops/s
[info]                  ·gc.alloc.rate:               611.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          22261.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24422.714 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 43135.776 ops/s
[info]                  ·gc.alloc.rate:                   596.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              21752.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24499.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43451.839 ops/s
[info]                  ·gc.alloc.rate:      584.032 MB/sec
[info]                  ·gc.alloc.rate.norm: 21144.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42777.232 ops/s
[info]                  ·gc.alloc.rate:               595.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          21893.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24704.670 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   42545.741 ±(99.9%) 5270.166 ops/s [Average]
[info]   (min, avg, max) = (40136.342, 42545.741, 43451.839), stdev = 1368.646
[info]   CI (99.9%): [37275.574, 47815.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   589.636 ±(99.9%) 73.041 MB/sec [Average]
[info]   (min, avg, max) = (560.624, 589.636, 611.698), stdev = 18.968
[info]   CI (99.9%): [516.595, 662.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21806.073 ±(99.9%) 1594.876 B/op [Average]
[info]   (min, avg, max) = (21144.010, 21806.073, 22261.842), stdev = 414.184
[info]   CI (99.9%): [20211.197, 23400.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.122 ±(99.9%) 1156.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.122, 671.792), stdev = 300.261
[info]   CI (99.9%): [≈ 0, 1693.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19986.052 ±(99.9%) 43123.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19986.052, 26303.209), stdev = 11199.004
[info]   CI (99.9%): [≈ 0, 63109.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.467 ±(99.9%) 2.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 1.519), stdev = 0.686
[info]   CI (99.9%): [≈ 0, 3.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:44:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4902.740 ops/s
[info] # Warmup Iteration   2: 27437.649 ops/s
[info] # Warmup Iteration   3: 28547.467 ops/s
[info] # Warmup Iteration   4: 28757.196 ops/s
[info] # Warmup Iteration   5: 28045.857 ops/s
[info] Iteration   1: 28853.579 ops/s
[info]                  ·gc.alloc.rate:                   1462.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              79754.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72995.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28829.968 ops/s
[info]                  ·gc.alloc.rate:               1448.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          79026.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73093.038 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 28825.754 ops/s
[info]                  ·gc.alloc.rate:                   1457.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              79580.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73139.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 28835.274 ops/s
[info]                  ·gc.alloc.rate:                   1470.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              80249.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109515.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.676 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28807.876 ops/s
[info]                  ·gc.alloc.rate:               1469.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          80254.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72852.651 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   28830.490 ±(99.9%) 63.567 ops/s [Average]
[info]   (min, avg, max) = (28807.876, 28830.490, 28853.579), stdev = 16.508
[info]   CI (99.9%): [28766.923, 28894.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1461.826 ±(99.9%) 35.335 MB/sec [Average]
[info]   (min, avg, max) = (1448.240, 1461.826, 1470.676), stdev = 9.176
[info]   CI (99.9%): [1426.491, 1497.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79773.169 ±(99.9%) 1976.191 B/op [Average]
[info]   (min, avg, max) = (79026.353, 79773.169, 80254.882), stdev = 513.211
[info]   CI (99.9%): [77796.978, 81749.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.847 ±(99.9%) 1152.040 MB/sec [Average]
[info]   (min, avg, max) = (1333.897, 1471.847, 2007.021), stdev = 299.181
[info]   CI (99.9%): [319.807, 2623.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80319.286 ±(99.9%) 62847.983 B/op [Average]
[info]   (min, avg, max) = (72852.651, 80319.286, 109515.271), stdev = 16321.422
[info]   CI (99.9%): [17471.303, 143167.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.916 ±(99.9%) 5.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.916, 3.477), stdev = 1.495
[info]   CI (99.9%): [≈ 0, 6.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.004 ±(99.9%) 314.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.004, 189.805), stdev = 81.615
[info]   CI (99.9%): [≈ 0, 364.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 8.000), stdev = 2.550
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9420.451 ops/s
[info] # Warmup Iteration   2: 22498.251 ops/s
[info] # Warmup Iteration   3: 23724.885 ops/s
[info] # Warmup Iteration   4: 23795.289 ops/s
[info] # Warmup Iteration   5: 23506.181 ops/s
[info] Iteration   1: 23757.609 ops/s
[info]                  ·gc.alloc.rate:               1735.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          114961.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133421.830 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 24113.945 ops/s
[info]                  ·gc.alloc.rate:                   1726.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              112655.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87696.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24720.482 ops/s
[info]                  ·gc.alloc.rate:                   1808.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              115131.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127949.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24157.034 ops/s
[info]                  ·gc.alloc.rate:               1741.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          113429.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87233.052 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 24088.927 ops/s
[info]                  ·gc.alloc.rate:                   1764.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              115210.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131207.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.720 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   24167.599 ±(99.9%) 1337.997 ops/s [Average]
[info]   (min, avg, max) = (23757.609, 24167.599, 24720.482), stdev = 347.473
[info]   CI (99.9%): [22829.603, 25505.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1755.349 ±(99.9%) 126.861 MB/sec [Average]
[info]   (min, avg, max) = (1726.469, 1755.349, 1808.811), stdev = 32.945
[info]   CI (99.9%): [1628.488, 1882.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   114277.797 ±(99.9%) 4482.228 B/op [Average]
[info]   (min, avg, max) = (112655.166, 114277.797, 115210.741), stdev = 1164.020
[info]   CI (99.9%): [109795.569, 118760.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1743.428 ±(99.9%) 1412.476 MB/sec [Average]
[info]   (min, avg, max) = (1339.252, 1743.428, 2014.639), stdev = 366.816
[info]   CI (99.9%): [330.952, 3155.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   113501.806 ±(99.9%) 91832.281 B/op [Average]
[info]   (min, avg, max) = (87233.052, 113501.806, 133421.830), stdev = 23848.552
[info]   CI (99.9%): [21669.525, 205334.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 5.847 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.457), stdev = 1.519
[info]   CI (99.9%): [≈ 0, 6.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48.569 ±(99.9%) 381.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.569, 225.546), stdev = 99.116
[info]   CI (99.9%): [≈ 0, 430.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6240.509 ops/s
[info] # Warmup Iteration   2: 22746.375 ops/s
[info] # Warmup Iteration   3: 23888.093 ops/s
[info] # Warmup Iteration   4: 24037.355 ops/s
[info] # Warmup Iteration   5: 23573.739 ops/s
[info] Iteration   1: 23923.895 ops/s
[info]                  ·gc.alloc.rate:                   1496.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              98430.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131816.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 24991.253 ops/s
[info]                  ·gc.alloc.rate:                   1555.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              97973.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84235.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 24963.861 ops/s
[info]                  ·gc.alloc.rate:                   1569.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              98909.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84416.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25037.135 ops/s
[info]                  ·gc.alloc.rate:                   1559.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              98025.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83916.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24946.636 ops/s
[info]                  ·gc.alloc.rate:               1582.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          99808.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126197.248 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   24772.556 ±(99.9%) 1831.544 ops/s [Average]
[info]   (min, avg, max) = (23923.895, 24772.556, 25037.135), stdev = 475.646
[info]   CI (99.9%): [22941.012, 26604.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1552.576 ±(99.9%) 127.118 MB/sec [Average]
[info]   (min, avg, max) = (1496.429, 1552.576, 1582.154), stdev = 33.012
[info]   CI (99.9%): [1425.458, 1679.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98629.623 ±(99.9%) 2922.291 B/op [Average]
[info]   (min, avg, max) = (97973.590, 98629.623, 99808.856), stdev = 758.910
[info]   CI (99.9%): [95707.333, 101551.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1603.245 ±(99.9%) 1402.513 MB/sec [Average]
[info]   (min, avg, max) = (1334.931, 1603.245, 2004.004), stdev = 364.228
[info]   CI (99.9%): [200.732, 3005.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   102116.499 ±(99.9%) 94835.922 B/op [Average]
[info]   (min, avg, max) = (83916.230, 102116.499, 131816.976), stdev = 24628.588
[info]   CI (99.9%): [7280.577, 196952.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.850 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.019), stdev = 1.779
[info]   CI (99.9%): [≈ 0, 7.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52.816 ±(99.9%) 431.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.816, 253.303), stdev = 112.105
[info]   CI (99.9%): [≈ 0, 484.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13132.247 ops/s
[info] # Warmup Iteration   2: 27247.507 ops/s
[info] # Warmup Iteration   3: 27317.551 ops/s
[info] # Warmup Iteration   4: 27407.938 ops/s
[info] # Warmup Iteration   5: 27283.547 ops/s
[info] Iteration   1: 27619.145 ops/s
[info]                  ·gc.alloc.rate:               1618.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          92200.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76636.197 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 27486.020 ops/s
[info]                  ·gc.alloc.rate:                   1632.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              93474.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77047.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 27747.661 ops/s
[info]                  ·gc.alloc.rate:                   1651.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              93656.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114329.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27746.267 ops/s
[info]                  ·gc.alloc.rate:               1649.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          93540.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76023.744 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27761.855 ops/s
[info]                  ·gc.alloc.rate:                   1650.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              93577.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113974.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27672.189 ±(99.9%) 458.438 ops/s [Average]
[info]   (min, avg, max) = (27486.020, 27672.189, 27761.855), stdev = 119.055
[info]   CI (99.9%): [27213.752, 28130.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1640.335 ±(99.9%) 56.587 MB/sec [Average]
[info]   (min, avg, max) = (1618.042, 1640.335, 1651.179), stdev = 14.695
[info]   CI (99.9%): [1583.749, 1696.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93290.072 ±(99.9%) 2358.065 B/op [Average]
[info]   (min, avg, max) = (92200.965, 93290.072, 93656.636), stdev = 612.382
[info]   CI (99.9%): [90932.007, 95648.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1611.425 ±(99.9%) 1412.250 MB/sec [Average]
[info]   (min, avg, max) = (1340.267, 1611.425, 2015.647), stdev = 366.757
[info]   CI (99.9%): [199.175, 3023.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91602.299 ±(99.9%) 79278.688 B/op [Average]
[info]   (min, avg, max) = (76023.744, 91602.299, 114329.657), stdev = 20588.423
[info]   CI (99.9%): [12323.612, 170880.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 4.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 2.560), stdev = 1.113
[info]   CI (99.9%): [≈ 0, 4.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.184 ±(99.9%) 245.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.184, 146.610), stdev = 63.728
[info]   CI (99.9%): [≈ 0, 285.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12474.865 ops/s
[info] # Warmup Iteration   2: 26930.014 ops/s
[info] # Warmup Iteration   3: 26531.221 ops/s
[info] # Warmup Iteration   4: 27268.824 ops/s
[info] # Warmup Iteration   5: 27107.803 ops/s
[info] Iteration   1: 27671.125 ops/s
[info]                  ·gc.alloc.rate:               1567.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          89156.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76457.088 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 27550.715 ops/s
[info]                  ·gc.alloc.rate:                   1573.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              89867.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115299.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.508 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 27833.231 ops/s
[info]                  ·gc.alloc.rate:                   1587.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              89727.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76014.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27487.459 ops/s
[info]                  ·gc.alloc.rate:                   1566.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              89677.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76857.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27229.064 ops/s
[info]                  ·gc.alloc.rate:                   1593.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              92098.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116243.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.219 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27554.319 ±(99.9%) 864.703 ops/s [Average]
[info]   (min, avg, max) = (27229.064, 27554.319, 27833.231), stdev = 224.561
[info]   CI (99.9%): [26689.616, 28419.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1577.694 ±(99.9%) 46.381 MB/sec [Average]
[info]   (min, avg, max) = (1566.948, 1577.694, 1593.344), stdev = 12.045
[info]   CI (99.9%): [1531.313, 1624.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   90105.618 ±(99.9%) 4413.803 B/op [Average]
[info]   (min, avg, max) = (89156.782, 90105.618, 92098.722), stdev = 1146.251
[info]   CI (99.9%): [85691.814, 94519.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1612.295 ±(99.9%) 1414.598 MB/sec [Average]
[info]   (min, avg, max) = (1342.933, 1612.295, 2018.376), stdev = 367.367
[info]   CI (99.9%): [197.697, 3026.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   92174.313 ±(99.9%) 82964.295 B/op [Average]
[info]   (min, avg, max) = (76014.886, 92174.313, 116243.196), stdev = 21545.564
[info]   CI (99.9%): [9210.018, 175138.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 4.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 2.477), stdev = 1.060
[info]   CI (99.9%): [≈ 0, 4.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   40.578 ±(99.9%) 233.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.578, 141.508), stdev = 60.521
[info]   CI (99.9%): [≈ 0, 273.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2747.684 ops/s
[info] # Warmup Iteration   2: 7421.810 ops/s
[info] # Warmup Iteration   3: 7920.642 ops/s
[info] # Warmup Iteration   4: 7797.358 ops/s
[info] # Warmup Iteration   5: 7902.416 ops/s
[info] Iteration   1: 7944.875 ops/s
[info]                  ·gc.alloc.rate:               1169.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          231704.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132539.901 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 7898.886 ops/s
[info]                  ·gc.alloc.rate:               1177.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          234591.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 266689.466 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 7896.042 ops/s
[info]                  ·gc.alloc.rate:                   1172.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              233607.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267023.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7800.737 ops/s
[info]                  ·gc.alloc.rate:               1166.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          235387.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135204.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 7896.583 ops/s
[info]                  ·gc.alloc.rate:                   1191.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              237388.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267122.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 759.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7887.424 ±(99.9%) 202.889 ops/s [Average]
[info]   (min, avg, max) = (7800.737, 7887.424, 7944.875), stdev = 52.690
[info]   CI (99.9%): [7684.535, 8090.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1175.434 ±(99.9%) 36.898 MB/sec [Average]
[info]   (min, avg, max) = (1166.858, 1175.434, 1191.096), stdev = 9.582
[info]   CI (99.9%): [1138.536, 1212.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   234535.895 ±(99.9%) 8109.554 B/op [Average]
[info]   (min, avg, max) = (231704.782, 234535.895, 237388.255), stdev = 2106.025
[info]   CI (99.9%): [226426.341, 242645.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1071.578 ±(99.9%) 1412.789 MB/sec [Average]
[info]   (min, avg, max) = (669.094, 1071.578, 1340.289), stdev = 366.897
[info]   CI (99.9%): [≈ 0, 2484.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   213716.103 ±(99.9%) 280686.258 B/op [Average]
[info]   (min, avg, max) = (132539.901, 213716.103, 267122.678), stdev = 72893.330
[info]   CI (99.9%): [≈ 0, 494402.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.810), stdev = 1.701
[info]   CI (99.9%): [≈ 0, 7.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   152.680 ±(99.9%) 1305.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 152.680, 759.248), stdev = 339.087
[info]   CI (99.9%): [≈ 0, 1458.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5338.070 ops/s
[info] # Warmup Iteration   2: 15196.541 ops/s
[info] # Warmup Iteration   3: 18077.646 ops/s
[info] # Warmup Iteration   4: 17734.146 ops/s
[info] # Warmup Iteration   5: 17857.902 ops/s
[info] Iteration   1: 17776.361 ops/s
[info]                  ·gc.alloc.rate:                   1623.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              143751.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178468.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 17476.897 ops/s
[info]                  ·gc.alloc.rate:                   1620.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              145894.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121061.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 17877.728 ops/s
[info]                  ·gc.alloc.rate:                   1633.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              143841.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118222.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17492.423 ops/s
[info]                  ·gc.alloc.rate:               1597.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          143733.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180935.696 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 18137.914 ops/s
[info]                  ·gc.alloc.rate:                   1652.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              143429.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116180.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17752.265 ±(99.9%) 1069.190 ops/s [Average]
[info]   (min, avg, max) = (17476.897, 17752.265, 18137.914), stdev = 277.665
[info]   CI (99.9%): [16683.075, 18821.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1625.676 ±(99.9%) 77.873 MB/sec [Average]
[info]   (min, avg, max) = (1597.559, 1625.676, 1652.954), stdev = 20.223
[info]   CI (99.9%): [1547.802, 1703.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144130.392 ±(99.9%) 3845.175 B/op [Average]
[info]   (min, avg, max) = (143429.877, 144130.392, 145894.996), stdev = 998.580
[info]   CI (99.9%): [140285.217, 147975.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.627 ±(99.9%) 1415.845 MB/sec [Average]
[info]   (min, avg, max) = (1338.924, 1610.627, 2015.754), stdev = 367.690
[info]   CI (99.9%): [194.782, 3026.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   142973.646 ±(99.9%) 129321.623 B/op [Average]
[info]   (min, avg, max) = (116180.903, 142973.646, 180935.696), stdev = 33584.415
[info]   CI (99.9%): [13652.022, 272295.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 2.457), stdev = 1.063
[info]   CI (99.9%): [≈ 0, 4.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.219 ±(99.9%) 367.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.219, 221.215), stdev = 95.561
[info]   CI (99.9%): [≈ 0, 434.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15999.795 ops/s
[info] # Warmup Iteration   2: 38660.842 ops/s
[info] # Warmup Iteration   3: 42762.885 ops/s
[info] # Warmup Iteration   4: 41964.692 ops/s
[info] # Warmup Iteration   5: 43161.234 ops/s
[info] Iteration   1: 42392.144 ops/s
[info]                  ·gc.alloc.rate:               1204.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          44720.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49660.148 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 43261.794 ops/s
[info]                  ·gc.alloc.rate:               1208.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          43958.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24354.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 43067.750 ops/s
[info]                  ·gc.alloc.rate:                   1216.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              44460.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48942.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 43050.354 ops/s
[info]                  ·gc.alloc.rate:                   1214.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              44402.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48987.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 43264.036 ops/s
[info]                  ·gc.alloc.rate:                   1233.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              44854.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48707.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   43007.216 ±(99.9%) 1381.149 ops/s [Average]
[info]   (min, avg, max) = (42392.144, 43007.216, 43264.036), stdev = 358.680
[info]   CI (99.9%): [41626.067, 44388.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1215.475 ±(99.9%) 42.138 MB/sec [Average]
[info]   (min, avg, max) = (1204.538, 1215.475, 1233.000), stdev = 10.943
[info]   CI (99.9%): [1173.336, 1257.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44479.218 ±(99.9%) 1329.786 B/op [Average]
[info]   (min, avg, max) = (43958.104, 44479.218, 44854.921), stdev = 345.341
[info]   CI (99.9%): [43149.432, 45809.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.113 ±(99.9%) 1152.988 MB/sec [Average]
[info]   (min, avg, max) = (669.483, 1205.113, 1340.270), stdev = 299.427
[info]   CI (99.9%): [52.125, 2358.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44130.582 ±(99.9%) 42591.388 B/op [Average]
[info]   (min, avg, max) = (24354.492, 44130.582, 49660.148), stdev = 11060.848
[info]   CI (99.9%): [1539.194, 86721.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 5.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.227), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 6.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.199 ±(99.9%) 195.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.199, 117.964), stdev = 50.796
[info]   CI (99.9%): [≈ 0, 224.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:42:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33088.629 ops/s
[info] # Warmup Iteration   2: 60658.854 ops/s
[info] # Warmup Iteration   3: 61534.519 ops/s
[info] # Warmup Iteration   4: 62484.210 ops/s
[info] # Warmup Iteration   5: 57586.900 ops/s
[info] Iteration   1: 62319.696 ops/s
[info]                  ·gc.alloc.rate:               853.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          21550.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33880.927 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 62292.968 ops/s
[info]                  ·gc.alloc.rate:               822.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          20776.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16957.309 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 62485.913 ops/s
[info]                  ·gc.alloc.rate:                   825.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              20782.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16913.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 62223.678 ops/s
[info]                  ·gc.alloc.rate:               818.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          20704.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16984.535 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 62559.894 ops/s
[info]                  ·gc.alloc.rate:               823.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          20712.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16909.273 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   62376.430 ±(99.9%) 541.708 ops/s [Average]
[info]   (min, avg, max) = (62223.678, 62376.430, 62559.894), stdev = 140.680
[info]   CI (99.9%): [61834.722, 62918.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   828.731 ±(99.9%) 54.412 MB/sec [Average]
[info]   (min, avg, max) = (818.674, 828.731, 853.618), stdev = 14.131
[info]   CI (99.9%): [774.318, 883.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20905.385 ±(99.9%) 1395.931 B/op [Average]
[info]   (min, avg, max) = (20704.628, 20905.385, 21550.702), stdev = 362.519
[info]   CI (99.9%): [19509.454, 22301.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.777 ±(99.9%) 1154.294 MB/sec [Average]
[info]   (min, avg, max) = (671.209, 805.777, 1342.016), stdev = 299.766
[info]   CI (99.9%): [≈ 0, 1960.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20329.074 ±(99.9%) 29171.635 B/op [Average]
[info]   (min, avg, max) = (16909.273, 20329.074, 33880.927), stdev = 7575.781
[info]   CI (99.9%): [≈ 0, 49500.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.524), stdev = 0.234
[info]   CI (99.9%): [≈ 0, 1.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2150.079 ops/s
[info] # Warmup Iteration   2: 26831.302 ops/s
[info] # Warmup Iteration   3: 32985.128 ops/s
[info] # Warmup Iteration   4: 33084.048 ops/s
[info] # Warmup Iteration   5: 32311.002 ops/s
[info] Iteration   1: 33219.188 ops/s
[info]                  ·gc.alloc.rate:                   2177.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              103141.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95231.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33202.229 ops/s
[info]                  ·gc.alloc.rate:                   2201.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              104347.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95517.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33303.632 ops/s
[info]                  ·gc.alloc.rate:                   2181.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              103102.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95316.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33189.423 ops/s
[info]                  ·gc.alloc.rate:                   2228.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              105644.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127743.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.974 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 33314.920 ops/s
[info]                  ·gc.alloc.rate:                   2209.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              104381.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95668.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.934 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   33245.878 ±(99.9%) 227.050 ops/s [Average]
[info]   (min, avg, max) = (33189.423, 33245.878, 33314.920), stdev = 58.964
[info]   CI (99.9%): [33018.829, 33472.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2199.556 ±(99.9%) 80.453 MB/sec [Average]
[info]   (min, avg, max) = (2177.025, 2199.556, 2228.213), stdev = 20.893
[info]   CI (99.9%): [2119.104, 2280.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   104123.499 ±(99.9%) 4056.528 B/op [Average]
[info]   (min, avg, max) = (103102.165, 104123.499, 105644.905), stdev = 1053.467
[info]   CI (99.9%): [100066.970, 108180.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2152.292 ±(99.9%) 1166.905 MB/sec [Average]
[info]   (min, avg, max) = (2010.077, 2152.292, 2694.303), stdev = 303.042
[info]   CI (99.9%): [985.387, 3319.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   101895.509 ±(99.9%) 55643.365 B/op [Average]
[info]   (min, avg, max) = (95231.846, 101895.509, 127743.375), stdev = 14450.405
[info]   CI (99.9%): [46252.144, 157538.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.262 ±(99.9%) 1.319 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.262, 0.833), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.426 ±(99.9%) 62.503 B/op [Average]
[info]   (min, avg, max) = (0.984, 12.426, 39.450), stdev = 16.232
[info]   CI (99.9%): [≈ 0, 74.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10428.101 ops/s
[info] # Warmup Iteration   2: 26297.682 ops/s
[info] # Warmup Iteration   3: 26420.898 ops/s
[info] # Warmup Iteration   4: 27284.726 ops/s
[info] # Warmup Iteration   5: 27281.498 ops/s
[info] Iteration   1: 27202.355 ops/s
[info]                  ·gc.alloc.rate:                   1772.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              102532.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116242.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 26795.167 ops/s
[info]                  ·gc.alloc.rate:                   1718.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              100918.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78721.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27168.176 ops/s
[info]                  ·gc.alloc.rate:                   1767.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              102360.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116148.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.206 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27362.615 ops/s
[info]                  ·gc.alloc.rate:                   1754.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              100905.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76786.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27432.988 ops/s
[info]                  ·gc.alloc.rate:               1773.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          101691.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114920.291 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27192.260 ±(99.9%) 953.638 ops/s [Average]
[info]   (min, avg, max) = (26795.167, 27192.260, 27432.988), stdev = 247.657
[info]   CI (99.9%): [26238.622, 28145.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1757.030 ±(99.9%) 88.419 MB/sec [Average]
[info]   (min, avg, max) = (1718.173, 1757.030, 1773.273), stdev = 22.962
[info]   CI (99.9%): [1668.610, 1845.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101681.755 ±(99.9%) 2963.928 B/op [Average]
[info]   (min, avg, max) = (100905.190, 101681.755, 102532.378), stdev = 769.723
[info]   CI (99.9%): [98717.827, 104645.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738.707 ±(99.9%) 1409.649 MB/sec [Average]
[info]   (min, avg, max) = (1335.132, 1738.707, 2009.089), stdev = 366.081
[info]   CI (99.9%): [329.058, 3148.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100563.945 ±(99.9%) 80248.209 B/op [Average]
[info]   (min, avg, max) = (76786.754, 100563.945, 116242.932), stdev = 20840.205
[info]   CI (99.9%): [20315.735, 180812.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.059), stdev = 1.802
[info]   CI (99.9%): [≈ 0, 7.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   49.128 ±(99.9%) 407.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.128, 238.424), stdev = 105.828
[info]   CI (99.9%): [≈ 0, 456.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17676.395 ops/s
[info] # Warmup Iteration   2: 32800.658 ops/s
[info] # Warmup Iteration   3: 33668.527 ops/s
[info] # Warmup Iteration   4: 34261.525 ops/s
[info] # Warmup Iteration   5: 34169.845 ops/s
[info] Iteration   1: 34417.890 ops/s
[info]                  ·gc.alloc.rate:                   1542.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              70554.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61471.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34396.795 ops/s
[info]                  ·gc.alloc.rate:                   1560.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              71391.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92354.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 34390.949 ops/s
[info]                  ·gc.alloc.rate:                   1546.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              70764.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61519.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34548.153 ops/s
[info]                  ·gc.alloc.rate:                   1553.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              70752.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61145.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33712.115 ops/s
[info]                  ·gc.alloc.rate:                   1530.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              71445.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62632.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34293.180 ±(99.9%) 1274.928 ops/s [Average]
[info]   (min, avg, max) = (33712.115, 34293.180, 34548.153), stdev = 331.095
[info]   CI (99.9%): [33018.252, 35568.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1546.704 ±(99.9%) 43.404 MB/sec [Average]
[info]   (min, avg, max) = (1530.320, 1546.704, 1560.270), stdev = 11.272
[info]   CI (99.9%): [1503.300, 1590.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   70981.481 ±(99.9%) 1570.884 B/op [Average]
[info]   (min, avg, max) = (70554.007, 70981.481, 71445.672), stdev = 407.954
[info]   CI (99.9%): [69410.597, 72552.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.261 ±(99.9%) 1162.773 MB/sec [Average]
[info]   (min, avg, max) = (1341.541, 1478.261, 2018.433), stdev = 301.968
[info]   CI (99.9%): [315.488, 2641.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   67824.627 ±(99.9%) 52847.010 B/op [Average]
[info]   (min, avg, max) = (61145.439, 67824.627, 92354.668), stdev = 13724.201
[info]   CI (99.9%): [14977.617, 120671.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 4.225 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.675, 2.561), stdev = 1.097
[info]   CI (99.9%): [≈ 0, 4.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   30.864 ±(99.9%) 193.302 B/op [Average]
[info]   (min, avg, max) = (0.952, 30.864, 117.158), stdev = 50.200
[info]   CI (99.9%): [≈ 0, 224.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14973.319 ops/s
[info] # Warmup Iteration   2: 34715.917 ops/s
[info] # Warmup Iteration   3: 34022.765 ops/s
[info] # Warmup Iteration   4: 33635.009 ops/s
[info] # Warmup Iteration   5: 35154.500 ops/s
[info] Iteration   1: 35079.424 ops/s
[info]                  ·gc.alloc.rate:               1504.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          67506.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60371.199 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 35084.895 ops/s
[info]                  ·gc.alloc.rate:               1516.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          68023.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60364.317 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 35068.339 ops/s
[info]                  ·gc.alloc.rate:                   1515.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              68006.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60420.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35158.665 ops/s
[info]                  ·gc.alloc.rate:                   1544.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              69146.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90144.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35255.235 ops/s
[info]                  ·gc.alloc.rate:                   1523.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              67978.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59891.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   35129.312 ±(99.9%) 303.797 ops/s [Average]
[info]   (min, avg, max) = (35068.339, 35129.312, 35255.235), stdev = 78.895
[info]   CI (99.9%): [34825.515, 35433.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1520.874 ±(99.9%) 56.924 MB/sec [Average]
[info]   (min, avg, max) = (1504.903, 1520.874, 1544.613), stdev = 14.783
[info]   CI (99.9%): [1463.950, 1577.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68132.581 ±(99.9%) 2336.000 B/op [Average]
[info]   (min, avg, max) = (67506.715, 68132.581, 69146.997), stdev = 606.652
[info]   CI (99.9%): [65796.582, 70468.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478.670 ±(99.9%) 1151.627 MB/sec [Average]
[info]   (min, avg, max) = (1341.903, 1478.670, 2013.660), stdev = 299.074
[info]   CI (99.9%): [327.043, 2630.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66238.320 ±(99.9%) 51466.754 B/op [Average]
[info]   (min, avg, max) = (59891.440, 66238.320, 90144.615), stdev = 13365.753
[info]   CI (99.9%): [14771.566, 117705.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.459 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.227), stdev = 1.418
[info]   CI (99.9%): [≈ 0, 6.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   31.193 ±(99.9%) 245.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.193, 144.809), stdev = 63.629
[info]   CI (99.9%): [≈ 0, 276.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47422.155 ops/s
[info] # Warmup Iteration   2: 318270.539 ops/s
[info] # Warmup Iteration   3: 326618.213 ops/s
[info] # Warmup Iteration   4: 335209.515 ops/s
[info] # Warmup Iteration   5: 339168.473 ops/s
[info] Iteration   1: 338423.250 ops/s
[info]                  ·gc.alloc.rate:                   1923.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              8945.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9366.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 339872.259 ops/s
[info]                  ·gc.alloc.rate:                   1917.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              8880.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9328.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.677 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 340372.056 ops/s
[info]                  ·gc.alloc.rate:                   1944.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              8990.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9290.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 339346.073 ops/s
[info]                  ·gc.alloc.rate:                   1939.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              8994.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9314.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 339725.182 ops/s
[info]                  ·gc.alloc.rate:                   1916.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              8877.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6204.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   339547.764 ±(99.9%) 2804.264 ops/s [Average]
[info]   (min, avg, max) = (338423.250, 339547.764, 340372.056), stdev = 728.259
[info]   CI (99.9%): [336743.500, 342352.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1928.182 ±(99.9%) 49.432 MB/sec [Average]
[info]   (min, avg, max) = (1916.104, 1928.182, 1944.362), stdev = 12.837
[info]   CI (99.9%): [1878.750, 1977.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8937.438 ±(99.9%) 218.881 B/op [Average]
[info]   (min, avg, max) = (8877.142, 8937.438, 8994.087), stdev = 56.843
[info]   CI (99.9%): [8718.557, 9156.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.097 ±(99.9%) 1157.760 MB/sec [Average]
[info]   (min, avg, max) = (1339.271, 1877.097, 2014.530), stdev = 300.667
[info]   CI (99.9%): [719.337, 3034.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8700.994 ±(99.9%) 5374.458 B/op [Average]
[info]   (min, avg, max) = (6204.729, 8700.994, 9366.739), stdev = 1395.730
[info]   CI (99.9%): [3326.536, 14075.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.140 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.749, 3.602), stdev = 1.595
[info]   CI (99.9%): [≈ 0, 6.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.470 ±(99.9%) 28.433 B/op [Average]
[info]   (min, avg, max) = (0.096, 3.470, 16.677), stdev = 7.384
[info]   CI (99.9%): [≈ 0, 31.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.771 ops/s
[info] # Warmup Iteration   2: 1373316.292 ops/s
[info] # Warmup Iteration   3: 1500593.647 ops/s
[info] # Warmup Iteration   4: 1512816.091 ops/s
[info] # Warmup Iteration   5: 1519101.179 ops/s
[info] Iteration   1: 1514679.532 ops/s
[info]                  ·gc.alloc.rate:                   499.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              518.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     691.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1514047.305 ops/s
[info]                  ·gc.alloc.rate:               491.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          511.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 692.118 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1513508.691 ops/s
[info]                  ·gc.alloc.rate:                   491.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              510.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1519163.341 ops/s
[info]                  ·gc.alloc.rate:      478.835 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1514562.336 ops/s
[info]                  ·gc.alloc.rate:               492.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          512.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 692.587 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1515192.241 ±(99.9%) 8733.093 ops/s [Average]
[info]   (min, avg, max) = (1513508.691, 1515192.241, 1519163.341), stdev = 2267.956
[info]   CI (99.9%): [1506459.148, 1523925.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   490.889 ±(99.9%) 28.801 MB/sec [Average]
[info]   (min, avg, max) = (478.835, 490.889, 499.452), stdev = 7.480
[info]   CI (99.9%): [462.087, 519.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   509.888 ±(99.9%) 32.440 B/op [Average]
[info]   (min, avg, max) = (496.000, 509.888, 518.978), stdev = 8.425
[info]   CI (99.9%): [477.448, 542.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.923 ±(99.9%) 1147.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.923, 666.491), stdev = 297.913
[info]   CI (99.9%): [≈ 0, 1680.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   553.919 ±(99.9%) 1192.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 553.919, 693.046), stdev = 309.650
[info]   CI (99.9%): [≈ 0, 1746.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130084.754 ops/s
[info] # Warmup Iteration   2: 671719.974 ops/s
[info] # Warmup Iteration   3: 683989.992 ops/s
[info] # Warmup Iteration   4: 683171.102 ops/s
[info] # Warmup Iteration   5: 681902.885 ops/s
[info] Iteration   1: 681696.421 ops/s
[info]                  ·gc.alloc.rate:                   537.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              1239.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1181.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 682476.553 ops/s
[info]                  ·gc.alloc.rate:               552.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          1273.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1536.977 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 684657.972 ops/s
[info]                  ·gc.alloc.rate:               544.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          1251.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1532.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 683921.022 ops/s
[info]                  ·gc.alloc.rate:                   553.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              1273.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1535.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 685388.508 ops/s
[info]                  ·gc.alloc.rate:      529.537 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   683628.095 ±(99.9%) 5872.365 ops/s [Average]
[info]   (min, avg, max) = (681696.421, 683628.095, 685388.508), stdev = 1525.034
[info]   CI (99.9%): [677755.730, 689500.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   543.414 ±(99.9%) 39.322 MB/sec [Average]
[info]   (min, avg, max) = (529.537, 543.414, 553.541), stdev = 10.212
[info]   CI (99.9%): [504.092, 582.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1250.956 ±(99.9%) 93.995 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1250.956, 1273.721), stdev = 24.410
[info]   CI (99.9%): [1156.961, 1344.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.407 ±(99.9%) 1111.963 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.407, 667.246), stdev = 288.773
[info]   CI (99.9%): [≈ 0, 1614.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1157.102 ±(99.9%) 2559.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1157.102, 1536.977), stdev = 664.718
[info]   CI (99.9%): [≈ 0, 3716.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1059357.736 ops/s
[info] # Warmup Iteration   2: 1781087.879 ops/s
[info] # Warmup Iteration   3: 1830389.217 ops/s
[info] # Warmup Iteration   4: 1888871.996 ops/s
[info] # Warmup Iteration   5: 1882902.539 ops/s
[info] Iteration   1: 1834577.371 ops/s
[info]                  ·gc.alloc.rate:               370.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          317.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 438.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1884024.857 ops/s
[info]                  ·gc.alloc.rate:                   379.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              317.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     427.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1892318.075 ops/s
[info]                  ·gc.alloc.rate:      365.554 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1892548.169 ops/s
[info]                  ·gc.alloc.rate:               383.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          319.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 557.568 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1900642.661 ops/s
[info]                  ·gc.alloc.rate:      367.193 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1880822.227 ±(99.9%) 102084.655 ops/s [Average]
[info]   (min, avg, max) = (1834577.371, 1880822.227, 1900642.661), stdev = 26511.061
[info]   CI (99.9%): [1778737.571, 1982906.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   373.343 ±(99.9%) 31.108 MB/sec [Average]
[info]   (min, avg, max) = (365.554, 373.343, 383.942), stdev = 8.079
[info]   CI (99.9%): [342.235, 404.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.429 ±(99.9%) 29.770 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.429, 319.256), stdev = 7.731
[info]   CI (99.9%): [282.659, 342.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.749 ±(99.9%) 1216.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.749, 670.538), stdev = 315.968
[info]   CI (99.9%): [≈ 0, 1555.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   284.768 ±(99.9%) 1020.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 284.768, 557.568), stdev = 264.905
[info]   CI (99.9%): [≈ 0, 1304.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10816.420 ops/s
[info] # Warmup Iteration   2: 91034.328 ops/s
[info] # Warmup Iteration   3: 100340.463 ops/s
[info] # Warmup Iteration   4: 101895.694 ops/s
[info] # Warmup Iteration   5: 101274.146 ops/s
[info] Iteration   1: 102033.520 ops/s
[info]                  ·gc.alloc.rate:                   3399.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              52430.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51781.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 100016.988 ops/s
[info]                  ·gc.alloc.rate:               3334.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          52472.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3370.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53043.032 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 100219.902 ops/s
[info]                  ·gc.alloc.rate:               3328.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          52267.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42467.145 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 101373.968 ops/s
[info]                  ·gc.alloc.rate:                   3420.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              53102.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52599.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 101582.876 ops/s
[info]                  ·gc.alloc.rate:                   3426.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              53095.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52583.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   101045.451 ±(99.9%) 3396.596 ops/s [Average]
[info]   (min, avg, max) = (100016.988, 101045.451, 102033.520), stdev = 882.085
[info]   CI (99.9%): [97648.855, 104442.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3381.840 ±(99.9%) 181.767 MB/sec [Average]
[info]   (min, avg, max) = (3328.160, 3381.840, 3426.796), stdev = 47.204
[info]   CI (99.9%): [3200.073, 3563.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52673.713 ±(99.9%) 1523.519 B/op [Average]
[info]   (min, avg, max) = (52267.746, 52673.713, 53102.076), stdev = 395.653
[info]   CI (99.9%): [51150.194, 54197.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3242.793 ±(99.9%) 1160.908 MB/sec [Average]
[info]   (min, avg, max) = (2704.105, 3242.793, 3393.738), stdev = 301.484
[info]   CI (99.9%): [2081.885, 4403.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50495.145 ±(99.9%) 17369.390 B/op [Average]
[info]   (min, avg, max) = (42467.145, 50495.145, 53043.032), stdev = 4510.776
[info]   CI (99.9%): [33125.754, 67864.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 1.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.322, 0.645), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124915.595 ops/s
[info] # Warmup Iteration   2: 341763.743 ops/s
[info] # Warmup Iteration   3: 358482.655 ops/s
[info] # Warmup Iteration   4: 357737.844 ops/s
[info] # Warmup Iteration   5: 359726.007 ops/s
[info] Iteration   1: 364021.246 ops/s
[info]                  ·gc.alloc.rate:                   1254.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              5424.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5797.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 362647.696 ops/s
[info]                  ·gc.alloc.rate:               1269.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          5508.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5822.339 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 365076.243 ops/s
[info]                  ·gc.alloc.rate:               1251.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          5394.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2893.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 364275.506 ops/s
[info]                  ·gc.alloc.rate:                   1261.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              5450.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5800.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 366962.278 ops/s
[info]                  ·gc.alloc.rate:                   1270.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5447.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5754.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   364596.594 ±(99.9%) 6106.291 ops/s [Average]
[info]   (min, avg, max) = (362647.696, 364596.594, 366962.278), stdev = 1585.784
[info]   CI (99.9%): [358490.303, 370702.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1261.375 ±(99.9%) 32.357 MB/sec [Average]
[info]   (min, avg, max) = (1251.245, 1261.375, 1270.017), stdev = 8.403
[info]   CI (99.9%): [1229.018, 1293.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5444.944 ±(99.9%) 161.747 B/op [Average]
[info]   (min, avg, max) = (5394.205, 5444.944, 5508.336), stdev = 42.005
[info]   CI (99.9%): [5283.198, 5606.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.606 ±(99.9%) 1154.803 MB/sec [Average]
[info]   (min, avg, max) = (671.132, 1207.606, 1342.564), stdev = 299.899
[info]   CI (99.9%): [52.803, 2362.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5213.602 ±(99.9%) 4995.544 B/op [Average]
[info]   (min, avg, max) = (2893.295, 5213.602, 5822.339), stdev = 1297.327
[info]   CI (99.9%): [218.058, 10209.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.060), stdev = 1.330
[info]   CI (99.9%): [≈ 0, 5.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.037 ±(99.9%) 22.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.037, 13.221), stdev = 5.749
[info]   CI (99.9%): [≈ 0, 25.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.812 ops/s
[info] # Warmup Iteration   2: 1477445.853 ops/s
[info] # Warmup Iteration   3: 1544989.644 ops/s
[info] # Warmup Iteration   4: 1549058.545 ops/s
[info] # Warmup Iteration   5: 1564081.702 ops/s
[info] Iteration   1: 1561501.369 ops/s
[info]                  ·gc.alloc.rate:                   744.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1540044.764 ops/s
[info]                  ·gc.alloc.rate:               726.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 680.810 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1593748.113 ops/s
[info]                  ·gc.alloc.rate:                   759.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     657.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1593051.671 ops/s
[info]                  ·gc.alloc.rate:                   770.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              761.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1317.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1608142.031 ops/s
[info]                  ·gc.alloc.rate:                   769.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1579297.590 ±(99.9%) 106980.770 ops/s [Average]
[info]   (min, avg, max) = (1540044.764, 1579297.590, 1608142.031), stdev = 27782.566
[info]   CI (99.9%): [1472316.820, 1686278.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   753.977 ±(99.9%) 71.841 MB/sec [Average]
[info]   (min, avg, max) = (726.640, 753.977, 770.447), stdev = 18.657
[info]   CI (99.9%): [682.136, 825.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   751.268 ±(99.9%) 26.202 B/op [Average]
[info]   (min, avg, max) = (742.418, 751.268, 761.151), stdev = 6.805
[info]   CI (99.9%): [725.066, 777.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.897 ±(99.9%) 1148.964 MB/sec [Average]
[info]   (min, avg, max) = (665.871, 799.897, 1333.658), stdev = 298.382
[info]   CI (99.9%): [≈ 0, 1948.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   796.112 ±(99.9%) 1123.256 B/op [Average]
[info]   (min, avg, max) = (653.238, 796.112, 1317.568), stdev = 291.706
[info]   CI (99.9%): [≈ 0, 1919.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.042), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.041), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449822.750 ops/s
[info] # Warmup Iteration   2: 932754.396 ops/s
[info] # Warmup Iteration   3: 1015841.891 ops/s
[info] # Warmup Iteration   4: 1017976.641 ops/s
[info] # Warmup Iteration   5: 1020588.761 ops/s
[info] Iteration   1: 1032964.963 ops/s
[info]                  ·gc.alloc.rate:               745.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          1135.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1017.527 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1037173.254 ops/s
[info]                  ·gc.alloc.rate:               757.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          1148.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1014.387 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1031209.107 ops/s
[info]                  ·gc.alloc.rate:                   748.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              1142.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1020.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1025775.483 ops/s
[info]                  ·gc.alloc.rate:               751.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          1152.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1026.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1018961.415 ops/s
[info]                  ·gc.alloc.rate:               736.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          1137.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1033.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1029216.845 ±(99.9%) 27114.846 ops/s [Average]
[info]   (min, avg, max) = (1018961.415, 1029216.845, 1037173.254), stdev = 7041.639
[info]   CI (99.9%): [1002101.999, 1056331.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   747.769 ±(99.9%) 29.899 MB/sec [Average]
[info]   (min, avg, max) = (736.390, 747.769, 757.419), stdev = 7.765
[info]   CI (99.9%): [717.870, 777.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1143.326 ±(99.9%) 28.110 B/op [Average]
[info]   (min, avg, max) = (1135.335, 1143.326, 1152.438), stdev = 7.300
[info]   CI (99.9%): [1115.216, 1171.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.574 ±(99.9%) 1.561 MB/sec [Average]
[info]   (min, avg, max) = (667.904, 668.574, 668.857), stdev = 0.405
[info]   CI (99.9%): [667.013, 670.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1022.288 ±(99.9%) 28.569 B/op [Average]
[info]   (min, avg, max) = (1014.387, 1022.288, 1033.046), stdev = 7.419
[info]   CI (99.9%): [993.719, 1050.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1513975.778 ops/s
[info] # Warmup Iteration   2: 2675300.960 ops/s
[info] # Warmup Iteration   3: 2799200.572 ops/s
[info] # Warmup Iteration   4: 2798739.065 ops/s
[info] # Warmup Iteration   5: 2755393.507 ops/s
[info] Iteration   1: 2762038.761 ops/s
[info]                  ·gc.alloc.rate:               1317.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 765.847 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2761127.596 ops/s
[info]                  ·gc.alloc.rate:                   1316.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2740517.543 ops/s
[info]                  ·gc.alloc.rate:               1291.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          741.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 386.402 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2773146.502 ops/s
[info]                  ·gc.alloc.rate:                   1332.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2775150.842 ops/s
[info]                  ·gc.alloc.rate:               1324.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          751.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 761.640 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2762396.249 ±(99.9%) 53030.743 ops/s [Average]
[info]   (min, avg, max) = (2740517.543, 2762396.249, 2775150.842), stdev = 13771.916
[info]   CI (99.9%): [2709365.505, 2815426.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1316.539 ±(99.9%) 58.741 MB/sec [Average]
[info]   (min, avg, max) = (1291.687, 1316.539, 1332.302), stdev = 15.255
[info]   CI (99.9%): [1257.797, 1375.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.011 ±(99.9%) 20.064 B/op [Average]
[info]   (min, avg, max) = (741.671, 750.011, 756.102), stdev = 5.211
[info]   CI (99.9%): [729.947, 770.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.182 ±(99.9%) 1156.431 MB/sec [Average]
[info]   (min, avg, max) = (672.953, 1210.182, 1345.676), stdev = 300.322
[info]   CI (99.9%): [53.750, 2366.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   688.851 ±(99.9%) 651.088 B/op [Average]
[info]   (min, avg, max) = (386.402, 688.851, 766.672), stdev = 169.085
[info]   CI (99.9%): [37.763, 1339.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.608 ±(99.9%) 5.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.998), stdev = 1.336
[info]   CI (99.9%): [≈ 0, 5.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.345 ±(99.9%) 2.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.345, 1.701), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1342552.251 ops/s
[info] # Warmup Iteration   2: 3193613.996 ops/s
[info] # Warmup Iteration   3: 3240992.158 ops/s
[info] # Warmup Iteration   4: 3248502.546 ops/s
[info] # Warmup Iteration   5: 3247269.115 ops/s
[info] Iteration   1: 3245405.005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3249740.094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3245264.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3249789.232 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3247180.046 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3247475.755 ±(99.9%) 8555.225 ops/s [Average]
[info]   (min, avg, max) = (3245264.399, 3247475.755, 3249789.232), stdev = 2221.765
[info]   CI (99.9%): [3238920.530, 3256030.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163745.671 ops/s
[info] # Warmup Iteration   2: 432069.130 ops/s
[info] # Warmup Iteration   3: 487965.034 ops/s
[info] # Warmup Iteration   4: 486022.285 ops/s
[info] # Warmup Iteration   5: 482043.235 ops/s
[info] Iteration   1: 493394.402 ops/s
[info]                  ·gc.alloc.rate:               592.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          1889.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2131.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 493106.614 ops/s
[info]                  ·gc.alloc.rate:      566.549 MB/sec
[info]                  ·gc.alloc.rate.norm: 1808.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 478540.648 ops/s
[info]                  ·gc.alloc.rate:               563.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          1853.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2197.437 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 481758.446 ops/s
[info]                  ·gc.alloc.rate:               573.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          1873.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2184.955 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 487415.183 ops/s
[info]                  ·gc.alloc.rate:                   579.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              1869.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2159.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   486843.059 ±(99.9%) 25633.756 ops/s [Average]
[info]   (min, avg, max) = (478540.648, 486843.059, 493394.402), stdev = 6657.005
[info]   CI (99.9%): [461209.302, 512476.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   575.044 ±(99.9%) 44.246 MB/sec [Average]
[info]   (min, avg, max) = (563.586, 575.044, 592.553), stdev = 11.490
[info]   CI (99.9%): [530.798, 619.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1858.699 ±(99.9%) 119.963 B/op [Average]
[info]   (min, avg, max) = (1808.001, 1858.699, 1889.434), stdev = 31.154
[info]   CI (99.9%): [1738.736, 1978.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   534.887 ±(99.9%) 1151.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.887, 668.894), stdev = 299.011
[info]   CI (99.9%): [≈ 0, 1686.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1734.649 ±(99.9%) 3735.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1734.649, 2197.437), stdev = 970.030
[info]   CI (99.9%): [≈ 0, 5469.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47207.524 ops/s
[info] # Warmup Iteration   2: 149963.834 ops/s
[info] # Warmup Iteration   3: 154451.858 ops/s
[info] # Warmup Iteration   4: 159824.128 ops/s
[info] # Warmup Iteration   5: 161376.241 ops/s
[info] Iteration   1: 160451.880 ops/s
[info]                  ·gc.alloc.rate:                   2019.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              19807.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19779.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.918 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 162494.036 ops/s
[info]                  ·gc.alloc.rate:                   2071.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              20062.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19478.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 162220.609 ops/s
[info]                  ·gc.alloc.rate:                   2055.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              19931.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19464.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 162571.176 ops/s
[info]                  ·gc.alloc.rate:                   2067.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              19993.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19420.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 160486.533 ops/s
[info]                  ·gc.alloc.rate:                   2014.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              19760.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13150.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   161644.847 ±(99.9%) 4163.136 ops/s [Average]
[info]   (min, avg, max) = (160451.880, 161644.847, 162571.176), stdev = 1081.153
[info]   CI (99.9%): [157481.711, 165807.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2045.606 ±(99.9%) 102.532 MB/sec [Average]
[info]   (min, avg, max) = (2014.877, 2045.606, 2071.378), stdev = 26.627
[info]   CI (99.9%): [1943.073, 2148.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19911.121 ±(99.9%) 486.980 B/op [Average]
[info]   (min, avg, max) = (19760.037, 19911.121, 20062.971), stdev = 126.467
[info]   CI (99.9%): [19424.141, 20398.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1876.712 ±(99.9%) 1153.394 MB/sec [Average]
[info]   (min, avg, max) = (1340.935, 1876.712, 2016.777), stdev = 299.533
[info]   CI (99.9%): [723.317, 3030.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18258.867 ±(99.9%) 11009.478 B/op [Average]
[info]   (min, avg, max) = (13150.644, 18258.867, 19779.521), stdev = 2859.126
[info]   CI (99.9%): [7249.389, 29268.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 6.006 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.775, 3.560), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.589 ±(99.9%) 58.919 B/op [Average]
[info]   (min, avg, max) = (0.202, 7.589, 34.918), stdev = 15.301
[info]   CI (99.9%): [≈ 0, 66.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158246.002 ops/s
[info] # Warmup Iteration   2: 484161.491 ops/s
[info] # Warmup Iteration   3: 532161.443 ops/s
[info] # Warmup Iteration   4: 530906.887 ops/s
[info] # Warmup Iteration   5: 523777.504 ops/s
[info] Iteration   1: 527165.138 ops/s
[info]                  ·gc.alloc.rate:                   436.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              1303.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1527.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 531494.319 ops/s
[info]                  ·gc.alloc.rate:      426.893 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 530494.872 ops/s
[info]                  ·gc.alloc.rate:               447.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          1328.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1976.379 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 532761.711 ops/s
[info]                  ·gc.alloc.rate:      427.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 530617.512 ops/s
[info]                  ·gc.alloc.rate:                   441.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              1308.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1975.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   530506.710 ±(99.9%) 7993.894 ops/s [Average]
[info]   (min, avg, max) = (527165.138, 530506.710, 532761.711), stdev = 2075.989
[info]   CI (99.9%): [522512.816, 538500.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   436.119 ±(99.9%) 34.229 MB/sec [Average]
[info]   (min, avg, max) = (426.893, 436.119, 447.813), stdev = 8.889
[info]   CI (99.9%): [401.890, 470.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1293.674 ±(99.9%) 110.425 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1293.674, 1328.531), stdev = 28.677
[info]   CI (99.9%): [1183.249, 1404.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.857 ±(99.9%) 1319.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.857, 666.443), stdev = 342.587
[info]   CI (99.9%): [≈ 0, 1688.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1095.940 ±(99.9%) 3916.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1095.940, 1976.379), stdev = 1017.079
[info]   CI (99.9%): [≈ 0, 5012.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.124), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 584352.896 ops/s
[info] # Warmup Iteration   2: 1142738.729 ops/s
[info] # Warmup Iteration   3: 1276306.874 ops/s
[info] # Warmup Iteration   4: 1269805.353 ops/s
[info] # Warmup Iteration   5: 1277030.607 ops/s
[info] Iteration   1: 1269253.861 ops/s
[info]                  ·gc.alloc.rate:                   261.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1279202.927 ops/s
[info]                  ·gc.alloc.rate:      247.197 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.130 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1272530.368 ops/s
[info]                  ·gc.alloc.rate:               259.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          321.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 632.742 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1279319.137 ops/s
[info]                  ·gc.alloc.rate:      247.107 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1273949.311 ops/s
[info]                  ·gc.alloc.rate:                   261.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     632.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1274851.121 ±(99.9%) 16831.967 ops/s [Average]
[info]   (min, avg, max) = (1269253.861, 1274851.121, 1279319.137), stdev = 4371.209
[info]   CI (99.9%): [1258019.153, 1291683.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   255.565 ±(99.9%) 29.762 MB/sec [Average]
[info]   (min, avg, max) = (247.107, 255.565, 261.982), stdev = 7.729
[info]   CI (99.9%): [225.803, 285.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   315.525 ±(99.9%) 40.577 B/op [Average]
[info]   (min, avg, max) = (304.000, 315.525, 324.815), stdev = 10.538
[info]   CI (99.9%): [274.948, 356.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.971 ±(99.9%) 1079.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.971, 511.656), stdev = 280.225
[info]   CI (99.9%): [≈ 0, 1386.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   379.832 ±(99.9%) 1335.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 379.832, 634.370), stdev = 346.738
[info]   CI (99.9%): [≈ 0, 1714.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.026), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8024.902 ops/s
[info] # Warmup Iteration   2: 75056.665 ops/s
[info] # Warmup Iteration   3: 85074.130 ops/s
[info] # Warmup Iteration   4: 86600.215 ops/s
[info] # Warmup Iteration   5: 86318.324 ops/s
[info] Iteration   1: 87497.527 ops/s
[info]                  ·gc.alloc.rate:               3487.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          62732.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3334.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59980.249 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 87609.563 ops/s
[info]                  ·gc.alloc.rate:                   3519.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              63227.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60061.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 86742.043 ops/s
[info]                  ·gc.alloc.rate:               3486.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          63262.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3357.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60916.639 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 85699.050 ops/s
[info]                  ·gc.alloc.rate:               3449.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          63314.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61888.187 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 87456.531 ops/s
[info]                  ·gc.alloc.rate:               3515.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          63264.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60855.553 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   87000.943 ±(99.9%) 3096.436 ops/s [Average]
[info]   (min, avg, max) = (85699.050, 87000.943, 87609.563), stdev = 804.135
[info]   CI (99.9%): [83904.507, 90097.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3491.779 ±(99.9%) 109.484 MB/sec [Average]
[info]   (min, avg, max) = (3449.002, 3491.779, 3519.631), stdev = 28.433
[info]   CI (99.9%): [3382.295, 3601.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63160.332 ±(99.9%) 928.996 B/op [Average]
[info]   (min, avg, max) = (62732.349, 63160.332, 63314.892), stdev = 241.257
[info]   CI (99.9%): [62231.336, 64089.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3357.751 ±(99.9%) 75.120 MB/sec [Average]
[info]   (min, avg, max) = (3334.541, 3357.751, 3382.109), stdev = 19.508
[info]   CI (99.9%): [3282.630, 3432.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60740.366 ±(99.9%) 2983.239 B/op [Average]
[info]   (min, avg, max) = (59980.249, 60740.366, 61888.187), stdev = 774.738
[info]   CI (99.9%): [57757.128, 63723.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.374), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86845.869 ops/s
[info] # Warmup Iteration   2: 275759.683 ops/s
[info] # Warmup Iteration   3: 305997.407 ops/s
[info] # Warmup Iteration   4: 309080.439 ops/s
[info] # Warmup Iteration   5: 307235.256 ops/s
[info] Iteration   1: 306989.123 ops/s
[info]                  ·gc.alloc.rate:                   1728.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              8858.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6879.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 308559.251 ops/s
[info]                  ·gc.alloc.rate:                   1750.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              8928.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10273.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 310114.230 ops/s
[info]                  ·gc.alloc.rate:               1734.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          8801.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6801.779 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 309309.803 ops/s
[info]                  ·gc.alloc.rate:               1768.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          8997.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10217.981 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 310219.445 ops/s
[info]                  ·gc.alloc.rate:               1748.255 MB/sec
[info]                  ·gc.alloc.rate.norm:          8869.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6791.335 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   309038.370 ±(99.9%) 5113.915 ops/s [Average]
[info]   (min, avg, max) = (306989.123, 309038.370, 310219.445), stdev = 1328.068
[info]   CI (99.9%): [303924.455, 314152.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1745.864 ±(99.9%) 60.163 MB/sec [Average]
[info]   (min, avg, max) = (1728.104, 1745.864, 1768.181), stdev = 15.624
[info]   CI (99.9%): [1685.701, 1806.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8890.989 ±(99.9%) 286.935 B/op [Average]
[info]   (min, avg, max) = (8801.353, 8890.989, 8997.185), stdev = 74.516
[info]   CI (99.9%): [8604.054, 9177.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.661 ±(99.9%) 1414.984 MB/sec [Average]
[info]   (min, avg, max) = (1338.556, 1608.661, 2014.282), stdev = 367.467
[info]   CI (99.9%): [193.677, 3023.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8192.826 ±(99.9%) 7217.513 B/op [Average]
[info]   (min, avg, max) = (6791.335, 8192.826, 10273.295), stdev = 1874.365
[info]   CI (99.9%): [975.314, 15410.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.560), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 6.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.653 ±(99.9%) 31.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.653, 18.157), stdev = 8.108
[info]   CI (99.9%): [≈ 0, 34.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 7.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492575.954 ops/s
[info] # Warmup Iteration   2: 1843960.872 ops/s
[info] # Warmup Iteration   3: 1851789.295 ops/s
[info] # Warmup Iteration   4: 1889190.603 ops/s
[info] # Warmup Iteration   5: 1902579.654 ops/s
[info] Iteration   1: 1894513.201 ops/s
[info]                  ·gc.alloc.rate:                   1014.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              843.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1899663.999 ops/s
[info]                  ·gc.alloc.rate:               990.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          820.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 554.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1900082.748 ops/s
[info]                  ·gc.alloc.rate:               1007.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          834.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1108.231 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1941853.249 ops/s
[info]                  ·gc.alloc.rate:                   1022.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              828.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1944742.697 ops/s
[info]                  ·gc.alloc.rate:                   1026.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              830.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1084.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1916171.179 ±(99.9%) 95808.575 ops/s [Average]
[info]   (min, avg, max) = (1894513.201, 1916171.179, 1944742.697), stdev = 24881.183
[info]   CI (99.9%): [1820362.604, 2011979.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1012.356 ±(99.9%) 54.450 MB/sec [Average]
[info]   (min, avg, max) = (990.475, 1012.356, 1026.133), stdev = 14.140
[info]   CI (99.9%): [957.907, 1066.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   831.533 ±(99.9%) 31.835 B/op [Average]
[info]   (min, avg, max) = (820.613, 831.533, 843.142), stdev = 8.267
[info]   CI (99.9%): [799.699, 863.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.356 ±(99.9%) 1410.830 MB/sec [Average]
[info]   (min, avg, max) = (668.805, 1070.356, 1339.607), stdev = 366.388
[info]   CI (99.9%): [≈ 0, 2481.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   879.791 ±(99.9%) 1166.247 B/op [Average]
[info]   (min, avg, max) = (542.360, 879.791, 1110.121), stdev = 302.871
[info]   CI (99.9%): [≈ 0, 2046.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1633659.098 ops/s
[info] # Warmup Iteration   2: 2665315.168 ops/s
[info] # Warmup Iteration   3: 2850479.288 ops/s
[info] # Warmup Iteration   4: 2871708.866 ops/s
[info] # Warmup Iteration   5: 2879764.508 ops/s
[info] Iteration   1: 2812499.296 ops/s
[info]                  ·gc.alloc.rate:               771.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          431.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2804152.638 ops/s
[info]                  ·gc.alloc.rate:                   798.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              447.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     753.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2813366.705 ops/s
[info]                  ·gc.alloc.rate:                   773.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     375.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2887758.394 ops/s
[info]                  ·gc.alloc.rate:               793.888 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 365.958 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2884596.695 ops/s
[info]                  ·gc.alloc.rate:               792.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2840474.745 ±(99.9%) 161305.411 ops/s [Average]
[info]   (min, avg, max) = (2804152.638, 2840474.745, 2887758.394), stdev = 41890.503
[info]   CI (99.9%): [2679169.334, 3001780.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   786.146 ±(99.9%) 47.616 MB/sec [Average]
[info]   (min, avg, max) = (771.732, 786.146, 798.243), stdev = 12.366
[info]   CI (99.9%): [738.530, 833.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.606 ±(99.9%) 26.558 B/op [Average]
[info]   (min, avg, max) = (431.858, 435.606, 447.923), stdev = 6.897
[info]   CI (99.9%): [409.047, 462.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.728 ±(99.9%) 1155.776 MB/sec [Average]
[info]   (min, avg, max) = (670.824, 805.728, 1342.654), stdev = 300.151
[info]   CI (99.9%): [≈ 0, 1961.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   447.431 ±(99.9%) 658.886 B/op [Average]
[info]   (min, avg, max) = (365.958, 447.431, 753.412), stdev = 171.111
[info]   CI (99.9%): [≈ 0, 1106.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:36:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1817757.947 ops/s
[info] # Warmup Iteration   2: 2999005.067 ops/s
[info] # Warmup Iteration   3: 3083210.614 ops/s
[info] # Warmup Iteration   4: 3083217.749 ops/s
[info] # Warmup Iteration   5: 3081342.435 ops/s
[info] Iteration   1: 3082720.605 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3081837.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3082769.470 ops/s
[info]                  ·gc.alloc.rate:      0.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3074483.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3072950.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3078952.438 ±(99.9%) 18575.764 ops/s [Average]
[info]   (min, avg, max) = (3072950.688, 3078952.438, 3082769.470), stdev = 4824.067
[info]   CI (99.9%): [3060376.674, 3097528.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12322.928 ops/s
[info] # Warmup Iteration   2: 44122.295 ops/s
[info] # Warmup Iteration   3: 48031.729 ops/s
[info] # Warmup Iteration   4: 47876.829 ops/s
[info] # Warmup Iteration   5: 49181.979 ops/s
[info] Iteration   1: 49628.066 ops/s
[info]                  ·gc.alloc.rate:                   2254.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              71489.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85096.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 49054.921 ops/s
[info]                  ·gc.alloc.rate:                   2213.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              70996.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64352.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 49936.787 ops/s
[info]                  ·gc.alloc.rate:                   2239.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              70589.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63174.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 49704.514 ops/s
[info]                  ·gc.alloc.rate:                   2271.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              71872.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84568.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 49859.236 ops/s
[info]                  ·gc.alloc.rate:               2263.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          71446.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63470.094 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   49636.705 ±(99.9%) 1337.669 ops/s [Average]
[info]   (min, avg, max) = (49054.921, 49636.705, 49936.787), stdev = 347.388
[info]   CI (99.9%): [48299.035, 50974.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2248.549 ±(99.9%) 88.698 MB/sec [Average]
[info]   (min, avg, max) = (2213.294, 2248.549, 2271.985), stdev = 23.035
[info]   CI (99.9%): [2159.851, 2337.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71278.900 ±(99.9%) 1905.753 B/op [Average]
[info]   (min, avg, max) = (70589.368, 71278.900, 71872.085), stdev = 494.918
[info]   CI (99.9%): [69373.147, 73184.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2275.613 ±(99.9%) 1415.876 MB/sec [Average]
[info]   (min, avg, max) = (2004.473, 2275.613, 2683.417), stdev = 367.698
[info]   CI (99.9%): [859.738, 3691.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72132.307 ±(99.9%) 44679.727 B/op [Average]
[info]   (min, avg, max) = (63174.059, 72132.307, 85096.187), stdev = 11603.183
[info]   CI (99.9%): [27452.580, 116812.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 6.965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.080), stdev = 1.809
[info]   CI (99.9%): [≈ 0, 7.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.806 ±(99.9%) 220.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.806, 129.398), stdev = 57.355
[info]   CI (99.9%): [≈ 0, 247.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61616.306 ops/s
[info] # Warmup Iteration   2: 219953.985 ops/s
[info] # Warmup Iteration   3: 236772.879 ops/s
[info] # Warmup Iteration   4: 244295.088 ops/s
[info] # Warmup Iteration   5: 243994.223 ops/s
[info] Iteration   1: 245709.048 ops/s
[info]                  ·gc.alloc.rate:                   2696.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              17272.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17169.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 242724.979 ops/s
[info]                  ·gc.alloc.rate:                   2651.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              17195.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17363.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 246187.764 ops/s
[info]                  ·gc.alloc.rate:               2715.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          17362.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17145.299 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 246170.011 ops/s
[info]                  ·gc.alloc.rate:               2716.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          17364.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17188.793 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 245535.049 ops/s
[info]                  ·gc.alloc.rate:               2709.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          17372.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17280.560 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   245265.370 ±(99.9%) 5577.571 ops/s [Average]
[info]   (min, avg, max) = (242724.979, 245265.370, 246187.764), stdev = 1448.477
[info]   CI (99.9%): [239687.799, 250842.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2698.089 ±(99.9%) 104.041 MB/sec [Average]
[info]   (min, avg, max) = (2651.913, 2698.089, 2716.239), stdev = 27.019
[info]   CI (99.9%): [2594.048, 2802.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17313.438 ±(99.9%) 298.903 B/op [Average]
[info]   (min, avg, max) = (17195.428, 17313.438, 17372.157), stdev = 77.624
[info]   CI (99.9%): [17014.535, 17612.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2684.915 ±(99.9%) 27.711 MB/sec [Average]
[info]   (min, avg, max) = (2677.894, 2684.915, 2695.626), stdev = 7.196
[info]   CI (99.9%): [2657.205, 2712.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17229.606 ±(99.9%) 349.840 B/op [Average]
[info]   (min, avg, max) = (17145.299, 17229.606, 17363.891), stdev = 90.852
[info]   CI (99.9%): [16879.766, 17579.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.107 ±(99.9%) 0.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.400), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122694.058 ops/s
[info] # Warmup Iteration   2: 363530.020 ops/s
[info] # Warmup Iteration   3: 387052.156 ops/s
[info] # Warmup Iteration   4: 389332.851 ops/s
[info] # Warmup Iteration   5: 380205.578 ops/s
[info] Iteration   1: 388474.970 ops/s
[info]                  ·gc.alloc.rate:               2011.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          8145.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8097.649 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 387656.964 ops/s
[info]                  ·gc.alloc.rate:                   1989.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              8078.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8136.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 382482.160 ops/s
[info]                  ·gc.alloc.rate:               1960.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          8067.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8262.558 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 387632.754 ops/s
[info]                  ·gc.alloc.rate:               2003.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          8133.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8180.188 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 381517.206 ops/s
[info]                  ·gc.alloc.rate:               1999.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          8246.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8330.756 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   385552.811 ±(99.9%) 12626.301 ops/s [Average]
[info]   (min, avg, max) = (381517.206, 385552.811, 388474.970), stdev = 3279.010
[info]   CI (99.9%): [372926.510, 398179.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1992.929 ±(99.9%) 75.572 MB/sec [Average]
[info]   (min, avg, max) = (1960.633, 1992.929, 2011.136), stdev = 19.626
[info]   CI (99.9%): [1917.357, 2068.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8134.204 ±(99.9%) 274.289 B/op [Average]
[info]   (min, avg, max) = (8067.343, 8134.204, 8246.503), stdev = 71.232
[info]   CI (99.9%): [7859.915, 8408.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2009.312 ±(99.9%) 31.396 MB/sec [Average]
[info]   (min, avg, max) = (1999.387, 2009.312, 2019.427), stdev = 8.153
[info]   CI (99.9%): [1977.916, 2040.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8201.525 ±(99.9%) 364.811 B/op [Average]
[info]   (min, avg, max) = (8097.649, 8201.525, 8330.756), stdev = 94.740
[info]   CI (99.9%): [7836.714, 8566.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1238941.111 ops/s
[info] # Warmup Iteration   2: 2239399.577 ops/s
[info] # Warmup Iteration   3: 2288925.804 ops/s
[info] # Warmup Iteration   4: 2225613.857 ops/s
[info] # Warmup Iteration   5: 2236614.479 ops/s
[info] Iteration   1: 2215750.833 ops/s
[info]                  ·gc.alloc.rate:                   805.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              571.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2210239.403 ops/s
[info]                  ·gc.alloc.rate:               790.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          563.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 478.142 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2245838.156 ops/s
[info]                  ·gc.alloc.rate:               793.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 471.018 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2302148.401 ops/s
[info]                  ·gc.alloc.rate:                   811.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2299833.340 ops/s
[info]                  ·gc.alloc.rate:               809.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 460.195 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2254762.027 ±(99.9%) 170699.793 ops/s [Average]
[info]   (min, avg, max) = (2210239.403, 2254762.027, 2302148.401), stdev = 44330.194
[info]   CI (99.9%): [2084062.234, 2425461.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   802.111 ±(99.9%) 36.180 MB/sec [Average]
[info]   (min, avg, max) = (790.833, 802.111, 811.187), stdev = 9.396
[info]   CI (99.9%): [765.931, 838.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.913 ±(99.9%) 29.037 B/op [Average]
[info]   (min, avg, max) = (554.241, 559.913, 571.786), stdev = 7.541
[info]   CI (99.9%): [530.877, 588.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.196 ±(99.9%) 1154.365 MB/sec [Average]
[info]   (min, avg, max) = (671.580, 806.196, 1342.467), stdev = 299.785
[info]   CI (99.9%): [≈ 0, 1960.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   564.453 ±(99.9%) 837.791 B/op [Average]
[info]   (min, avg, max) = (459.505, 564.453, 953.408), stdev = 217.572
[info]   CI (99.9%): [≈ 0, 1402.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4510.204 ops/s
[info] # Warmup Iteration   2: 69316.322 ops/s
[info] # Warmup Iteration   3: 86778.751 ops/s
[info] # Warmup Iteration   4: 89398.799 ops/s
[info] # Warmup Iteration   5: 88042.224 ops/s
[info] Iteration   1: 88195.556 ops/s
[info]                  ·gc.alloc.rate:                   3476.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              62043.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60049.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.857 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 89696.025 ops/s
[info]                  ·gc.alloc.rate:                   3546.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              62235.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59197.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 89806.111 ops/s
[info]                  ·gc.alloc.rate:               3553.807 MB/sec
[info]                  ·gc.alloc.rate.norm:          62264.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3384.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59293.886 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 87557.964 ops/s
[info]                  ·gc.alloc.rate:                   3467.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              62327.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60935.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.748 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 89929.593 ops/s
[info]                  ·gc.alloc.rate:               3558.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          62275.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3395.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59424.631 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   89037.050 ±(99.9%) 4182.046 ops/s [Average]
[info]   (min, avg, max) = (87557.964, 89037.050, 89929.593), stdev = 1086.064
[info]   CI (99.9%): [84855.004, 93219.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3520.691 ±(99.9%) 171.930 MB/sec [Average]
[info]   (min, avg, max) = (3467.499, 3520.691, 3558.483), stdev = 44.650
[info]   CI (99.9%): [3348.760, 3692.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62229.532 ±(99.9%) 419.656 B/op [Average]
[info]   (min, avg, max) = (62043.776, 62229.532, 62327.502), stdev = 108.983
[info]   CI (99.9%): [61809.876, 62649.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3381.718 ±(99.9%) 47.649 MB/sec [Average]
[info]   (min, avg, max) = (3364.970, 3381.718, 3395.581), stdev = 12.374
[info]   CI (99.9%): [3334.070, 3429.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59780.115 ±(99.9%) 2797.065 B/op [Average]
[info]   (min, avg, max) = (59197.106, 59780.115, 60935.735), stdev = 726.389
[info]   CI (99.9%): [56983.050, 62577.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.667 ±(99.9%) 2.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 1.857), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81710.170 ops/s
[info] # Warmup Iteration   2: 250609.015 ops/s
[info] # Warmup Iteration   3: 264201.244 ops/s
[info] # Warmup Iteration   4: 269613.749 ops/s
[info] # Warmup Iteration   5: 267800.893 ops/s
[info] Iteration   1: 269592.360 ops/s
[info]                  ·gc.alloc.rate:                   2201.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              12853.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15672.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 269627.475 ops/s
[info]                  ·gc.alloc.rate:                   2174.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              12695.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11727.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 270300.051 ops/s
[info]                  ·gc.alloc.rate:                   2183.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              12707.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11694.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 268513.537 ops/s
[info]                  ·gc.alloc.rate:                   2181.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              12787.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11780.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 270803.991 ops/s
[info]                  ·gc.alloc.rate:               2199.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          12785.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11701.518 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   269767.483 ±(99.9%) 3323.971 ops/s [Average]
[info]   (min, avg, max) = (268513.537, 269767.483, 270803.991), stdev = 863.225
[info]   CI (99.9%): [266443.512, 273091.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2188.245 ±(99.9%) 45.970 MB/sec [Average]
[info]   (min, avg, max) = (2174.763, 2188.245, 2201.727), stdev = 11.938
[info]   CI (99.9%): [2142.275, 2234.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12765.694 ±(99.9%) 250.638 B/op [Average]
[info]   (min, avg, max) = (12695.011, 12765.694, 12853.246), stdev = 65.090
[info]   CI (99.9%): [12515.056, 13016.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2145.227 ±(99.9%) 1161.208 MB/sec [Average]
[info]   (min, avg, max) = (2009.056, 2145.227, 2684.668), stdev = 301.562
[info]   CI (99.9%): [984.019, 3306.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12515.336 ±(99.9%) 6797.397 B/op [Average]
[info]   (min, avg, max) = (11694.718, 12515.336, 15672.561), stdev = 1765.262
[info]   CI (99.9%): [5717.938, 19312.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.987 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.497), stdev = 1.555
[info]   CI (99.9%): [≈ 0, 6.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.181 ±(99.9%) 34.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.181, 20.417), stdev = 9.077
[info]   CI (99.9%): [≈ 0, 39.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 553914.965 ops/s
[info] # Warmup Iteration   2: 1479444.546 ops/s
[info] # Warmup Iteration   3: 1499602.561 ops/s
[info] # Warmup Iteration   4: 1491539.644 ops/s
[info] # Warmup Iteration   5: 1503623.635 ops/s
[info] Iteration   1: 1497593.780 ops/s
[info]                  ·gc.alloc.rate:               896.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 702.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1459526.676 ops/s
[info]                  ·gc.alloc.rate:                   885.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              953.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1437.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1451032.228 ops/s
[info]                  ·gc.alloc.rate:               876.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          949.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 725.429 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1504080.323 ops/s
[info]                  ·gc.alloc.rate:               895.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 700.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1498701.318 ops/s
[info]                  ·gc.alloc.rate:                   903.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              948.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     703.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1482186.865 ±(99.9%) 95754.902 ops/s [Average]
[info]   (min, avg, max) = (1451032.228, 1482186.865, 1504080.323), stdev = 24867.244
[info]   CI (99.9%): [1386431.964, 1577941.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   891.108 ±(99.9%) 40.945 MB/sec [Average]
[info]   (min, avg, max) = (876.014, 891.108, 903.153), stdev = 10.633
[info]   CI (99.9%): [850.163, 932.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   945.995 ±(99.9%) 25.867 B/op [Average]
[info]   (min, avg, max) = (936.603, 945.995, 953.369), stdev = 6.718
[info]   CI (99.9%): [920.128, 971.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.081 ±(99.9%) 1145.333 MB/sec [Average]
[info]   (min, avg, max) = (668.190, 802.081, 1334.156), stdev = 297.439
[info]   CI (99.9%): [≈ 0, 1947.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   853.666 ±(99.9%) 1256.678 B/op [Average]
[info]   (min, avg, max) = (700.541, 853.666, 1437.181), stdev = 326.355
[info]   CI (99.9%): [≈ 0, 2110.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.090), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1614257.765 ops/s
[info] # Warmup Iteration   2: 2817491.177 ops/s
[info] # Warmup Iteration   3: 2839900.343 ops/s
[info] # Warmup Iteration   4: 2853135.518 ops/s
[info] # Warmup Iteration   5: 2843615.075 ops/s
[info] Iteration   1: 2791006.143 ops/s
[info]                  ·gc.alloc.rate:               970.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 378.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2838233.218 ops/s
[info]                  ·gc.alloc.rate:                   998.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2848918.014 ops/s
[info]                  ·gc.alloc.rate:                   985.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2851810.905 ops/s
[info]                  ·gc.alloc.rate:               996.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2845173.719 ops/s
[info]                  ·gc.alloc.rate:                   1009.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2835028.400 ±(99.9%) 96760.240 ops/s [Average]
[info]   (min, avg, max) = (2791006.143, 2835028.400, 2851810.905), stdev = 25128.327
[info]   CI (99.9%): [2738268.160, 2931788.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   991.989 ±(99.9%) 56.497 MB/sec [Average]
[info]   (min, avg, max) = (970.551, 991.989, 1009.329), stdev = 14.672
[info]   CI (99.9%): [935.492, 1048.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   550.674 ±(99.9%) 21.022 B/op [Average]
[info]   (min, avg, max) = (544.430, 550.674, 558.329), stdev = 5.459
[info]   CI (99.9%): [529.652, 571.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.028 ±(99.9%) 1418.733 MB/sec [Average]
[info]   (min, avg, max) = (671.579, 941.028, 1345.596), stdev = 368.440
[info]   CI (99.9%): [≈ 0, 2359.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   522.069 ±(99.9%) 782.715 B/op [Average]
[info]   (min, avg, max) = (370.947, 522.069, 745.085), stdev = 203.269
[info]   CI (99.9%): [≈ 0, 1304.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1762664.785 ops/s
[info] # Warmup Iteration   2: 3111298.756 ops/s
[info] # Warmup Iteration   3: 3178335.239 ops/s
[info] # Warmup Iteration   4: 3181832.421 ops/s
[info] # Warmup Iteration   5: 3179160.790 ops/s
[info] Iteration   1: 3177587.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3162788.009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3177823.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3179662.825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3186627.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3176897.820 ±(99.9%) 33498.581 ops/s [Average]
[info]   (min, avg, max) = (3162788.009, 3176897.820, 3186627.075), stdev = 8699.475
[info]   CI (99.9%): [3143399.239, 3210396.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91323.473 ops/s
[info] # Warmup Iteration   2: 364764.317 ops/s
[info] # Warmup Iteration   3: 394503.460 ops/s
[info] # Warmup Iteration   4: 392771.643 ops/s
[info] # Warmup Iteration   5: 397248.467 ops/s
[info] Iteration   1: 389768.543 ops/s
[info]                  ·gc.alloc.rate:                   2490.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              10055.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8083.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 398893.866 ops/s
[info]                  ·gc.alloc.rate:                   2557.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              10090.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10525.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 395464.917 ops/s
[info]                  ·gc.alloc.rate:               2566.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          10215.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2672.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10633.639 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 400688.912 ops/s
[info]                  ·gc.alloc.rate:                   2572.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              10101.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7889.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 397356.808 ops/s
[info]                  ·gc.alloc.rate:                   2579.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              10216.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10643.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   396434.609 ±(99.9%) 16151.401 ops/s [Average]
[info]   (min, avg, max) = (389768.543, 396434.609, 400688.912), stdev = 4194.468
[info]   CI (99.9%): [380283.208, 412586.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2553.483 ±(99.9%) 139.549 MB/sec [Average]
[info]   (min, avg, max) = (2490.354, 2553.483, 2579.900), stdev = 36.240
[info]   CI (99.9%): [2413.934, 2693.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10135.860 ±(99.9%) 289.148 B/op [Average]
[info]   (min, avg, max) = (10055.191, 10135.860, 10216.674), stdev = 75.091
[info]   CI (99.9%): [9846.712, 10425.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2407.760 ±(99.9%) 1413.570 MB/sec [Average]
[info]   (min, avg, max) = (2001.935, 2407.760, 2687.732), stdev = 367.100
[info]   CI (99.9%): [994.190, 3821.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9555.103 ±(99.9%) 5522.955 B/op [Average]
[info]   (min, avg, max) = (7889.922, 9555.103, 10643.700), stdev = 1434.294
[info]   CI (99.9%): [4032.148, 15078.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.166 ±(99.9%) 0.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.166, 0.420), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7744.852 ops/s
[info] # Warmup Iteration   2: 21763.000 ops/s
[info] # Warmup Iteration   3: 26049.061 ops/s
[info] # Warmup Iteration   4: 25033.146 ops/s
[info] # Warmup Iteration   5: 25770.279 ops/s
[info] Iteration   1: 25981.924 ops/s
[info]                  ·gc.alloc.rate:               1679.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          101693.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122144.214 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 26157.918 ops/s
[info]                  ·gc.alloc.rate:                   1672.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              100603.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80901.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 25650.060 ops/s
[info]                  ·gc.alloc.rate:                   1651.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              101327.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82421.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26184.555 ops/s
[info]                  ·gc.alloc.rate:                   1667.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              100199.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120877.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 26140.614 ops/s
[info]                  ·gc.alloc.rate:                   1659.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              99926.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80610.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26023.014 ±(99.9%) 858.675 ops/s [Average]
[info]   (min, avg, max) = (25650.060, 26023.014, 26184.555), stdev = 222.995
[info]   CI (99.9%): [25164.340, 26881.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1665.934 ±(99.9%) 42.006 MB/sec [Average]
[info]   (min, avg, max) = (1651.299, 1665.934, 1679.479), stdev = 10.909
[info]   CI (99.9%): [1623.929, 1707.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   100750.069 ±(99.9%) 2873.029 B/op [Average]
[info]   (min, avg, max) = (99926.152, 100750.069, 101693.514), stdev = 746.117
[info]   CI (99.9%): [97877.040, 103623.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611.021 ±(99.9%) 1417.382 MB/sec [Average]
[info]   (min, avg, max) = (1338.844, 1611.021, 2017.224), stdev = 368.090
[info]   CI (99.9%): [193.639, 3028.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97391.073 ±(99.9%) 84842.680 B/op [Average]
[info]   (min, avg, max) = (80610.333, 97391.073, 122144.214), stdev = 22033.375
[info]   CI (99.9%): [12548.393, 182233.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.560), stdev = 1.082
[info]   CI (99.9%): [≈ 0, 4.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45.566 ±(99.9%) 251.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.566, 154.058), stdev = 65.184
[info]   CI (99.9%): [≈ 0, 296.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.846 ops/s
[info] # Warmup Iteration   2: 88457.493 ops/s
[info] # Warmup Iteration   3: 99847.355 ops/s
[info] # Warmup Iteration   4: 100792.318 ops/s
[info] # Warmup Iteration   5: 100359.435 ops/s
[info] Iteration   1: 100926.508 ops/s
[info]                  ·gc.alloc.rate:                   981.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              15298.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20796.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 99909.384 ops/s
[info]                  ·gc.alloc.rate:               963.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          15165.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10508.635 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 99898.674 ops/s
[info]                  ·gc.alloc.rate:                   974.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              15356.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21030.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 100942.695 ops/s
[info]                  ·gc.alloc.rate:                   966.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              15068.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10412.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 100492.584 ops/s
[info]                  ·gc.alloc.rate:                   987.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              15468.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20928.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   100433.969 ±(99.9%) 1988.367 ops/s [Average]
[info]   (min, avg, max) = (99898.674, 100433.969, 100942.695), stdev = 516.373
[info]   CI (99.9%): [98445.602, 102422.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   974.636 ±(99.9%) 39.237 MB/sec [Average]
[info]   (min, avg, max) = (963.004, 974.636, 987.758), stdev = 10.190
[info]   CI (99.9%): [935.399, 1013.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15271.784 ±(99.9%) 606.551 B/op [Average]
[info]   (min, avg, max) = (15068.856, 15271.784, 15468.879), stdev = 157.519
[info]   CI (99.9%): [14665.233, 15878.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1068.024 ±(99.9%) 1407.727 MB/sec [Average]
[info]   (min, avg, max) = (667.287, 1068.024, 1336.356), stdev = 365.582
[info]   CI (99.9%): [≈ 0, 2475.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16735.193 ±(99.9%) 22059.569 B/op [Average]
[info]   (min, avg, max) = (10412.122, 16735.193, 21030.708), stdev = 5728.800
[info]   CI (99.9%): [≈ 0, 38794.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.048), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.326 ±(99.9%) 1.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.326, 0.755), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22311.004 ops/s
[info] # Warmup Iteration   2: 64160.751 ops/s
[info] # Warmup Iteration   3: 66015.625 ops/s
[info] # Warmup Iteration   4: 67727.383 ops/s
[info] # Warmup Iteration   5: 67411.048 ops/s
[info] Iteration   1: 69045.242 ops/s
[info]                  ·gc.alloc.rate:                   1225.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              27944.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15184.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 68951.533 ops/s
[info]                  ·gc.alloc.rate:               1238.894 MB/sec
[info]                  ·gc.alloc.rate.norm:          28276.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30379.404 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 68984.213 ops/s
[info]                  ·gc.alloc.rate:                   1247.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              28456.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30380.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 68553.743 ops/s
[info]                  ·gc.alloc.rate:               1238.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          28429.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30601.627 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 68584.825 ops/s
[info]                  ·gc.alloc.rate:               1240.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          28466.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30647.156 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   68823.911 ±(99.9%) 905.360 ops/s [Average]
[info]   (min, avg, max) = (68553.743, 68823.911, 69045.242), stdev = 235.119
[info]   CI (99.9%): [67918.551, 69729.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1238.236 ±(99.9%) 30.020 MB/sec [Average]
[info]   (min, avg, max) = (1225.908, 1238.236, 1247.477), stdev = 7.796
[info]   CI (99.9%): [1208.216, 1268.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28314.724 ±(99.9%) 849.220 B/op [Average]
[info]   (min, avg, max) = (27944.971, 28314.724, 28466.650), stdev = 220.540
[info]   CI (99.9%): [27465.504, 29163.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.505 ±(99.9%) 1148.191 MB/sec [Average]
[info]   (min, avg, max) = (666.111, 1199.505, 1335.558), stdev = 298.181
[info]   CI (99.9%): [51.315, 2347.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27438.582 ±(99.9%) 26382.730 B/op [Average]
[info]   (min, avg, max) = (15184.210, 27438.582, 30647.156), stdev = 6851.511
[info]   CI (99.9%): [1055.852, 53821.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 1.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.475), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50267.955 ops/s
[info] # Warmup Iteration   2: 132248.408 ops/s
[info] # Warmup Iteration   3: 131245.134 ops/s
[info] # Warmup Iteration   4: 134899.525 ops/s
[info] # Warmup Iteration   5: 135659.466 ops/s
[info] Iteration   1: 135767.265 ops/s
[info]                  ·gc.alloc.rate:               936.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          10858.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7783.588 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 135325.485 ops/s
[info]                  ·gc.alloc.rate:                   949.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              11037.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15622.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 135696.585 ops/s
[info]                  ·gc.alloc.rate:               927.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          10757.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7791.810 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 134454.560 ops/s
[info]                  ·gc.alloc.rate:                   924.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              10822.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7867.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 135289.937 ops/s
[info]                  ·gc.alloc.rate:                   943.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              10971.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15645.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   135306.767 ±(99.9%) 2010.931 ops/s [Average]
[info]   (min, avg, max) = (134454.560, 135306.767, 135767.265), stdev = 522.232
[info]   CI (99.9%): [133295.836, 137317.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   936.220 ±(99.9%) 39.649 MB/sec [Average]
[info]   (min, avg, max) = (924.653, 936.220, 949.089), stdev = 10.297
[info]   CI (99.9%): [896.570, 975.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10889.705 ±(99.9%) 437.648 B/op [Average]
[info]   (min, avg, max) = (10757.550, 10889.705, 11037.957), stdev = 113.656
[info]   CI (99.9%): [10452.057, 11327.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.724 ±(99.9%) 1417.895 MB/sec [Average]
[info]   (min, avg, max) = (671.440, 940.724, 1344.929), stdev = 368.223
[info]   CI (99.9%): [≈ 0, 2358.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10942.202 ±(99.9%) 16492.634 B/op [Average]
[info]   (min, avg, max) = (7783.588, 10942.202, 15645.762), stdev = 4283.085
[info]   CI (99.9%): [≈ 0, 27434.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.194 ±(99.9%) 0.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.194, 0.484), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:32:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4393.059 ops/s
[info] # Warmup Iteration   2: 32793.905 ops/s
[info] # Warmup Iteration   3: 35769.534 ops/s
[info] # Warmup Iteration   4: 36703.286 ops/s
[info] # Warmup Iteration   5: 36915.482 ops/s
[info] Iteration   1: 37333.699 ops/s
[info]                  ·gc.alloc.rate:                   1855.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              78203.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84636.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.878 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 37184.264 ops/s
[info]                  ·gc.alloc.rate:                   1846.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              78127.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56700.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 37087.708 ops/s
[info]                  ·gc.alloc.rate:                   1866.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              79213.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84943.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37667.000 ops/s
[info]                  ·gc.alloc.rate:               1881.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          78621.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83584.364 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 37497.604 ops/s
[info]                  ·gc.alloc.rate:               1900.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          79766.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83988.969 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   37354.055 ±(99.9%) 900.435 ops/s [Average]
[info]   (min, avg, max) = (37087.708, 37354.055, 37667.000), stdev = 233.840
[info]   CI (99.9%): [36453.620, 38254.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1870.171 ±(99.9%) 82.797 MB/sec [Average]
[info]   (min, avg, max) = (1846.289, 1870.171, 1900.498), stdev = 21.502
[info]   CI (99.9%): [1787.373, 1952.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78786.521 ±(99.9%) 2684.240 B/op [Average]
[info]   (min, avg, max) = (78127.752, 78786.521, 79766.505), stdev = 697.089
[info]   CI (99.9%): [76102.281, 81470.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1870.308 ±(99.9%) 1141.751 MB/sec [Average]
[info]   (min, avg, max) = (1339.924, 1870.308, 2008.074), stdev = 296.509
[info]   CI (99.9%): [728.557, 3012.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78770.675 ±(99.9%) 47552.291 B/op [Average]
[info]   (min, avg, max) = (56700.359, 78770.675, 84943.278), stdev = 12349.179
[info]   CI (99.9%): [31218.384, 126322.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.373), stdev = 1.944
[info]   CI (99.9%): [≈ 0, 8.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.888 ±(99.9%) 316.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.888, 185.030), stdev = 82.268
[info]   CI (99.9%): [≈ 0, 354.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13017.546 ops/s
[info] # Warmup Iteration   2: 31476.805 ops/s
[info] # Warmup Iteration   3: 32321.209 ops/s
[info] # Warmup Iteration   4: 32229.498 ops/s
[info] # Warmup Iteration   5: 32165.462 ops/s
[info] Iteration   1: 32610.640 ops/s
[info]                  ·gc.alloc.rate:      520.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32563.408 ops/s
[info]                  ·gc.alloc.rate:               533.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          25784.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32325.298 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 32398.799 ops/s
[info]                  ·gc.alloc.rate:               535.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          26015.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32488.900 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 32417.308 ops/s
[info]                  ·gc.alloc.rate:                   539.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              26177.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32503.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32338.618 ops/s
[info]                  ·gc.alloc.rate:      520.859 MB/sec
[info]                  ·gc.alloc.rate.norm: 25348.444 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32465.755 ±(99.9%) 445.420 ops/s [Average]
[info]   (min, avg, max) = (32338.618, 32465.755, 32610.640), stdev = 115.674
[info]   CI (99.9%): [32020.335, 32911.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   529.851 ±(99.9%) 33.768 MB/sec [Average]
[info]   (min, avg, max) = (520.159, 529.851, 539.174), stdev = 8.770
[info]   CI (99.9%): [496.083, 563.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25685.877 ±(99.9%) 1735.199 B/op [Average]
[info]   (min, avg, max) = (25104.013, 25685.877, 26177.300), stdev = 450.626
[info]   CI (99.9%): [23950.677, 27421.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   401.428 ±(99.9%) 1411.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.428, 669.469), stdev = 366.452
[info]   CI (99.9%): [≈ 0, 1812.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19463.480 ±(99.9%) 68417.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19463.480, 32503.204), stdev = 17767.783
[info]   CI (99.9%): [≈ 0, 87880.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.404 ±(99.9%) 3.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 2.021), stdev = 0.904
[info]   CI (99.9%): [≈ 0, 3.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12816.021 ops/s
[info] # Warmup Iteration   2: 32273.400 ops/s
[info] # Warmup Iteration   3: 31737.213 ops/s
[info] # Warmup Iteration   4: 32292.360 ops/s
[info] # Warmup Iteration   5: 32628.317 ops/s
[info] Iteration   1: 32732.732 ops/s
[info]                  ·gc.alloc.rate:      399.602 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32674.695 ops/s
[info]                  ·gc.alloc.rate:               417.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          20126.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24642.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 32692.991 ops/s
[info]                  ·gc.alloc.rate:               417.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          20116.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32131.660 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 32792.452 ops/s
[info]                  ·gc.alloc.rate:      400.220 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32736.276 ops/s
[info]                  ·gc.alloc.rate:                   418.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              20123.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32089.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32725.829 ±(99.9%) 175.283 ops/s [Average]
[info]   (min, avg, max) = (32674.695, 32725.829, 32792.452), stdev = 45.520
[info]   CI (99.9%): [32550.546, 32901.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   410.863 ±(99.9%) 38.530 MB/sec [Average]
[info]   (min, avg, max) = (399.602, 410.863, 418.702), stdev = 10.006
[info]   CI (99.9%): [372.334, 449.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19756.509 ±(99.9%) 1928.077 B/op [Average]
[info]   (min, avg, max) = (19208.014, 19756.509, 20126.193), stdev = 500.715
[info]   CI (99.9%): [17828.433, 21684.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.367 ±(99.9%) 1321.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.367, 667.677), stdev = 343.142
[info]   CI (99.9%): [≈ 0, 1690.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17772.660 ±(99.9%) 63567.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17772.660, 32131.660), stdev = 16508.156
[info]   CI (99.9%): [≈ 0, 81339.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.400 ±(99.9%) 3.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.002), stdev = 0.895
[info]   CI (99.9%): [≈ 0, 3.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17855.736 ops/s
[info] # Warmup Iteration   2: 34056.991 ops/s
[info] # Warmup Iteration   3: 33280.716 ops/s
[info] # Warmup Iteration   4: 34394.347 ops/s
[info] # Warmup Iteration   5: 34061.913 ops/s
[info] Iteration   1: 34305.925 ops/s
[info]                  ·gc.alloc.rate:               425.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          19495.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23470.793 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 34767.159 ops/s
[info]                  ·gc.alloc.rate:      417.475 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34619.120 ops/s
[info]                  ·gc.alloc.rate:               432.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          19640.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30464.606 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34760.124 ops/s
[info]                  ·gc.alloc.rate:      417.617 MB/sec
[info]                  ·gc.alloc.rate.norm: 18901.193 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34653.319 ops/s
[info]                  ·gc.alloc.rate:               432.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          19658.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30436.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   34621.129 ±(99.9%) 723.055 ops/s [Average]
[info]   (min, avg, max) = (34305.925, 34621.129, 34767.159), stdev = 187.775
[info]   CI (99.9%): [33898.074, 35344.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   425.029 ±(99.9%) 28.783 MB/sec [Average]
[info]   (min, avg, max) = (417.475, 425.029, 432.915), stdev = 7.475
[info]   CI (99.9%): [396.246, 453.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19318.359 ±(99.9%) 1495.625 B/op [Average]
[info]   (min, avg, max) = (18896.013, 19318.359, 19658.823), stdev = 388.409
[info]   CI (99.9%): [17822.734, 20813.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.437 ±(99.9%) 1325.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.437, 670.255), stdev = 344.291
[info]   CI (99.9%): [≈ 0, 1696.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16874.375 ±(99.9%) 60322.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16874.375, 30464.606), stdev = 15665.462
[info]   CI (99.9%): [≈ 0, 77196.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18017.627 ops/s
[info] # Warmup Iteration   2: 33417.084 ops/s
[info] # Warmup Iteration   3: 34454.486 ops/s
[info] # Warmup Iteration   4: 34112.002 ops/s
[info] # Warmup Iteration   5: 34626.974 ops/s
[info] Iteration   1: 34501.711 ops/s
[info]                  ·gc.alloc.rate:                   391.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              17864.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23337.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33498.197 ops/s
[info]                  ·gc.alloc.rate:               393.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          18464.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24036.844 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 34655.844 ops/s
[info]                  ·gc.alloc.rate:      376.624 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34496.521 ops/s
[info]                  ·gc.alloc.rate:               394.131 MB/sec
[info]                  ·gc.alloc.rate.norm:          17977.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30589.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34627.749 ops/s
[info]                  ·gc.alloc.rate:      376.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   34356.004 ±(99.9%) 1867.222 ops/s [Average]
[info]   (min, avg, max) = (33498.197, 34356.004, 34655.844), stdev = 484.912
[info]   CI (99.9%): [32488.782, 36223.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   386.337 ±(99.9%) 35.197 MB/sec [Average]
[info]   (min, avg, max) = (376.124, 386.337, 394.131), stdev = 9.141
[info]   CI (99.9%): [351.140, 421.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17699.782 ±(99.9%) 2293.205 B/op [Average]
[info]   (min, avg, max) = (17096.012, 17699.782, 18464.925), stdev = 595.538
[info]   CI (99.9%): [15406.577, 19992.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   338.812 ±(99.9%) 1216.899 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.812, 670.644), stdev = 316.025
[info]   CI (99.9%): [≈ 0, 1555.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   15592.723 ±(99.9%) 55882.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15592.723, 30589.292), stdev = 14512.473
[info]   CI (99.9%): [≈ 0, 71475.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.380 ±(99.9%) 3.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.899), stdev = 0.849
[info]   CI (99.9%): [≈ 0, 3.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2032.014 ops/s
[info] # Warmup Iteration   2: 13410.571 ops/s
[info] # Warmup Iteration   3: 15162.386 ops/s
[info] # Warmup Iteration   4: 15072.657 ops/s
[info] # Warmup Iteration   5: 15156.243 ops/s
[info] Iteration   1: 15376.700 ops/s
[info]                  ·gc.alloc.rate:               1149.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          117650.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137310.277 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 15101.952 ops/s
[info]                  ·gc.alloc.rate:               1099.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          114571.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69905.067 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 14817.904 ops/s
[info]                  ·gc.alloc.rate:                   1104.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              117305.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142630.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 15260.098 ops/s
[info]                  ·gc.alloc.rate:                   1131.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              116698.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138500.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 15608.374 ops/s
[info]                  ·gc.alloc.rate:                   1129.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              113842.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67735.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15233.006 ±(99.9%) 1141.910 ops/s [Average]
[info]   (min, avg, max) = (14817.904, 15233.006, 15608.374), stdev = 296.550
[info]   CI (99.9%): [14091.096, 16374.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1122.792 ±(99.9%) 79.653 MB/sec [Average]
[info]   (min, avg, max) = (1099.428, 1122.792, 1149.522), stdev = 20.686
[info]   CI (99.9%): [1043.139, 1202.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   116013.674 ±(99.9%) 6560.998 B/op [Average]
[info]   (min, avg, max) = (113842.538, 116013.674, 117650.874), stdev = 1703.870
[info]   CI (99.9%): [109452.676, 122574.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1073.999 ±(99.9%) 1415.570 MB/sec [Average]
[info]   (min, avg, max) = (670.811, 1073.999, 1342.901), stdev = 367.619
[info]   CI (99.9%): [≈ 0, 2489.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   111216.381 ±(99.9%) 149251.046 B/op [Average]
[info]   (min, avg, max) = (67735.645, 111216.381, 142630.674), stdev = 38760.023
[info]   CI (99.9%): [≈ 0, 260467.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.331), stdev = 1.483
[info]   CI (99.9%): [≈ 0, 6.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.478 ±(99.9%) 575.524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.478, 335.824), stdev = 149.462
[info]   CI (99.9%): [≈ 0, 644.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2322.178 ops/s
[info] # Warmup Iteration   2: 14126.544 ops/s
[info] # Warmup Iteration   3: 15429.472 ops/s
[info] # Warmup Iteration   4: 15907.123 ops/s
[info] # Warmup Iteration   5: 15888.668 ops/s
[info] Iteration   1: 15584.950 ops/s
[info]                  ·gc.alloc.rate:               1022.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          103219.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134872.651 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 15956.096 ops/s
[info]                  ·gc.alloc.rate:               1028.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          101438.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65901.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 15669.892 ops/s
[info]                  ·gc.alloc.rate:                   1049.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              105365.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134274.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 16006.072 ops/s
[info]                  ·gc.alloc.rate:               1035.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          101794.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65761.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15934.903 ops/s
[info]                  ·gc.alloc.rate:                   1035.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              102300.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132248.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15830.382 ±(99.9%) 729.566 ops/s [Average]
[info]   (min, avg, max) = (15584.950, 15830.382, 16006.072), stdev = 189.466
[info]   CI (99.9%): [15100.816, 16559.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1034.230 ±(99.9%) 39.338 MB/sec [Average]
[info]   (min, avg, max) = (1022.132, 1034.230, 1049.494), stdev = 10.216
[info]   CI (99.9%): [994.892, 1073.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   102823.848 ±(99.9%) 6047.924 B/op [Average]
[info]   (min, avg, max) = (101438.963, 102823.848, 105365.631), stdev = 1570.627
[info]   CI (99.9%): [96775.924, 108871.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.794 ±(99.9%) 1410.632 MB/sec [Average]
[info]   (min, avg, max) = (668.094, 1069.794, 1338.951), stdev = 366.337
[info]   CI (99.9%): [≈ 0, 2480.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   106611.674 ±(99.9%) 143397.753 B/op [Average]
[info]   (min, avg, max) = (65761.153, 106611.674, 134872.651), stdev = 37239.941
[info]   CI (99.9%): [≈ 0, 250009.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.829 ±(99.9%) 4.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 2.091), stdev = 1.136
[info]   CI (99.9%): [≈ 0, 5.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46950.648 ops/s
[info] # Warmup Iteration   2: 101977.245 ops/s
[info] # Warmup Iteration   3: 107183.834 ops/s
[info] # Warmup Iteration   4: 105051.496 ops/s
[info] # Warmup Iteration   5: 108945.977 ops/s
[info] Iteration   1: 108593.633 ops/s
[info]                  ·gc.alloc.rate:                   295.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              4279.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7414.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.905 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 108014.046 ops/s
[info]                  ·gc.alloc.rate:               300.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          4377.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7454.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 108908.330 ops/s
[info]                  ·gc.alloc.rate:      283.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 4097.899 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 108482.474 ops/s
[info]                  ·gc.alloc.rate:               294.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          4266.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7422.521 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 108775.914 ops/s
[info]                  ·gc.alloc.rate:      283.099 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   108554.879 ±(99.9%) 1324.180 ops/s [Average]
[info]   (min, avg, max) = (108014.046, 108554.879, 108908.330), stdev = 343.885
[info]   CI (99.9%): [107230.699, 109879.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   291.299 ±(99.9%) 29.476 MB/sec [Average]
[info]   (min, avg, max) = (283.099, 291.299, 300.473), stdev = 7.655
[info]   CI (99.9%): [261.823, 320.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4223.367 ±(99.9%) 474.570 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4223.367, 4377.887), stdev = 123.244
[info]   CI (99.9%): [3748.796, 4697.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.995 ±(99.9%) 1079.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.995, 511.683), stdev = 280.246
[info]   CI (99.9%): [≈ 0, 1386.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4458.454 ±(99.9%) 15672.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4458.454, 7454.815), stdev = 4070.021
[info]   CI (99.9%): [≈ 0, 20130.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.181 ±(99.9%) 1.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.905), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 1.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1673.905 ops/s
[info] # Warmup Iteration   2: 10328.878 ops/s
[info] # Warmup Iteration   3: 13629.032 ops/s
[info] # Warmup Iteration   4: 13601.151 ops/s
[info] # Warmup Iteration   5: 13609.559 ops/s
[info] Iteration   1: 13789.147 ops/s
[info]                  ·gc.alloc.rate:               1365.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          155890.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152587.879 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 13992.947 ops/s
[info]                  ·gc.alloc.rate:                   1382.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              155514.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150438.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13994.287 ops/s
[info]                  ·gc.alloc.rate:               1394.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          156782.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 150577.821 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 13901.172 ops/s
[info]                  ·gc.alloc.rate:                   1384.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              156739.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151660.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 471.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13844.774 ops/s
[info]                  ·gc.alloc.rate:                   1365.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              155279.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151906.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13904.465 ±(99.9%) 348.527 ops/s [Average]
[info]   (min, avg, max) = (13789.147, 13904.465, 13994.287), stdev = 90.511
[info]   CI (99.9%): [13555.938, 14252.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1378.552 ±(99.9%) 47.661 MB/sec [Average]
[info]   (min, avg, max) = (1365.777, 1378.552, 1394.021), stdev = 12.377
[info]   CI (99.9%): [1330.891, 1426.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   156041.191 ±(99.9%) 2665.860 B/op [Average]
[info]   (min, avg, max) = (155279.032, 156041.191, 156782.332), stdev = 692.315
[info]   CI (99.9%): [153375.331, 158707.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1337.800 ±(99.9%) 5.233 MB/sec [Average]
[info]   (min, avg, max) = (1336.251, 1337.800, 1339.501), stdev = 1.359
[info]   CI (99.9%): [1332.567, 1343.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   151434.186 ±(99.9%) 3512.929 B/op [Average]
[info]   (min, avg, max) = (150438.740, 151434.186, 152587.879), stdev = 912.297
[info]   CI (99.9%): [147921.256, 154947.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 7.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 4.163), stdev = 1.820
[info]   CI (99.9%): [≈ 0, 7.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   104.193 ±(99.9%) 793.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.193, 471.346), stdev = 206.004
[info]   CI (99.9%): [≈ 0, 897.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17882.038 ops/s
[info] # Warmup Iteration   2: 43223.507 ops/s
[info] # Warmup Iteration   3: 43678.007 ops/s
[info] # Warmup Iteration   4: 45081.899 ops/s
[info] # Warmup Iteration   5: 44245.733 ops/s
[info] Iteration   1: 45244.300 ops/s
[info]                  ·gc.alloc.rate:                   1158.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              40310.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46630.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 45292.692 ops/s
[info]                  ·gc.alloc.rate:                   1153.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              40068.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46606.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45474.053 ops/s
[info]                  ·gc.alloc.rate:               1139.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          39445.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23217.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45306.576 ops/s
[info]                  ·gc.alloc.rate:                   1161.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              40353.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46649.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45274.606 ops/s
[info]                  ·gc.alloc.rate:                   1147.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              39898.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46682.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   45318.446 ±(99.9%) 346.757 ops/s [Average]
[info]   (min, avg, max) = (45244.300, 45318.446, 45474.053), stdev = 90.052
[info]   CI (99.9%): [44971.689, 45665.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1152.248 ±(99.9%) 34.021 MB/sec [Average]
[info]   (min, avg, max) = (1139.759, 1152.248, 1161.824), stdev = 8.835
[info]   CI (99.9%): [1118.226, 1186.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40015.088 ±(99.9%) 1419.081 B/op [Average]
[info]   (min, avg, max) = (39445.113, 40015.088, 40353.409), stdev = 368.531
[info]   CI (99.9%): [38596.007, 41434.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.722 ±(99.9%) 1155.654 MB/sec [Average]
[info]   (min, avg, max) = (670.855, 1207.722, 1343.100), stdev = 300.120
[info]   CI (99.9%): [52.068, 2363.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41957.210 ±(99.9%) 40339.532 B/op [Average]
[info]   (min, avg, max) = (23217.151, 41957.210, 46682.623), stdev = 10476.048
[info]   CI (99.9%): [1617.677, 82296.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.622), stdev = 1.608
[info]   CI (99.9%): [≈ 0, 6.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25.906 ±(99.9%) 215.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.906, 125.911), stdev = 55.908
[info]   CI (99.9%): [≈ 0, 241.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16209.670 ops/s
[info] # Warmup Iteration   2: 63064.606 ops/s
[info] # Warmup Iteration   3: 62794.851 ops/s
[info] # Warmup Iteration   4: 62870.535 ops/s
[info] # Warmup Iteration   5: 63527.618 ops/s
[info] Iteration   1: 64590.896 ops/s
[info]                  ·gc.alloc.rate:                   1139.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              27768.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32560.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 64853.323 ops/s
[info]                  ·gc.alloc.rate:               1144.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          27772.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16222.342 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 64485.502 ops/s
[info]                  ·gc.alloc.rate:               1133.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          27659.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32661.817 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 64570.791 ops/s
[info]                  ·gc.alloc.rate:                   1131.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              27569.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32651.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 64826.728 ops/s
[info]                  ·gc.alloc.rate:                   1121.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              27229.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16269.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   64665.448 ±(99.9%) 633.331 ops/s [Average]
[info]   (min, avg, max) = (64485.502, 64665.448, 64853.323), stdev = 164.474
[info]   CI (99.9%): [64032.117, 65298.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1134.035 ±(99.9%) 33.596 MB/sec [Average]
[info]   (min, avg, max) = (1121.591, 1134.035, 1144.418), stdev = 8.725
[info]   CI (99.9%): [1100.438, 1167.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27600.010 ±(99.9%) 860.384 B/op [Average]
[info]   (min, avg, max) = (27229.874, 27600.010, 27772.724), stdev = 223.439
[info]   CI (99.9%): [26739.626, 28460.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.579 ±(99.9%) 1410.588 MB/sec [Average]
[info]   (min, avg, max) = (668.467, 1070.579, 1339.603), stdev = 366.325
[info]   CI (99.9%): [≈ 0, 2481.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26073.006 ±(99.9%) 34544.814 B/op [Average]
[info]   (min, avg, max) = (16222.342, 26073.006, 32661.817), stdev = 8971.179
[info]   CI (99.9%): [≈ 0, 60617.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.707), stdev = 1.647
[info]   CI (99.9%): [≈ 0, 7.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.509 ±(99.9%) 153.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.509, 90.010), stdev = 39.976
[info]   CI (99.9%): [≈ 0, 172.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72266.691 ops/s
[info] # Warmup Iteration   2: 168782.373 ops/s
[info] # Warmup Iteration   3: 174951.721 ops/s
[info] # Warmup Iteration   4: 174060.422 ops/s
[info] # Warmup Iteration   5: 174502.426 ops/s
[info] Iteration   1: 174366.847 ops/s
[info]                  ·gc.alloc.rate:                   285.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              2580.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4617.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 174990.024 ops/s
[info]                  ·gc.alloc.rate:      277.566 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 174212.873 ops/s
[info]                  ·gc.alloc.rate:               293.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          2648.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4621.849 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 174072.674 ops/s
[info]                  ·gc.alloc.rate:                   291.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              2637.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4625.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 174918.074 ops/s
[info]                  ·gc.alloc.rate:      277.399 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   174512.099 ±(99.9%) 1607.334 ops/s [Average]
[info]   (min, avg, max) = (174072.674, 174512.099, 174990.024), stdev = 417.420
[info]   CI (99.9%): [172904.764, 176119.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   285.171 ±(99.9%) 29.050 MB/sec [Average]
[info]   (min, avg, max) = (277.399, 285.171, 293.317), stdev = 7.544
[info]   CI (99.9%): [256.121, 314.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2571.741 ±(99.9%) 284.298 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2571.741, 2648.754), stdev = 73.831
[info]   CI (99.9%): [2287.443, 2856.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.993 ±(99.9%) 1079.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.993, 511.814), stdev = 280.245
[info]   CI (99.9%): [≈ 0, 1386.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2773.042 ±(99.9%) 9747.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2773.042, 4625.672), stdev = 2531.431
[info]   CI (99.9%): [≈ 0, 12520.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.376), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99360.048 ops/s
[info] # Warmup Iteration   2: 173569.053 ops/s
[info] # Warmup Iteration   3: 185412.814 ops/s
[info] # Warmup Iteration   4: 185382.524 ops/s
[info] # Warmup Iteration   5: 185497.914 ops/s
[info] Iteration   1: 185383.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 185551.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 185569.731 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 185279.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185415.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   185439.944 ±(99.9%) 466.304 ops/s [Average]
[info]   (min, avg, max) = (185279.771, 185439.944, 185569.731), stdev = 121.098
[info]   CI (99.9%): [184973.640, 185906.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12054.958 ops/s
[info] # Warmup Iteration   2: 53757.568 ops/s
[info] # Warmup Iteration   3: 55145.109 ops/s
[info] # Warmup Iteration   4: 57921.308 ops/s
[info] # Warmup Iteration   5: 57053.582 ops/s
[info] Iteration   1: 57497.569 ops/s
[info]                  ·gc.alloc.rate:                   1125.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              30804.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36592.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 57946.292 ops/s
[info]                  ·gc.alloc.rate:                   1119.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              30387.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18164.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 57801.528 ops/s
[info]                  ·gc.alloc.rate:                   1119.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              30478.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36458.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 57990.447 ops/s
[info]                  ·gc.alloc.rate:               1106.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          30026.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18178.330 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 57647.735 ops/s
[info]                  ·gc.alloc.rate:                   1114.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              30410.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36580.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   57776.714 ±(99.9%) 792.924 ops/s [Average]
[info]   (min, avg, max) = (57497.569, 57776.714, 57990.447), stdev = 205.920
[info]   CI (99.9%): [56983.790, 58569.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1116.944 ±(99.9%) 26.782 MB/sec [Average]
[info]   (min, avg, max) = (1106.681, 1116.944, 1125.380), stdev = 6.955
[info]   CI (99.9%): [1090.162, 1143.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30421.434 ±(99.9%) 1067.455 B/op [Average]
[info]   (min, avg, max) = (30026.162, 30421.434, 30804.401), stdev = 277.215
[info]   CI (99.9%): [29353.980, 31488.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1071.023 ±(99.9%) 1411.565 MB/sec [Average]
[info]   (min, avg, max) = (668.915, 1071.023, 1340.382), stdev = 366.579
[info]   CI (99.9%): [≈ 0, 2482.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29194.994 ±(99.9%) 38749.102 B/op [Average]
[info]   (min, avg, max) = (18164.992, 29194.994, 36592.861), stdev = 10063.019
[info]   CI (99.9%): [≈ 0, 67944.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.790), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.027 ±(99.9%) 177.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.027, 103.432), stdev = 46.066
[info]   CI (99.9%): [≈ 0, 198.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19365.016 ops/s
[info] # Warmup Iteration   2: 86954.989 ops/s
[info] # Warmup Iteration   3: 94364.997 ops/s
[info] # Warmup Iteration   4: 95216.083 ops/s
[info] # Warmup Iteration   5: 95182.404 ops/s
[info] Iteration   1: 94203.936 ops/s
[info]                  ·gc.alloc.rate:                   2092.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              34965.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33615.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 93761.909 ops/s
[info]                  ·gc.alloc.rate:                   2070.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              34759.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33691.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96623.246 ops/s
[info]                  ·gc.alloc.rate:                   2130.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              34705.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32648.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 96860.620 ops/s
[info]                  ·gc.alloc.rate:               2162.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          35138.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32579.935 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 96914.567 ops/s
[info]                  ·gc.alloc.rate:               2165.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          35162.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32604.719 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   95672.856 ±(99.9%) 5985.651 ops/s [Average]
[info]   (min, avg, max) = (93761.909, 95672.856, 96914.567), stdev = 1554.455
[info]   CI (99.9%): [89687.204, 101658.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2124.406 ±(99.9%) 161.400 MB/sec [Average]
[info]   (min, avg, max) = (2070.763, 2124.406, 2165.206), stdev = 41.915
[info]   CI (99.9%): [1963.006, 2285.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34946.487 ±(99.9%) 809.505 B/op [Average]
[info]   (min, avg, max) = (34705.753, 34946.487, 35162.261), stdev = 210.226
[info]   CI (99.9%): [34136.983, 35755.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2007.267 ±(99.9%) 11.683 MB/sec [Average]
[info]   (min, avg, max) = (2004.382, 2007.267, 2012.093), stdev = 3.034
[info]   CI (99.9%): [1995.585, 2018.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33028.152 ±(99.9%) 2202.847 B/op [Average]
[info]   (min, avg, max) = (32579.935, 33028.152, 33691.210), stdev = 572.072
[info]   CI (99.9%): [30825.305, 35230.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.789), stdev = 1.663
[info]   CI (99.9%): [≈ 0, 7.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.623 ±(99.9%) 107.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.623, 63.298), stdev = 27.795
[info]   CI (99.9%): [≈ 0, 120.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31256.678 ops/s
[info] # Warmup Iteration   2: 122542.477 ops/s
[info] # Warmup Iteration   3: 124801.558 ops/s
[info] # Warmup Iteration   4: 126616.246 ops/s
[info] # Warmup Iteration   5: 126075.504 ops/s
[info] Iteration   1: 122350.304 ops/s
[info]                  ·gc.alloc.rate:               1762.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          22655.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25835.226 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 122372.894 ops/s
[info]                  ·gc.alloc.rate:                   1723.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              22170.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17237.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 125131.353 ops/s
[info]                  ·gc.alloc.rate:                   1774.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              22326.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25202.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 123213.177 ops/s
[info]                  ·gc.alloc.rate:               1737.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          22180.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17043.444 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 124172.347 ops/s
[info]                  ·gc.alloc.rate:                   1774.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              22488.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25362.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   123448.015 ±(99.9%) 4626.500 ops/s [Average]
[info]   (min, avg, max) = (122350.304, 123448.015, 125131.353), stdev = 1201.487
[info]   CI (99.9%): [118821.515, 128074.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1754.527 ±(99.9%) 88.646 MB/sec [Average]
[info]   (min, avg, max) = (1723.857, 1754.527, 1774.977), stdev = 23.021
[info]   CI (99.9%): [1665.881, 1843.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22364.393 ±(99.9%) 801.054 B/op [Average]
[info]   (min, avg, max) = (22170.620, 22364.393, 22655.709), stdev = 208.031
[info]   CI (99.9%): [21563.339, 23165.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.896 ±(99.9%) 1407.299 MB/sec [Average]
[info]   (min, avg, max) = (1334.801, 1737.896, 2009.391), stdev = 365.471
[info]   CI (99.9%): [330.597, 3145.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22136.281 ±(99.9%) 17585.016 B/op [Average]
[info]   (min, avg, max) = (17043.444, 22136.281, 25835.226), stdev = 4566.773
[info]   CI (99.9%): [4551.266, 39721.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.883 ±(99.9%) 7.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.883, 4.226), stdev = 1.870
[info]   CI (99.9%): [≈ 0, 8.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.342 ±(99.9%) 92.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.342, 54.351), stdev = 24.054
[info]   CI (99.9%): [≈ 0, 103.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78691.882 ops/s
[info] # Warmup Iteration   2: 158398.512 ops/s
[info] # Warmup Iteration   3: 160538.943 ops/s
[info] # Warmup Iteration   4: 159578.702 ops/s
[info] # Warmup Iteration   5: 162372.528 ops/s
[info] Iteration   1: 164913.460 ops/s
[info]                  ·gc.alloc.rate:               1543.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          14727.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12829.067 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 166497.079 ops/s
[info]                  ·gc.alloc.rate:                   1570.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              14842.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12713.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 166452.111 ops/s
[info]                  ·gc.alloc.rate:                   1583.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              14968.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19072.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.738 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 167094.776 ops/s
[info]                  ·gc.alloc.rate:               1575.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          14833.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12642.820 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 165087.710 ops/s
[info]                  ·gc.alloc.rate:               1544.583 MB/sec
[info]                  ·gc.alloc.rate.norm:          14725.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12790.068 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   166009.027 ±(99.9%) 3684.596 ops/s [Average]
[info]   (min, avg, max) = (164913.460, 166009.027, 167094.776), stdev = 956.878
[info]   CI (99.9%): [162324.431, 169693.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1563.348 ±(99.9%) 70.736 MB/sec [Average]
[info]   (min, avg, max) = (1543.128, 1563.348, 1583.096), stdev = 18.370
[info]   CI (99.9%): [1492.612, 1634.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14819.598 ±(99.9%) 386.093 B/op [Average]
[info]   (min, avg, max) = (14725.621, 14819.598, 14968.663), stdev = 100.267
[info]   CI (99.9%): [14433.505, 15205.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.170 ±(99.9%) 1160.109 MB/sec [Average]
[info]   (min, avg, max) = (1341.561, 1478.170, 2017.105), stdev = 301.277
[info]   CI (99.9%): [318.061, 2638.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14009.557 ±(99.9%) 10901.528 B/op [Average]
[info]   (min, avg, max) = (12642.820, 14009.557, 19072.348), stdev = 2831.092
[info]   CI (99.9%): [3108.030, 24911.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 5.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 3.039), stdev = 1.357
[info]   CI (99.9%): [≈ 0, 5.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.787 ±(99.9%) 49.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.787, 28.738), stdev = 12.830
[info]   CI (99.9%): [≈ 0, 55.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3703.634 ops/s
[info] # Warmup Iteration   2: 43463.056 ops/s
[info] # Warmup Iteration   3: 55731.503 ops/s
[info] # Warmup Iteration   4: 55816.383 ops/s
[info] # Warmup Iteration   5: 55395.098 ops/s
[info] Iteration   1: 56217.817 ops/s
[info]                  ·gc.alloc.rate:                   2987.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              83621.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75135.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.583 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 56080.142 ops/s
[info]                  ·gc.alloc.rate:                   3035.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              85170.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3368.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94499.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.584 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 55503.448 ops/s
[info]                  ·gc.alloc.rate:               2990.934 MB/sec
[info]                  ·gc.alloc.rate.norm:          84807.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76642.836 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 56199.894 ops/s
[info]                  ·gc.alloc.rate:               3028.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          84816.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75849.671 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 55732.879 ops/s
[info]                  ·gc.alloc.rate:               3020.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          85239.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3388.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95650.371 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   55946.836 ±(99.9%) 1214.037 ops/s [Average]
[info]   (min, avg, max) = (55503.448, 55946.836, 56217.817), stdev = 315.282
[info]   CI (99.9%): [54732.799, 57160.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3012.501 ±(99.9%) 85.602 MB/sec [Average]
[info]   (min, avg, max) = (2987.006, 3012.501, 3035.738), stdev = 22.230
[info]   CI (99.9%): [2926.899, 3098.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84730.941 ±(99.9%) 2507.416 B/op [Average]
[info]   (min, avg, max) = (83621.349, 84730.941, 85239.657), stdev = 651.168
[info]   CI (99.9%): [82223.525, 87238.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2970.523 ±(99.9%) 1435.088 MB/sec [Average]
[info]   (min, avg, max) = (2683.882, 2970.523, 3388.912), stdev = 372.688
[info]   CI (99.9%): [1535.435, 4405.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83555.483 ±(99.9%) 40574.182 B/op [Average]
[info]   (min, avg, max) = (75135.390, 83555.483, 95650.371), stdev = 10536.986
[info]   CI (99.9%): [42981.302, 124129.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.233 ±(99.9%) 1.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 0.584), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63318.279 ops/s
[info] # Warmup Iteration   2: 174182.760 ops/s
[info] # Warmup Iteration   3: 180848.260 ops/s
[info] # Warmup Iteration   4: 183393.257 ops/s
[info] # Warmup Iteration   5: 182054.364 ops/s
[info] Iteration   1: 182980.161 ops/s
[info]                  ·gc.alloc.rate:                   1220.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              10489.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11533.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 178858.182 ops/s
[info]                  ·gc.alloc.rate:               1174.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          10333.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5902.567 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 182731.463 ops/s
[info]                  ·gc.alloc.rate:                   1238.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              10664.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11561.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 183315.318 ops/s
[info]                  ·gc.alloc.rate:                   1229.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              10554.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11532.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 183847.559 ops/s
[info]                  ·gc.alloc.rate:                   1231.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              10540.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11488.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   182346.537 ±(99.9%) 7679.567 ops/s [Average]
[info]   (min, avg, max) = (178858.182, 182346.537, 183847.559), stdev = 1994.359
[info]   CI (99.9%): [174666.969, 190026.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1218.763 ±(99.9%) 99.019 MB/sec [Average]
[info]   (min, avg, max) = (1174.314, 1218.763, 1238.641), stdev = 25.715
[info]   CI (99.9%): [1119.744, 1317.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10516.553 ±(99.9%) 463.914 B/op [Average]
[info]   (min, avg, max) = (10333.472, 10516.553, 10664.193), stdev = 120.477
[info]   CI (99.9%): [10052.639, 10980.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.109 ±(99.9%) 1156.649 MB/sec [Average]
[info]   (min, avg, max) = (670.778, 1208.109, 1343.520), stdev = 300.378
[info]   CI (99.9%): [51.460, 2364.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10403.752 ±(99.9%) 9689.661 B/op [Average]
[info]   (min, avg, max) = (5902.567, 10403.752, 11561.021), stdev = 2516.374
[info]   CI (99.9%): [714.091, 20093.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 4.914 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 2.977), stdev = 1.276
[info]   CI (99.9%): [≈ 0, 5.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.253 ±(99.9%) 42.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.253, 25.558), stdev = 10.954
[info]   CI (99.9%): [≈ 0, 48.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150758.063 ops/s
[info] # Warmup Iteration   2: 494416.716 ops/s
[info] # Warmup Iteration   3: 520521.022 ops/s
[info] # Warmup Iteration   4: 531705.390 ops/s
[info] # Warmup Iteration   5: 526169.177 ops/s
[info] Iteration   1: 534809.620 ops/s
[info]                  ·gc.alloc.rate:      541.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 530351.162 ops/s
[info]                  ·gc.alloc.rate:               554.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          1645.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1980.791 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 533561.388 ops/s
[info]                  ·gc.alloc.rate:               554.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          1636.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1968.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 533433.465 ops/s
[info]                  ·gc.alloc.rate:                   562.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1659.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1971.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 531070.766 ops/s
[info]                  ·gc.alloc.rate:               556.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          1649.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1980.043 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   532645.280 ±(99.9%) 7174.744 ops/s [Average]
[info]   (min, avg, max) = (530351.162, 532645.280, 534809.620), stdev = 1863.258
[info]   CI (99.9%): [525470.535, 539820.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   553.937 ±(99.9%) 30.362 MB/sec [Average]
[info]   (min, avg, max) = (541.025, 553.937, 562.464), stdev = 7.885
[info]   CI (99.9%): [523.574, 584.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1636.614 ±(99.9%) 101.321 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1636.614, 1659.554), stdev = 26.313
[info]   CI (99.9%): [1535.293, 1737.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.312 ±(99.9%) 1150.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.312, 668.137), stdev = 298.689
[info]   CI (99.9%): [≈ 0, 1684.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1580.191 ±(99.9%) 3401.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1580.191, 1980.791), stdev = 883.369
[info]   CI (99.9%): [≈ 0, 4981.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.123), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446105.806 ops/s
[info] # Warmup Iteration   2: 688432.808 ops/s
[info] # Warmup Iteration   3: 714300.587 ops/s
[info] # Warmup Iteration   4: 704244.879 ops/s
[info] # Warmup Iteration   5: 718179.914 ops/s
[info] Iteration   1: 711025.199 ops/s
[info]                  ·gc.alloc.rate:               565.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1484.114 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 700206.045 ops/s
[info]                  ·gc.alloc.rate:      546.769 MB/sec
[info]                  ·gc.alloc.rate.norm: 1228.700 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 713695.270 ops/s
[info]                  ·gc.alloc.rate:               573.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          1263.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1478.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 716214.774 ops/s
[info]                  ·gc.alloc.rate:                   569.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1251.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1474.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 721148.306 ops/s
[info]                  ·gc.alloc.rate:               572.724 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1464.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   712457.919 ±(99.9%) 30033.104 ops/s [Average]
[info]   (min, avg, max) = (700206.045, 712457.919, 721148.306), stdev = 7799.502
[info]   CI (99.9%): [682424.814, 742491.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   565.650 ±(99.9%) 42.136 MB/sec [Average]
[info]   (min, avg, max) = (546.769, 565.650, 573.143), stdev = 10.943
[info]   CI (99.9%): [523.514, 607.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1249.409 ±(99.9%) 49.329 B/op [Average]
[info]   (min, avg, max) = (1228.700, 1249.409, 1263.931), stdev = 12.810
[info]   CI (99.9%): [1200.080, 1298.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.652 ±(99.9%) 1155.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.652, 671.203), stdev = 299.998
[info]   CI (99.9%): [≈ 0, 1691.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1180.435 ±(99.9%) 2541.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1180.435, 1484.114), stdev = 659.921
[info]   CI (99.9%): [≈ 0, 3721.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.483
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451157.400 ops/s
[info] # Warmup Iteration   2: 778273.377 ops/s
[info] # Warmup Iteration   3: 779885.072 ops/s
[info] # Warmup Iteration   4: 782362.503 ops/s
[info] # Warmup Iteration   5: 780825.907 ops/s
[info] Iteration   1: 780487.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 780440.637 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 778838.435 ops/s
[info]                  ·gc.alloc.rate:      2.177 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.399 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 783403.040 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 780548.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   780743.604 ±(99.9%) 6355.815 ops/s [Average]
[info]   (min, avg, max) = (778838.435, 780743.604, 783403.040), stdev = 1650.585
[info]   CI (99.9%): [774387.789, 787099.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.436 ±(99.9%) 3.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.436, 2.177), stdev = 0.973
[info]   CI (99.9%): [≈ 0, 4.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.880 ±(99.9%) 7.573 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.880, 4.399), stdev = 1.967
[info]   CI (99.9%): [≈ 0, 8.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80418.077 ops/s
[info] # Warmup Iteration   2: 333218.307 ops/s
[info] # Warmup Iteration   3: 337815.418 ops/s
[info] # Warmup Iteration   4: 336408.045 ops/s
[info] # Warmup Iteration   5: 340136.457 ops/s
[info] Iteration   1: 334907.435 ops/s
[info]                  ·gc.alloc.rate:               965.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          4538.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6264.108 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 339735.655 ops/s
[info]                  ·gc.alloc.rate:               954.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          4420.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3090.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 347371.754 ops/s
[info]                  ·gc.alloc.rate:                   972.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              4406.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3022.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 339610.372 ops/s
[info]                  ·gc.alloc.rate:               964.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          4470.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6189.813 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 341040.358 ops/s
[info]                  ·gc.alloc.rate:               965.790 MB/sec
[info]                  ·gc.alloc.rate.norm:          4456.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3084.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   340533.115 ±(99.9%) 17237.809 ops/s [Average]
[info]   (min, avg, max) = (334907.435, 340533.115, 347371.754), stdev = 4476.604
[info]   CI (99.9%): [323295.306, 357770.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   964.595 ±(99.9%) 25.439 MB/sec [Average]
[info]   (min, avg, max) = (954.168, 964.595, 972.534), stdev = 6.606
[info]   CI (99.9%): [939.156, 990.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4458.533 ±(99.9%) 199.697 B/op [Average]
[info]   (min, avg, max) = (4406.126, 4458.533, 4538.502), stdev = 51.861
[info]   CI (99.9%): [4258.836, 4658.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934.279 ±(99.9%) 1406.162 MB/sec [Average]
[info]   (min, avg, max) = (667.145, 934.279, 1335.645), stdev = 365.176
[info]   CI (99.9%): [≈ 0, 2340.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4330.414 ±(99.9%) 6668.190 B/op [Average]
[info]   (min, avg, max) = (3022.568, 4330.414, 6264.108), stdev = 1731.708
[info]   CI (99.9%): [≈ 0, 10998.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.189), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9091.976 ops/s
[info] # Warmup Iteration   2: 36738.972 ops/s
[info] # Warmup Iteration   3: 37180.531 ops/s
[info] # Warmup Iteration   4: 36615.649 ops/s
[info] # Warmup Iteration   5: 38391.827 ops/s
[info] Iteration   1: 38138.936 ops/s
[info]                  ·gc.alloc.rate:                   1942.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              80150.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83212.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 38459.027 ops/s
[info]                  ·gc.alloc.rate:                   1955.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              80009.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82406.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38407.026 ops/s
[info]                  ·gc.alloc.rate:                   1951.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              79985.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54869.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38580.435 ops/s
[info]                  ·gc.alloc.rate:                   1987.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              81069.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81930.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.548 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38381.845 ops/s
[info]                  ·gc.alloc.rate:                   1978.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              81116.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82409.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38393.454 ±(99.9%) 621.972 ops/s [Average]
[info]   (min, avg, max) = (38138.936, 38393.454, 38580.435), stdev = 161.524
[info]   CI (99.9%): [37771.482, 39015.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1963.130 ±(99.9%) 72.617 MB/sec [Average]
[info]   (min, avg, max) = (1942.825, 1963.130, 1987.353), stdev = 18.858
[info]   CI (99.9%): [1890.513, 2035.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80466.032 ±(99.9%) 2217.887 B/op [Average]
[info]   (min, avg, max) = (79985.028, 80466.032, 81116.651), stdev = 575.978
[info]   CI (99.9%): [78248.145, 82683.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.642 ±(99.9%) 1159.578 MB/sec [Average]
[info]   (min, avg, max) = (1338.982, 1877.642, 2017.042), stdev = 301.139
[info]   CI (99.9%): [718.064, 3037.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76965.656 ±(99.9%) 47597.190 B/op [Average]
[info]   (min, avg, max) = (54869.253, 76965.656, 83212.027), stdev = 12360.839
[info]   CI (99.9%): [29368.466, 124562.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.757 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.762, 2.894), stdev = 1.236
[info]   CI (99.9%): [≈ 0, 5.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31.378 ±(99.9%) 196.287 B/op [Average]
[info]   (min, avg, max) = (0.854, 31.378, 119.409), stdev = 50.975
[info]   CI (99.9%): [≈ 0, 227.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.836 ops/s
[info] # Warmup Iteration   2: 272597.374 ops/s
[info] # Warmup Iteration   3: 291747.612 ops/s
[info] # Warmup Iteration   4: 284263.732 ops/s
[info] # Warmup Iteration   5: 293773.908 ops/s
[info] Iteration   1: 291391.218 ops/s
[info]                  ·gc.alloc.rate:                   312.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2763.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 293096.571 ops/s
[info]                  ·gc.alloc.rate:               320.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          1718.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2747.192 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 294152.324 ops/s
[info]                  ·gc.alloc.rate:      305.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 292340.544 ops/s
[info]                  ·gc.alloc.rate:                   323.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1740.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3586.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 288823.810 ops/s
[info]                  ·gc.alloc.rate:      299.794 MB/sec
[info]                  ·gc.alloc.rate.norm: 1633.635 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   291960.894 ±(99.9%) 7797.456 ops/s [Average]
[info]   (min, avg, max) = (288823.810, 291960.894, 294152.324), stdev = 2024.975
[info]   CI (99.9%): [284163.437, 299758.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   312.154 ±(99.9%) 37.963 MB/sec [Average]
[info]   (min, avg, max) = (299.794, 312.154, 323.216), stdev = 9.859
[info]   CI (99.9%): [274.192, 350.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1682.650 ±(99.9%) 188.655 B/op [Average]
[info]   (min, avg, max) = (1632.002, 1682.650, 1740.120), stdev = 48.993
[info]   CI (99.9%): [1493.994, 1871.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337.868 ±(99.9%) 1212.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.868, 666.149), stdev = 314.818
[info]   CI (99.9%): [≈ 0, 1550.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1819.357 ±(99.9%) 6527.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1819.357, 3586.396), stdev = 1695.159
[info]   CI (99.9%): [≈ 0, 8346.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.264), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39054.388 ops/s
[info] # Warmup Iteration   2: 108599.715 ops/s
[info] # Warmup Iteration   3: 109526.415 ops/s
[info] # Warmup Iteration   4: 108557.640 ops/s
[info] # Warmup Iteration   5: 113693.249 ops/s
[info] Iteration   1: 114247.922 ops/s
[info]                  ·gc.alloc.rate:                   1365.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              18810.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18335.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.860 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 114390.645 ops/s
[info]                  ·gc.alloc.rate:                   1362.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              18747.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18312.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 114283.289 ops/s
[info]                  ·gc.alloc.rate:               1358.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          18710.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18343.039 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 114039.193 ops/s
[info]                  ·gc.alloc.rate:               1356.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          18713.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18404.780 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 113796.582 ops/s
[info]                  ·gc.alloc.rate:               1364.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          18867.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18472.199 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   114151.526 ±(99.9%) 908.041 ops/s [Average]
[info]   (min, avg, max) = (113796.582, 114151.526, 114390.645), stdev = 235.815
[info]   CI (99.9%): [113243.485, 115059.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1361.614 ±(99.9%) 15.129 MB/sec [Average]
[info]   (min, avg, max) = (1356.342, 1361.614, 1365.930), stdev = 3.929
[info]   CI (99.9%): [1346.485, 1376.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18770.032 ±(99.9%) 261.043 B/op [Average]
[info]   (min, avg, max) = (18710.735, 18770.032, 18867.994), stdev = 67.792
[info]   CI (99.9%): [18508.989, 19031.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1332.844 ±(99.9%) 7.229 MB/sec [Average]
[info]   (min, avg, max) = (1331.100, 1332.844, 1335.568), stdev = 1.877
[info]   CI (99.9%): [1325.615, 1340.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18373.473 ±(99.9%) 250.084 B/op [Average]
[info]   (min, avg, max) = (18312.296, 18373.473, 18472.199), stdev = 64.946
[info]   CI (99.9%): [18123.390, 18623.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 1.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.860), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251911.285 ops/s
[info] # Warmup Iteration   2: 479551.840 ops/s
[info] # Warmup Iteration   3: 474814.425 ops/s
[info] # Warmup Iteration   4: 486904.402 ops/s
[info] # Warmup Iteration   5: 482665.086 ops/s
[info] Iteration   1: 487900.659 ops/s
[info]                  ·gc.alloc.rate:      317.453 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 487511.332 ops/s
[info]                  ·gc.alloc.rate:               328.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          1060.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1651.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 484850.598 ops/s
[info]                  ·gc.alloc.rate:               333.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          1081.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1660.737 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 476025.412 ops/s
[info]                  ·gc.alloc.rate:      309.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 476849.345 ops/s
[info]                  ·gc.alloc.rate:                   329.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2214.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   482627.469 ±(99.9%) 22251.827 ops/s [Average]
[info]   (min, avg, max) = (476025.412, 482627.469, 487900.659), stdev = 5778.729
[info]   CI (99.9%): [460375.642, 504879.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   323.731 ±(99.9%) 37.745 MB/sec [Average]
[info]   (min, avg, max) = (309.729, 323.731, 333.181), stdev = 9.802
[info]   CI (99.9%): [285.986, 361.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1055.629 ±(99.9%) 118.203 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1055.629, 1088.625), stdev = 30.697
[info]   CI (99.9%): [937.427, 1173.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.834 ±(99.9%) 1217.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.834, 670.790), stdev = 316.058
[info]   CI (99.9%): [≈ 0, 1555.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1105.256 ±(99.9%) 3982.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1105.256, 2214.036), stdev = 1034.351
[info]   CI (99.9%): [≈ 0, 5088.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1929.156 ops/s
[info] # Warmup Iteration   2: 32825.160 ops/s
[info] # Warmup Iteration   3: 41013.875 ops/s
[info] # Warmup Iteration   4: 41431.400 ops/s
[info] # Warmup Iteration   5: 41201.605 ops/s
[info] Iteration   1: 42412.797 ops/s
[info]                  ·gc.alloc.rate:                   2104.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              78094.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74504.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150.634 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 41935.589 ops/s
[info]                  ·gc.alloc.rate:                   2069.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              77655.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75225.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42002.722 ops/s
[info]                  ·gc.alloc.rate:                   2096.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              78548.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74882.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42638.548 ops/s
[info]                  ·gc.alloc.rate:               2114.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          78057.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73786.587 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 42858.275 ops/s
[info]                  ·gc.alloc.rate:               2138.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          78536.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73526.778 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   42369.586 ±(99.9%) 1535.397 ops/s [Average]
[info]   (min, avg, max) = (41935.589, 42369.586, 42858.275), stdev = 398.738
[info]   CI (99.9%): [40834.189, 43904.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2104.679 ±(99.9%) 98.170 MB/sec [Average]
[info]   (min, avg, max) = (2069.090, 2104.679, 2138.743), stdev = 25.494
[info]   CI (99.9%): [2006.510, 2202.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78178.427 ±(99.9%) 1440.732 B/op [Average]
[info]   (min, avg, max) = (77655.593, 78178.427, 78548.018), stdev = 374.154
[info]   CI (99.9%): [76737.694, 79619.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.385 ±(99.9%) 14.852 MB/sec [Average]
[info]   (min, avg, max) = (1998.434, 2002.385, 2007.780), stdev = 3.857
[info]   CI (99.9%): [1987.533, 2017.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74385.043 ±(99.9%) 2764.631 B/op [Average]
[info]   (min, avg, max) = (73526.778, 74385.043, 75225.072), stdev = 717.966
[info]   CI (99.9%): [71620.412, 77149.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 6.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 4.059), stdev = 1.769
[info]   CI (99.9%): [≈ 0, 7.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.189 ±(99.9%) 252.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.189, 150.634), stdev = 65.628
[info]   CI (99.9%): [≈ 0, 286.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27624.723 ops/s
[info] # Warmup Iteration   2: 73062.435 ops/s
[info] # Warmup Iteration   3: 73208.140 ops/s
[info] # Warmup Iteration   4: 75125.840 ops/s
[info] # Warmup Iteration   5: 75360.853 ops/s
[info] Iteration   1: 75177.671 ops/s
[info]                  ·gc.alloc.rate:               622.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          13023.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14008.999 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 75272.479 ops/s
[info]                  ·gc.alloc.rate:                   621.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              12985.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13991.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 75644.279 ops/s
[info]                  ·gc.alloc.rate:               624.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          12992.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13936.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 71978.641 ops/s
[info]                  ·gc.alloc.rate:                   590.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              12903.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14646.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.455 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 75705.418 ops/s
[info]                  ·gc.alloc.rate:      599.920 MB/sec
[info]                  ·gc.alloc.rate.norm: 12472.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   74755.698 ±(99.9%) 6042.171 ops/s [Average]
[info]   (min, avg, max) = (71978.641, 74755.698, 75705.418), stdev = 1569.133
[info]   CI (99.9%): [68713.526, 80797.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   611.537 ±(99.9%) 59.729 MB/sec [Average]
[info]   (min, avg, max) = (590.137, 611.537, 624.486), stdev = 15.512
[info]   CI (99.9%): [551.808, 671.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12875.360 ±(99.9%) 884.723 B/op [Average]
[info]   (min, avg, max) = (12472.006, 12875.360, 13023.012), stdev = 229.760
[info]   CI (99.9%): [11990.637, 13760.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535.602 ±(99.9%) 1152.926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.602, 669.866), stdev = 299.411
[info]   CI (99.9%): [≈ 0, 1688.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11316.523 ±(99.9%) 24385.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11316.523, 14646.096), stdev = 6332.780
[info]   CI (99.9%): [≈ 0, 35701.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 0.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.455), stdev = 0.244
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.784 ops/s
[info] # Warmup Iteration   2: 77334.496 ops/s
[info] # Warmup Iteration   3: 87129.840 ops/s
[info] # Warmup Iteration   4: 86756.293 ops/s
[info] # Warmup Iteration   5: 87863.202 ops/s
[info] Iteration   1: 87869.621 ops/s
[info]                  ·gc.alloc.rate:                   514.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              9215.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11937.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88197.916 ops/s
[info]                  ·gc.alloc.rate:      498.545 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87943.124 ops/s
[info]                  ·gc.alloc.rate:               519.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          9304.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11928.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87974.555 ops/s
[info]                  ·gc.alloc.rate:               511.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          9152.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11929.450 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 87865.186 ops/s
[info]                  ·gc.alloc.rate:                   521.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              9349.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11944.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   87970.081 ±(99.9%) 522.862 ops/s [Average]
[info]   (min, avg, max) = (87865.186, 87970.081, 88197.916), stdev = 135.786
[info]   CI (99.9%): [87447.219, 88492.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   513.333 ±(99.9%) 35.549 MB/sec [Average]
[info]   (min, avg, max) = (498.545, 513.333, 521.955), stdev = 9.232
[info]   CI (99.9%): [477.784, 548.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9183.658 ±(99.9%) 685.198 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9183.658, 9349.016), stdev = 177.944
[info]   CI (99.9%): [8498.460, 9868.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.367 ±(99.9%) 1148.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.367, 666.869), stdev = 298.162
[info]   CI (99.9%): [≈ 0, 1681.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9548.016 ±(99.9%) 20552.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9548.016, 11944.655), stdev = 5337.507
[info]   CI (99.9%): [≈ 0, 30100.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.276 ±(99.9%) 1.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 0.988), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 1.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:24:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36002.029 ops/s
[info] # Warmup Iteration   2: 75851.314 ops/s
[info] # Warmup Iteration   3: 76486.019 ops/s
[info] # Warmup Iteration   4: 77785.776 ops/s
[info] # Warmup Iteration   5: 78292.674 ops/s
[info] Iteration   1: 78093.850 ops/s
[info]                  ·gc.alloc.rate:               478.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          9647.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10310.297 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 78332.257 ops/s
[info]                  ·gc.alloc.rate:               481.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          9678.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13411.194 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 78337.230 ops/s
[info]                  ·gc.alloc.rate:      461.943 MB/sec
[info]                  ·gc.alloc.rate.norm: 9280.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77732.370 ops/s
[info]                  ·gc.alloc.rate:               489.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          9917.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13514.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 78151.682 ops/s
[info]                  ·gc.alloc.rate:                   483.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              9738.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13455.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   78129.478 ±(99.9%) 950.526 ops/s [Average]
[info]   (min, avg, max) = (77732.370, 78129.478, 78337.230), stdev = 246.849
[info]   CI (99.9%): [77178.952, 79080.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   479.171 ±(99.9%) 40.221 MB/sec [Average]
[info]   (min, avg, max) = (461.943, 479.171, 489.794), stdev = 10.445
[info]   CI (99.9%): [438.951, 519.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9652.370 ±(99.9%) 897.133 B/op [Average]
[info]   (min, avg, max) = (9280.006, 9652.370, 9917.692), stdev = 232.983
[info]   CI (99.9%): [8755.238, 10549.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.976 ±(99.9%) 1113.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.976, 668.118), stdev = 289.192
[info]   CI (99.9%): [≈ 0, 1616.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10138.371 ±(99.9%) 22447.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10138.371, 13514.698), stdev = 5829.484
[info]   CI (99.9%): [≈ 0, 32585.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.419), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50223.432 ops/s
[info] # Warmup Iteration   2: 83087.357 ops/s
[info] # Warmup Iteration   3: 85834.265 ops/s
[info] # Warmup Iteration   4: 86907.182 ops/s
[info] # Warmup Iteration   5: 83803.001 ops/s
[info] Iteration   1: 87124.893 ops/s
[info]                  ·gc.alloc.rate:                   509.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              9197.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9241.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 86806.368 ops/s
[info]                  ·gc.alloc.rate:               505.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          9168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12162.269 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 87147.587 ops/s
[info]                  ·gc.alloc.rate:                   508.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              9188.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12114.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 82989.891 ops/s
[info]                  ·gc.alloc.rate:      469.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87268.774 ops/s
[info]                  ·gc.alloc.rate:                   519.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              9360.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12109.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   86267.502 ±(99.9%) 7085.950 ops/s [Average]
[info]   (min, avg, max) = (82989.891, 86267.502, 87268.774), stdev = 1840.199
[info]   CI (99.9%): [79181.552, 93353.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   502.389 ±(99.9%) 73.844 MB/sec [Average]
[info]   (min, avg, max) = (469.294, 502.389, 519.085), stdev = 19.177
[info]   CI (99.9%): [428.545, 576.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9162.024 ±(99.9%) 644.787 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9162.024, 9360.583), stdev = 167.449
[info]   CI (99.9%): [8517.237, 9806.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.944 ±(99.9%) 1118.976 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.944, 671.531), stdev = 290.595
[info]   CI (99.9%): [≈ 0, 1623.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9125.559 ±(99.9%) 20224.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9125.559, 12162.269), stdev = 5252.332
[info]   CI (99.9%): [≈ 0, 29350.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.225 ±(99.9%) 0.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.376), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 1.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34079.452 ops/s
[info] # Warmup Iteration   2: 80753.975 ops/s
[info] # Warmup Iteration   3: 86934.834 ops/s
[info] # Warmup Iteration   4: 87205.665 ops/s
[info] # Warmup Iteration   5: 87725.816 ops/s
[info] Iteration   1: 88100.214 ops/s
[info]                  ·gc.alloc.rate:      428.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87612.200 ops/s
[info]                  ·gc.alloc.rate:               438.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          7884.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9190.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 84971.445 ops/s
[info]                  ·gc.alloc.rate:               448.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          8297.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12418.273 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87561.583 ops/s
[info]                  ·gc.alloc.rate:      425.960 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 84770.296 ops/s
[info]                  ·gc.alloc.rate:               428.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          7954.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12448.300 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   86603.148 ±(99.9%) 6148.922 ops/s [Average]
[info]   (min, avg, max) = (84770.296, 86603.148, 88100.214), stdev = 1596.856
[info]   CI (99.9%): [80454.226, 92752.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   434.002 ±(99.9%) 35.775 MB/sec [Average]
[info]   (min, avg, max) = (425.960, 434.002, 448.052), stdev = 9.291
[info]   CI (99.9%): [398.228, 469.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7889.642 ±(99.9%) 1018.151 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7889.642, 8297.334), stdev = 264.410
[info]   CI (99.9%): [6871.492, 8907.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.534 ±(99.9%) 1326.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.534, 670.580), stdev = 344.417
[info]   CI (99.9%): [≈ 0, 1696.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6811.389 ±(99.9%) 24479.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6811.389, 12448.300), stdev = 6357.309
[info]   CI (99.9%): [≈ 0, 31291.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1654.965 ops/s
[info] # Warmup Iteration   2: 8085.295 ops/s
[info] # Warmup Iteration   3: 10001.326 ops/s
[info] # Warmup Iteration   4: 10080.238 ops/s
[info] # Warmup Iteration   5: 9816.460 ops/s
[info] Iteration   1: 9985.714 ops/s
[info]                  ·gc.alloc.rate:               1624.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          256063.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211541.914 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 9939.181 ops/s
[info]                  ·gc.alloc.rate:                   1652.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              261658.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318971.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 10089.049 ops/s
[info]                  ·gc.alloc.rate:                   1659.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              258710.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209278.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9922.764 ops/s
[info]                  ·gc.alloc.rate:                   1636.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              259548.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212356.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10099.451 ops/s
[info]                  ·gc.alloc.rate:               1663.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          259180.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312465.475 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10007.232 ±(99.9%) 318.855 ops/s [Average]
[info]   (min, avg, max) = (9922.764, 10007.232, 10099.451), stdev = 82.806
[info]   CI (99.9%): [9688.377, 10326.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1647.183 ±(99.9%) 62.232 MB/sec [Average]
[info]   (min, avg, max) = (1624.696, 1647.183, 1663.192), stdev = 16.161
[info]   CI (99.9%): [1584.951, 1709.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   259032.300 ±(99.9%) 7725.914 B/op [Average]
[info]   (min, avg, max) = (256063.877, 259032.300, 261658.900), stdev = 2006.395
[info]   CI (99.9%): [251306.386, 266758.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.553 ±(99.9%) 1410.395 MB/sec [Average]
[info]   (min, avg, max) = (1338.954, 1608.553, 2014.405), stdev = 366.275
[info]   CI (99.9%): [198.158, 3018.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   252922.784 ±(99.9%) 220955.707 B/op [Average]
[info]   (min, avg, max) = (209278.770, 252922.784, 318971.313), stdev = 57381.495
[info]   CI (99.9%): [31967.077, 473878.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 5.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.102), stdev = 1.341
[info]   CI (99.9%): [≈ 0, 5.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.165 ±(99.9%) 817.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.165, 491.141), stdev = 212.275
[info]   CI (99.9%): [≈ 0, 943.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.271
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:23:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1340.294 ops/s
[info] # Warmup Iteration   2: 8375.758 ops/s
[info] # Warmup Iteration   3: 10163.225 ops/s
[info] # Warmup Iteration   4: 10306.329 ops/s
[info] # Warmup Iteration   5: 10186.334 ops/s
[info] Iteration   1: 10277.304 ops/s
[info]                  ·gc.alloc.rate:                   1607.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              246108.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205023.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10074.772 ops/s
[info]                  ·gc.alloc.rate:                   1583.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              247296.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209257.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 10060.014 ops/s
[info]                  ·gc.alloc.rate:                   1595.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              249545.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314197.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 654.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10157.156 ops/s
[info]                  ·gc.alloc.rate:                   1597.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              247593.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206845.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10155.344 ops/s
[info]                  ·gc.alloc.rate:               1597.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          247635.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 206680.039 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10144.918 ±(99.9%) 332.996 ops/s [Average]
[info]   (min, avg, max) = (10060.014, 10144.918, 10277.304), stdev = 86.478
[info]   CI (99.9%): [9811.922, 10477.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1596.321 ±(99.9%) 32.919 MB/sec [Average]
[info]   (min, avg, max) = (1583.362, 1596.321, 1607.173), stdev = 8.549
[info]   CI (99.9%): [1563.402, 1629.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   247636.058 ±(99.9%) 4753.566 B/op [Average]
[info]   (min, avg, max) = (246108.526, 247636.058, 249545.422), stdev = 1234.486
[info]   CI (99.9%): [242882.492, 252389.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.152 ±(99.9%) 1156.605 MB/sec [Average]
[info]   (min, avg, max) = (1333.663, 1471.152, 2008.445), stdev = 300.367
[info]   CI (99.9%): [314.547, 2627.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   228400.788 ±(99.9%) 184775.697 B/op [Average]
[info]   (min, avg, max) = (205023.128, 228400.788, 314197.639), stdev = 47985.662
[info]   CI (99.9%): [43625.091, 413176.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.916 ±(99.9%) 7.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.916, 4.186), stdev = 1.833
[info]   CI (99.9%): [≈ 0, 7.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   143.231 ±(99.9%) 1104.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 143.231, 654.922), stdev = 286.819
[info]   CI (99.9%): [≈ 0, 1247.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96237.265 ops/s
[info] # Warmup Iteration   2: 147486.708 ops/s
[info] # Warmup Iteration   3: 143815.267 ops/s
[info] # Warmup Iteration   4: 150664.802 ops/s
[info] # Warmup Iteration   5: 150140.355 ops/s
[info] Iteration   1: 149230.320 ops/s
[info]                  ·gc.alloc.rate:      390.494 MB/sec
[info]                  ·gc.alloc.rate.norm: 4118.457 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 145636.407 ops/s
[info]                  ·gc.alloc.rate:               405.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          4378.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5528.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 150950.957 ops/s
[info]                  ·gc.alloc.rate:               409.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          4267.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6997.591 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 151893.506 ops/s
[info]                  ·gc.alloc.rate:      395.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 151181.481 ops/s
[info]                  ·gc.alloc.rate:               419.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          4365.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6986.762 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   149778.534 ±(99.9%) 9679.162 ops/s [Average]
[info]   (min, avg, max) = (145636.407, 149778.534, 151893.506), stdev = 2513.648
[info]   CI (99.9%): [140099.373, 159457.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   403.926 ±(99.9%) 44.035 MB/sec [Average]
[info]   (min, avg, max) = (390.494, 403.926, 419.331), stdev = 11.436
[info]   CI (99.9%): [359.890, 447.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4245.079 ±(99.9%) 512.741 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4245.079, 4378.084), stdev = 133.157
[info]   CI (99.9%): [3732.338, 4757.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.800 ±(99.9%) 1327.342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.800, 671.263), stdev = 344.706
[info]   CI (99.9%): [≈ 0, 1698.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3902.613 ±(99.9%) 13909.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3902.613, 6997.591), stdev = 3612.334
[info]   CI (99.9%): [≈ 0, 17812.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 364.425 ops/s
[info] # Warmup Iteration   2: 4764.941 ops/s
[info] # Warmup Iteration   3: 5544.707 ops/s
[info] # Warmup Iteration   4: 5892.159 ops/s
[info] # Warmup Iteration   5: 5914.980 ops/s
[info] Iteration   1: 5917.339 ops/s
[info]                  ·gc.alloc.rate:                   1549.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              411987.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355814.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 5876.870 ops/s
[info]                  ·gc.alloc.rate:                   1549.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              414649.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     537756.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 5929.626 ops/s
[info]                  ·gc.alloc.rate:                   1569.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              416532.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355536.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1145.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5954.241 ops/s
[info]                  ·gc.alloc.rate:                   1564.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              413416.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352811.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5954.894 ops/s
[info]                  ·gc.alloc.rate:                   1575.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              416258.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352459.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5926.594 ±(99.9%) 123.769 ops/s [Average]
[info]   (min, avg, max) = (5876.870, 5926.594, 5954.894), stdev = 32.142
[info]   CI (99.9%): [5802.825, 6050.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1561.415 ±(99.9%) 45.882 MB/sec [Average]
[info]   (min, avg, max) = (1549.025, 1561.415, 1575.026), stdev = 11.915
[info]   CI (99.9%): [1515.533, 1607.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   414568.992 ±(99.9%) 7383.587 B/op [Average]
[info]   (min, avg, max) = (411987.932, 414568.992, 416532.316), stdev = 1917.494
[info]   CI (99.9%): [407185.405, 421952.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.041 ±(99.9%) 1158.018 MB/sec [Average]
[info]   (min, avg, max) = (1333.625, 1471.041, 2008.992), stdev = 300.734
[info]   CI (99.9%): [313.024, 2629.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   390875.674 ±(99.9%) 316226.672 B/op [Average]
[info]   (min, avg, max) = (352459.562, 390875.674, 537756.440), stdev = 82123.063
[info]   CI (99.9%): [74649.002, 707102.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.968 ±(99.9%) 7.221 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.968, 4.317), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 8.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   256.863 ±(99.9%) 1916.273 B/op [Average]
[info]   (min, avg, max) = (1.200, 256.863, 1145.428), stdev = 497.650
[info]   CI (99.9%): [≈ 0, 2173.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8668.628 ops/s
[info] # Warmup Iteration   2: 18967.499 ops/s
[info] # Warmup Iteration   3: 20385.739 ops/s
[info] # Warmup Iteration   4: 20451.209 ops/s
[info] # Warmup Iteration   5: 20493.889 ops/s
[info] Iteration   1: 20123.436 ops/s
[info]                  ·gc.alloc.rate:               1574.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          123127.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157335.893 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 19778.319 ops/s
[info]                  ·gc.alloc.rate:                   1548.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              123172.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106813.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20609.788 ops/s
[info]                  ·gc.alloc.rate:                   1584.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              121002.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102446.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20520.119 ops/s
[info]                  ·gc.alloc.rate:               1602.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          122938.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102747.470 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 20389.909 ops/s
[info]                  ·gc.alloc.rate:                   1602.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              123690.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154975.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   20284.314 ±(99.9%) 1298.130 ops/s [Average]
[info]   (min, avg, max) = (19778.319, 20284.314, 20609.788), stdev = 337.120
[info]   CI (99.9%): [18986.184, 21582.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1582.562 ±(99.9%) 87.341 MB/sec [Average]
[info]   (min, avg, max) = (1548.278, 1582.562, 1602.935), stdev = 22.682
[info]   CI (99.9%): [1495.221, 1669.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122786.168 ±(99.9%) 3986.768 B/op [Average]
[info]   (min, avg, max) = (121002.396, 122786.168, 123690.107), stdev = 1035.351
[info]   CI (99.9%): [118799.401, 126772.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.738 ±(99.9%) 1410.143 MB/sec [Average]
[info]   (min, avg, max) = (1339.674, 1608.738, 2011.945), stdev = 366.210
[info]   CI (99.9%): [198.595, 3018.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   124863.728 ±(99.9%) 110242.219 B/op [Average]
[info]   (min, avg, max) = (102446.496, 124863.728, 157335.893), stdev = 28629.554
[info]   CI (99.9%): [14621.509, 235105.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 4.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 2.894), stdev = 1.201
[info]   CI (99.9%): [≈ 0, 5.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   63.938 ±(99.9%) 368.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.938, 230.259), stdev = 95.725
[info]   CI (99.9%): [≈ 0, 432.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9363.629 ops/s
[info] # Warmup Iteration   2: 22305.741 ops/s
[info] # Warmup Iteration   3: 22814.889 ops/s
[info] # Warmup Iteration   4: 23393.344 ops/s
[info] # Warmup Iteration   5: 23334.266 ops/s
[info] Iteration   1: 23434.823 ops/s
[info]                  ·gc.alloc.rate:                   1581.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              106210.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89964.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 23582.100 ops/s
[info]                  ·gc.alloc.rate:                   1586.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              105874.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89493.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23611.769 ops/s
[info]                  ·gc.alloc.rate:                   1581.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              105437.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89334.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 23538.042 ops/s
[info]                  ·gc.alloc.rate:                   1576.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              105416.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89433.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23064.191 ops/s
[info]                  ·gc.alloc.rate:               1569.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          107118.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136776.712 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23446.185 ±(99.9%) 861.841 ops/s [Average]
[info]   (min, avg, max) = (23064.191, 23446.185, 23611.769), stdev = 223.817
[info]   CI (99.9%): [22584.344, 24308.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1579.294 ±(99.9%) 24.741 MB/sec [Average]
[info]   (min, avg, max) = (1569.748, 1579.294, 1586.754), stdev = 6.425
[info]   CI (99.9%): [1554.553, 1604.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106011.497 ±(99.9%) 2700.124 B/op [Average]
[info]   (min, avg, max) = (105416.637, 106011.497, 107118.196), stdev = 701.214
[info]   CI (99.9%): [103311.373, 108711.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.612 ±(99.9%) 1144.670 MB/sec [Average]
[info]   (min, avg, max) = (1337.597, 1472.612, 2004.375), stdev = 297.267
[info]   CI (99.9%): [327.942, 2617.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99000.689 ±(99.9%) 81321.090 B/op [Average]
[info]   (min, avg, max) = (89334.981, 99000.689, 136776.712), stdev = 21118.829
[info]   CI (99.9%): [17679.600, 180321.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 5.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.021), stdev = 1.303
[info]   CI (99.9%): [≈ 0, 5.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   52.255 ±(99.9%) 334.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.255, 201.595), stdev = 86.931
[info]   CI (99.9%): [≈ 0, 386.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91026.068 ops/s
[info] # Warmup Iteration   2: 127271.383 ops/s
[info] # Warmup Iteration   3: 134584.957 ops/s
[info] # Warmup Iteration   4: 134147.122 ops/s
[info] # Warmup Iteration   5: 134257.510 ops/s
[info] Iteration   1: 134800.604 ops/s
[info]                  ·gc.alloc.rate:      298.075 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134050.054 ops/s
[info]                  ·gc.alloc.rate:               310.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          3648.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6006.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 134638.411 ops/s
[info]                  ·gc.alloc.rate:      297.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 133978.266 ops/s
[info]                  ·gc.alloc.rate:               310.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          3651.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6010.018 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 134668.914 ops/s
[info]                  ·gc.alloc.rate:      297.774 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   134427.250 ±(99.9%) 1474.156 ops/s [Average]
[info]   (min, avg, max) = (133978.266, 134427.250, 134800.604), stdev = 382.834
[info]   CI (99.9%): [132953.094, 135901.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   303.042 ±(99.9%) 27.347 MB/sec [Average]
[info]   (min, avg, max) = (297.721, 303.042, 310.876), stdev = 7.102
[info]   CI (99.9%): [275.695, 330.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3548.066 ±(99.9%) 358.903 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3548.066, 3651.892), stdev = 93.206
[info]   CI (99.9%): [3189.162, 3906.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.654 ±(99.9%) 1079.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.654, 511.652), stdev = 280.234
[info]   CI (99.9%): [≈ 0, 1283.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2403.380 ±(99.9%) 12672.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2403.380, 6010.018), stdev = 3290.963
[info]   CI (99.9%): [≈ 0, 15075.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95564.614 ops/s
[info] # Warmup Iteration   2: 134720.055 ops/s
[info] # Warmup Iteration   3: 140778.238 ops/s
[info] # Warmup Iteration   4: 140656.649 ops/s
[info] # Warmup Iteration   5: 140645.702 ops/s
[info] Iteration   1: 140691.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 140098.404 ops/s
[info]                  ·gc.alloc.rate:      0.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 10.417 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 140579.145 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 140499.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140534.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   140480.490 ±(99.9%) 868.277 ops/s [Average]
[info]   (min, avg, max) = (140098.404, 140480.490, 140691.181), stdev = 225.489
[info]   CI (99.9%): [139612.213, 141348.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.186 ±(99.9%) 1.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.186, 0.927), stdev = 0.415
[info]   CI (99.9%): [≈ 0, 1.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.086 ±(99.9%) 17.933 B/op [Average]
[info]   (min, avg, max) = (0.003, 2.086, 10.417), stdev = 4.657
[info]   CI (99.9%): [≈ 0, 20.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8881.094 ops/s
[info] # Warmup Iteration   2: 21233.455 ops/s
[info] # Warmup Iteration   3: 23363.044 ops/s
[info] # Warmup Iteration   4: 23602.693 ops/s
[info] # Warmup Iteration   5: 23556.462 ops/s
[info] Iteration   1: 23175.131 ops/s
[info]                  ·gc.alloc.rate:                   1641.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              111439.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136687.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 23602.484 ops/s
[info]                  ·gc.alloc.rate:                   1623.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              108249.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89528.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23661.560 ops/s
[info]                  ·gc.alloc.rate:                   1652.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              109943.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133719.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23704.166 ops/s
[info]                  ·gc.alloc.rate:                   1654.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              109845.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88811.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23680.623 ops/s
[info]                  ·gc.alloc.rate:               1639.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          108954.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88801.598 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23564.793 ±(99.9%) 851.206 ops/s [Average]
[info]   (min, avg, max) = (23175.131, 23564.793, 23704.166), stdev = 221.056
[info]   CI (99.9%): [22713.587, 24416.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1642.325 ±(99.9%) 48.264 MB/sec [Average]
[info]   (min, avg, max) = (1623.405, 1642.325, 1654.460), stdev = 12.534
[info]   CI (99.9%): [1594.061, 1690.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109686.422 ±(99.9%) 4621.939 B/op [Average]
[info]   (min, avg, max) = (108249.881, 109686.422, 111439.074), stdev = 1200.303
[info]   CI (99.9%): [105064.483, 114308.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1608.029 ±(99.9%) 1419.430 MB/sec [Average]
[info]   (min, avg, max) = (1336.206, 1608.029, 2013.183), stdev = 368.622
[info]   CI (99.9%): [188.599, 3027.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107509.568 ±(99.9%) 97437.703 B/op [Average]
[info]   (min, avg, max) = (88801.598, 107509.568, 136687.190), stdev = 25304.262
[info]   CI (99.9%): [10071.865, 204947.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 4.989 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 3.039), stdev = 1.296
[info]   CI (99.9%): [≈ 0, 5.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   57.194 ±(99.9%) 332.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.194, 202.666), stdev = 86.362
[info]   CI (99.9%): [≈ 0, 389.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.578
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32744.420 ops/s
[info] # Warmup Iteration   2: 113185.483 ops/s
[info] # Warmup Iteration   3: 121530.809 ops/s
[info] # Warmup Iteration   4: 124549.373 ops/s
[info] # Warmup Iteration   5: 124011.009 ops/s
[info] Iteration   1: 123812.020 ops/s
[info]                  ·gc.alloc.rate:                   1751.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              22264.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25623.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 124514.907 ops/s
[info]                  ·gc.alloc.rate:                   1771.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              22394.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16991.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 125143.377 ops/s
[info]                  ·gc.alloc.rate:                   1795.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              22575.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25275.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.309 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 123998.828 ops/s
[info]                  ·gc.alloc.rate:               1751.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          22227.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16985.609 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 123699.650 ops/s
[info]                  ·gc.alloc.rate:               1774.949 MB/sec
[info]                  ·gc.alloc.rate.norm:          22583.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25535.749 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   124233.756 ±(99.9%) 2298.141 ops/s [Average]
[info]   (min, avg, max) = (123699.650, 124233.756, 125143.377), stdev = 596.820
[info]   CI (99.9%): [121935.615, 126531.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1769.083 ±(99.9%) 71.449 MB/sec [Average]
[info]   (min, avg, max) = (1751.353, 1769.083, 1795.787), stdev = 18.555
[info]   CI (99.9%): [1697.635, 1840.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22409.218 ±(99.9%) 643.739 B/op [Average]
[info]   (min, avg, max) = (22227.900, 22409.218, 22583.120), stdev = 167.177
[info]   CI (99.9%): [21765.478, 23052.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.197 ±(99.9%) 1412.707 MB/sec [Average]
[info]   (min, avg, max) = (1338.309, 1743.197, 2015.771), stdev = 366.876
[info]   CI (99.9%): [330.490, 3155.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22082.472 ±(99.9%) 17911.820 B/op [Average]
[info]   (min, avg, max) = (16985.609, 22082.472, 25623.766), stdev = 4651.643
[info]   CI (99.9%): [4170.652, 39994.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.726), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.735 ±(99.9%) 80.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.735, 47.100), stdev = 20.895
[info]   CI (99.9%): [≈ 0, 90.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.815 ops/s
[info] # Warmup Iteration   2: 512993.906 ops/s
[info] # Warmup Iteration   3: 516374.736 ops/s
[info] # Warmup Iteration   4: 563663.645 ops/s
[info] # Warmup Iteration   5: 552290.230 ops/s
[info] Iteration   1: 564117.875 ops/s
[info]                  ·gc.alloc.rate:               599.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          1673.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1857.632 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 564450.971 ops/s
[info]                  ·gc.alloc.rate:               600.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          1673.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1856.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 564626.445 ops/s
[info]                  ·gc.alloc.rate:                   601.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              1676.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1856.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 562421.319 ops/s
[info]                  ·gc.alloc.rate:               607.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          1698.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1864.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 563991.174 ops/s
[info]                  ·gc.alloc.rate:                   603.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1684.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1860.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   563921.557 ±(99.9%) 3374.122 ops/s [Average]
[info]   (min, avg, max) = (562421.319, 563921.557, 564626.445), stdev = 876.249
[info]   CI (99.9%): [560547.435, 567295.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   602.455 ±(99.9%) 11.625 MB/sec [Average]
[info]   (min, avg, max) = (599.654, 602.455, 607.032), stdev = 3.019
[info]   CI (99.9%): [590.830, 614.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1681.259 ±(99.9%) 41.522 B/op [Average]
[info]   (min, avg, max) = (1673.068, 1681.259, 1698.661), stdev = 10.783
[info]   CI (99.9%): [1639.737, 1722.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.194 ±(99.9%) 1.725 MB/sec [Average]
[info]   (min, avg, max) = (665.805, 666.194, 666.952), stdev = 0.448
[info]   CI (99.9%): [664.469, 667.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1859.125 ±(99.9%) 12.421 B/op [Average]
[info]   (min, avg, max) = (1856.451, 1859.125, 1864.049), stdev = 3.226
[info]   CI (99.9%): [1846.704, 1871.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.035), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.098), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105924.377 ops/s
[info] # Warmup Iteration   2: 294425.285 ops/s
[info] # Warmup Iteration   3: 329083.112 ops/s
[info] # Warmup Iteration   4: 331255.606 ops/s
[info] # Warmup Iteration   5: 331685.777 ops/s
[info] Iteration   1: 331958.395 ops/s
[info]                  ·gc.alloc.rate:               474.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          2248.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2425.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 332613.135 ops/s
[info]                  ·gc.alloc.rate:      462.792 MB/sec
[info]                  ·gc.alloc.rate.norm: 2188.955 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 331857.487 ops/s
[info]                  ·gc.alloc.rate:               481.323 MB/sec
[info]                  ·gc.alloc.rate.norm:          2282.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3160.969 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 332448.175 ops/s
[info]                  ·gc.alloc.rate:                   474.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              2246.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3155.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 332345.642 ops/s
[info]                  ·gc.alloc.rate:               485.742 MB/sec
[info]                  ·gc.alloc.rate.norm:          2300.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3159.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   332244.567 ±(99.9%) 1246.621 ops/s [Average]
[info]   (min, avg, max) = (331857.487, 332244.567, 332613.135), stdev = 323.743
[info]   CI (99.9%): [330997.946, 333491.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   475.781 ±(99.9%) 33.455 MB/sec [Average]
[info]   (min, avg, max) = (462.792, 475.781, 485.742), stdev = 8.688
[info]   CI (99.9%): [442.325, 509.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2253.460 ±(99.9%) 164.191 B/op [Average]
[info]   (min, avg, max) = (2188.955, 2253.460, 2300.302), stdev = 42.640
[info]   CI (99.9%): [2089.269, 2417.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.402 ±(99.9%) 1111.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.402, 667.124), stdev = 288.776
[info]   CI (99.9%): [≈ 0, 1614.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2380.231 ±(99.9%) 5267.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2380.231, 3160.969), stdev = 1367.906
[info]   CI (99.9%): [≈ 0, 7647.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 490165.929 ops/s
[info] # Warmup Iteration   2: 753070.858 ops/s
[info] # Warmup Iteration   3: 734216.036 ops/s
[info] # Warmup Iteration   4: 768587.212 ops/s
[info] # Warmup Iteration   5: 768556.118 ops/s
[info] Iteration   1: 769778.235 ops/s
[info]                  ·gc.alloc.rate:                   518.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1059.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1046.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 770504.080 ops/s
[info]                  ·gc.alloc.rate:               523.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          1069.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1370.229 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 766382.435 ops/s
[info]                  ·gc.alloc.rate:               516.452 MB/sec
[info]                  ·gc.alloc.rate.norm:          1060.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1377.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 770150.084 ops/s
[info]                  ·gc.alloc.rate:                   527.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              1077.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1372.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 768291.707 ops/s
[info]                  ·gc.alloc.rate:      501.957 MB/sec
[info]                  ·gc.alloc.rate.norm: 1028.244 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   769021.308 ±(99.9%) 6540.898 ops/s [Average]
[info]   (min, avg, max) = (766382.435, 769021.308, 770504.080), stdev = 1698.650
[info]   CI (99.9%): [762480.410, 775562.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   517.631 ±(99.9%) 37.615 MB/sec [Average]
[info]   (min, avg, max) = (501.957, 517.631, 527.378), stdev = 9.768
[info]   CI (99.9%): [480.016, 555.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1059.177 ±(99.9%) 72.142 B/op [Average]
[info]   (min, avg, max) = (1028.244, 1059.177, 1077.294), stdev = 18.735
[info]   CI (99.9%): [987.036, 1131.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   505.043 ±(99.9%) 1119.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.043, 671.749), stdev = 290.651
[info]   CI (99.9%): [≈ 0, 1624.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1033.205 ±(99.9%) 2290.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1033.205, 1377.592), stdev = 594.723
[info]   CI (99.9%): [≈ 0, 3323.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.043), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7330.048 ops/s
[info] # Warmup Iteration   2: 59071.003 ops/s
[info] # Warmup Iteration   3: 70967.556 ops/s
[info] # Warmup Iteration   4: 70923.819 ops/s
[info] # Warmup Iteration   5: 71960.286 ops/s
[info] Iteration   1: 70873.448 ops/s
[info]                  ·gc.alloc.rate:                   2906.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              64538.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59258.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 71246.682 ops/s
[info]                  ·gc.alloc.rate:                   2957.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              65336.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73709.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.460 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 72401.235 ops/s
[info]                  ·gc.alloc.rate:                   2993.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              65066.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58185.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.453 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 72106.192 ops/s
[info]                  ·gc.alloc.rate:               2983.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          65087.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58624.990 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 72376.017 ops/s
[info]                  ·gc.alloc.rate:               2993.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          65082.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58593.827 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   71800.715 ±(99.9%) 2689.730 ops/s [Average]
[info]   (min, avg, max) = (70873.448, 71800.715, 72401.235), stdev = 698.514
[info]   CI (99.9%): [69110.985, 74490.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2966.894 ±(99.9%) 141.834 MB/sec [Average]
[info]   (min, avg, max) = (2906.417, 2966.894, 2993.645), stdev = 36.834
[info]   CI (99.9%): [2825.060, 3108.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65022.394 ±(99.9%) 1127.245 B/op [Average]
[info]   (min, avg, max) = (64538.505, 65022.394, 65336.718), stdev = 292.742
[info]   CI (99.9%): [63895.149, 66149.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2812.897 ±(99.9%) 1128.273 MB/sec [Average]
[info]   (min, avg, max) = (2668.637, 2812.897, 3336.738), stdev = 293.009
[info]   CI (99.9%): [1684.624, 3941.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61674.522 ±(99.9%) 25948.244 B/op [Average]
[info]   (min, avg, max) = (58185.838, 61674.522, 73709.491), stdev = 6738.677
[info]   CI (99.9%): [35726.278, 87622.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.275 ±(99.9%) 0.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 0.462), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77434.285 ops/s
[info] # Warmup Iteration   2: 193499.354 ops/s
[info] # Warmup Iteration   3: 198788.441 ops/s
[info] # Warmup Iteration   4: 201736.880 ops/s
[info] # Warmup Iteration   5: 201466.112 ops/s
[info] Iteration   1: 200138.747 ops/s
[info]                  ·gc.alloc.rate:               1479.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          11637.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15823.618 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 201182.685 ops/s
[info]                  ·gc.alloc.rate:                   1470.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              11505.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10505.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 202161.210 ops/s
[info]                  ·gc.alloc.rate:                   1478.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              11504.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10455.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 197399.650 ops/s
[info]                  ·gc.alloc.rate:                   1454.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              11596.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10685.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 202406.470 ops/s
[info]                  ·gc.alloc.rate:                   1493.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              11606.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10411.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   200657.753 ±(99.9%) 7815.610 ops/s [Average]
[info]   (min, avg, max) = (197399.650, 200657.753, 202406.470), stdev = 2029.689
[info]   CI (99.9%): [192842.143, 208473.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1475.302 ±(99.9%) 54.585 MB/sec [Average]
[info]   (min, avg, max) = (1454.512, 1475.302, 1493.245), stdev = 14.176
[info]   CI (99.9%): [1420.717, 1529.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11570.234 ±(99.9%) 237.062 B/op [Average]
[info]   (min, avg, max) = (11504.006, 11570.234, 11637.888), stdev = 61.564
[info]   CI (99.9%): [11333.172, 11807.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.636 ±(99.9%) 1155.105 MB/sec [Average]
[info]   (min, avg, max) = (1339.428, 1475.636, 2012.243), stdev = 299.977
[info]   CI (99.9%): [320.530, 2630.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11576.360 ±(99.9%) 9151.357 B/op [Average]
[info]   (min, avg, max) = (10411.378, 11576.360, 15823.618), stdev = 2376.578
[info]   CI (99.9%): [2425.003, 20727.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.415), stdev = 1.496
[info]   CI (99.9%): [≈ 0, 6.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.774 ±(99.9%) 44.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.774, 26.580), stdev = 11.641
[info]   CI (99.9%): [≈ 0, 50.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.827 ops/s
[info] # Warmup Iteration   2: 618978.875 ops/s
[info] # Warmup Iteration   3: 651246.740 ops/s
[info] # Warmup Iteration   4: 639709.558 ops/s
[info] # Warmup Iteration   5: 659309.668 ops/s
[info] Iteration   1: 659160.902 ops/s
[info]                  ·gc.alloc.rate:               375.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          896.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1221.536 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 661218.502 ops/s
[info]                  ·gc.alloc.rate:      360.744 MB/sec
[info]                  ·gc.alloc.rate.norm: 858.471 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 660327.640 ops/s
[info]                  ·gc.alloc.rate:               377.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          899.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1587.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 662430.613 ops/s
[info]                  ·gc.alloc.rate:      360.325 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 631759.780 ops/s
[info]                  ·gc.alloc.rate:                   357.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              890.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1659.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   654979.487 ±(99.9%) 50194.674 ops/s [Average]
[info]   (min, avg, max) = (631759.780, 654979.487, 662430.613), stdev = 13035.397
[info]   CI (99.9%): [604784.813, 705174.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   366.279 ±(99.9%) 36.318 MB/sec [Average]
[info]   (min, avg, max) = (357.371, 366.279, 377.562), stdev = 9.432
[info]   CI (99.9%): [329.961, 402.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   880.117 ±(99.9%) 81.577 B/op [Average]
[info]   (min, avg, max) = (856.001, 880.117, 899.699), stdev = 21.185
[info]   CI (99.9%): [798.540, 961.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.828 ±(99.9%) 1319.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.828, 666.261), stdev = 342.560
[info]   CI (99.9%): [≈ 0, 1687.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   893.737 ±(99.9%) 3206.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 893.737, 1659.502), stdev = 832.600
[info]   CI (99.9%): [≈ 0, 4099.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270124.366 ops/s
[info] # Warmup Iteration   2: 636756.803 ops/s
[info] # Warmup Iteration   3: 659995.212 ops/s
[info] # Warmup Iteration   4: 657661.838 ops/s
[info] # Warmup Iteration   5: 659273.750 ops/s
[info] Iteration   1: 653817.235 ops/s
[info]                  ·gc.alloc.rate:               498.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1231.487 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 657120.400 ops/s
[info]                  ·gc.alloc.rate:               501.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          1202.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1598.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 654988.839 ops/s
[info]                  ·gc.alloc.rate:               509.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          1222.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1603.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 658369.286 ops/s
[info]                  ·gc.alloc.rate:      488.697 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 661504.705 ops/s
[info]                  ·gc.alloc.rate:                   514.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1224.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1589.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   657160.093 ±(99.9%) 11588.523 ops/s [Average]
[info]   (min, avg, max) = (653817.235, 657160.093, 661504.705), stdev = 3009.503
[info]   CI (99.9%): [645571.570, 668748.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   502.699 ±(99.9%) 38.404 MB/sec [Average]
[info]   (min, avg, max) = (488.697, 502.699, 514.845), stdev = 9.973
[info]   CI (99.9%): [464.295, 541.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1203.727 ±(99.9%) 87.789 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1203.727, 1224.724), stdev = 22.798
[info]   CI (99.9%): [1115.939, 1291.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   503.011 ±(99.9%) 1113.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.011, 668.220), stdev = 289.216
[info]   CI (99.9%): [≈ 0, 1616.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1204.712 ±(99.9%) 2664.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1204.712, 1603.836), stdev = 691.857
[info]   CI (99.9%): [≈ 0, 3868.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 609419.512 ops/s
[info] # Warmup Iteration   2: 1060401.801 ops/s
[info] # Warmup Iteration   3: 1083052.296 ops/s
[info] # Warmup Iteration   4: 1039786.475 ops/s
[info] # Warmup Iteration   5: 1077992.637 ops/s
[info] Iteration   1: 1090060.521 ops/s
[info]                  ·gc.alloc.rate:               607.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 968.490 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1087204.981 ops/s
[info]                  ·gc.alloc.rate:               605.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          876.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 971.052 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1085488.109 ops/s
[info]                  ·gc.alloc.rate:               615.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          892.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 973.556 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1079640.299 ops/s
[info]                  ·gc.alloc.rate:               600.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 978.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1078699.572 ops/s
[info]                  ·gc.alloc.rate:                   603.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1084218.696 ±(99.9%) 18871.953 ops/s [Average]
[info]   (min, avg, max) = (1078699.572, 1084218.696, 1090060.521), stdev = 4900.986
[info]   CI (99.9%): [1065346.743, 1103090.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   606.496 ±(99.9%) 21.527 MB/sec [Average]
[info]   (min, avg, max) = (600.603, 606.496, 615.442), stdev = 5.590
[info]   CI (99.9%): [584.969, 628.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   880.370 ±(99.9%) 26.931 B/op [Average]
[info]   (min, avg, max) = (875.478, 880.370, 892.308), stdev = 6.994
[info]   CI (99.9%): [853.439, 907.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.279 ±(99.9%) 1.733 MB/sec [Average]
[info]   (min, avg, max) = (670.785, 671.279, 671.784), stdev = 0.450
[info]   CI (99.9%): [669.546, 673.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   974.426 ±(99.9%) 19.257 B/op [Average]
[info]   (min, avg, max) = (968.490, 974.426, 980.172), stdev = 5.001
[info]   CI (99.9%): [955.169, 993.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 683377.880 ops/s
[info] # Warmup Iteration   2: 1095942.051 ops/s
[info] # Warmup Iteration   3: 1181693.792 ops/s
[info] # Warmup Iteration   4: 1185112.163 ops/s
[info] # Warmup Iteration   5: 1185975.032 ops/s
[info] Iteration   1: 1187962.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1187563.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1187950.275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1191050.704 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1184683.259 ops/s
[info]                  ·gc.alloc.rate:      1.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.785 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1187842.085 ±(99.9%) 8691.071 ops/s [Average]
[info]   (min, avg, max) = (1184683.259, 1187842.085, 1191050.704), stdev = 2257.044
[info]   CI (99.9%): [1179151.014, 1196533.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.269 ±(99.9%) 2.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.269, 1.344), stdev = 0.601
[info]   CI (99.9%): [≈ 0, 2.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.357 ±(99.9%) 3.074 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.357, 1.785), stdev = 0.798
[info]   CI (99.9%): [≈ 0, 3.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8424.010 ops/s
[info] # Warmup Iteration   2: 30932.139 ops/s
[info] # Warmup Iteration   3: 34411.884 ops/s
[info] # Warmup Iteration   4: 33910.755 ops/s
[info] # Warmup Iteration   5: 34574.637 ops/s
[info] Iteration   1: 34692.604 ops/s
[info]                  ·gc.alloc.rate:                   1959.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              88885.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91355.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 34722.490 ops/s
[info]                  ·gc.alloc.rate:                   1969.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              89282.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91125.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34201.917 ops/s
[info]                  ·gc.alloc.rate:                   1952.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              89844.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92237.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34737.829 ops/s
[info]                  ·gc.alloc.rate:                   1956.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              88637.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60539.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34312.718 ops/s
[info]                  ·gc.alloc.rate:                   1973.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              90502.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91997.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34533.512 ±(99.9%) 984.503 ops/s [Average]
[info]   (min, avg, max) = (34201.917, 34533.512, 34737.829), stdev = 255.672
[info]   CI (99.9%): [33549.009, 35518.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1962.316 ±(99.9%) 33.868 MB/sec [Average]
[info]   (min, avg, max) = (1952.435, 1962.316, 1973.162), stdev = 8.795
[info]   CI (99.9%): [1928.448, 1996.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89430.444 ±(99.9%) 2899.370 B/op [Average]
[info]   (min, avg, max) = (88637.270, 89430.444, 90502.406), stdev = 752.957
[info]   CI (99.9%): [86531.074, 92329.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.191 ±(99.9%) 1157.410 MB/sec [Average]
[info]   (min, avg, max) = (1336.546, 1874.191, 2013.772), stdev = 300.576
[info]   CI (99.9%): [716.781, 3031.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85451.006 ±(99.9%) 53652.479 B/op [Average]
[info]   (min, avg, max) = (60539.458, 85451.006, 92237.413), stdev = 13933.378
[info]   CI (99.9%): [31798.527, 139103.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 5.155 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.854, 3.143), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 6.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   38.728 ±(99.9%) 233.807 B/op [Average]
[info]   (min, avg, max) = (0.943, 38.728, 142.601), stdev = 60.719
[info]   CI (99.9%): [≈ 0, 272.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14417.358 ops/s
[info] # Warmup Iteration   2: 115297.351 ops/s
[info] # Warmup Iteration   3: 124330.409 ops/s
[info] # Warmup Iteration   4: 130498.741 ops/s
[info] # Warmup Iteration   5: 127647.331 ops/s
[info] Iteration   1: 130701.420 ops/s
[info]                  ·gc.alloc.rate:               1664.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          20046.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16026.919 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 130805.811 ops/s
[info]                  ·gc.alloc.rate:                   1665.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              20036.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16026.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 129461.903 ops/s
[info]                  ·gc.alloc.rate:               1674.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          20355.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24340.005 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 128479.548 ops/s
[info]                  ·gc.alloc.rate:               1649.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          20200.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16377.115 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 127943.844 ops/s
[info]                  ·gc.alloc.rate:               1655.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          20366.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24733.929 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   129478.505 ±(99.9%) 4950.226 ops/s [Average]
[info]   (min, avg, max) = (127943.844, 129478.505, 130805.811), stdev = 1285.558
[info]   CI (99.9%): [124528.279, 134428.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1661.892 ±(99.9%) 37.584 MB/sec [Average]
[info]   (min, avg, max) = (1649.234, 1661.892, 1674.592), stdev = 9.760
[info]   CI (99.9%): [1624.308, 1699.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20201.316 ±(99.9%) 615.300 B/op [Average]
[info]   (min, avg, max) = (20036.997, 20201.316, 20366.435), stdev = 159.791
[info]   CI (99.9%): [19586.016, 20816.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1602.586 ±(99.9%) 1419.814 MB/sec [Average]
[info]   (min, avg, max) = (1330.948, 1602.586, 2010.616), stdev = 368.721
[info]   CI (99.9%): [182.772, 3022.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19500.834 ±(99.9%) 17719.411 B/op [Average]
[info]   (min, avg, max) = (16026.201, 19500.834, 24733.929), stdev = 4601.675
[info]   CI (99.9%): [1781.423, 37220.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.250), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.304
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58365.632 ops/s
[info] # Warmup Iteration   2: 187356.092 ops/s
[info] # Warmup Iteration   3: 199238.494 ops/s
[info] # Warmup Iteration   4: 205541.619 ops/s
[info] # Warmup Iteration   5: 199704.031 ops/s
[info] Iteration   1: 203810.657 ops/s
[info]                  ·gc.alloc.rate:                   1235.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              9539.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10313.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 205089.980 ops/s
[info]                  ·gc.alloc.rate:               1233.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          9465.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5129.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 206193.080 ops/s
[info]                  ·gc.alloc.rate:               1252.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          9555.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10207.426 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 205290.011 ops/s
[info]                  ·gc.alloc.rate:                   1249.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              9574.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10260.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 206433.121 ops/s
[info]                  ·gc.alloc.rate:                   1254.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              9565.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10192.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   205363.370 ±(99.9%) 4003.477 ops/s [Average]
[info]   (min, avg, max) = (203810.657, 205363.370, 206433.121), stdev = 1039.690
[info]   CI (99.9%): [201359.892, 209366.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1244.968 ±(99.9%) 38.226 MB/sec [Average]
[info]   (min, avg, max) = (1233.411, 1244.968, 1254.876), stdev = 9.927
[info]   CI (99.9%): [1206.743, 1283.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9540.011 ±(99.9%) 168.808 B/op [Average]
[info]   (min, avg, max) = (9465.134, 9540.011, 9574.655), stdev = 43.839
[info]   CI (99.9%): [9371.202, 9708.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.471 ±(99.9%) 1151.616 MB/sec [Average]
[info]   (min, avg, max) = (668.480, 1203.471, 1338.550), stdev = 299.071
[info]   CI (99.9%): [51.855, 2355.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9220.801 ±(99.9%) 8807.936 B/op [Average]
[info]   (min, avg, max) = (5129.880, 9220.801, 10313.896), stdev = 2287.393
[info]   CI (99.9%): [412.865, 18028.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.477), stdev = 1.508
[info]   CI (99.9%): [≈ 0, 6.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.283 ±(99.9%) 44.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.283, 26.653), stdev = 11.556
[info]   CI (99.9%): [≈ 0, 50.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98581.826 ops/s
[info] # Warmup Iteration   2: 241848.715 ops/s
[info] # Warmup Iteration   3: 249221.725 ops/s
[info] # Warmup Iteration   4: 252815.631 ops/s
[info] # Warmup Iteration   5: 252477.493 ops/s
[info] Iteration   1: 241020.441 ops/s
[info]                  ·gc.alloc.rate:               1280.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          8358.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4389.149 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 245660.690 ops/s
[info]                  ·gc.alloc.rate:                   1320.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              8458.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8621.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 245695.840 ops/s
[info]                  ·gc.alloc.rate:                   1319.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              8449.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8620.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 244098.837 ops/s
[info]                  ·gc.alloc.rate:                   1311.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              8452.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8684.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 246514.081 ops/s
[info]                  ·gc.alloc.rate:                   1324.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              8454.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8582.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   244597.978 ±(99.9%) 8404.207 ops/s [Average]
[info]   (min, avg, max) = (241020.441, 244597.978, 246514.081), stdev = 2182.546
[info]   CI (99.9%): [236193.771, 253002.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1311.142 ±(99.9%) 69.000 MB/sec [Average]
[info]   (min, avg, max) = (1280.285, 1311.142, 1324.632), stdev = 17.919
[info]   CI (99.9%): [1242.142, 1380.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8434.752 ±(99.9%) 164.246 B/op [Average]
[info]   (min, avg, max) = (8358.681, 8434.752, 8458.883), stdev = 42.654
[info]   CI (99.9%): [8270.506, 8598.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.179 ±(99.9%) 1160.029 MB/sec [Average]
[info]   (min, avg, max) = (672.279, 1211.179, 1347.294), stdev = 301.256
[info]   CI (99.9%): [51.150, 2371.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7779.657 ±(99.9%) 7299.694 B/op [Average]
[info]   (min, avg, max) = (4389.149, 7779.657, 8684.980), stdev = 1895.707
[info]   CI (99.9%): [479.963, 15079.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.608 ±(99.9%) 4.706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.790), stdev = 1.222
[info]   CI (99.9%): [≈ 0, 5.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.917 ±(99.9%) 30.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.917, 17.986), stdev = 7.879
[info]   CI (99.9%): [≈ 0, 34.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6167.927 ops/s
[info] # Warmup Iteration   2: 55983.056 ops/s
[info] # Warmup Iteration   3: 67616.378 ops/s
[info] # Warmup Iteration   4: 69420.143 ops/s
[info] # Warmup Iteration   5: 69859.172 ops/s
[info] Iteration   1: 69504.350 ops/s
[info]                  ·gc.alloc.rate:                   2798.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              63357.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60759.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.785 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 69928.787 ops/s
[info]                  ·gc.alloc.rate:                   2804.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              63071.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75600.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 68561.729 ops/s
[info]                  ·gc.alloc.rate:               2749.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          63112.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46473.224 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 68745.729 ops/s
[info]                  ·gc.alloc.rate:               2783.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          63734.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61915.974 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 69739.618 ops/s
[info]                  ·gc.alloc.rate:               2823.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          63717.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61152.151 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   69296.043 ±(99.9%) 2344.295 ops/s [Average]
[info]   (min, avg, max) = (68561.729, 69296.043, 69928.787), stdev = 608.806
[info]   CI (99.9%): [66951.748, 71640.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2791.875 ±(99.9%) 106.267 MB/sec [Average]
[info]   (min, avg, max) = (2749.535, 2791.875, 2823.482), stdev = 27.597
[info]   CI (99.9%): [2685.608, 2898.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63398.634 ±(99.9%) 1224.743 B/op [Average]
[info]   (min, avg, max) = (63071.653, 63398.634, 63734.041), stdev = 318.062
[info]   CI (99.9%): [62173.891, 64623.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2696.737 ±(99.9%) 1819.958 MB/sec [Average]
[info]   (min, avg, max) = (2024.640, 2696.737, 3361.137), stdev = 472.637
[info]   CI (99.9%): [876.779, 4516.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61180.389 ±(99.9%) 39689.868 B/op [Average]
[info]   (min, avg, max) = (46473.224, 61180.389, 75600.688), stdev = 10307.333
[info]   CI (99.9%): [21490.521, 100870.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.520), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.450 ±(99.9%) 20.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.450, 11.785), stdev = 5.222
[info]   CI (99.9%): [≈ 0, 22.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67159.355 ops/s
[info] # Warmup Iteration   2: 173908.702 ops/s
[info] # Warmup Iteration   3: 174803.282 ops/s
[info] # Warmup Iteration   4: 177603.395 ops/s
[info] # Warmup Iteration   5: 176271.861 ops/s
[info] Iteration   1: 182554.757 ops/s
[info]                  ·gc.alloc.rate:                   1200.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              10347.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5780.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 181339.421 ops/s
[info]                  ·gc.alloc.rate:                   1207.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              10481.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11641.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 181759.910 ops/s
[info]                  ·gc.alloc.rate:                   1218.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11622.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 174684.550 ops/s
[info]                  ·gc.alloc.rate:                   1186.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              10687.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12100.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 182331.174 ops/s
[info]                  ·gc.alloc.rate:                   1210.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              10445.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5796.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   180533.962 ±(99.9%) 12724.750 ops/s [Average]
[info]   (min, avg, max) = (174684.550, 180533.962, 182554.757), stdev = 3304.577
[info]   CI (99.9%): [167809.212, 193258.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1204.463 ±(99.9%) 46.214 MB/sec [Average]
[info]   (min, avg, max) = (1186.240, 1204.463, 1218.069), stdev = 12.002
[info]   CI (99.9%): [1158.249, 1250.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10501.393 ±(99.9%) 485.865 B/op [Average]
[info]   (min, avg, max) = (10347.829, 10501.393, 10687.528), stdev = 126.177
[info]   CI (99.9%): [10015.529, 10987.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.753 ±(99.9%) 1415.699 MB/sec [Average]
[info]   (min, avg, max) = (670.493, 1073.753, 1343.028), stdev = 367.652
[info]   CI (99.9%): [≈ 0, 2489.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9388.065 ±(99.9%) 12675.024 B/op [Average]
[info]   (min, avg, max) = (5780.308, 9388.065, 12100.131), stdev = 3291.664
[info]   CI (99.9%): [≈ 0, 22063.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 4.911 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.699, 2.956), stdev = 1.275
[info]   CI (99.9%): [≈ 0, 5.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.262 ±(99.9%) 44.289 B/op [Average]
[info]   (min, avg, max) = (0.179, 6.262, 26.634), stdev = 11.502
[info]   CI (99.9%): [≈ 0, 50.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261091.003 ops/s
[info] # Warmup Iteration   2: 701256.393 ops/s
[info] # Warmup Iteration   3: 725447.764 ops/s
[info] # Warmup Iteration   4: 713188.460 ops/s
[info] # Warmup Iteration   5: 713780.893 ops/s
[info] Iteration   1: 712655.002 ops/s
[info]                  ·gc.alloc.rate:               745.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1473.393 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 712886.306 ops/s
[info]                  ·gc.alloc.rate:               750.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          1655.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1474.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 724174.287 ops/s
[info]                  ·gc.alloc.rate:               754.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          1638.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1451.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 727601.271 ops/s
[info]                  ·gc.alloc.rate:               753.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          1629.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1445.229 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 714439.770 ops/s
[info]                  ·gc.alloc.rate:                   738.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              1627.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   718351.327 ±(99.9%) 27028.887 ops/s [Average]
[info]   (min, avg, max) = (712655.002, 718351.327, 727601.271), stdev = 7019.316
[info]   CI (99.9%): [691322.441, 745380.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   748.457 ±(99.9%) 24.507 MB/sec [Average]
[info]   (min, avg, max) = (738.669, 748.457, 754.108), stdev = 6.364
[info]   CI (99.9%): [723.950, 772.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1639.706 ±(99.9%) 46.471 B/op [Average]
[info]   (min, avg, max) = (1627.121, 1639.706, 1655.957), stdev = 12.068
[info]   CI (99.9%): [1593.234, 1686.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.878 ±(99.9%) 1.663 MB/sec [Average]
[info]   (min, avg, max) = (667.150, 667.878, 668.205), stdev = 0.432
[info]   CI (99.9%): [666.214, 669.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1463.238 ±(99.9%) 53.368 B/op [Average]
[info]   (min, avg, max) = (1445.229, 1463.238, 1474.351), stdev = 13.859
[info]   CI (99.9%): [1409.870, 1516.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418769.407 ops/s
[info] # Warmup Iteration   2: 668715.555 ops/s
[info] # Warmup Iteration   3: 699489.986 ops/s
[info] # Warmup Iteration   4: 669299.107 ops/s
[info] # Warmup Iteration   5: 703609.775 ops/s
[info] Iteration   1: 716138.679 ops/s
[info]                  ·gc.alloc.rate:                   568.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              1250.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1473.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 712681.949 ops/s
[info]                  ·gc.alloc.rate:      547.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 708959.106 ops/s
[info]                  ·gc.alloc.rate:               559.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1488.505 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 707433.962 ops/s
[info]                  ·gc.alloc.rate:                   561.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1493.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 705318.664 ops/s
[info]                  ·gc.alloc.rate:               559.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          1249.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1497.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   710106.472 ±(99.9%) 16607.223 ops/s [Average]
[info]   (min, avg, max) = (705318.664, 710106.472, 716138.679), stdev = 4312.843
[info]   CI (99.9%): [693499.248, 726713.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   559.329 ±(99.9%) 30.269 MB/sec [Average]
[info]   (min, avg, max) = (547.110, 559.329, 568.883), stdev = 7.861
[info]   CI (99.9%): [529.060, 589.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1239.637 ±(99.9%) 69.667 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1239.637, 1250.149), stdev = 18.092
[info]   CI (99.9%): [1169.970, 1309.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.679 ±(99.9%) 1155.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.679, 671.168), stdev = 300.013
[info]   CI (99.9%): [≈ 0, 1691.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1190.569 ±(99.9%) 2563.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1190.569, 1497.651), stdev = 665.610
[info]   CI (99.9%): [≈ 0, 3753.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429730.148 ops/s
[info] # Warmup Iteration   2: 754080.385 ops/s
[info] # Warmup Iteration   3: 778530.895 ops/s
[info] # Warmup Iteration   4: 776716.718 ops/s
[info] # Warmup Iteration   5: 778721.691 ops/s
[info] Iteration   1: 778200.752 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 779209.746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 778784.650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 778387.125 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 778778.200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   778672.095 ±(99.9%) 1511.553 ops/s [Average]
[info]   (min, avg, max) = (778200.752, 778672.095, 779209.746), stdev = 392.546
[info]   CI (99.9%): [777160.541, 780183.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96385.807 ops/s
[info] # Warmup Iteration   2: 322433.032 ops/s
[info] # Warmup Iteration   3: 359787.621 ops/s
[info] # Warmup Iteration   4: 361853.850 ops/s
[info] # Warmup Iteration   5: 356982.935 ops/s
[info] Iteration   1: 363551.021 ops/s
[info]                  ·gc.alloc.rate:                   1022.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              4426.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2873.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 361657.110 ops/s
[info]                  ·gc.alloc.rate:               1033.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          4499.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5789.330 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 361951.279 ops/s
[info]                  ·gc.alloc.rate:               1008.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          4382.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2897.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 362358.006 ops/s
[info]                  ·gc.alloc.rate:                   1036.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              4500.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5795.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 362073.370 ops/s
[info]                  ·gc.alloc.rate:               1008.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          4381.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2902.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   362318.157 ±(99.9%) 2825.075 ops/s [Average]
[info]   (min, avg, max) = (361657.110, 362318.157, 363551.021), stdev = 733.663
[info]   CI (99.9%): [359493.082, 365143.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1021.856 ±(99.9%) 52.137 MB/sec [Average]
[info]   (min, avg, max) = (1008.094, 1021.856, 1036.447), stdev = 13.540
[info]   CI (99.9%): [969.719, 1073.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4438.082 ±(99.9%) 227.345 B/op [Average]
[info]   (min, avg, max) = (4381.865, 4438.082, 4500.285), stdev = 59.041
[info]   CI (99.9%): [4210.737, 4665.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   932.691 ±(99.9%) 1405.603 MB/sec [Average]
[info]   (min, avg, max) = (663.884, 932.691, 1334.664), stdev = 365.031
[info]   CI (99.9%): [≈ 0, 2338.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4051.785 ±(99.9%) 6118.105 B/op [Average]
[info]   (min, avg, max) = (2873.771, 4051.785, 5795.156), stdev = 1588.852
[info]   CI (99.9%): [≈ 0, 10169.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.045 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.134), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1949.146 ops/s
[info] # Warmup Iteration   2: 9728.696 ops/s
[info] # Warmup Iteration   3: 10995.644 ops/s
[info] # Warmup Iteration   4: 11065.795 ops/s
[info] # Warmup Iteration   5: 11251.550 ops/s
[info] Iteration   1: 11379.216 ops/s
[info]                  ·gc.alloc.rate:                   1433.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              198237.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185725.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.758 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11345.293 ops/s
[info]                  ·gc.alloc.rate:                   1450.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              201255.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186298.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11314.454 ops/s
[info]                  ·gc.alloc.rate:                   1444.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              200910.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186885.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11397.068 ops/s
[info]                  ·gc.alloc.rate:                   1443.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              199373.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185340.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11183.449 ops/s
[info]                  ·gc.alloc.rate:               1435.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          202082.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 188434.310 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11323.896 ±(99.9%) 326.095 ops/s [Average]
[info]   (min, avg, max) = (11183.449, 11323.896, 11397.068), stdev = 84.686
[info]   CI (99.9%): [10997.801, 11649.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1441.654 ±(99.9%) 26.969 MB/sec [Average]
[info]   (min, avg, max) = (1433.343, 1441.654, 1450.743), stdev = 7.004
[info]   CI (99.9%): [1414.685, 1468.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   200371.839 ±(99.9%) 5948.850 B/op [Average]
[info]   (min, avg, max) = (198237.517, 200371.839, 202082.313), stdev = 1544.898
[info]   CI (99.9%): [194422.989, 206320.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.110 ±(99.9%) 6.967 MB/sec [Average]
[info]   (min, avg, max) = (1338.985, 1342.110, 1343.546), stdev = 1.809
[info]   CI (99.9%): [1335.143, 1349.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   186536.778 ±(99.9%) 4663.861 B/op [Average]
[info]   (min, avg, max) = (185340.407, 186536.778, 188434.310), stdev = 1211.190
[info]   CI (99.9%): [181872.917, 191200.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.828 ±(99.9%) 5.415 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.828, 3.268), stdev = 1.406
[info]   CI (99.9%): [≈ 0, 6.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   115.067 ±(99.9%) 753.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.067, 454.588), stdev = 195.612
[info]   CI (99.9%): [≈ 0, 868.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1063.518 ops/s
[info] # Warmup Iteration   2: 9451.103 ops/s
[info] # Warmup Iteration   3: 10810.300 ops/s
[info] # Warmup Iteration   4: 10602.773 ops/s
[info] # Warmup Iteration   5: 10815.275 ops/s
[info] Iteration   1: 10863.649 ops/s
[info]                  ·gc.alloc.rate:               1249.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          180949.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96886.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 10535.375 ops/s
[info]                  ·gc.alloc.rate:               1238.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          184983.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 199873.294 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 10759.902 ops/s
[info]                  ·gc.alloc.rate:                   1257.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              183909.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195791.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10824.533 ops/s
[info]                  ·gc.alloc.rate:                   1254.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              182333.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194779.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 10882.481 ops/s
[info]                  ·gc.alloc.rate:                   1273.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              184107.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193549.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10773.188 ±(99.9%) 542.845 ops/s [Average]
[info]   (min, avg, max) = (10535.375, 10773.188, 10882.481), stdev = 140.975
[info]   CI (99.9%): [10230.343, 11316.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1254.364 ±(99.9%) 48.841 MB/sec [Average]
[info]   (min, avg, max) = (1238.302, 1254.364, 1273.014), stdev = 12.684
[info]   CI (99.9%): [1205.522, 1303.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   183256.516 ±(99.9%) 6181.503 B/op [Average]
[info]   (min, avg, max) = (180949.260, 183256.516, 184983.365), stdev = 1605.317
[info]   CI (99.9%): [177075.013, 189438.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.674 ±(99.9%) 1153.551 MB/sec [Average]
[info]   (min, avg, max) = (668.781, 1204.674, 1339.656), stdev = 299.573
[info]   CI (99.9%): [51.123, 2358.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   176176.186 ±(99.9%) 170921.316 B/op [Average]
[info]   (min, avg, max) = (96886.647, 176176.186, 199873.294), stdev = 44387.723
[info]   CI (99.9%): [5254.870, 347097.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 6.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 3.791), stdev = 1.645
[info]   CI (99.9%): [≈ 0, 7.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   128.912 ±(99.9%) 921.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.912, 551.195), stdev = 239.213
[info]   CI (99.9%): [≈ 0, 1050.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143069.375 ops/s
[info] # Warmup Iteration   2: 265218.582 ops/s
[info] # Warmup Iteration   3: 274719.072 ops/s
[info] # Warmup Iteration   4: 276240.470 ops/s
[info] # Warmup Iteration   5: 275111.709 ops/s
[info] Iteration   1: 272399.667 ops/s
[info]                  ·gc.alloc.rate:                   1838.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11669.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 272768.657 ops/s
[info]                  ·gc.alloc.rate:                   1814.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              10463.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7764.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 277248.805 ops/s
[info]                  ·gc.alloc.rate:               1883.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          10693.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11438.873 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 270374.615 ops/s
[info]                  ·gc.alloc.rate:                   1827.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              10635.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11725.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 277465.660 ops/s
[info]                  ·gc.alloc.rate:               1856.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          10530.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7621.239 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   274051.481 ±(99.9%) 12142.200 ops/s [Average]
[info]   (min, avg, max) = (270374.615, 274051.481, 277465.660), stdev = 3153.291
[info]   CI (99.9%): [261909.281, 286193.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1844.077 ±(99.9%) 104.238 MB/sec [Average]
[info]   (min, avg, max) = (1814.250, 1844.077, 1883.714), stdev = 27.070
[info]   CI (99.9%): [1739.839, 1948.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10589.385 ±(99.9%) 352.129 B/op [Average]
[info]   (min, avg, max) = (10463.527, 10589.385, 10693.094), stdev = 91.447
[info]   CI (99.9%): [10237.256, 10941.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.807 ±(99.9%) 1416.224 MB/sec [Average]
[info]   (min, avg, max) = (1343.633, 1747.807, 2019.732), stdev = 367.789
[info]   CI (99.9%): [331.583, 3164.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10043.931 ±(99.9%) 8277.565 B/op [Average]
[info]   (min, avg, max) = (7621.239, 10043.931, 11725.724), stdev = 2149.657
[info]   CI (99.9%): [1766.366, 18321.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 4.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.540), stdev = 1.100
[info]   CI (99.9%): [≈ 0, 4.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.487 ±(99.9%) 24.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.487, 14.674), stdev = 6.354
[info]   CI (99.9%): [≈ 0, 27.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1103.928 ops/s
[info] # Warmup Iteration   2: 7126.046 ops/s
[info] # Warmup Iteration   3: 8594.616 ops/s
[info] # Warmup Iteration   4: 8731.736 ops/s
[info] # Warmup Iteration   5: 8706.041 ops/s
[info] Iteration   1: 8736.142 ops/s
[info]                  ·gc.alloc.rate:                   1577.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              284253.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241083.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8765.538 ops/s
[info]                  ·gc.alloc.rate:                   1581.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              283816.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240405.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8732.049 ops/s
[info]                  ·gc.alloc.rate:                   1599.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              288324.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361731.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 822.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8757.468 ops/s
[info]                  ·gc.alloc.rate:                   1601.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              287875.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239760.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.444 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8730.424 ops/s
[info]                  ·gc.alloc.rate:               1584.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          285732.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240288.660 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8744.324 ±(99.9%) 61.899 ops/s [Average]
[info]   (min, avg, max) = (8730.424, 8744.324, 8765.538), stdev = 16.075
[info]   CI (99.9%): [8682.425, 8806.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1589.165 ±(99.9%) 42.302 MB/sec [Average]
[info]   (min, avg, max) = (1577.789, 1589.165, 1601.889), stdev = 10.986
[info]   CI (99.9%): [1546.863, 1631.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286000.675 ±(99.9%) 7894.215 B/op [Average]
[info]   (min, avg, max) = (283816.887, 286000.675, 288324.823), stdev = 2050.103
[info]   CI (99.9%): [278106.460, 293894.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.362 ±(99.9%) 1155.435 MB/sec [Average]
[info]   (min, avg, max) = (1332.880, 1470.362, 2007.108), stdev = 300.063
[info]   CI (99.9%): [314.928, 2625.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   264653.855 ±(99.9%) 208973.985 B/op [Average]
[info]   (min, avg, max) = (239760.015, 264653.855, 361731.107), stdev = 54269.880
[info]   CI (99.9%): [55679.869, 473627.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.945 ±(99.9%) 7.787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.945, 4.561), stdev = 2.022
[info]   CI (99.9%): [≈ 0, 8.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   170.231 ±(99.9%) 1403.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 170.231, 822.034), stdev = 364.477
[info]   CI (99.9%): [≈ 0, 1573.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9139.488 ops/s
[info] # Warmup Iteration   2: 23770.347 ops/s
[info] # Warmup Iteration   3: 25606.451 ops/s
[info] # Warmup Iteration   4: 26194.905 ops/s
[info] # Warmup Iteration   5: 25862.829 ops/s
[info] Iteration   1: 26189.572 ops/s
[info]                  ·gc.alloc.rate:                   1378.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              82825.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80602.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 26172.860 ops/s
[info]                  ·gc.alloc.rate:                   1365.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              82132.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80712.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 25932.391 ops/s
[info]                  ·gc.alloc.rate:                   1365.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              82854.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81502.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26359.137 ops/s
[info]                  ·gc.alloc.rate:                   1399.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              83566.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80105.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26139.406 ops/s
[info]                  ·gc.alloc.rate:                   1377.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              82921.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80656.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26158.673 ±(99.9%) 586.882 ops/s [Average]
[info]   (min, avg, max) = (25932.391, 26158.673, 26359.137), stdev = 152.411
[info]   CI (99.9%): [25571.792, 26745.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1377.249 ±(99.9%) 53.541 MB/sec [Average]
[info]   (min, avg, max) = (1365.235, 1377.249, 1399.588), stdev = 13.904
[info]   CI (99.9%): [1323.709, 1430.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82859.915 ±(99.9%) 1957.366 B/op [Average]
[info]   (min, avg, max) = (82132.142, 82859.915, 83566.218), stdev = 508.322
[info]   CI (99.9%): [80902.549, 84817.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.559 ±(99.9%) 4.802 MB/sec [Average]
[info]   (min, avg, max) = (1339.648, 1341.559, 1342.961), stdev = 1.247
[info]   CI (99.9%): [1336.758, 1346.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80715.954 ±(99.9%) 1932.145 B/op [Average]
[info]   (min, avg, max) = (80105.908, 80715.954, 81502.457), stdev = 501.772
[info]   CI (99.9%): [78783.809, 82648.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.744 ±(99.9%) 5.044 MB/sec [Average]
[info]   (min, avg, max) = (0.014, 0.744, 3.039), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45.012 ±(99.9%) 306.158 B/op [Average]
[info]   (min, avg, max) = (0.817, 45.012, 184.452), stdev = 79.508
[info]   CI (99.9%): [≈ 0, 351.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10240.287 ops/s
[info] # Warmup Iteration   2: 29810.410 ops/s
[info] # Warmup Iteration   3: 31489.472 ops/s
[info] # Warmup Iteration   4: 31544.320 ops/s
[info] # Warmup Iteration   5: 32525.653 ops/s
[info] Iteration   1: 32667.507 ops/s
[info]                  ·gc.alloc.rate:                   1354.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              65239.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64117.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 32710.931 ops/s
[info]                  ·gc.alloc.rate:                   1361.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              65490.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64069.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 31663.940 ops/s
[info]                  ·gc.alloc.rate:                   1320.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              65643.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66272.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 32628.277 ops/s
[info]                  ·gc.alloc.rate:               1356.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          65429.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64391.319 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31468.954 ops/s
[info]                  ·gc.alloc.rate:                   1313.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              65668.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66862.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   32227.922 ±(99.9%) 2342.987 ops/s [Average]
[info]   (min, avg, max) = (31468.954, 32227.922, 32710.931), stdev = 608.466
[info]   CI (99.9%): [29884.935, 34570.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1341.332 ±(99.9%) 85.714 MB/sec [Average]
[info]   (min, avg, max) = (1313.644, 1341.332, 1361.479), stdev = 22.260
[info]   CI (99.9%): [1255.618, 1427.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65494.450 ±(99.9%) 671.821 B/op [Average]
[info]   (min, avg, max) = (65239.705, 65494.450, 65668.729), stdev = 174.470
[info]   CI (99.9%): [64822.629, 66166.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1333.770 ±(99.9%) 10.003 MB/sec [Average]
[info]   (min, avg, max) = (1330.896, 1333.770, 1337.521), stdev = 2.598
[info]   CI (99.9%): [1323.767, 1343.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65142.807 ±(99.9%) 5093.974 B/op [Average]
[info]   (min, avg, max) = (64069.673, 65142.807, 66862.336), stdev = 1322.889
[info]   CI (99.9%): [60048.833, 70236.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.023 ±(99.9%) 2.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.023, 2.069), stdev = 0.732
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248731.566 ops/s
[info] # Warmup Iteration   2: 623610.850 ops/s
[info] # Warmup Iteration   3: 634276.550 ops/s
[info] # Warmup Iteration   4: 641524.936 ops/s
[info] # Warmup Iteration   5: 634519.924 ops/s
[info] Iteration   1: 630725.894 ops/s
[info]                  ·gc.alloc.rate:                   1152.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              2876.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1676.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 631146.375 ops/s
[info]                  ·gc.alloc.rate:                   1169.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              2916.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3351.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 630500.619 ops/s
[info]                  ·gc.alloc.rate:                   1176.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              2936.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3356.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 628800.080 ops/s
[info]                  ·gc.alloc.rate:               1160.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          2904.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1683.082 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 633990.954 ops/s
[info]                  ·gc.alloc.rate:                   1184.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              2939.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3340.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   631032.784 ±(99.9%) 7236.246 ops/s [Average]
[info]   (min, avg, max) = (628800.080, 631032.784, 633990.954), stdev = 1879.230
[info]   CI (99.9%): [623796.539, 638269.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1168.697 ±(99.9%) 47.609 MB/sec [Average]
[info]   (min, avg, max) = (1152.919, 1168.697, 1184.127), stdev = 12.364
[info]   CI (99.9%): [1121.088, 1216.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2914.699 ±(99.9%) 98.470 B/op [Average]
[info]   (min, avg, max) = (2876.837, 2914.699, 2939.675), stdev = 25.572
[info]   CI (99.9%): [2816.228, 3013.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.754 ±(99.9%) 1418.790 MB/sec [Average]
[info]   (min, avg, max) = (671.828, 1075.754, 1345.521), stdev = 368.455
[info]   CI (99.9%): [≈ 0, 2494.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2681.574 ±(99.9%) 3521.690 B/op [Average]
[info]   (min, avg, max) = (1676.388, 2681.574, 3356.541), stdev = 914.572
[info]   CI (99.9%): [≈ 0, 6203.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 5.632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.291), stdev = 1.463
[info]   CI (99.9%): [≈ 0, 6.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.676 ±(99.9%) 13.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.676, 8.170), stdev = 3.631
[info]   CI (99.9%): [≈ 0, 15.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437145.692 ops/s
[info] # Warmup Iteration   2: 772466.189 ops/s
[info] # Warmup Iteration   3: 772541.700 ops/s
[info] # Warmup Iteration   4: 777327.093 ops/s
[info] # Warmup Iteration   5: 777028.149 ops/s
[info] Iteration   1: 775978.714 ops/s
[info]                  ·gc.alloc.rate:      0.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.338 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 777302.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 777345.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 779584.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779228.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   777887.924 ±(99.9%) 5762.631 ops/s [Average]
[info]   (min, avg, max) = (775978.714, 777887.924, 779584.372), stdev = 1496.537
[info]   CI (99.9%): [772125.293, 783650.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.167), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.068 ±(99.9%) 0.581 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.068, 0.338), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9640.064 ops/s
[info] # Warmup Iteration   2: 27298.989 ops/s
[info] # Warmup Iteration   3: 29210.410 ops/s
[info] # Warmup Iteration   4: 28085.801 ops/s
[info] # Warmup Iteration   5: 29257.120 ops/s
[info] Iteration   1: 29361.064 ops/s
[info]                  ·gc.alloc.rate:                   1332.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              71449.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71842.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 29412.141 ops/s
[info]                  ·gc.alloc.rate:               1340.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          71704.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71789.512 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 30280.655 ops/s
[info]                  ·gc.alloc.rate:                   1364.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              70917.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69727.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30126.772 ops/s
[info]                  ·gc.alloc.rate:                   1369.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              71550.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70155.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203.359 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 30250.207 ops/s
[info]                  ·gc.alloc.rate:                   1374.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              71506.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69662.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   29886.168 ±(99.9%) 1771.369 ops/s [Average]
[info]   (min, avg, max) = (29361.064, 29886.168, 30280.655), stdev = 460.019
[info]   CI (99.9%): [28114.799, 31657.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1356.288 ±(99.9%) 71.566 MB/sec [Average]
[info]   (min, avg, max) = (1332.941, 1356.288, 1374.355), stdev = 18.586
[info]   CI (99.9%): [1284.722, 1427.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71425.715 ±(99.9%) 1152.607 B/op [Average]
[info]   (min, avg, max) = (70917.800, 71425.715, 71704.501), stdev = 299.328
[info]   CI (99.9%): [70273.108, 72578.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.065 ±(99.9%) 5.888 MB/sec [Average]
[info]   (min, avg, max) = (1338.913, 1341.065, 1342.954), stdev = 1.529
[info]   CI (99.9%): [1335.177, 1346.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70635.543 ±(99.9%) 4214.252 B/op [Average]
[info]   (min, avg, max) = (69662.461, 70635.543, 71842.774), stdev = 1094.428
[info]   CI (99.9%): [66421.291, 74849.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.893), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   41.984 ±(99.9%) 347.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.984, 203.359), stdev = 90.219
[info]   CI (99.9%): [≈ 0, 389.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2446.081 ops/s
[info] # Warmup Iteration   2: 29560.122 ops/s
[info] # Warmup Iteration   3: 33033.186 ops/s
[info] # Warmup Iteration   4: 32630.416 ops/s
[info] # Warmup Iteration   5: 32751.896 ops/s
[info] Iteration   1: 33024.908 ops/s
[info]                  ·gc.alloc.rate:                   1758.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              83780.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95923.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 33194.758 ops/s
[info]                  ·gc.alloc.rate:                   1747.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              82851.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63656.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 32438.887 ops/s
[info]                  ·gc.alloc.rate:                   1723.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              83617.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97537.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 32962.817 ops/s
[info]                  ·gc.alloc.rate:                   1758.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              83954.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95799.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 32512.638 ops/s
[info]                  ·gc.alloc.rate:                   1711.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              82856.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64748.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   32826.802 ±(99.9%) 1280.468 ops/s [Average]
[info]   (min, avg, max) = (32438.887, 32826.802, 33194.758), stdev = 332.534
[info]   CI (99.9%): [31546.333, 34107.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1739.944 ±(99.9%) 81.686 MB/sec [Average]
[info]   (min, avg, max) = (1711.616, 1739.944, 1758.403), stdev = 21.214
[info]   CI (99.9%): [1658.257, 1821.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83412.081 ±(99.9%) 2014.481 B/op [Average]
[info]   (min, avg, max) = (82851.884, 83412.081, 83954.537), stdev = 523.154
[info]   CI (99.9%): [81397.600, 85426.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.133 ±(99.9%) 1413.128 MB/sec [Average]
[info]   (min, avg, max) = (1337.543, 1742.133, 2013.282), stdev = 366.985
[info]   CI (99.9%): [329.005, 3155.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   83533.095 ±(99.9%) 68017.627 B/op [Average]
[info]   (min, avg, max) = (63656.775, 83533.095, 97537.444), stdev = 17663.962
[info]   CI (99.9%): [15515.468, 151550.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.161 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.808, 3.664), stdev = 1.600
[info]   CI (99.9%): [≈ 0, 6.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   38.364 ±(99.9%) 291.974 B/op [Average]
[info]   (min, avg, max) = (1.008, 38.364, 173.710), stdev = 75.825
[info]   CI (99.9%): [≈ 0, 330.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4544.292 ops/s
[info] # Warmup Iteration   2: 32791.017 ops/s
[info] # Warmup Iteration   3: 35473.296 ops/s
[info] # Warmup Iteration   4: 35608.746 ops/s
[info] # Warmup Iteration   5: 35762.737 ops/s
[info] Iteration   1: 36011.296 ops/s
[info]                  ·gc.alloc.rate:                   1582.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              69181.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58487.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 35666.370 ops/s
[info]                  ·gc.alloc.rate:                   1562.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              68954.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59083.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34403.706 ops/s
[info]                  ·gc.alloc.rate:                   1519.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              69504.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61315.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 35690.671 ops/s
[info]                  ·gc.alloc.rate:                   1588.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              70031.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88358.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.918 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35708.419 ops/s
[info]                  ·gc.alloc.rate:                   1575.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              69442.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58807.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   35496.092 ±(99.9%) 2412.944 ops/s [Average]
[info]   (min, avg, max) = (34403.706, 35496.092, 36011.296), stdev = 626.634
[info]   CI (99.9%): [33083.149, 37909.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1565.760 ±(99.9%) 106.369 MB/sec [Average]
[info]   (min, avg, max) = (1519.419, 1565.760, 1588.199), stdev = 27.624
[info]   CI (99.9%): [1459.390, 1672.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69422.877 ±(99.9%) 1559.275 B/op [Average]
[info]   (min, avg, max) = (68954.298, 69422.877, 70031.838), stdev = 404.939
[info]   CI (99.9%): [67863.602, 70982.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.139 ±(99.9%) 1146.636 MB/sec [Average]
[info]   (min, avg, max) = (1334.240, 1471.139, 2003.805), stdev = 297.778
[info]   CI (99.9%): [324.503, 2617.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   65210.274 ±(99.9%) 50011.106 B/op [Average]
[info]   (min, avg, max) = (58487.123, 65210.274, 88358.030), stdev = 12987.725
[info]   CI (99.9%): [15199.168, 115221.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 7.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.862, 4.208), stdev = 1.870
[info]   CI (99.9%): [≈ 0, 8.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39.411 ±(99.9%) 329.480 B/op [Average]
[info]   (min, avg, max) = (0.910, 39.411, 192.472), stdev = 85.565
[info]   CI (99.9%): [≈ 0, 368.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242352.291 ops/s
[info] # Warmup Iteration   2: 438995.254 ops/s
[info] # Warmup Iteration   3: 464741.287 ops/s
[info] # Warmup Iteration   4: 479456.717 ops/s
[info] # Warmup Iteration   5: 453046.054 ops/s
[info] Iteration   1: 478855.005 ops/s
[info]                  ·gc.alloc.rate:                   1278.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              4200.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4418.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 472481.757 ops/s
[info]                  ·gc.alloc.rate:                   1270.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              4232.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4482.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 478516.689 ops/s
[info]                  ·gc.alloc.rate:               1286.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          4229.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4426.026 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 477962.412 ops/s
[info]                  ·gc.alloc.rate:                   1299.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              4279.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4435.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 470170.739 ops/s
[info]                  ·gc.alloc.rate:                   1247.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              4175.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2249.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   475597.320 ±(99.9%) 15388.539 ops/s [Average]
[info]   (min, avg, max) = (470170.739, 475597.320, 478855.005), stdev = 3996.355
[info]   CI (99.9%): [460208.781, 490985.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1276.363 ±(99.9%) 74.997 MB/sec [Average]
[info]   (min, avg, max) = (1247.274, 1276.363, 1299.678), stdev = 19.477
[info]   CI (99.9%): [1201.366, 1351.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4223.431 ±(99.9%) 150.727 B/op [Average]
[info]   (min, avg, max) = (4175.244, 4223.431, 4279.658), stdev = 39.143
[info]   CI (99.9%): [4072.705, 4374.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.027 ±(99.9%) 1160.035 MB/sec [Average]
[info]   (min, avg, max) = (672.124, 1211.027, 1346.962), stdev = 301.257
[info]   CI (99.9%): [50.993, 2371.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4002.438 ±(99.9%) 3773.625 B/op [Average]
[info]   (min, avg, max) = (2249.933, 4002.438, 4482.545), stdev = 979.998
[info]   CI (99.9%): [228.814, 7776.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.894), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.975 ±(99.9%) 16.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.975, 9.528), stdev = 4.223
[info]   CI (99.9%): [≈ 0, 18.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1470.235 ops/s
[info] # Warmup Iteration   2: 16239.650 ops/s
[info] # Warmup Iteration   3: 18423.292 ops/s
[info] # Warmup Iteration   4: 19081.585 ops/s
[info] # Warmup Iteration   5: 19114.386 ops/s
[info] Iteration   1: 19049.886 ops/s
[info]                  ·gc.alloc.rate:                   1940.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              160342.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165700.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 19076.678 ops/s
[info]                  ·gc.alloc.rate:                   1960.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              161706.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165483.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 377.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 19279.287 ops/s
[info]                  ·gc.alloc.rate:               1970.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          160891.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163243.538 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 19270.275 ops/s
[info]                  ·gc.alloc.rate:               1974.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          161235.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163210.958 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 19288.656 ops/s
[info]                  ·gc.alloc.rate:               1989.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          162341.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163213.276 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   19192.956 ±(99.9%) 457.966 ops/s [Average]
[info]   (min, avg, max) = (19049.886, 19192.956, 19288.656), stdev = 118.932
[info]   CI (99.9%): [18734.991, 19650.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1967.164 ±(99.9%) 69.893 MB/sec [Average]
[info]   (min, avg, max) = (1940.801, 1967.164, 1989.632), stdev = 18.151
[info]   CI (99.9%): [1897.272, 2037.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   161303.385 ±(99.9%) 2945.042 B/op [Average]
[info]   (min, avg, max) = (160342.045, 161303.385, 162341.879), stdev = 764.818
[info]   CI (99.9%): [158358.342, 164248.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.031 ±(99.9%) 13.254 MB/sec [Average]
[info]   (min, avg, max) = (1998.719, 2002.031, 2005.836), stdev = 3.442
[info]   CI (99.9%): [1988.778, 2015.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   164170.435 ±(99.9%) 5006.686 B/op [Average]
[info]   (min, avg, max) = (163210.958, 164170.435, 165700.763), stdev = 1300.221
[info]   CI (99.9%): [159163.748, 169177.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.580), stdev = 2.044
[info]   CI (99.9%): [≈ 0, 8.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76.257 ±(99.9%) 649.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76.257, 377.848), stdev = 168.601
[info]   CI (99.9%): [≈ 0, 725.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.435
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:12:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17605.329 ops/s
[info] # Warmup Iteration   2: 54469.792 ops/s
[info] # Warmup Iteration   3: 54047.465 ops/s
[info] # Warmup Iteration   4: 55260.595 ops/s
[info] # Warmup Iteration   5: 55848.987 ops/s
[info] Iteration   1: 56351.531 ops/s
[info]                  ·gc.alloc.rate:                   1720.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              48039.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37479.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 56230.603 ops/s
[info]                  ·gc.alloc.rate:                   1737.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              48624.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56376.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.474 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 55980.722 ops/s
[info]                  ·gc.alloc.rate:                   1735.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              48794.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37682.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56689.113 ops/s
[info]                  ·gc.alloc.rate:                   1744.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              48439.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55744.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 56963.685 ops/s
[info]                  ·gc.alloc.rate:               1736.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          47964.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36975.869 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   56443.131 ±(99.9%) 1489.935 ops/s [Average]
[info]   (min, avg, max) = (55980.722, 56443.131, 56963.685), stdev = 386.932
[info]   CI (99.9%): [54953.195, 57933.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1734.895 ±(99.9%) 34.432 MB/sec [Average]
[info]   (min, avg, max) = (1720.310, 1734.895, 1744.840), stdev = 8.942
[info]   CI (99.9%): [1700.462, 1769.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48372.535 ±(99.9%) 1392.988 B/op [Average]
[info]   (min, avg, max) = (47964.195, 48372.535, 48794.496), stdev = 361.754
[info]   CI (99.9%): [46979.548, 49765.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.664 ±(99.9%) 1414.612 MB/sec [Average]
[info]   (min, avg, max) = (1338.334, 1608.664, 2014.235), stdev = 367.370
[info]   CI (99.9%): [194.052, 3023.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44851.671 ±(99.9%) 39421.043 B/op [Average]
[info]   (min, avg, max) = (36975.869, 44851.671, 56376.156), stdev = 10237.520
[info]   CI (99.9%): [5430.627, 84272.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 6.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.518), stdev = 1.564
[info]   CI (99.9%): [≈ 0, 6.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.159 ±(99.9%) 168.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.159, 98.474), stdev = 43.781
[info]   CI (99.9%): [≈ 0, 188.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40993.087 ops/s
[info] # Warmup Iteration   2: 148435.134 ops/s
[info] # Warmup Iteration   3: 154089.355 ops/s
[info] # Warmup Iteration   4: 154727.733 ops/s
[info] # Warmup Iteration   5: 159413.447 ops/s
[info] Iteration   1: 158524.337 ops/s
[info]                  ·gc.alloc.rate:                   1926.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              19121.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19963.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 160353.286 ops/s
[info]                  ·gc.alloc.rate:                   1917.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              18817.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13144.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 160252.881 ops/s
[info]                  ·gc.alloc.rate:               1945.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          19103.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19691.752 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 159799.573 ops/s
[info]                  ·gc.alloc.rate:                   1952.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              19229.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19741.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 160419.136 ops/s
[info]                  ·gc.alloc.rate:               1961.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          19239.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19684.818 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   159869.842 ±(99.9%) 3042.668 ops/s [Average]
[info]   (min, avg, max) = (158524.337, 159869.842, 160419.136), stdev = 790.171
[info]   CI (99.9%): [156827.174, 162912.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1940.437 ±(99.9%) 70.604 MB/sec [Average]
[info]   (min, avg, max) = (1917.271, 1940.437, 1961.233), stdev = 18.336
[info]   CI (99.9%): [1869.833, 2011.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19102.442 ±(99.9%) 656.992 B/op [Average]
[info]   (min, avg, max) = (18817.715, 19102.442, 19239.932), stdev = 170.619
[info]   CI (99.9%): [18445.451, 19759.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.236 ±(99.9%) 1149.445 MB/sec [Average]
[info]   (min, avg, max) = (1339.268, 1873.236, 2010.800), stdev = 298.507
[info]   CI (99.9%): [723.791, 3022.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18445.173 ±(99.9%) 11418.019 B/op [Average]
[info]   (min, avg, max) = (13144.712, 18445.173, 19963.334), stdev = 2965.223
[info]   CI (99.9%): [7027.154, 29863.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.767 ±(99.9%) 5.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.125), stdev = 1.351
[info]   CI (99.9%): [≈ 0, 5.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.594 ±(99.9%) 51.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.594, 31.023), stdev = 13.413
[info]   CI (99.9%): [≈ 0, 59.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 10.000), stdev = 3.114
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 554083.988 ops/s
[info] # Warmup Iteration   2: 1134686.572 ops/s
[info] # Warmup Iteration   3: 1110528.789 ops/s
[info] # Warmup Iteration   4: 1188496.824 ops/s
[info] # Warmup Iteration   5: 1149619.934 ops/s
[info] Iteration   1: 1186412.925 ops/s
[info]                  ·gc.alloc.rate:                   1305.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1731.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1783.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1190163.040 ops/s
[info]                  ·gc.alloc.rate:                   1317.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1742.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1777.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1196768.874 ops/s
[info]                  ·gc.alloc.rate:               1324.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          1741.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1769.612 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1186304.173 ops/s
[info]                  ·gc.alloc.rate:                   1318.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              1748.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1785.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1180274.819 ops/s
[info]                  ·gc.alloc.rate:               1299.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          1733.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1790.757 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1187984.767 ±(99.9%) 23314.988 ops/s [Average]
[info]   (min, avg, max) = (1180274.819, 1187984.767, 1196768.874), stdev = 6054.828
[info]   CI (99.9%): [1164669.778, 1211299.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1312.994 ±(99.9%) 38.693 MB/sec [Average]
[info]   (min, avg, max) = (1299.848, 1312.994, 1324.226), stdev = 10.049
[info]   CI (99.9%): [1274.301, 1351.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1739.452 ±(99.9%) 26.778 B/op [Average]
[info]   (min, avg, max) = (1731.582, 1739.452, 1748.590), stdev = 6.954
[info]   CI (99.9%): [1712.674, 1766.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.558 ±(99.9%) 4.495 MB/sec [Average]
[info]   (min, avg, max) = (1342.848, 1344.558, 1345.743), stdev = 1.167
[info]   CI (99.9%): [1340.063, 1349.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1781.313 ±(99.9%) 30.952 B/op [Average]
[info]   (min, avg, max) = (1769.612, 1781.313, 1790.757), stdev = 8.038
[info]   CI (99.9%): [1750.361, 1812.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.663 ±(99.9%) 5.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.663, 3.275), stdev = 1.460
[info]   CI (99.9%): [≈ 0, 6.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.880 ±(99.9%) 7.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.880, 4.345), stdev = 1.937
[info]   CI (99.9%): [≈ 0, 8.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 650756.306 ops/s
[info] # Warmup Iteration   2: 1312567.319 ops/s
[info] # Warmup Iteration   3: 1381637.250 ops/s
[info] # Warmup Iteration   4: 1381013.927 ops/s
[info] # Warmup Iteration   5: 1380705.484 ops/s
[info] Iteration   1: 1381798.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1376671.356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1380501.936 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1380984.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1378093.584 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1379609.894 ±(99.9%) 8260.508 ops/s [Average]
[info]   (min, avg, max) = (1376671.356, 1379609.894, 1381798.285), stdev = 2145.228
[info]   CI (99.9%): [1371349.386, 1387870.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23783.751 ops/s
[info] # Warmup Iteration   2: 62914.992 ops/s
[info] # Warmup Iteration   3: 63956.204 ops/s
[info] # Warmup Iteration   4: 67206.967 ops/s
[info] # Warmup Iteration   5: 65251.952 ops/s
[info] Iteration   1: 68192.780 ops/s
[info]                  ·gc.alloc.rate:                   1723.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              39773.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30972.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 65674.254 ops/s
[info]                  ·gc.alloc.rate:                   1690.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              40494.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48265.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 68528.845 ops/s
[info]                  ·gc.alloc.rate:               1721.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          39519.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30780.177 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 67457.041 ops/s
[info]                  ·gc.alloc.rate:                   1722.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              40180.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46812.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 68563.044 ops/s
[info]                  ·gc.alloc.rate:               1733.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          39797.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30704.201 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   67683.193 ±(99.9%) 4651.128 ops/s [Average]
[info]   (min, avg, max) = (65674.254, 67683.193, 68563.044), stdev = 1207.883
[info]   CI (99.9%): [63032.065, 72334.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1718.224 ±(99.9%) 63.253 MB/sec [Average]
[info]   (min, avg, max) = (1690.223, 1718.224, 1733.749), stdev = 16.426
[info]   CI (99.9%): [1654.971, 1781.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39953.076 ±(99.9%) 1477.089 B/op [Average]
[info]   (min, avg, max) = (39519.781, 39953.076, 40494.175), stdev = 383.595
[info]   CI (99.9%): [38475.987, 41430.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1608.340 ±(99.9%) 1414.662 MB/sec [Average]
[info]   (min, avg, max) = (1337.611, 1608.340, 2014.599), stdev = 367.383
[info]   CI (99.9%): [193.678, 3023.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37506.929 ±(99.9%) 35321.932 B/op [Average]
[info]   (min, avg, max) = (30704.201, 37506.929, 48265.529), stdev = 9172.994
[info]   CI (99.9%): [2184.997, 72828.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.748), stdev = 1.654
[info]   CI (99.9%): [≈ 0, 7.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.928 ±(99.9%) 152.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.928, 89.794), stdev = 39.647
[info]   CI (99.9%): [≈ 0, 171.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 8.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2522.053 ops/s
[info] # Warmup Iteration   2: 14821.218 ops/s
[info] # Warmup Iteration   3: 17129.344 ops/s
[info] # Warmup Iteration   4: 17792.412 ops/s
[info] # Warmup Iteration   5: 17635.916 ops/s
[info] Iteration   1: 17661.771 ops/s
[info]                  ·gc.alloc.rate:               1554.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          138528.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118948.619 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17485.534 ops/s
[info]                  ·gc.alloc.rate:                   1562.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              140676.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180378.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17654.403 ops/s
[info]                  ·gc.alloc.rate:               1561.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          139200.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119240.039 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17659.765 ops/s
[info]                  ·gc.alloc.rate:                   1576.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              140539.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119384.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17774.615 ops/s
[info]                  ·gc.alloc.rate:                   1584.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              140331.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178213.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17647.218 ±(99.9%) 398.279 ops/s [Average]
[info]   (min, avg, max) = (17485.534, 17647.218, 17774.615), stdev = 103.432
[info]   CI (99.9%): [17248.938, 18045.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1568.257 ±(99.9%) 47.217 MB/sec [Average]
[info]   (min, avg, max) = (1554.956, 1568.257, 1584.847), stdev = 12.262
[info]   CI (99.9%): [1521.040, 1615.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   139855.251 ±(99.9%) 3631.104 B/op [Average]
[info]   (min, avg, max) = (138528.929, 139855.251, 140676.424), stdev = 942.986
[info]   CI (99.9%): [136224.147, 143486.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1605.827 ±(99.9%) 1415.047 MB/sec [Average]
[info]   (min, avg, max) = (1335.171, 1605.827, 2012.671), stdev = 367.483
[info]   CI (99.9%): [190.780, 3020.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   143232.942 ±(99.9%) 126801.866 B/op [Average]
[info]   (min, avg, max) = (118948.619, 143232.942, 180378.575), stdev = 32930.042
[info]   CI (99.9%): [16431.076, 270034.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.114 ±(99.9%) 3.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.114, 1.874), stdev = 1.017
[info]   CI (99.9%): [≈ 0, 5.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2046.050 ops/s
[info] # Warmup Iteration   2: 16607.851 ops/s
[info] # Warmup Iteration   3: 17960.332 ops/s
[info] # Warmup Iteration   4: 17535.502 ops/s
[info] # Warmup Iteration   5: 17920.592 ops/s
[info] Iteration   1: 18157.058 ops/s
[info]                  ·gc.alloc.rate:                   1451.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              125816.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115799.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18048.614 ops/s
[info]                  ·gc.alloc.rate:                   1476.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              128764.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116579.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17900.386 ops/s
[info]                  ·gc.alloc.rate:                   1438.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              126443.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117660.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 17854.428 ops/s
[info]                  ·gc.alloc.rate:                   1435.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              126510.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117845.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17708.556 ops/s
[info]                  ·gc.alloc.rate:                   1436.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              127672.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118580.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17933.808 ±(99.9%) 670.216 ops/s [Average]
[info]   (min, avg, max) = (17708.556, 17933.808, 18157.058), stdev = 174.053
[info]   CI (99.9%): [17263.592, 18604.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1447.686 ±(99.9%) 67.221 MB/sec [Average]
[info]   (min, avg, max) = (1435.203, 1447.686, 1476.692), stdev = 17.457
[info]   CI (99.9%): [1380.465, 1514.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127041.690 ±(99.9%) 4518.469 B/op [Average]
[info]   (min, avg, max) = (125816.527, 127041.690, 128764.990), stdev = 1173.432
[info]   CI (99.9%): [122523.221, 131560.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.520 ±(99.9%) 5.399 MB/sec [Average]
[info]   (min, avg, max) = (1334.521, 1336.520, 1338.304), stdev = 1.402
[info]   CI (99.9%): [1331.121, 1341.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   117293.120 ±(99.9%) 4234.783 B/op [Average]
[info]   (min, avg, max) = (115799.514, 117293.120, 118580.495), stdev = 1099.760
[info]   CI (99.9%): [113058.337, 121527.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.896 ±(99.9%) 6.114 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.896, 3.691), stdev = 1.588
[info]   CI (99.9%): [≈ 0, 7.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   78.836 ±(99.9%) 537.523 B/op [Average]
[info]   (min, avg, max) = (1.850, 78.836, 324.536), stdev = 139.593
[info]   CI (99.9%): [≈ 0, 616.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329094.690 ops/s
[info] # Warmup Iteration   2: 679743.775 ops/s
[info] # Warmup Iteration   3: 676918.898 ops/s
[info] # Warmup Iteration   4: 676949.553 ops/s
[info] # Warmup Iteration   5: 683205.888 ops/s
[info] Iteration   1: 685604.889 ops/s
[info]                  ·gc.alloc.rate:               1836.075 MB/sec
[info]                  ·gc.alloc.rate.norm:          4214.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3078.263 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 687997.052 ops/s
[info]                  ·gc.alloc.rate:                   1842.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              4214.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4606.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 685970.852 ops/s
[info]                  ·gc.alloc.rate:                   1851.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              4247.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4630.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 687861.713 ops/s
[info]                  ·gc.alloc.rate:                   1829.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              4186.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3082.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 675237.014 ops/s
[info]                  ·gc.alloc.rate:               1838.363 MB/sec
[info]                  ·gc.alloc.rate.norm:          4283.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4718.727 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   684534.304 ±(99.9%) 20440.329 ops/s [Average]
[info]   (min, avg, max) = (675237.014, 684534.304, 687997.052), stdev = 5308.289
[info]   CI (99.9%): [664093.975, 704974.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1839.577 ±(99.9%) 30.515 MB/sec [Average]
[info]   (min, avg, max) = (1829.916, 1839.577, 1851.282), stdev = 7.925
[info]   CI (99.9%): [1809.062, 1870.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4229.452 ±(99.9%) 143.270 B/op [Average]
[info]   (min, avg, max) = (4186.998, 4229.452, 4283.926), stdev = 37.207
[info]   CI (99.9%): [4086.182, 4372.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1749.034 ±(99.9%) 1423.526 MB/sec [Average]
[info]   (min, avg, max) = (1340.929, 1749.034, 2024.949), stdev = 369.685
[info]   CI (99.9%): [325.508, 3172.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4023.295 ±(99.9%) 3318.133 B/op [Average]
[info]   (min, avg, max) = (3078.263, 4023.295, 4718.727), stdev = 861.709
[info]   CI (99.9%): [705.162, 7341.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.143), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1762.878 ops/s
[info] # Warmup Iteration   2: 11595.231 ops/s
[info] # Warmup Iteration   3: 12823.965 ops/s
[info] # Warmup Iteration   4: 12953.052 ops/s
[info] # Warmup Iteration   5: 13063.695 ops/s
[info] Iteration   1: 13026.045 ops/s
[info]                  ·gc.alloc.rate:                   1821.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              220065.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242607.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 13110.416 ops/s
[info]                  ·gc.alloc.rate:                   1820.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              218557.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160888.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13027.040 ops/s
[info]                  ·gc.alloc.rate:                   1810.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              218658.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242003.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12899.042 ops/s
[info]                  ·gc.alloc.rate:               1784.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          217690.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162638.600 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13059.127 ops/s
[info]                  ·gc.alloc.rate:               1818.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          219153.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240910.778 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13024.334 ±(99.9%) 300.307 ops/s [Average]
[info]   (min, avg, max) = (12899.042, 13024.334, 13110.416), stdev = 77.989
[info]   CI (99.9%): [12724.027, 13324.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1811.107 ±(99.9%) 60.263 MB/sec [Average]
[info]   (min, avg, max) = (1784.191, 1811.107, 1821.462), stdev = 15.650
[info]   CI (99.9%): [1750.844, 1871.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   218825.280 ±(99.9%) 3353.321 B/op [Average]
[info]   (min, avg, max) = (217690.276, 218825.280, 220065.507), stdev = 870.847
[info]   CI (99.9%): [215471.959, 222178.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1736.864 ±(99.9%) 1406.858 MB/sec [Average]
[info]   (min, avg, max) = (1332.987, 1736.864, 2008.040), stdev = 365.357
[info]   CI (99.9%): [330.006, 3143.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   209809.893 ±(99.9%) 168922.159 B/op [Average]
[info]   (min, avg, max) = (160888.806, 209809.893, 242607.441), stdev = 43868.548
[info]   CI (99.9%): [40887.734, 378732.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.921 ±(99.9%) 7.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.921, 4.254), stdev = 1.869
[info]   CI (99.9%): [≈ 0, 8.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   110.558 ±(99.9%) 863.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.558, 510.580), stdev = 224.276
[info]   CI (99.9%): [≈ 0, 974.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8821.982 ops/s
[info] # Warmup Iteration   2: 43009.788 ops/s
[info] # Warmup Iteration   3: 43000.011 ops/s
[info] # Warmup Iteration   4: 43961.465 ops/s
[info] # Warmup Iteration   5: 43825.195 ops/s
[info] Iteration   1: 44081.511 ops/s
[info]                  ·gc.alloc.rate:               1710.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          61064.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47923.079 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 43928.726 ops/s
[info]                  ·gc.alloc.rate:                   1732.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              62074.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72170.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 43846.372 ops/s
[info]                  ·gc.alloc.rate:                   1728.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              61999.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48107.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43409.771 ops/s
[info]                  ·gc.alloc.rate:                   1699.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              61611.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48497.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 44202.225 ops/s
[info]                  ·gc.alloc.rate:                   1729.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              61586.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71464.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   43893.721 ±(99.9%) 1168.140 ops/s [Average]
[info]   (min, avg, max) = (43409.771, 43893.721, 44202.225), stdev = 303.362
[info]   CI (99.9%): [42725.582, 45061.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1720.058 ±(99.9%) 55.882 MB/sec [Average]
[info]   (min, avg, max) = (1699.384, 1720.058, 1732.824), stdev = 14.512
[info]   CI (99.9%): [1664.175, 1775.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61667.085 ±(99.9%) 1551.956 B/op [Average]
[info]   (min, avg, max) = (61064.012, 61667.085, 62074.000), stdev = 403.038
[info]   CI (99.9%): [60115.129, 63219.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.515 ±(99.9%) 1414.396 MB/sec [Average]
[info]   (min, avg, max) = (1337.685, 1608.515, 2014.679), stdev = 367.314
[info]   CI (99.9%): [194.119, 3022.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   57632.609 ±(99.9%) 49877.423 B/op [Average]
[info]   (min, avg, max) = (47923.079, 57632.609, 72170.744), stdev = 12953.008
[info]   CI (99.9%): [7755.186, 107510.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.685), stdev = 1.637
[info]   CI (99.9%): [≈ 0, 7.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27.147 ±(99.9%) 225.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.147, 132.009), stdev = 58.625
[info]   CI (99.9%): [≈ 0, 252.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.302
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19521.631 ops/s
[info] # Warmup Iteration   2: 53751.602 ops/s
[info] # Warmup Iteration   3: 55320.809 ops/s
[info] # Warmup Iteration   4: 57850.246 ops/s
[info] # Warmup Iteration   5: 57991.356 ops/s
[info] Iteration   1: 56477.397 ops/s
[info]                  ·gc.alloc.rate:                   1749.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              48736.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56061.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 56670.647 ops/s
[info]                  ·gc.alloc.rate:                   1738.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              48280.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37278.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 58458.491 ops/s
[info]                  ·gc.alloc.rate:                   1807.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              48646.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54054.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 58628.571 ops/s
[info]                  ·gc.alloc.rate:                   1785.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              47932.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35908.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58671.635 ops/s
[info]                  ·gc.alloc.rate:               1827.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          49015.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53822.613 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   57781.348 ±(99.9%) 4263.128 ops/s [Average]
[info]   (min, avg, max) = (56477.397, 57781.348, 58671.635), stdev = 1107.121
[info]   CI (99.9%): [53518.220, 62044.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1781.611 ±(99.9%) 145.303 MB/sec [Average]
[info]   (min, avg, max) = (1738.476, 1781.611, 1827.571), stdev = 37.735
[info]   CI (99.9%): [1636.308, 1926.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48522.360 ±(99.9%) 1623.162 B/op [Average]
[info]   (min, avg, max) = (47932.977, 48522.360, 49015.899), stdev = 421.530
[info]   CI (99.9%): [46899.198, 50145.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1741.376 ±(99.9%) 1410.524 MB/sec [Average]
[info]   (min, avg, max) = (1337.895, 1741.376, 2011.971), stdev = 366.309
[info]   CI (99.9%): [330.851, 3151.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47425.115 ±(99.9%) 38267.952 B/op [Average]
[info]   (min, avg, max) = (35908.055, 47425.115, 56061.671), stdev = 9938.066
[info]   CI (99.9%): [9157.163, 85693.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 6.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.562), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.471 ±(99.9%) 166.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.471, 98.923), stdev = 43.348
[info]   CI (99.9%): [≈ 0, 188.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 860930.650 ops/s
[info] # Warmup Iteration   2: 1299972.936 ops/s
[info] # Warmup Iteration   3: 1283161.818 ops/s
[info] # Warmup Iteration   4: 1291959.145 ops/s
[info] # Warmup Iteration   5: 1286947.068 ops/s
[info] Iteration   1: 1292664.939 ops/s
[info]                  ·gc.alloc.rate:                   1208.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              1471.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1636.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1309581.778 ops/s
[info]                  ·gc.alloc.rate:                   1233.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              1481.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1615.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1307765.785 ops/s
[info]                  ·gc.alloc.rate:                   1230.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1619.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1308993.582 ops/s
[info]                  ·gc.alloc.rate:                   1216.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1462.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.231 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1298518.892 ops/s
[info]                  ·gc.alloc.rate:                   1233.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              1495.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1629.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1303504.995 ±(99.9%) 29044.568 ops/s [Average]
[info]   (min, avg, max) = (1292664.939, 1303504.995, 1309581.778), stdev = 7542.782
[info]   CI (99.9%): [1274460.427, 1332549.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1224.588 ±(99.9%) 43.360 MB/sec [Average]
[info]   (min, avg, max) = (1208.963, 1224.588, 1233.587), stdev = 11.260
[info]   CI (99.9%): [1181.228, 1267.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1478.399 ±(99.9%) 47.048 B/op [Average]
[info]   (min, avg, max) = (1462.332, 1478.399, 1495.155), stdev = 12.218
[info]   CI (99.9%): [1431.351, 1525.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.410 ±(99.9%) 1157.109 MB/sec [Average]
[info]   (min, avg, max) = (672.865, 1210.410, 1345.711), stdev = 300.497
[info]   CI (99.9%): [53.301, 2367.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1461.992 ±(99.9%) 1406.134 B/op [Average]
[info]   (min, avg, max) = (808.929, 1461.992, 1636.760), stdev = 365.169
[info]   CI (99.9%): [55.858, 2868.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 4.469 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.629, 2.688), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 5.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.757 ±(99.9%) 5.372 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.757, 3.231), stdev = 1.395
[info]   CI (99.9%): [≈ 0, 6.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 976295.688 ops/s
[info] # Warmup Iteration   2: 1469363.768 ops/s
[info] # Warmup Iteration   3: 1498166.996 ops/s
[info] # Warmup Iteration   4: 1557996.155 ops/s
[info] # Warmup Iteration   5: 1554633.188 ops/s
[info] Iteration   1: 1557134.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1557152.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1553481.470 ops/s
[info]                  ·gc.alloc.rate:      0.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1557205.511 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1556651.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1556324.991 ±(99.9%) 6181.202 ops/s [Average]
[info]   (min, avg, max) = (1553481.470, 1556324.991, 1557205.511), stdev = 1605.239
[info]   CI (99.9%): [1550143.789, 1562506.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.011 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.012 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.012, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1037.534 ops/s
[info] # Warmup Iteration   2: 3754.536 ops/s
[info] # Warmup Iteration   3: 3892.609 ops/s
[info] # Warmup Iteration   4: 4033.074 ops/s
[info] # Warmup Iteration   5: 4056.300 ops/s
[info] Iteration   1: 3827.867 ops/s
[info]                  ·gc.alloc.rate:      516.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 212432.153 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3808.747 ops/s
[info]                  ·gc.alloc.rate:               514.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          212432.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 276317.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3827.265 ops/s
[info]                  ·gc.alloc.rate:               541.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          222815.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 274946.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 3842.891 ops/s
[info]                  ·gc.alloc.rate:                   532.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              218088.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274010.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3860.668 ops/s
[info]                  ·gc.alloc.rate:      521.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 212432.112 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3833.488 ±(99.9%) 74.806 ops/s [Average]
[info]   (min, avg, max) = (3808.747, 3833.488, 3860.668), stdev = 19.427
[info]   CI (99.9%): [3758.682, 3908.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   525.302 ±(99.9%) 44.746 MB/sec [Average]
[info]   (min, avg, max) = (514.275, 525.302, 541.893), stdev = 11.620
[info]   CI (99.9%): [480.556, 570.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   215640.247 ±(99.9%) 18098.321 B/op [Average]
[info]   (min, avg, max) = (212432.112, 215640.247, 222815.962), stdev = 4700.077
[info]   CI (99.9%): [197541.925, 233738.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   401.332 ±(99.9%) 1410.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.332, 669.051), stdev = 366.364
[info]   CI (99.9%): [≈ 0, 1812.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   165054.849 ±(99.9%) 580199.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 165054.849, 276317.665), stdev = 150676.008
[info]   CI (99.9%): [≈ 0, 745254.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.115 ±(99.9%) 44.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.115, 25.573), stdev = 11.437
[info]   CI (99.9%): [≈ 0, 49.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39800.332 ops/s
[info] # Warmup Iteration   2: 116340.676 ops/s
[info] # Warmup Iteration   3: 122470.998 ops/s
[info] # Warmup Iteration   4: 125106.969 ops/s
[info] # Warmup Iteration   5: 123366.459 ops/s
[info] Iteration   1: 123492.052 ops/s
[info]                  ·gc.alloc.rate:                   1961.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              24991.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25699.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 125654.690 ops/s
[info]                  ·gc.alloc.rate:                   2007.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              25150.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25223.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 125959.244 ops/s
[info]                  ·gc.alloc.rate:                   1999.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              24979.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25095.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 126465.717 ops/s
[info]                  ·gc.alloc.rate:               2006.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          24974.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24994.716 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 126487.234 ops/s
[info]                  ·gc.alloc.rate:                   2020.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              25148.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25010.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   125611.787 ±(99.9%) 4759.654 ops/s [Average]
[info]   (min, avg, max) = (123492.052, 125611.787, 126487.234), stdev = 1236.067
[info]   CI (99.9%): [120852.133, 130371.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1999.183 ±(99.9%) 87.462 MB/sec [Average]
[info]   (min, avg, max) = (1961.062, 1999.183, 2020.980), stdev = 22.714
[info]   CI (99.9%): [1911.721, 2086.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25048.956 ±(99.9%) 354.923 B/op [Average]
[info]   (min, avg, max) = (24974.542, 25048.956, 25150.822), stdev = 92.172
[info]   CI (99.9%): [24694.033, 25403.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.414 ±(99.9%) 13.989 MB/sec [Average]
[info]   (min, avg, max) = (2008.407, 2011.414, 2016.572), stdev = 3.633
[info]   CI (99.9%): [1997.425, 2025.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25204.671 ±(99.9%) 1120.684 B/op [Average]
[info]   (min, avg, max) = (24994.716, 25204.671, 25699.268), stdev = 291.038
[info]   CI (99.9%): [24083.987, 26325.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.873), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 5.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.721 ±(99.9%) 60.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.721, 36.613), stdev = 15.722
[info]   CI (99.9%): [≈ 0, 70.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.699 ops/s
[info] # Warmup Iteration   2: 354187.330 ops/s
[info] # Warmup Iteration   3: 372712.361 ops/s
[info] # Warmup Iteration   4: 370631.970 ops/s
[info] # Warmup Iteration   5: 375747.980 ops/s
[info] Iteration   1: 372846.158 ops/s
[info]                  ·gc.alloc.rate:               790.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          3336.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5622.357 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 368012.983 ops/s
[info]                  ·gc.alloc.rate:               759.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          3245.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2848.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 377744.194 ops/s
[info]                  ·gc.alloc.rate:                   778.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              3244.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2778.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 381944.969 ops/s
[info]                  ·gc.alloc.rate:                   781.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              3221.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2747.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 381266.279 ops/s
[info]                  ·gc.alloc.rate:                   781.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              3225.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2753.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   376362.917 ±(99.9%) 22715.468 ops/s [Average]
[info]   (min, avg, max) = (368012.983, 376362.917, 381944.969), stdev = 5899.135
[info]   CI (99.9%): [353647.449, 399078.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   778.296 ±(99.9%) 44.858 MB/sec [Average]
[info]   (min, avg, max) = (759.049, 778.296, 790.546), stdev = 11.649
[info]   CI (99.9%): [733.438, 823.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3254.611 ±(99.9%) 181.759 B/op [Average]
[info]   (min, avg, max) = (3221.309, 3254.611, 3336.789), stdev = 47.202
[info]   CI (99.9%): [3072.852, 3436.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.853 ±(99.9%) 1145.571 MB/sec [Average]
[info]   (min, avg, max) = (666.305, 799.853, 1332.039), stdev = 297.501
[info]   CI (99.9%): [≈ 0, 1945.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3350.246 ±(99.9%) 4893.337 B/op [Average]
[info]   (min, avg, max) = (2747.694, 3350.246, 5622.357), stdev = 1270.784
[info]   CI (99.9%): [≈ 0, 8243.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.024), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.098), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78146.835 ops/s
[info] # Warmup Iteration   2: 241788.106 ops/s
[info] # Warmup Iteration   3: 253566.753 ops/s
[info] # Warmup Iteration   4: 258633.865 ops/s
[info] # Warmup Iteration   5: 255269.118 ops/s
[info] Iteration   1: 257814.109 ops/s
[info]                  ·gc.alloc.rate:                   571.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              3489.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4068.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 258622.125 ops/s
[info]                  ·gc.alloc.rate:      553.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 3368.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 258271.825 ops/s
[info]                  ·gc.alloc.rate:               572.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          3489.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4061.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 259239.073 ops/s
[info]                  ·gc.alloc.rate:                   568.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              3451.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4052.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 258316.164 ops/s
[info]                  ·gc.alloc.rate:               575.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          3507.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4066.576 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   258452.659 ±(99.9%) 2025.018 ops/s [Average]
[info]   (min, avg, max) = (257814.109, 258452.659, 259239.073), stdev = 525.891
[info]   CI (99.9%): [256427.641, 260477.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   568.412 ±(99.9%) 33.648 MB/sec [Average]
[info]   (min, avg, max) = (553.467, 568.412, 575.744), stdev = 8.738
[info]   CI (99.9%): [534.765, 602.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3461.079 ±(99.9%) 214.902 B/op [Average]
[info]   (min, avg, max) = (3368.002, 3461.079, 3507.220), stdev = 55.809
[info]   CI (99.9%): [3246.177, 3675.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.638 ±(99.9%) 1148.697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.638, 667.567), stdev = 298.313
[info]   CI (99.9%): [≈ 0, 1682.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3249.801 ±(99.9%) 6995.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3249.801, 4068.677), stdev = 1816.705
[info]   CI (99.9%): [≈ 0, 10245.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 0.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.379), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279615.704 ops/s
[info] # Warmup Iteration   2: 511700.989 ops/s
[info] # Warmup Iteration   3: 500863.059 ops/s
[info] # Warmup Iteration   4: 514095.580 ops/s
[info] # Warmup Iteration   5: 517049.481 ops/s
[info] Iteration   1: 517361.982 ops/s
[info]                  ·gc.alloc.rate:               670.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2040.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 511746.287 ops/s
[info]                  ·gc.alloc.rate:               673.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          2071.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2063.061 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 511527.651 ops/s
[info]                  ·gc.alloc.rate:               663.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          2040.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2065.917 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 516670.316 ops/s
[info]                  ·gc.alloc.rate:               666.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          2030.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2045.436 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 516668.916 ops/s
[info]                  ·gc.alloc.rate:                   668.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              2034.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2047.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   514795.031 ±(99.9%) 11158.232 ops/s [Average]
[info]   (min, avg, max) = (511527.651, 514795.031, 517361.982), stdev = 2897.757
[info]   CI (99.9%): [503636.799, 525953.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   668.354 ±(99.9%) 14.870 MB/sec [Average]
[info]   (min, avg, max) = (663.318, 668.354, 673.565), stdev = 3.862
[info]   CI (99.9%): [653.484, 683.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2043.255 ±(99.9%) 62.778 B/op [Average]
[info]   (min, avg, max) = (2030.338, 2043.255, 2071.528), stdev = 16.303
[info]   CI (99.9%): [1980.477, 2106.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.380 ±(99.9%) 2.156 MB/sec [Average]
[info]   (min, avg, max) = (670.812, 671.380, 672.217), stdev = 0.560
[info]   CI (99.9%): [669.224, 673.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2052.507 ±(99.9%) 43.356 B/op [Average]
[info]   (min, avg, max) = (2040.654, 2052.507, 2065.917), stdev = 11.260
[info]   CI (99.9%): [2009.151, 2095.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8686.966 ops/s
[info] # Warmup Iteration   2: 63695.877 ops/s
[info] # Warmup Iteration   3: 72688.204 ops/s
[info] # Warmup Iteration   4: 73703.566 ops/s
[info] # Warmup Iteration   5: 74528.566 ops/s
[info] Iteration   1: 74570.625 ops/s
[info]                  ·gc.alloc.rate:                   3137.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              66225.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3334.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70370.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 75082.180 ops/s
[info]                  ·gc.alloc.rate:                   3160.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              66256.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55993.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 74330.640 ops/s
[info]                  ·gc.alloc.rate:               3159.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          66881.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3350.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70927.689 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 75524.541 ops/s
[info]                  ·gc.alloc.rate:               3196.597 MB/sec
[info]                  ·gc.alloc.rate.norm:          66567.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69986.842 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 74430.310 ops/s
[info]                  ·gc.alloc.rate:               3136.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          66320.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57087.494 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   74787.659 ±(99.9%) 1938.185 ops/s [Average]
[info]   (min, avg, max) = (74330.640, 74787.659, 75524.541), stdev = 503.340
[info]   CI (99.9%): [72849.474, 76725.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3158.146 ±(99.9%) 93.850 MB/sec [Average]
[info]   (min, avg, max) = (3136.357, 3158.146, 3196.597), stdev = 24.372
[info]   CI (99.9%): [3064.297, 3251.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66450.527 ±(99.9%) 1061.995 B/op [Average]
[info]   (min, avg, max) = (66225.860, 66450.527, 66881.388), stdev = 275.797
[info]   CI (99.9%): [65388.532, 67512.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3083.227 ±(99.9%) 1399.083 MB/sec [Average]
[info]   (min, avg, max) = (2671.294, 3083.227, 3360.779), stdev = 363.337
[info]   CI (99.9%): [1684.144, 4482.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64873.223 ±(99.9%) 29356.485 B/op [Average]
[info]   (min, avg, max) = (55993.685, 64873.223, 70927.689), stdev = 7623.786
[info]   CI (99.9%): [35516.738, 94229.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.351 ±(99.9%) 2.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.351, 1.318), stdev = 0.573
[info]   CI (99.9%): [≈ 0, 2.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34699.613 ops/s
[info] # Warmup Iteration   2: 128222.452 ops/s
[info] # Warmup Iteration   3: 127950.578 ops/s
[info] # Warmup Iteration   4: 129699.602 ops/s
[info] # Warmup Iteration   5: 131440.063 ops/s
[info] Iteration   1: 130842.859 ops/s
[info]                  ·gc.alloc.rate:                   1152.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              13868.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16117.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 131404.595 ops/s
[info]                  ·gc.alloc.rate:                   1151.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              13792.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16060.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 131945.818 ops/s
[info]                  ·gc.alloc.rate:               1151.303 MB/sec
[info]                  ·gc.alloc.rate.norm:          13731.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8001.243 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 130386.405 ops/s
[info]                  ·gc.alloc.rate:               1156.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          13959.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16202.327 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 131634.282 ops/s
[info]                  ·gc.alloc.rate:                   1172.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              14015.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16056.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   131242.792 ±(99.9%) 2410.143 ops/s [Average]
[info]   (min, avg, max) = (130386.405, 131242.792, 131945.818), stdev = 625.907
[info]   CI (99.9%): [128832.648, 133652.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1157.017 ±(99.9%) 34.944 MB/sec [Average]
[info]   (min, avg, max) = (1151.303, 1157.017, 1172.828), stdev = 9.075
[info]   CI (99.9%): [1122.074, 1191.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13873.461 ±(99.9%) 449.458 B/op [Average]
[info]   (min, avg, max) = (13731.139, 13873.461, 14015.857), stdev = 116.723
[info]   CI (99.9%): [13424.003, 14322.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.525 ±(99.9%) 1155.196 MB/sec [Average]
[info]   (min, avg, max) = (670.874, 1207.525, 1343.593), stdev = 300.001
[info]   CI (99.9%): [52.329, 2362.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14487.769 ±(99.9%) 13964.576 B/op [Average]
[info]   (min, avg, max) = (8001.243, 14487.769, 16202.327), stdev = 3626.556
[info]   CI (99.9%): [523.193, 28452.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.520), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 6.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.563 ±(99.9%) 72.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.563, 42.063), stdev = 18.728
[info]   CI (99.9%): [≈ 0, 80.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.786 ops/s
[info] # Warmup Iteration   2: 192611.349 ops/s
[info] # Warmup Iteration   3: 204364.931 ops/s
[info] # Warmup Iteration   4: 208891.214 ops/s
[info] # Warmup Iteration   5: 208310.001 ops/s
[info] Iteration   1: 202805.674 ops/s
[info]                  ·gc.alloc.rate:                   173.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1341.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3970.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.522 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 209027.884 ops/s
[info]                  ·gc.alloc.rate:      163.623 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 209145.758 ops/s
[info]                  ·gc.alloc.rate:      163.722 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207090.681 ops/s
[info]                  ·gc.alloc.rate:                   175.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              1335.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3888.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 208927.521 ops/s
[info]                  ·gc.alloc.rate:      163.842 MB/sec
[info]                  ·gc.alloc.rate.norm: 1234.243 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   207399.504 ±(99.9%) 10410.013 ops/s [Average]
[info]   (min, avg, max) = (202805.674, 207399.504, 209145.758), stdev = 2703.447
[info]   CI (99.9%): [196989.491, 217809.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   167.989 ±(99.9%) 22.777 MB/sec [Average]
[info]   (min, avg, max) = (163.623, 167.989, 175.760), stdev = 5.915
[info]   CI (99.9%): [145.213, 190.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1275.179 ±(99.9%) 223.903 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1275.179, 1341.883), stdev = 58.147
[info]   CI (99.9%): [1051.276, 1499.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.697 ±(99.9%) 1079.308 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.697, 511.875), stdev = 280.293
[info]   CI (99.9%): [≈ 0, 1284.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1571.720 ±(99.9%) 8287.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1571.720, 3970.391), stdev = 2152.362
[info]   CI (99.9%): [≈ 0, 9859.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.377 ±(99.9%) 3.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 1.872), stdev = 0.836
[info]   CI (99.9%): [≈ 0, 3.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2.922 ±(99.9%) 24.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.922, 14.522), stdev = 6.485
[info]   CI (99.9%): [≈ 0, 27.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178195.196 ops/s
[info] # Warmup Iteration   2: 399124.298 ops/s
[info] # Warmup Iteration   3: 413443.603 ops/s
[info] # Warmup Iteration   4: 426483.433 ops/s
[info] # Warmup Iteration   5: 424844.732 ops/s
[info] Iteration   1: 429007.607 ops/s
[info]                  ·gc.alloc.rate:      420.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 423885.860 ops/s
[info]                  ·gc.alloc.rate:               432.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          1606.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1899.572 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 426245.983 ops/s
[info]                  ·gc.alloc.rate:                   441.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1629.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2467.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 424471.575 ops/s
[info]                  ·gc.alloc.rate:      416.411 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 424478.711 ops/s
[info]                  ·gc.alloc.rate:               432.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          1605.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2477.332 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   425617.947 ±(99.9%) 8053.365 ops/s [Average]
[info]   (min, avg, max) = (423885.860, 425617.947, 429007.607), stdev = 2091.433
[info]   CI (99.9%): [417564.582, 433671.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   428.832 ±(99.9%) 38.764 MB/sec [Average]
[info]   (min, avg, max) = (416.411, 428.832, 441.341), stdev = 10.067
[info]   CI (99.9%): [390.068, 467.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1585.770 ±(99.9%) 151.417 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1585.770, 1629.300), stdev = 39.323
[info]   CI (99.9%): [1434.352, 1737.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.599 ±(99.9%) 1322.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.599, 668.261), stdev = 343.400
[info]   CI (99.9%): [≈ 0, 1691.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1368.786 ±(99.9%) 4894.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1368.786, 2477.332), stdev = 1271.209
[info]   CI (99.9%): [≈ 0, 6263.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.307), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265605.432 ops/s
[info] # Warmup Iteration   2: 436497.121 ops/s
[info] # Warmup Iteration   3: 467148.185 ops/s
[info] # Warmup Iteration   4: 464998.160 ops/s
[info] # Warmup Iteration   5: 466968.386 ops/s
[info] Iteration   1: 466767.901 ops/s
[info]                  ·gc.alloc.rate:               379.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          1278.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1725.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 469042.916 ops/s
[info]                  ·gc.alloc.rate:               384.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          1288.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1716.573 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 470406.763 ops/s
[info]                  ·gc.alloc.rate:      368.298 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.192 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 467683.172 ops/s
[info]                  ·gc.alloc.rate:               386.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          1299.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2256.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 467204.489 ops/s
[info]                  ·gc.alloc.rate:      365.708 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   468221.048 ±(99.9%) 5739.642 ops/s [Average]
[info]   (min, avg, max) = (466767.901, 468221.048, 470406.763), stdev = 1490.567
[info]   CI (99.9%): [462481.406, 473960.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   376.710 ±(99.9%) 35.620 MB/sec [Average]
[info]   (min, avg, max) = (365.708, 376.710, 386.164), stdev = 9.251
[info]   CI (99.9%): [341.089, 412.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1266.144 ±(99.9%) 123.107 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1266.144, 1299.543), stdev = 31.970
[info]   CI (99.9%): [1143.037, 1389.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.784 ±(99.9%) 1216.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.784, 670.462), stdev = 315.983
[info]   CI (99.9%): [≈ 0, 1555.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1139.574 ±(99.9%) 4093.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1139.574, 2256.282), stdev = 1063.010
[info]   CI (99.9%): [≈ 0, 5232.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275797.520 ops/s
[info] # Warmup Iteration   2: 494131.438 ops/s
[info] # Warmup Iteration   3: 487950.891 ops/s
[info] # Warmup Iteration   4: 501418.020 ops/s
[info] # Warmup Iteration   5: 498973.112 ops/s
[info] Iteration   1: 500088.016 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 500208.883 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 500297.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 500018.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 499777.926 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   500078.101 ±(99.9%) 767.550 ops/s [Average]
[info]   (min, avg, max) = (499777.926, 500078.101, 500297.314), stdev = 199.330
[info]   CI (99.9%): [499310.551, 500845.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8831.070 ops/s
[info] # Warmup Iteration   2: 25979.403 ops/s
[info] # Warmup Iteration   3: 28606.504 ops/s
[info] # Warmup Iteration   4: 28573.470 ops/s
[info] # Warmup Iteration   5: 28503.229 ops/s
[info] Iteration   1: 28048.038 ops/s
[info]                  ·gc.alloc.rate:                   1519.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              85236.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75282.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 28752.573 ops/s
[info]                  ·gc.alloc.rate:                   1567.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              85759.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73437.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28582.682 ops/s
[info]                  ·gc.alloc.rate:                   1589.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              87518.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110803.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.796 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 28646.881 ops/s
[info]                  ·gc.alloc.rate:                   1556.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              85542.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73489.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28671.042 ops/s
[info]                  ·gc.alloc.rate:                   1562.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              85730.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73346.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28540.243 ±(99.9%) 1085.087 ops/s [Average]
[info]   (min, avg, max) = (28048.038, 28540.243, 28752.573), stdev = 281.794
[info]   CI (99.9%): [27455.156, 29625.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1559.078 ±(99.9%) 97.611 MB/sec [Average]
[info]   (min, avg, max) = (1519.499, 1559.078, 1589.449), stdev = 25.349
[info]   CI (99.9%): [1461.467, 1656.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85957.581 ±(99.9%) 3453.751 B/op [Average]
[info]   (min, avg, max) = (85236.969, 85957.581, 87518.231), stdev = 896.928
[info]   CI (99.9%): [82503.829, 89411.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.117 ±(99.9%) 1158.591 MB/sec [Average]
[info]   (min, avg, max) = (1336.502, 1474.117, 2012.333), stdev = 300.883
[info]   CI (99.9%): [315.526, 2632.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81271.828 ±(99.9%) 63643.932 B/op [Average]
[info]   (min, avg, max) = (73346.937, 81271.828, 110803.039), stdev = 16528.127
[info]   CI (99.9%): [17627.896, 144915.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 7.017 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.841, 4.101), stdev = 1.822
[info]   CI (99.9%): [≈ 0, 7.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46.306 ±(99.9%) 386.371 B/op [Average]
[info]   (min, avg, max) = (1.143, 46.306, 225.796), stdev = 100.339
[info]   CI (99.9%): [≈ 0, 432.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1125.322 ops/s
[info] # Warmup Iteration   2: 7141.221 ops/s
[info] # Warmup Iteration   3: 8292.009 ops/s
[info] # Warmup Iteration   4: 8421.010 ops/s
[info] # Warmup Iteration   5: 8457.640 ops/s
[info] Iteration   1: 8426.576 ops/s
[info]                  ·gc.alloc.rate:                   1232.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              230149.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250543.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8405.481 ops/s
[info]                  ·gc.alloc.rate:                   1217.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              227896.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251323.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8415.533 ops/s
[info]                  ·gc.alloc.rate:                   1224.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              229028.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251149.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8295.855 ops/s
[info]                  ·gc.alloc.rate:                   1205.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              228432.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     253744.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 637.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8269.671 ops/s
[info]                  ·gc.alloc.rate:                   1190.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              226548.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127839.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8362.623 ±(99.9%) 284.429 ops/s [Average]
[info]   (min, avg, max) = (8269.671, 8362.623, 8426.576), stdev = 73.865
[info]   CI (99.9%): [8078.194, 8647.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1214.174 ±(99.9%) 63.641 MB/sec [Average]
[info]   (min, avg, max) = (1190.438, 1214.174, 1232.668), stdev = 16.527
[info]   CI (99.9%): [1150.533, 1277.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228411.195 ±(99.9%) 5142.995 B/op [Average]
[info]   (min, avg, max) = (226548.925, 228411.195, 230149.287), stdev = 1335.619
[info]   CI (99.9%): [223268.200, 233554.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1207.690 ±(99.9%) 1153.654 MB/sec [Average]
[info]   (min, avg, max) = (671.754, 1207.690, 1342.978), stdev = 299.600
[info]   CI (99.9%): [54.036, 2361.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   226920.335 ±(99.9%) 213330.622 B/op [Average]
[info]   (min, avg, max) = (127839.567, 226920.335, 253744.570), stdev = 55401.285
[info]   CI (99.9%): [13589.714, 440250.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.760 ±(99.9%) 5.625 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.760, 3.363), stdev = 1.461
[info]   CI (99.9%): [≈ 0, 6.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   143.976 ±(99.9%) 1065.596 B/op [Average]
[info]   (min, avg, max) = (3.893, 143.976, 637.035), stdev = 276.732
[info]   CI (99.9%): [≈ 0, 1209.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.400, 8.000), stdev = 3.050
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:05:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1248.571 ops/s
[info] # Warmup Iteration   2: 7106.497 ops/s
[info] # Warmup Iteration   3: 8168.769 ops/s
[info] # Warmup Iteration   4: 8276.901 ops/s
[info] # Warmup Iteration   5: 8237.374 ops/s
[info] Iteration   1: 8274.577 ops/s
[info]                  ·gc.alloc.rate:               1098.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          208980.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127017.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 8237.547 ops/s
[info]                  ·gc.alloc.rate:               1103.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          210858.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 255303.247 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 8188.203 ops/s
[info]                  ·gc.alloc.rate:                   1105.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              212353.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257086.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8216.700 ops/s
[info]                  ·gc.alloc.rate:               1097.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          210136.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128217.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8261.991 ops/s
[info]                  ·gc.alloc.rate:                   1109.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              211252.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255038.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 745.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8235.804 ±(99.9%) 133.709 ops/s [Average]
[info]   (min, avg, max) = (8188.203, 8235.804, 8274.577), stdev = 34.724
[info]   CI (99.9%): [8102.095, 8369.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1102.832 ±(99.9%) 18.809 MB/sec [Average]
[info]   (min, avg, max) = (1097.115, 1102.832, 1109.037), stdev = 4.885
[info]   CI (99.9%): [1084.023, 1121.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   210716.379 ±(99.9%) 4846.296 B/op [Average]
[info]   (min, avg, max) = (208980.722, 210716.379, 212353.585), stdev = 1258.568
[info]   CI (99.9%): [205870.083, 215562.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.187 ±(99.9%) 1411.599 MB/sec [Average]
[info]   (min, avg, max) = (667.807, 1070.187, 1338.907), stdev = 366.588
[info]   CI (99.9%): [≈ 0, 2481.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   204532.689 ±(99.9%) 270389.709 B/op [Average]
[info]   (min, avg, max) = (127017.574, 204532.689, 257086.765), stdev = 70219.349
[info]   CI (99.9%): [≈ 0, 474922.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.796 ±(99.9%) 6.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 3.916), stdev = 1.744
[info]   CI (99.9%): [≈ 0, 7.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   151.574 ±(99.9%) 1279.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151.574, 745.866), stdev = 332.260
[info]   CI (99.9%): [≈ 0, 1430.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69320.121 ops/s
[info] # Warmup Iteration   2: 187269.714 ops/s
[info] # Warmup Iteration   3: 191821.322 ops/s
[info] # Warmup Iteration   4: 188699.211 ops/s
[info] # Warmup Iteration   5: 190726.111 ops/s
[info] Iteration   1: 192760.440 ops/s
[info]                  ·gc.alloc.rate:                   1669.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              13628.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10984.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 192601.827 ops/s
[info]                  ·gc.alloc.rate:                   1668.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              13636.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11001.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 191711.113 ops/s
[info]                  ·gc.alloc.rate:                   1701.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              13964.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16564.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 192827.358 ops/s
[info]                  ·gc.alloc.rate:               1684.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          13748.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10961.350 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 191614.627 ops/s
[info]                  ·gc.alloc.rate:                   1699.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              13959.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16535.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   192303.073 ±(99.9%) 2276.191 ops/s [Average]
[info]   (min, avg, max) = (191614.627, 192303.073, 192827.358), stdev = 591.119
[info]   CI (99.9%): [190026.882, 194579.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1684.698 ±(99.9%) 59.758 MB/sec [Average]
[info]   (min, avg, max) = (1668.905, 1684.698, 1701.038), stdev = 15.519
[info]   CI (99.9%): [1624.940, 1744.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   13787.424 ±(99.9%) 640.132 B/op [Average]
[info]   (min, avg, max) = (13628.097, 13787.424, 13964.579), stdev = 166.240
[info]   CI (99.9%): [13147.292, 14427.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.184 ±(99.9%) 1413.963 MB/sec [Average]
[info]   (min, avg, max) = (1343.003, 1613.184, 2017.786), stdev = 367.202
[info]   CI (99.9%): [199.221, 3027.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13209.382 ±(99.9%) 11743.027 B/op [Average]
[info]   (min, avg, max) = (10961.350, 13209.382, 16564.897), stdev = 3049.627
[info]   CI (99.9%): [1466.355, 24952.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 4.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 2.915), stdev = 1.258
[info]   CI (99.9%): [≈ 0, 5.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.481 ±(99.9%) 39.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.481, 23.815), stdev = 10.277
[info]   CI (99.9%): [≈ 0, 45.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 791.592 ops/s
[info] # Warmup Iteration   2: 6673.270 ops/s
[info] # Warmup Iteration   3: 7714.505 ops/s
[info] # Warmup Iteration   4: 7638.606 ops/s
[info] # Warmup Iteration   5: 7765.427 ops/s
[info] Iteration   1: 7747.604 ops/s
[info]                  ·gc.alloc.rate:                   1282.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              260475.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271176.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 7796.371 ops/s
[info]                  ·gc.alloc.rate:               1278.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          258140.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269606.935 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 7766.492 ops/s
[info]                  ·gc.alloc.rate:                   1256.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              254689.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135459.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7600.986 ops/s
[info]                  ·gc.alloc.rate:                   1244.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              257733.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276866.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 827.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7662.385 ops/s
[info]                  ·gc.alloc.rate:                   1266.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              259988.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274285.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7714.768 ±(99.9%) 311.062 ops/s [Average]
[info]   (min, avg, max) = (7600.986, 7714.768, 7796.371), stdev = 80.782
[info]   CI (99.9%): [7403.706, 8025.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1265.780 ±(99.9%) 59.765 MB/sec [Average]
[info]   (min, avg, max) = (1244.793, 1265.780, 1282.294), stdev = 15.521
[info]   CI (99.9%): [1206.014, 1325.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   258205.460 ±(99.9%) 8806.288 B/op [Average]
[info]   (min, avg, max) = (254689.563, 258205.460, 260475.266), stdev = 2286.965
[info]   CI (99.9%): [249399.172, 267011.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.400 ±(99.9%) 1149.261 MB/sec [Average]
[info]   (min, avg, max) = (668.501, 1202.400, 1337.200), stdev = 298.459
[info]   CI (99.9%): [53.139, 2351.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   245478.808 ±(99.9%) 237071.707 B/op [Average]
[info]   (min, avg, max) = (135459.065, 245478.808, 276866.542), stdev = 61566.769
[info]   CI (99.9%): [8407.101, 482550.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.899 ±(99.9%) 6.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.899, 3.997), stdev = 1.742
[info]   CI (99.9%): [≈ 0, 7.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   185.999 ±(99.9%) 1389.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 185.999, 827.497), stdev = 360.782
[info]   CI (99.9%): [≈ 0, 1575.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6250.935 ops/s
[info] # Warmup Iteration   2: 19655.154 ops/s
[info] # Warmup Iteration   3: 20356.147 ops/s
[info] # Warmup Iteration   4: 20795.664 ops/s
[info] # Warmup Iteration   5: 20801.779 ops/s
[info] Iteration   1: 20710.878 ops/s
[info]                  ·gc.alloc.rate:                   1183.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              89915.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101921.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 20784.414 ops/s
[info]                  ·gc.alloc.rate:                   1184.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              89713.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101584.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20790.686 ops/s
[info]                  ·gc.alloc.rate:               1186.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          89788.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101610.111 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 20912.822 ops/s
[info]                  ·gc.alloc.rate:               1166.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          87762.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50533.783 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 20792.344 ops/s
[info]                  ·gc.alloc.rate:                   1186.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              89792.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101645.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20798.229 ±(99.9%) 279.299 ops/s [Average]
[info]   (min, avg, max) = (20710.878, 20798.229, 20912.822), stdev = 72.533
[info]   CI (99.9%): [20518.930, 21077.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1181.339 ±(99.9%) 33.016 MB/sec [Average]
[info]   (min, avg, max) = (1166.177, 1181.339, 1186.517), stdev = 8.574
[info]   CI (99.9%): [1148.323, 1214.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89394.595 ±(99.9%) 3523.615 B/op [Average]
[info]   (min, avg, max) = (87762.781, 89394.595, 89915.402), stdev = 915.072
[info]   CI (99.9%): [85870.981, 92918.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.908 ±(99.9%) 1154.696 MB/sec [Average]
[info]   (min, avg, max) = (671.484, 1207.908, 1343.144), stdev = 299.871
[info]   CI (99.9%): [53.212, 2362.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91459.113 ±(99.9%) 88096.399 B/op [Average]
[info]   (min, avg, max) = (50533.783, 91459.113, 101921.688), stdev = 22878.355
[info]   CI (99.9%): [3362.714, 179555.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 6.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.685), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56.724 ±(99.9%) 478.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.724, 278.883), stdev = 124.198
[info]   CI (99.9%): [≈ 0, 534.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7204.253 ops/s
[info] # Warmup Iteration   2: 21272.553 ops/s
[info] # Warmup Iteration   3: 23902.325 ops/s
[info] # Warmup Iteration   4: 24091.160 ops/s
[info] # Warmup Iteration   5: 24009.395 ops/s
[info] Iteration   1: 24059.274 ops/s
[info]                  ·gc.alloc.rate:               1054.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          68953.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43748.766 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 24046.645 ops/s
[info]                  ·gc.alloc.rate:               1071.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          70136.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87588.424 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 23890.376 ops/s
[info]                  ·gc.alloc.rate:                   1044.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              68825.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44102.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 23906.507 ops/s
[info]                  ·gc.alloc.rate:               1059.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          69718.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88188.965 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 24017.401 ops/s
[info]                  ·gc.alloc.rate:               1061.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          69550.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43910.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23984.041 ±(99.9%) 307.310 ops/s [Average]
[info]   (min, avg, max) = (23890.376, 23984.041, 24059.274), stdev = 79.807
[info]   CI (99.9%): [23676.731, 24291.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1058.161 ±(99.9%) 37.962 MB/sec [Average]
[info]   (min, avg, max) = (1044.758, 1058.161, 1071.618), stdev = 9.859
[info]   CI (99.9%): [1020.199, 1096.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69436.808 ±(99.9%) 2099.918 B/op [Average]
[info]   (min, avg, max) = (68825.458, 69436.808, 70136.619), stdev = 545.342
[info]   CI (99.9%): [67336.890, 71536.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   937.233 ±(99.9%) 1412.009 MB/sec [Average]
[info]   (min, avg, max) = (668.758, 937.233, 1339.587), stdev = 366.694
[info]   CI (99.9%): [≈ 0, 2349.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61507.790 ±(99.9%) 92737.450 B/op [Average]
[info]   (min, avg, max) = (43748.766, 61507.790, 88188.965), stdev = 24083.621
[info]   CI (99.9%): [≈ 0, 154245.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.215 ±(99.9%) 1.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.215, 1.074), stdev = 0.480
[info]   CI (99.9%): [≈ 0, 2.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186379.264 ops/s
[info] # Warmup Iteration   2: 375991.777 ops/s
[info] # Warmup Iteration   3: 373045.034 ops/s
[info] # Warmup Iteration   4: 364650.012 ops/s
[info] # Warmup Iteration   5: 370213.248 ops/s
[info] Iteration   1: 370794.228 ops/s
[info]                  ·gc.alloc.rate:                   863.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              3663.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2850.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 373359.384 ops/s
[info]                  ·gc.alloc.rate:               866.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          3651.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2830.559 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 375901.287 ops/s
[info]                  ·gc.alloc.rate:                   884.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              3701.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5628.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 375803.621 ops/s
[info]                  ·gc.alloc.rate:                   867.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              3633.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2814.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 376077.360 ops/s
[info]                  ·gc.alloc.rate:               879.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          3680.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2812.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   374387.176 ±(99.9%) 8848.358 ops/s [Average]
[info]   (min, avg, max) = (370794.228, 374387.176, 376077.360), stdev = 2297.891
[info]   CI (99.9%): [365538.818, 383235.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   872.177 ±(99.9%) 35.053 MB/sec [Average]
[info]   (min, avg, max) = (863.150, 872.177, 884.190), stdev = 9.103
[info]   CI (99.9%): [837.124, 907.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3666.306 ±(99.9%) 100.799 B/op [Average]
[info]   (min, avg, max) = (3633.816, 3666.306, 3701.945), stdev = 26.177
[info]   CI (99.9%): [3565.507, 3767.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.322 ±(99.9%) 1157.971 MB/sec [Average]
[info]   (min, avg, max) = (671.460, 806.322, 1344.268), stdev = 300.721
[info]   CI (99.9%): [≈ 0, 1964.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3387.317 ±(99.9%) 4824.029 B/op [Average]
[info]   (min, avg, max) = (2812.847, 3387.317, 5628.209), stdev = 1252.785
[info]   CI (99.9%): [≈ 0, 8211.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.088 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.177), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179021.654 ops/s
[info] # Warmup Iteration   2: 400680.189 ops/s
[info] # Warmup Iteration   3: 433548.753 ops/s
[info] # Warmup Iteration   4: 432551.607 ops/s
[info] # Warmup Iteration   5: 433418.494 ops/s
[info] Iteration   1: 433111.486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 433885.401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 432660.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 433073.842 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 433133.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   433173.054 ±(99.9%) 1705.736 ops/s [Average]
[info]   (min, avg, max) = (432660.923, 433173.054, 433885.401), stdev = 442.974
[info]   CI (99.9%): [431467.318, 434878.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4939.288 ops/s
[info] # Warmup Iteration   2: 22507.988 ops/s
[info] # Warmup Iteration   3: 24623.093 ops/s
[info] # Warmup Iteration   4: 24287.980 ops/s
[info] # Warmup Iteration   5: 24773.620 ops/s
[info] Iteration   1: 24842.782 ops/s
[info]                  ·gc.alloc.rate:               1210.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          76680.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84761.335 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 24842.973 ops/s
[info]                  ·gc.alloc.rate:                   1193.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              75629.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84824.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 24673.953 ops/s
[info]                  ·gc.alloc.rate:               1183.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          75482.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85469.269 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 25389.975 ops/s
[info]                  ·gc.alloc.rate:               1215.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          75311.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41540.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 25281.089 ops/s
[info]                  ·gc.alloc.rate:                   1234.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              76874.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83473.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 250.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   25006.154 ±(99.9%) 1197.085 ops/s [Average]
[info]   (min, avg, max) = (24673.953, 25006.154, 25389.975), stdev = 310.879
[info]   CI (99.9%): [23809.069, 26203.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1207.516 ±(99.9%) 76.658 MB/sec [Average]
[info]   (min, avg, max) = (1183.415, 1207.516, 1234.958), stdev = 19.908
[info]   CI (99.9%): [1130.858, 1284.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75995.641 ±(99.9%) 2796.232 B/op [Average]
[info]   (min, avg, max) = (75311.053, 75995.641, 76874.905), stdev = 726.173
[info]   CI (99.9%): [73199.409, 78791.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1205.604 ±(99.9%) 1152.565 MB/sec [Average]
[info]   (min, avg, max) = (670.172, 1205.604, 1340.954), stdev = 299.317
[info]   CI (99.9%): [53.038, 2358.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76013.668 ±(99.9%) 74259.491 B/op [Average]
[info]   (min, avg, max) = (41540.027, 76013.668, 85469.269), stdev = 19284.954
[info]   CI (99.9%): [1754.176, 150273.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.910 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 4.018), stdev = 1.794
[info]   CI (99.9%): [≈ 0, 7.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   50.283 ±(99.9%) 430.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.283, 250.098), stdev = 111.701
[info]   CI (99.9%): [≈ 0, 480.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1695.194 ops/s
[info] # Warmup Iteration   2: 11682.219 ops/s
[info] # Warmup Iteration   3: 13499.721 ops/s
[info] # Warmup Iteration   4: 13544.964 ops/s
[info] # Warmup Iteration   5: 13547.401 ops/s
[info] Iteration   1: 13496.966 ops/s
[info]                  ·gc.alloc.rate:               1333.983 MB/sec
[info]                  ·gc.alloc.rate.norm:          155528.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156432.005 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13493.613 ops/s
[info]                  ·gc.alloc.rate:                   1318.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              153793.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156478.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13509.816 ops/s
[info]                  ·gc.alloc.rate:                   1318.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              153552.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156370.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13295.162 ops/s
[info]                  ·gc.alloc.rate:                   1308.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              154889.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158965.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 458.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13246.155 ops/s
[info]                  ·gc.alloc.rate:                   1303.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              154914.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159079.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.420 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13408.343 ±(99.9%) 489.110 ops/s [Average]
[info]   (min, avg, max) = (13246.155, 13408.343, 13509.816), stdev = 127.020
[info]   CI (99.9%): [12919.232, 13897.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1316.723 ±(99.9%) 44.654 MB/sec [Average]
[info]   (min, avg, max) = (1303.893, 1316.723, 1333.983), stdev = 11.596
[info]   CI (99.9%): [1272.069, 1361.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   154535.790 ±(99.9%) 3205.202 B/op [Average]
[info]   (min, avg, max) = (153552.433, 154535.790, 155528.574), stdev = 832.381
[info]   CI (99.9%): [151330.588, 157740.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341.614 ±(99.9%) 6.141 MB/sec [Average]
[info]   (min, avg, max) = (1338.947, 1341.614, 1342.906), stdev = 1.595
[info]   CI (99.9%): [1335.472, 1347.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   157465.202 ±(99.9%) 5478.184 B/op [Average]
[info]   (min, avg, max) = (156370.681, 157465.202, 159079.007), stdev = 1422.667
[info]   CI (99.9%): [151987.018, 162943.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.872), stdev = 1.720
[info]   CI (99.9%): [≈ 0, 7.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   94.120 ±(99.9%) 784.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.120, 458.328), stdev = 203.616
[info]   CI (99.9%): [≈ 0, 878.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2059.024 ops/s
[info] # Warmup Iteration   2: 11191.367 ops/s
[info] # Warmup Iteration   3: 13291.133 ops/s
[info] # Warmup Iteration   4: 13384.677 ops/s
[info] # Warmup Iteration   5: 13769.402 ops/s
[info] Iteration   1: 13808.997 ops/s
[info]                  ·gc.alloc.rate:                   1226.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              139709.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152150.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13642.275 ops/s
[info]                  ·gc.alloc.rate:                   1215.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              140268.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154127.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13706.076 ops/s
[info]                  ·gc.alloc.rate:               1204.544 MB/sec
[info]                  ·gc.alloc.rate.norm:          138325.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153522.909 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 13605.624 ops/s
[info]                  ·gc.alloc.rate:               1193.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          138059.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77358.388 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13421.964 ops/s
[info]                  ·gc.alloc.rate:                   1170.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              137255.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156927.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13636.987 ±(99.9%) 550.007 ops/s [Average]
[info]   (min, avg, max) = (13421.964, 13636.987, 13808.997), stdev = 142.835
[info]   CI (99.9%): [13086.980, 14186.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1202.167 ±(99.9%) 82.732 MB/sec [Average]
[info]   (min, avg, max) = (1170.501, 1202.167, 1226.222), stdev = 21.485
[info]   CI (99.9%): [1119.435, 1284.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   138723.789 ±(99.9%) 4761.087 B/op [Average]
[info]   (min, avg, max) = (137255.394, 138723.789, 140268.879), stdev = 1236.439
[info]   CI (99.9%): [133962.703, 143484.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.083 ±(99.9%) 1149.965 MB/sec [Average]
[info]   (min, avg, max) = (668.859, 1203.083, 1338.260), stdev = 298.642
[info]   CI (99.9%): [53.118, 2353.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   138817.267 ±(99.9%) 132464.296 B/op [Average]
[info]   (min, avg, max) = (77358.388, 138817.267, 156927.085), stdev = 34400.557
[info]   CI (99.9%): [6352.971, 271281.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.163), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 7.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   99.075 ±(99.9%) 837.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.075, 488.200), stdev = 217.537
[info]   CI (99.9%): [≈ 0, 936.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129321.329 ops/s
[info] # Warmup Iteration   2: 274238.748 ops/s
[info] # Warmup Iteration   3: 291368.812 ops/s
[info] # Warmup Iteration   4: 293973.607 ops/s
[info] # Warmup Iteration   5: 295003.458 ops/s
[info] Iteration   1: 293965.949 ops/s
[info]                  ·gc.alloc.rate:               1741.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          9325.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10802.819 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 293872.575 ops/s
[info]                  ·gc.alloc.rate:                   1737.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              9305.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7206.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 293025.674 ops/s
[info]                  ·gc.alloc.rate:                   1773.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              9527.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10815.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 293452.403 ops/s
[info]                  ·gc.alloc.rate:               1736.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          9316.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7195.290 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 295183.341 ops/s
[info]                  ·gc.alloc.rate:                   1788.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              9532.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10730.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   293899.988 ±(99.9%) 3114.534 ops/s [Average]
[info]   (min, avg, max) = (293025.674, 293899.988, 295183.341), stdev = 808.835
[info]   CI (99.9%): [290785.455, 297014.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1755.664 ±(99.9%) 91.391 MB/sec [Average]
[info]   (min, avg, max) = (1736.945, 1755.664, 1788.033), stdev = 23.734
[info]   CI (99.9%): [1664.273, 1847.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9401.402 ±(99.9%) 452.204 B/op [Average]
[info]   (min, avg, max) = (9305.246, 9401.402, 9532.039), stdev = 117.436
[info]   CI (99.9%): [8949.198, 9853.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746.289 ±(99.9%) 1415.681 MB/sec [Average]
[info]   (min, avg, max) = (1341.503, 1746.289, 2017.749), stdev = 367.648
[info]   CI (99.9%): [330.608, 3161.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9350.093 ±(99.9%) 7555.688 B/op [Average]
[info]   (min, avg, max) = (7195.290, 9350.093, 10815.705), stdev = 1962.188
[info]   CI (99.9%): [1794.405, 16905.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 5.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.998), stdev = 1.320
[info]   CI (99.9%): [≈ 0, 5.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.434 ±(99.9%) 27.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.434, 16.054), stdev = 7.067
[info]   CI (99.9%): [≈ 0, 30.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362.721 ops/s
[info] # Warmup Iteration   2: 8434.515 ops/s
[info] # Warmup Iteration   3: 12338.179 ops/s
[info] # Warmup Iteration   4: 12572.209 ops/s
[info] # Warmup Iteration   5: 12615.283 ops/s
[info] Iteration   1: 12591.656 ops/s
[info]                  ·gc.alloc.rate:                   1533.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              191631.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166603.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12207.046 ops/s
[info]                  ·gc.alloc.rate:                   1489.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              191980.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172186.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12596.818 ops/s
[info]                  ·gc.alloc.rate:                   1539.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              192303.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250887.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.915 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12584.696 ops/s
[info]                  ·gc.alloc.rate:                   1547.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              193499.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167778.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12612.643 ops/s
[info]                  ·gc.alloc.rate:               1550.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          193463.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167406.426 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12518.572 ±(99.9%) 671.751 ops/s [Average]
[info]   (min, avg, max) = (12207.046, 12518.572, 12612.643), stdev = 174.452
[info]   CI (99.9%): [11846.820, 13190.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1531.889 ±(99.9%) 95.561 MB/sec [Average]
[info]   (min, avg, max) = (1489.162, 1531.889, 1550.385), stdev = 24.817
[info]   CI (99.9%): [1436.327, 1627.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   192575.588 ±(99.9%) 3312.817 B/op [Average]
[info]   (min, avg, max) = (191631.682, 192575.588, 193499.416), stdev = 860.328
[info]   CI (99.9%): [189262.771, 195888.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.029 ±(99.9%) 1154.633 MB/sec [Average]
[info]   (min, avg, max) = (1332.938, 1472.029, 2008.382), stdev = 299.855
[info]   CI (99.9%): [317.396, 2626.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   184972.462 ±(99.9%) 142133.920 B/op [Average]
[info]   (min, avg, max) = (166603.190, 184972.462, 250887.559), stdev = 36911.728
[info]   CI (99.9%): [42838.543, 327106.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.327 ±(99.9%) 1.728 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 1.032), stdev = 0.449
[info]   CI (99.9%): [≈ 0, 2.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   40.885 ±(99.9%) 215.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.885, 128.915), stdev = 56.025
[info]   CI (99.9%): [≈ 0, 256.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11976.401 ops/s
[info] # Warmup Iteration   2: 32165.422 ops/s
[info] # Warmup Iteration   3: 32430.955 ops/s
[info] # Warmup Iteration   4: 32218.617 ops/s
[info] # Warmup Iteration   5: 32908.777 ops/s
[info] Iteration   1: 32987.180 ops/s
[info]                  ·gc.alloc.rate:                   1428.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              68146.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64008.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 32620.713 ops/s
[info]                  ·gc.alloc.rate:                   1409.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              67995.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64760.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33219.653 ops/s
[info]                  ·gc.alloc.rate:                   1434.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              67983.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63628.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33199.966 ops/s
[info]                  ·gc.alloc.rate:                   1434.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              67952.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63599.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33269.415 ops/s
[info]                  ·gc.alloc.rate:                   1451.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              68634.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63371.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33059.386 ±(99.9%) 1031.815 ops/s [Average]
[info]   (min, avg, max) = (32620.713, 33059.386, 33269.415), stdev = 267.959
[info]   CI (99.9%): [32027.571, 34091.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1431.660 ±(99.9%) 57.054 MB/sec [Average]
[info]   (min, avg, max) = (1409.936, 1431.660, 1451.099), stdev = 14.817
[info]   CI (99.9%): [1374.606, 1488.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68142.364 ±(99.9%) 1098.479 B/op [Average]
[info]   (min, avg, max) = (67952.136, 68142.364, 68634.777), stdev = 285.271
[info]   CI (99.9%): [67043.885, 69240.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.891 ±(99.9%) 5.017 MB/sec [Average]
[info]   (min, avg, max) = (1339.820, 1341.891, 1343.046), stdev = 1.303
[info]   CI (99.9%): [1336.874, 1346.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63873.785 ±(99.9%) 2102.205 B/op [Average]
[info]   (min, avg, max) = (63371.490, 63873.785, 64760.640), stdev = 545.936
[info]   CI (99.9%): [61771.580, 65975.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 4.884 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.750, 2.956), stdev = 1.268
[info]   CI (99.9%): [≈ 0, 5.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.519 ±(99.9%) 231.354 B/op [Average]
[info]   (min, avg, max) = (0.985, 35.519, 140.055), stdev = 60.082
[info]   CI (99.9%): [≈ 0, 266.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27940.706 ops/s
[info] # Warmup Iteration   2: 75094.466 ops/s
[info] # Warmup Iteration   3: 77744.935 ops/s
[info] # Warmup Iteration   4: 77256.166 ops/s
[info] # Warmup Iteration   5: 76868.890 ops/s
[info] Iteration   1: 78138.383 ops/s
[info]                  ·gc.alloc.rate:                   1966.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              39603.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40521.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 79331.685 ops/s
[info]                  ·gc.alloc.rate:                   1997.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              39612.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39873.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 79311.524 ops/s
[info]                  ·gc.alloc.rate:                   1997.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              39633.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39815.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.892 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 79086.259 ops/s
[info]                  ·gc.alloc.rate:                   2004.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              39882.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39928.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 78865.137 ops/s
[info]                  ·gc.alloc.rate:                   1998.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              39892.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40093.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   78946.597 ±(99.9%) 1887.223 ops/s [Average]
[info]   (min, avg, max) = (78138.383, 78946.597, 79331.685), stdev = 490.106
[info]   CI (99.9%): [77059.374, 80833.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1992.899 ±(99.9%) 58.606 MB/sec [Average]
[info]   (min, avg, max) = (1966.210, 1992.899, 2004.647), stdev = 15.220
[info]   CI (99.9%): [1934.293, 2051.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39724.971 ±(99.9%) 573.188 B/op [Average]
[info]   (min, avg, max) = (39603.954, 39724.971, 39892.458), stdev = 148.855
[info]   CI (99.9%): [39151.783, 40298.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2008.946 ±(99.9%) 8.787 MB/sec [Average]
[info]   (min, avg, max) = (2006.441, 2008.946, 2011.754), stdev = 2.282
[info]   CI (99.9%): [2000.159, 2017.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40046.342 ±(99.9%) 1097.394 B/op [Average]
[info]   (min, avg, max) = (39815.326, 40046.342, 40521.306), stdev = 284.990
[info]   CI (99.9%): [38948.948, 41143.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 4.964 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 3.039), stdev = 1.289
[info]   CI (99.9%): [≈ 0, 5.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.631 ±(99.9%) 100.026 B/op [Average]
[info]   (min, avg, max) = (0.415, 15.631, 61.218), stdev = 25.976
[info]   CI (99.9%): [≈ 0, 115.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373509.395 ops/s
[info] # Warmup Iteration   2: 597714.972 ops/s
[info] # Warmup Iteration   3: 632599.746 ops/s
[info] # Warmup Iteration   4: 630455.897 ops/s
[info] # Warmup Iteration   5: 624180.538 ops/s
[info] Iteration   1: 623739.766 ops/s
[info]                  ·gc.alloc.rate:               877.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          2213.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1694.312 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 624032.390 ops/s
[info]                  ·gc.alloc.rate:               889.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          2242.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3387.760 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 629941.659 ops/s
[info]                  ·gc.alloc.rate:               879.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          2198.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1678.434 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 620605.142 ops/s
[info]                  ·gc.alloc.rate:               867.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          2199.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1704.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 624068.740 ops/s
[info]                  ·gc.alloc.rate:               881.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          2221.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1695.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   624477.539 ±(99.9%) 13024.295 ops/s [Average]
[info]   (min, avg, max) = (620605.142, 624477.539, 629941.659), stdev = 3382.368
[info]   CI (99.9%): [611453.245, 637501.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   878.997 ±(99.9%) 31.029 MB/sec [Average]
[info]   (min, avg, max) = (867.161, 878.997, 889.589), stdev = 8.058
[info]   CI (99.9%): [847.968, 910.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2215.020 ±(99.9%) 71.184 B/op [Average]
[info]   (min, avg, max) = (2198.110, 2215.020, 2242.974), stdev = 18.486
[info]   CI (99.9%): [2143.836, 2286.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.295 ±(99.9%) 1156.645 MB/sec [Average]
[info]   (min, avg, max) = (671.707, 806.295, 1343.625), stdev = 300.377
[info]   CI (99.9%): [≈ 0, 1962.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2032.036 ±(99.9%) 2918.522 B/op [Average]
[info]   (min, avg, max) = (1678.434, 2032.036, 3387.760), stdev = 757.931
[info]   CI (99.9%): [≈ 0, 4950.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:01:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442158.587 ops/s
[info] # Warmup Iteration   2: 709513.801 ops/s
[info] # Warmup Iteration   3: 739050.352 ops/s
[info] # Warmup Iteration   4: 734755.790 ops/s
[info] # Warmup Iteration   5: 739380.857 ops/s
[info] Iteration   1: 739037.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 739379.653 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 739118.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 739534.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 739699.313 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   739353.851 ±(99.9%) 1068.962 ops/s [Average]
[info]   (min, avg, max) = (739037.465, 739353.851, 739699.313), stdev = 277.606
[info]   CI (99.9%): [738284.889, 740422.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23197.877 ops/s
[info] # Warmup Iteration   2: 71271.044 ops/s
[info] # Warmup Iteration   3: 75148.696 ops/s
[info] # Warmup Iteration   4: 74534.293 ops/s
[info] # Warmup Iteration   5: 74823.840 ops/s
[info] Iteration   1: 75474.235 ops/s
[info]                  ·gc.alloc.rate:                   2181.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              45492.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41853.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 75196.826 ops/s
[info]                  ·gc.alloc.rate:                   2185.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              45738.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41923.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 74831.096 ops/s
[info]                  ·gc.alloc.rate:               2176.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          45780.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42087.066 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 75898.935 ops/s
[info]                  ·gc.alloc.rate:               2206.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          45748.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41550.192 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 75588.712 ops/s
[info]                  ·gc.alloc.rate:               2212.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          46045.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41824.591 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   75397.961 ±(99.9%) 1558.167 ops/s [Average]
[info]   (min, avg, max) = (74831.096, 75397.961, 75898.935), stdev = 404.651
[info]   CI (99.9%): [73839.794, 76956.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2192.357 ±(99.9%) 60.524 MB/sec [Average]
[info]   (min, avg, max) = (2176.659, 2192.357, 2212.017), stdev = 15.718
[info]   CI (99.9%): [2131.832, 2252.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45761.115 ±(99.9%) 754.613 B/op [Average]
[info]   (min, avg, max) = (45492.783, 45761.115, 46045.014), stdev = 195.971
[info]   CI (99.9%): [45006.503, 46515.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.833 ±(99.9%) 12.604 MB/sec [Average]
[info]   (min, avg, max) = (2001.066, 2004.833, 2009.266), stdev = 3.273
[info]   CI (99.9%): [1992.228, 2017.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41847.791 ±(99.9%) 750.937 B/op [Average]
[info]   (min, avg, max) = (41550.192, 41847.791, 42087.066), stdev = 195.016
[info]   CI (99.9%): [41096.854, 42598.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.838 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.976), stdev = 1.776
[info]   CI (99.9%): [≈ 0, 7.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.670 ±(99.9%) 142.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.670, 82.912), stdev = 37.031
[info]   CI (99.9%): [≈ 0, 159.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3552.571 ops/s
[info] # Warmup Iteration   2: 14989.065 ops/s
[info] # Warmup Iteration   3: 16685.377 ops/s
[info] # Warmup Iteration   4: 16774.794 ops/s
[info] # Warmup Iteration   5: 16972.011 ops/s
[info] Iteration   1: 17002.859 ops/s
[info]                  ·gc.alloc.rate:               889.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          82366.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62090.793 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16905.335 ops/s
[info]                  ·gc.alloc.rate:               898.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          83620.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62446.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 16858.265 ops/s
[info]                  ·gc.alloc.rate:                   922.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              86092.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125249.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 16827.080 ops/s
[info]                  ·gc.alloc.rate:               882.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          82461.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62806.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 16524.681 ops/s
[info]                  ·gc.alloc.rate:               863.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          82273.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63953.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   16823.644 ±(99.9%) 692.530 ops/s [Average]
[info]   (min, avg, max) = (16524.681, 16823.644, 17002.859), stdev = 179.848
[info]   CI (99.9%): [16131.114, 17516.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   891.232 ±(99.9%) 82.693 MB/sec [Average]
[info]   (min, avg, max) = (863.823, 891.232, 922.185), stdev = 21.475
[info]   CI (99.9%): [808.539, 973.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83362.877 ±(99.9%) 6240.898 B/op [Average]
[info]   (min, avg, max) = (82273.980, 83362.877, 86092.123), stdev = 1620.742
[info]   CI (99.9%): [77121.979, 89603.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   805.303 ±(99.9%) 1154.474 MB/sec [Average]
[info]   (min, avg, max) = (670.799, 805.303, 1341.624), stdev = 299.813
[info]   CI (99.9%): [≈ 0, 1959.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   75309.449 ±(99.9%) 107533.484 B/op [Average]
[info]   (min, avg, max) = (62090.793, 75309.449, 125249.515), stdev = 27926.104
[info]   CI (99.9%): [≈ 0, 182842.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.777 ±(99.9%) 6.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.887), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4458.433 ops/s
[info] # Warmup Iteration   2: 15072.168 ops/s
[info] # Warmup Iteration   3: 17503.383 ops/s
[info] # Warmup Iteration   4: 17418.628 ops/s
[info] # Warmup Iteration   5: 17530.911 ops/s
[info] Iteration   1: 17542.614 ops/s
[info]                  ·gc.alloc.rate:               768.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          68914.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59851.183 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17126.058 ops/s
[info]                  ·gc.alloc.rate:               750.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          68925.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61373.041 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 17049.622 ops/s
[info]                  ·gc.alloc.rate:                   751.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              69388.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61646.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.922 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17053.161 ops/s
[info]                  ·gc.alloc.rate:                   746.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              68899.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61662.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.921 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17582.542 ops/s
[info]                  ·gc.alloc.rate:               766.978 MB/sec
[info]                  ·gc.alloc.rate.norm:          68640.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59804.488 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17270.799 ±(99.9%) 1033.778 ops/s [Average]
[info]   (min, avg, max) = (17049.622, 17270.799, 17582.542), stdev = 268.469
[info]   CI (99.9%): [16237.021, 18304.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   756.702 ±(99.9%) 38.939 MB/sec [Average]
[info]   (min, avg, max) = (746.568, 756.702, 768.182), stdev = 10.112
[info]   CI (99.9%): [717.763, 795.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   68953.673 ±(99.9%) 1041.471 B/op [Average]
[info]   (min, avg, max) = (68640.042, 68953.673, 69388.451), stdev = 270.467
[info]   CI (99.9%): [67912.202, 69995.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.856 ±(99.9%) 1.653 MB/sec [Average]
[info]   (min, avg, max) = (667.152, 667.856, 668.250), stdev = 0.429
[info]   CI (99.9%): [666.203, 669.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60867.630 ±(99.9%) 3682.363 B/op [Average]
[info]   (min, avg, max) = (59804.488, 60867.630, 61662.859), stdev = 956.298
[info]   CI (99.9%): [57185.267, 64549.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.769 ±(99.9%) 4.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 1.922), stdev = 1.052
[info]   CI (99.9%): [≈ 0, 4.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58234.272 ops/s
[info] # Warmup Iteration   2: 115379.653 ops/s
[info] # Warmup Iteration   3: 120404.052 ops/s
[info] # Warmup Iteration   4: 122034.539 ops/s
[info] # Warmup Iteration   5: 122263.944 ops/s
[info] Iteration   1: 122568.769 ops/s
[info]                  ·gc.alloc.rate:      307.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 122136.322 ops/s
[info]                  ·gc.alloc.rate:               324.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          4181.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6592.442 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 121862.688 ops/s
[info]                  ·gc.alloc.rate:               319.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          4122.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6607.208 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 120950.217 ops/s
[info]                  ·gc.alloc.rate:      303.753 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 122486.982 ops/s
[info]                  ·gc.alloc.rate:      307.570 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   122000.996 ±(99.9%) 2510.407 ops/s [Average]
[info]   (min, avg, max) = (120950.217, 122000.996, 122568.769), stdev = 651.945
[info]   CI (99.9%): [119490.588, 124511.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   312.593 ±(99.9%) 34.165 MB/sec [Average]
[info]   (min, avg, max) = (303.753, 312.593, 324.528), stdev = 8.873
[info]   CI (99.9%): [278.428, 346.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4032.090 ±(99.9%) 429.894 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4032.090, 4181.818), stdev = 111.642
[info]   CI (99.9%): [3602.195, 4461.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.685 ±(99.9%) 1079.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.685, 511.821), stdev = 280.276
[info]   CI (99.9%): [≈ 0, 1283.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2639.930 ±(99.9%) 13919.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2639.930, 6607.208), stdev = 3614.877
[info]   CI (99.9%): [≈ 0, 16559.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1018.490 ops/s
[info] # Warmup Iteration   2: 11915.030 ops/s
[info] # Warmup Iteration   3: 14362.622 ops/s
[info] # Warmup Iteration   4: 14268.707 ops/s
[info] # Warmup Iteration   5: 13993.206 ops/s
[info] Iteration   1: 14190.326 ops/s
[info]                  ·gc.alloc.rate:                   1065.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              118175.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74096.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14344.613 ops/s
[info]                  ·gc.alloc.rate:               1094.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          120068.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146685.163 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 14246.850 ops/s
[info]                  ·gc.alloc.rate:               1069.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          118146.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73878.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 14278.712 ops/s
[info]                  ·gc.alloc.rate:               1124.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          123960.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147499.593 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 14396.168 ops/s
[info]                  ·gc.alloc.rate:                   1101.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              120369.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146373.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 450.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14291.334 ±(99.9%) 311.460 ops/s [Average]
[info]   (min, avg, max) = (14190.326, 14291.334, 14396.168), stdev = 80.885
[info]   CI (99.9%): [13979.874, 14602.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1091.071 ±(99.9%) 93.864 MB/sec [Average]
[info]   (min, avg, max) = (1065.530, 1091.071, 1124.947), stdev = 24.376
[info]   CI (99.9%): [997.208, 1184.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   120144.249 ±(99.9%) 9130.721 B/op [Average]
[info]   (min, avg, max) = (118146.142, 120144.249, 123960.830), stdev = 2371.219
[info]   CI (99.9%): [111013.528, 129274.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.254 ±(99.9%) 1412.495 MB/sec [Average]
[info]   (min, avg, max) = (668.089, 1070.254, 1338.923), stdev = 366.820
[info]   CI (99.9%): [≈ 0, 2482.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117706.698 ±(99.9%) 153687.864 B/op [Average]
[info]   (min, avg, max) = (73878.618, 117706.698, 147499.593), stdev = 39912.250
[info]   CI (99.9%): [≈ 0, 271394.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 7.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.122), stdev = 1.841
[info]   CI (99.9%): [≈ 0, 7.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   90.580 ±(99.9%) 774.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90.580, 450.591), stdev = 201.255
[info]   CI (99.9%): [≈ 0, 865.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10471.838 ops/s
[info] # Warmup Iteration   2: 44386.049 ops/s
[info] # Warmup Iteration   3: 47167.456 ops/s
[info] # Warmup Iteration   4: 47212.572 ops/s
[info] # Warmup Iteration   5: 47711.104 ops/s
[info] Iteration   1: 47483.815 ops/s
[info]                  ·gc.alloc.rate:                   1464.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              48526.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44433.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 47582.422 ops/s
[info]                  ·gc.alloc.rate:                   1462.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              48360.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44363.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47591.862 ops/s
[info]                  ·gc.alloc.rate:                   1451.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              47999.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44388.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47424.703 ops/s
[info]                  ·gc.alloc.rate:                   1471.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              48847.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66720.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 47859.822 ops/s
[info]                  ·gc.alloc.rate:               1483.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          48767.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43987.311 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   47588.525 ±(99.9%) 642.758 ops/s [Average]
[info]   (min, avg, max) = (47424.703, 47588.525, 47859.822), stdev = 166.922
[info]   CI (99.9%): [46945.767, 48231.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1466.602 ±(99.9%) 45.527 MB/sec [Average]
[info]   (min, avg, max) = (1451.578, 1466.602, 1483.284), stdev = 11.823
[info]   CI (99.9%): [1421.074, 1512.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48500.154 ±(99.9%) 1309.652 B/op [Average]
[info]   (min, avg, max) = (47999.837, 48500.154, 48847.769), stdev = 340.112
[info]   CI (99.9%): [47190.502, 49809.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.533 ±(99.9%) 1153.683 MB/sec [Average]
[info]   (min, avg, max) = (1337.904, 1474.533, 2010.480), stdev = 299.608
[info]   CI (99.9%): [320.850, 2628.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   48778.655 ±(99.9%) 38626.486 B/op [Average]
[info]   (min, avg, max) = (43987.311, 48778.655, 66720.128), stdev = 10031.176
[info]   CI (99.9%): [10152.169, 87405.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.268), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 6.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25.069 ±(99.9%) 180.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.069, 108.079), stdev = 46.830
[info]   CI (99.9%): [≈ 0, 205.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23671.435 ops/s
[info] # Warmup Iteration   2: 73554.440 ops/s
[info] # Warmup Iteration   3: 75629.968 ops/s
[info] # Warmup Iteration   4: 76208.245 ops/s
[info] # Warmup Iteration   5: 75048.026 ops/s
[info] Iteration   1: 76924.949 ops/s
[info]                  ·gc.alloc.rate:                   1642.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              33608.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41147.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.426 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 76504.464 ops/s
[info]                  ·gc.alloc.rate:                   1631.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              33560.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27613.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 76213.568 ops/s
[info]                  ·gc.alloc.rate:                   1626.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              33576.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27688.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 76165.194 ops/s
[info]                  ·gc.alloc.rate:                   1636.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              33814.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41474.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 76568.808 ops/s
[info]                  ·gc.alloc.rate:                   1619.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              33282.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27495.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   76475.397 ±(99.9%) 1181.286 ops/s [Average]
[info]   (min, avg, max) = (76165.194, 76475.397, 76924.949), stdev = 306.776
[info]   CI (99.9%): [75294.110, 77656.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1631.189 ±(99.9%) 35.151 MB/sec [Average]
[info]   (min, avg, max) = (1619.212, 1631.189, 1642.762), stdev = 9.129
[info]   CI (99.9%): [1596.038, 1666.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33568.519 ±(99.9%) 730.715 B/op [Average]
[info]   (min, avg, max) = (33282.520, 33568.519, 33814.524), stdev = 189.764
[info]   CI (99.9%): [32837.804, 34299.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1607.875 ±(99.9%) 1411.021 MB/sec [Average]
[info]   (min, avg, max) = (1337.647, 1607.875, 2011.236), stdev = 366.438
[info]   CI (99.9%): [196.855, 3018.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   33083.746 ±(99.9%) 28923.837 B/op [Average]
[info]   (min, avg, max) = (27495.013, 33083.746, 41474.473), stdev = 7511.429
[info]   CI (99.9%): [4159.909, 62007.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 5.070 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.750, 3.062), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.435 ±(99.9%) 104.287 B/op [Average]
[info]   (min, avg, max) = (0.426, 15.435, 62.997), stdev = 27.083
[info]   CI (99.9%): [≈ 0, 119.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101828.128 ops/s
[info] # Warmup Iteration   2: 276201.032 ops/s
[info] # Warmup Iteration   3: 290639.511 ops/s
[info] # Warmup Iteration   4: 288762.833 ops/s
[info] # Warmup Iteration   5: 293765.215 ops/s
[info] Iteration   1: 295107.783 ops/s
[info]                  ·gc.alloc.rate:               583.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          3109.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3575.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 294225.374 ops/s
[info]                  ·gc.alloc.rate:      563.929 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 293205.576 ops/s
[info]                  ·gc.alloc.rate:               586.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          3145.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3598.900 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 301926.305 ops/s
[info]                  ·gc.alloc.rate:                   600.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              3128.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3496.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 302250.936 ops/s
[info]                  ·gc.alloc.rate:               598.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          3113.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3492.952 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   297343.195 ±(99.9%) 16886.796 ops/s [Average]
[info]   (min, avg, max) = (293205.576, 297343.195, 302250.936), stdev = 4385.447
[info]   CI (99.9%): [280456.399, 314229.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   586.304 ±(99.9%) 55.854 MB/sec [Average]
[info]   (min, avg, max) = (563.929, 586.304, 600.217), stdev = 14.505
[info]   CI (99.9%): [530.450, 642.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3102.770 ±(99.9%) 194.284 B/op [Average]
[info]   (min, avg, max) = (3016.001, 3102.770, 3145.145), stdev = 50.455
[info]   CI (99.9%): [2908.487, 3297.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.577 ±(99.9%) 1155.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.577, 670.881), stdev = 299.956
[info]   CI (99.9%): [≈ 0, 1691.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2832.876 ±(99.9%) 6100.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2832.876, 3598.900), stdev = 1584.322
[info]   CI (99.9%): [≈ 0, 8933.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.132), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182732.810 ops/s
[info] # Warmup Iteration   2: 351525.388 ops/s
[info] # Warmup Iteration   3: 364309.108 ops/s
[info] # Warmup Iteration   4: 362348.781 ops/s
[info] # Warmup Iteration   5: 363899.697 ops/s
[info] Iteration   1: 364150.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 363976.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 364206.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 364584.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 364512.509 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   364286.127 ±(99.9%) 983.528 ops/s [Average]
[info]   (min, avg, max) = (363976.119, 364286.127, 364584.443), stdev = 255.419
[info]   CI (99.9%): [363302.599, 365269.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25289.873 ops/s
[info] # Warmup Iteration   2: 62906.977 ops/s
[info] # Warmup Iteration   3: 64994.280 ops/s
[info] # Warmup Iteration   4: 66060.802 ops/s
[info] # Warmup Iteration   5: 66094.604 ops/s
[info] Iteration   1: 65930.386 ops/s
[info]                  ·gc.alloc.rate:               1506.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          35969.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32027.056 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 66009.180 ops/s
[info]                  ·gc.alloc.rate:                   1515.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              36135.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32004.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 66748.525 ops/s
[info]                  ·gc.alloc.rate:                   1545.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              36443.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31664.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 66603.690 ops/s
[info]                  ·gc.alloc.rate:                   1556.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              36777.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47445.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 66820.862 ops/s
[info]                  ·gc.alloc.rate:                   1534.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              36144.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31489.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   66422.529 ±(99.9%) 1623.246 ops/s [Average]
[info]   (min, avg, max) = (65930.386, 66422.529, 66820.862), stdev = 421.552
[info]   CI (99.9%): [64799.282, 68045.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1531.800 ±(99.9%) 79.310 MB/sec [Average]
[info]   (min, avg, max) = (1506.777, 1531.800, 1556.417), stdev = 20.597
[info]   CI (99.9%): [1452.490, 1611.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36294.258 ±(99.9%) 1231.152 B/op [Average]
[info]   (min, avg, max) = (35969.473, 36294.258, 36777.646), stdev = 319.726
[info]   CI (99.9%): [35063.106, 37525.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.336 ±(99.9%) 1148.482 MB/sec [Average]
[info]   (min, avg, max) = (1336.870, 1474.336, 2007.857), stdev = 298.257
[info]   CI (99.9%): [325.854, 2622.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34926.118 ±(99.9%) 26962.201 B/op [Average]
[info]   (min, avg, max) = (31489.758, 34926.118, 47445.026), stdev = 7001.998
[info]   CI (99.9%): [7963.916, 61888.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.831), stdev = 1.683
[info]   CI (99.9%): [≈ 0, 7.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.343 ±(99.9%) 152.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.343, 90.312), stdev = 39.687
[info]   CI (99.9%): [≈ 0, 172.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55312.132 ops/s
[info] # Warmup Iteration   2: 135721.992 ops/s
[info] # Warmup Iteration   3: 141736.561 ops/s
[info] # Warmup Iteration   4: 143282.625 ops/s
[info] # Warmup Iteration   5: 143849.798 ops/s
[info] Iteration   1: 141044.695 ops/s
[info]                  ·gc.alloc.rate:                   1843.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              20567.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22500.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 144252.760 ops/s
[info]                  ·gc.alloc.rate:                   1869.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              20400.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14652.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 141309.843 ops/s
[info]                  ·gc.alloc.rate:                   1871.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              20832.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22384.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 144356.140 ops/s
[info]                  ·gc.alloc.rate:                   1884.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              20541.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21897.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 144825.980 ops/s
[info]                  ·gc.alloc.rate:               1917.425 MB/sec
[info]                  ·gc.alloc.rate.norm:          20829.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21841.110 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   143157.883 ±(99.9%) 7020.944 ops/s [Average]
[info]   (min, avg, max) = (141044.695, 143157.883, 144825.980), stdev = 1823.317
[info]   CI (99.9%): [136136.939, 150178.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1877.182 ±(99.9%) 103.516 MB/sec [Average]
[info]   (min, avg, max) = (1843.537, 1877.182, 1917.425), stdev = 26.883
[info]   CI (99.9%): [1773.666, 1980.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20634.230 ±(99.9%) 733.179 B/op [Average]
[info]   (min, avg, max) = (20400.491, 20634.230, 20832.524), stdev = 190.404
[info]   CI (99.9%): [19901.050, 21367.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.839 ±(99.9%) 1151.462 MB/sec [Average]
[info]   (min, avg, max) = (1342.946, 1877.839, 2016.824), stdev = 299.031
[info]   CI (99.9%): [726.377, 3029.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20655.080 ±(99.9%) 12969.944 B/op [Average]
[info]   (min, avg, max) = (14652.184, 20655.080, 22500.387), stdev = 3368.253
[info]   CI (99.9%): [7685.136, 33625.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 4.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 2.811), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.326 ±(99.9%) 50.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.326, 31.359), stdev = 13.224
[info]   CI (99.9%): [≈ 0, 59.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.757 ops/s
[info] # Warmup Iteration   2: 804133.171 ops/s
[info] # Warmup Iteration   3: 815707.998 ops/s
[info] # Warmup Iteration   4: 855033.688 ops/s
[info] # Warmup Iteration   5: 853518.423 ops/s
[info] Iteration   1: 865138.515 ops/s
[info]                  ·gc.alloc.rate:      479.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 858783.716 ops/s
[info]                  ·gc.alloc.rate:               493.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          903.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1219.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 860077.600 ops/s
[info]                  ·gc.alloc.rate:                   493.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              902.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1217.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 860122.153 ops/s
[info]                  ·gc.alloc.rate:               490.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          898.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1218.347 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 863596.196 ops/s
[info]                  ·gc.alloc.rate:      478.475 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   861543.636 ±(99.9%) 10354.437 ops/s [Average]
[info]   (min, avg, max) = (858783.716, 861543.636, 865138.515), stdev = 2689.014
[info]   CI (99.9%): [851189.199, 871898.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   487.070 ±(99.9%) 28.807 MB/sec [Average]
[info]   (min, avg, max) = (478.475, 487.070, 493.372), stdev = 7.481
[info]   CI (99.9%): [458.263, 515.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   889.737 ±(99.9%) 62.877 B/op [Average]
[info]   (min, avg, max) = (872.000, 889.737, 903.688), stdev = 16.329
[info]   CI (99.9%): [826.861, 952.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.390 ±(99.9%) 1403.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.390, 665.828), stdev = 364.591
[info]   CI (99.9%): [≈ 0, 1803.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   731.148 ±(99.9%) 2570.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 731.148, 1219.609), stdev = 667.444
[info]   CI (99.9%): [≈ 0, 3301.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59391.788 ops/s
[info] # Warmup Iteration   2: 366079.252 ops/s
[info] # Warmup Iteration   3: 389378.027 ops/s
[info] # Warmup Iteration   4: 394669.550 ops/s
[info] # Warmup Iteration   5: 395727.752 ops/s
[info] Iteration   1: 394587.008 ops/s
[info]                  ·gc.alloc.rate:                   403.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              1610.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2040.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 395657.660 ops/s
[info]                  ·gc.alloc.rate:               404.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          1610.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2035.067 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 397003.978 ops/s
[info]                  ·gc.alloc.rate:      395.528 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 395882.541 ops/s
[info]                  ·gc.alloc.rate:                   408.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              1622.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2649.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 394679.719 ops/s
[info]                  ·gc.alloc.rate:               412.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          1644.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2657.639 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   395562.181 ±(99.9%) 3812.053 ops/s [Average]
[info]   (min, avg, max) = (394587.008, 395562.181, 397003.978), stdev = 989.978
[info]   CI (99.9%): [391750.128, 399374.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   405.026 ±(99.9%) 24.116 MB/sec [Average]
[info]   (min, avg, max) = (395.528, 405.026, 412.453), stdev = 6.263
[info]   CI (99.9%): [380.910, 429.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1611.373 ±(99.9%) 107.578 B/op [Average]
[info]   (min, avg, max) = (1568.001, 1611.373, 1644.735), stdev = 27.938
[info]   CI (99.9%): [1503.795, 1718.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.294 ±(99.9%) 1057.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.294, 666.614), stdev = 274.601
[info]   CI (99.9%): [≈ 0, 1528.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1876.587 ±(99.9%) 4209.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1876.587, 2657.639), stdev = 1093.298
[info]   CI (99.9%): [≈ 0, 6086.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645395.388 ops/s
[info] # Warmup Iteration   2: 1083572.478 ops/s
[info] # Warmup Iteration   3: 1144077.211 ops/s
[info] # Warmup Iteration   4: 1129934.565 ops/s
[info] # Warmup Iteration   5: 1119146.417 ops/s
[info] Iteration   1: 1128218.250 ops/s
[info]                  ·gc.alloc.rate:               401.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 713.699 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1127632.088 ops/s
[info]                  ·gc.alloc.rate:               412.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          575.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 936.312 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1134779.945 ops/s
[info]                  ·gc.alloc.rate:      392.236 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1130512.749 ops/s
[info]                  ·gc.alloc.rate:                   405.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     933.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1134250.064 ops/s
[info]                  ·gc.alloc.rate:      392.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1131078.619 ±(99.9%) 12791.207 ops/s [Average]
[info]   (min, avg, max) = (1127632.088, 1131078.619, 1134779.945), stdev = 3321.836
[info]   CI (99.9%): [1118287.412, 1143869.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   400.730 ±(99.9%) 33.847 MB/sec [Average]
[info]   (min, avg, max) = (392.027, 400.730, 412.407), stdev = 8.790
[info]   CI (99.9%): [366.883, 434.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   557.624 ±(99.9%) 52.641 B/op [Average]
[info]   (min, avg, max) = (544.000, 557.624, 575.520), stdev = 13.671
[info]   CI (99.9%): [504.983, 610.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.670 ±(99.9%) 1326.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.670, 670.946), stdev = 344.563
[info]   CI (99.9%): [≈ 0, 1697.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   516.778 ±(99.9%) 1849.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 516.778, 936.312), stdev = 480.333
[info]   CI (99.9%): [≈ 0, 2366.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 5.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.956), stdev = 1.322
[info]   CI (99.9%): [≈ 0, 5.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.823 ±(99.9%) 7.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.823, 4.115), stdev = 1.840
[info]   CI (99.9%): [≈ 0, 7.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11842.319 ops/s
[info] # Warmup Iteration   2: 69281.767 ops/s
[info] # Warmup Iteration   3: 80763.377 ops/s
[info] # Warmup Iteration   4: 80175.197 ops/s
[info] # Warmup Iteration   5: 80527.488 ops/s
[info] Iteration   1: 82503.315 ops/s
[info]                  ·gc.alloc.rate:               3318.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          63313.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3334.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63612.442 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 81848.177 ops/s
[info]                  ·gc.alloc.rate:                   3320.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              63850.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64271.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 82263.040 ops/s
[info]                  ·gc.alloc.rate:               3338.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          63857.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64189.037 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 82410.007 ops/s
[info]                  ·gc.alloc.rate:                   3316.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              63348.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51460.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 81799.193 ops/s
[info]                  ·gc.alloc.rate:               3321.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          63897.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65000.895 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   82164.746 ±(99.9%) 1245.207 ops/s [Average]
[info]   (min, avg, max) = (81799.193, 82164.746, 82503.315), stdev = 323.376
[info]   CI (99.9%): [80919.539, 83409.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3323.095 ±(99.9%) 33.149 MB/sec [Average]
[info]   (min, avg, max) = (3316.944, 3323.095, 3338.233), stdev = 8.609
[info]   CI (99.9%): [3289.946, 3356.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63653.382 ±(99.9%) 1136.311 B/op [Average]
[info]   (min, avg, max) = (63313.779, 63653.382, 63897.157), stdev = 295.096
[info]   CI (99.9%): [62517.071, 64789.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3221.048 ±(99.9%) 1135.305 MB/sec [Average]
[info]   (min, avg, max) = (2694.473, 3221.048, 3378.428), stdev = 294.835
[info]   CI (99.9%): [2085.743, 4356.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61706.695 ±(99.9%) 22138.344 B/op [Average]
[info]   (min, avg, max) = (51460.028, 61706.695, 65000.895), stdev = 5749.258
[info]   CI (99.9%): [39568.351, 83845.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.160 ±(99.9%) 0.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.400), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 1.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91469.592 ops/s
[info] # Warmup Iteration   2: 261695.788 ops/s
[info] # Warmup Iteration   3: 269580.432 ops/s
[info] # Warmup Iteration   4: 274628.673 ops/s
[info] # Warmup Iteration   5: 271852.007 ops/s
[info] Iteration   1: 265904.379 ops/s
[info]                  ·gc.alloc.rate:                   1618.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              9581.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11908.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 274777.792 ops/s
[info]                  ·gc.alloc.rate:                   1658.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              9501.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7688.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 275141.840 ops/s
[info]                  ·gc.alloc.rate:                   1672.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              9567.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11507.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 275643.707 ops/s
[info]                  ·gc.alloc.rate:               1677.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          9573.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7637.487 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 275643.009 ops/s
[info]                  ·gc.alloc.rate:               1690.922 MB/sec
[info]                  ·gc.alloc.rate.norm:          9653.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11458.423 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   273422.146 ±(99.9%) 16243.548 ops/s [Average]
[info]   (min, avg, max) = (265904.379, 273422.146, 275643.707), stdev = 4218.398
[info]   CI (99.9%): [257178.598, 289665.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1663.669 ±(99.9%) 106.107 MB/sec [Average]
[info]   (min, avg, max) = (1618.859, 1663.669, 1690.922), stdev = 27.556
[info]   CI (99.9%): [1557.561, 1769.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9575.319 ±(99.9%) 207.953 B/op [Average]
[info]   (min, avg, max) = (9501.052, 9575.319, 9653.082), stdev = 54.005
[info]   CI (99.9%): [9367.366, 9783.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.250 ±(99.9%) 1413.562 MB/sec [Average]
[info]   (min, avg, max) = (1337.952, 1742.250, 2011.973), stdev = 367.098
[info]   CI (99.9%): [328.688, 3155.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10039.997 ±(99.9%) 8382.895 B/op [Average]
[info]   (min, avg, max) = (7637.487, 10039.997, 11908.019), stdev = 2177.011
[info]   CI (99.9%): [1657.103, 18422.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 5.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.039), stdev = 1.312
[info]   CI (99.9%): [≈ 0, 5.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.222 ±(99.9%) 28.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.222, 17.409), stdev = 7.516
[info]   CI (99.9%): [≈ 0, 33.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.847 ops/s
[info] # Warmup Iteration   2: 1137915.681 ops/s
[info] # Warmup Iteration   3: 1211866.937 ops/s
[info] # Warmup Iteration   4: 1222943.164 ops/s
[info] # Warmup Iteration   5: 1244448.033 ops/s
[info] Iteration   1: 1233511.314 ops/s
[info]                  ·gc.alloc.rate:               432.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652.749 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1236057.495 ops/s
[info]                  ·gc.alloc.rate:               436.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 848.228 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1249726.204 ops/s
[info]                  ·gc.alloc.rate:      425.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1236006.618 ops/s
[info]                  ·gc.alloc.rate:                   434.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     848.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1220467.206 ops/s
[info]                  ·gc.alloc.rate:                   448.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              578.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     859.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1235153.767 ±(99.9%) 40030.621 ops/s [Average]
[info]   (min, avg, max) = (1220467.206, 1235153.767, 1249726.204), stdev = 10395.825
[info]   CI (99.9%): [1195123.147, 1275184.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   435.717 ±(99.9%) 32.145 MB/sec [Average]
[info]   (min, avg, max) = (425.633, 435.717, 448.605), stdev = 8.348
[info]   CI (99.9%): [403.572, 467.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   555.224 ±(99.9%) 58.506 B/op [Average]
[info]   (min, avg, max) = (536.000, 555.224, 578.439), stdev = 15.194
[info]   CI (99.9%): [496.718, 613.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   502.214 ±(99.9%) 1111.344 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.214, 666.894), stdev = 288.613
[info]   CI (99.9%): [≈ 0, 1613.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   641.820 ±(99.9%) 1421.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 641.820, 859.905), stdev = 369.059
[info]   CI (99.9%): [≈ 0, 2062.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547506.800 ops/s
[info] # Warmup Iteration   2: 1457455.701 ops/s
[info] # Warmup Iteration   3: 1501715.351 ops/s
[info] # Warmup Iteration   4: 1535171.184 ops/s
[info] # Warmup Iteration   5: 1571573.910 ops/s
[info] Iteration   1: 1540764.614 ops/s
[info]                  ·gc.alloc.rate:               926.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          946.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 682.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1554280.953 ops/s
[info]                  ·gc.alloc.rate:               952.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          964.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1354.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 1563829.395 ops/s
[info]                  ·gc.alloc.rate:               929.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 673.412 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1556275.277 ops/s
[info]                  ·gc.alloc.rate:                   925.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              935.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1539952.294 ops/s
[info]                  ·gc.alloc.rate:                   927.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              948.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1369.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1551020.507 ±(99.9%) 39924.299 ops/s [Average]
[info]   (min, avg, max) = (1539952.294, 1551020.507, 1563829.395), stdev = 10368.214
[info]   CI (99.9%): [1511096.208, 1590944.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   932.567 ±(99.9%) 44.351 MB/sec [Average]
[info]   (min, avg, max) = (925.520, 932.567, 952.963), stdev = 11.518
[info]   CI (99.9%): [888.217, 976.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   946.222 ±(99.9%) 45.518 B/op [Average]
[info]   (min, avg, max) = (935.899, 946.222, 964.760), stdev = 11.821
[info]   CI (99.9%): [900.704, 991.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.970 ±(99.9%) 1412.563 MB/sec [Average]
[info]   (min, avg, max) = (668.578, 936.970, 1339.734), stdev = 366.838
[info]   CI (99.9%): [≈ 0, 2349.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   951.377 ±(99.9%) 1442.922 B/op [Average]
[info]   (min, avg, max) = (673.412, 951.377, 1369.150), stdev = 374.722
[info]   CI (99.9%): [≈ 0, 2394.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.063), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1036265.344 ops/s
[info] # Warmup Iteration   2: 1873097.206 ops/s
[info] # Warmup Iteration   3: 1869467.324 ops/s
[info] # Warmup Iteration   4: 1892067.439 ops/s
[info] # Warmup Iteration   5: 1920109.549 ops/s
[info] Iteration   1: 1926162.075 ops/s
[info]                  ·gc.alloc.rate:               678.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 547.867 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1910320.893 ops/s
[info]                  ·gc.alloc.rate:               673.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 552.394 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1923851.992 ops/s
[info]                  ·gc.alloc.rate:               681.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1922162.688 ops/s
[info]                  ·gc.alloc.rate:               674.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1922726.689 ops/s
[info]                  ·gc.alloc.rate:                   672.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1921044.867 ±(99.9%) 23826.389 ops/s [Average]
[info]   (min, avg, max) = (1910320.893, 1921044.867, 1926162.075), stdev = 6187.638
[info]   CI (99.9%): [1897218.478, 1944871.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   676.226 ±(99.9%) 14.837 MB/sec [Average]
[info]   (min, avg, max) = (672.562, 676.226, 681.554), stdev = 3.853
[info]   CI (99.9%): [661.389, 691.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   554.003 ±(99.9%) 10.146 B/op [Average]
[info]   (min, avg, max) = (550.562, 554.003, 557.545), stdev = 2.635
[info]   CI (99.9%): [543.857, 564.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.036 ±(99.9%) 2.057 MB/sec [Average]
[info]   (min, avg, max) = (670.515, 671.036, 671.806), stdev = 0.534
[info]   CI (99.9%): [668.980, 673.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   549.755 ±(99.9%) 6.426 B/op [Average]
[info]   (min, avg, max) = (547.867, 549.755, 552.394), stdev = 1.669
[info]   CI (99.9%): [543.329, 556.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1306960.292 ops/s
[info] # Warmup Iteration   2: 1977223.654 ops/s
[info] # Warmup Iteration   3: 2059271.548 ops/s
[info] # Warmup Iteration   4: 2058876.118 ops/s
[info] # Warmup Iteration   5: 2057367.582 ops/s
[info] Iteration   1: 2057540.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2057662.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2057581.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2057494.430 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2057217.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2057499.322 ±(99.9%) 651.099 ops/s [Average]
[info]   (min, avg, max) = (2057217.716, 2057499.322, 2057662.462), stdev = 169.088
[info]   CI (99.9%): [2056848.223, 2058150.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9655.466 ops/s
[info] # Warmup Iteration   2: 38380.811 ops/s
[info] # Warmup Iteration   3: 42344.171 ops/s
[info] # Warmup Iteration   4: 43142.055 ops/s
[info] # Warmup Iteration   5: 42875.302 ops/s
[info] Iteration   1: 42657.002 ops/s
[info]                  ·gc.alloc.rate:                   2082.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              76834.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74299.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 43405.268 ops/s
[info]                  ·gc.alloc.rate:                   2145.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              77778.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72774.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 43507.846 ops/s
[info]                  ·gc.alloc.rate:               2123.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          76820.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72507.530 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 43483.908 ops/s
[info]                  ·gc.alloc.rate:               2149.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          77804.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72571.653 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 43432.747 ops/s
[info]                  ·gc.alloc.rate:               2147.750 MB/sec
[info]                  ·gc.alloc.rate.norm:          77794.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72777.547 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   43297.354 ±(99.9%) 1387.217 ops/s [Average]
[info]   (min, avg, max) = (42657.002, 43297.354, 43507.846), stdev = 360.256
[info]   CI (99.9%): [41910.138, 44684.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2129.892 ±(99.9%) 109.078 MB/sec [Average]
[info]   (min, avg, max) = (2082.865, 2129.892, 2149.681), stdev = 28.327
[info]   CI (99.9%): [2020.815, 2238.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   77406.408 ±(99.9%) 2034.496 B/op [Average]
[info]   (min, avg, max) = (76820.534, 77406.408, 77804.241), stdev = 528.352
[info]   CI (99.9%): [75371.912, 79440.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2008.081 ±(99.9%) 15.070 MB/sec [Average]
[info]   (min, avg, max) = (2004.322, 2008.081, 2014.137), stdev = 3.914
[info]   CI (99.9%): [1993.011, 2023.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72986.173 ±(99.9%) 2865.066 B/op [Average]
[info]   (min, avg, max) = (72507.530, 72986.173, 74299.633), stdev = 744.048
[info]   CI (99.9%): [70121.108, 75851.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.825 ±(99.9%) 6.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.825, 4.018), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   30.402 ±(99.9%) 253.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.402, 148.237), stdev = 65.892
[info]   CI (99.9%): [≈ 0, 284.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4352.356 ops/s
[info] # Warmup Iteration   2: 13975.447 ops/s
[info] # Warmup Iteration   3: 15429.002 ops/s
[info] # Warmup Iteration   4: 15147.284 ops/s
[info] # Warmup Iteration   5: 15152.053 ops/s
[info] Iteration   1: 15135.862 ops/s
[info]                  ·gc.alloc.rate:               1859.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          193306.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139773.193 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 15248.081 ops/s
[info]                  ·gc.alloc.rate:                   1887.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              194771.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207982.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 378.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 15154.036 ops/s
[info]                  ·gc.alloc.rate:                   1893.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              196597.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208718.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15500.876 ops/s
[info]                  ·gc.alloc.rate:                   1911.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              194144.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203912.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15528.911 ops/s
[info]                  ·gc.alloc.rate:                   1907.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              193348.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135772.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   15313.553 ±(99.9%) 727.495 ops/s [Average]
[info]   (min, avg, max) = (15135.862, 15313.553, 15528.911), stdev = 188.928
[info]   CI (99.9%): [14586.058, 16041.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1891.787 ±(99.9%) 80.541 MB/sec [Average]
[info]   (min, avg, max) = (1859.122, 1891.787, 1911.984), stdev = 20.916
[info]   CI (99.9%): [1811.246, 1972.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   194433.628 ±(99.9%) 5211.887 B/op [Average]
[info]   (min, avg, max) = (193306.396, 194433.628, 196597.446), stdev = 1353.510
[info]   CI (99.9%): [189221.742, 199645.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.387 ±(99.9%) 1411.239 MB/sec [Average]
[info]   (min, avg, max) = (1339.586, 1743.387, 2015.127), stdev = 366.494
[info]   CI (99.9%): [332.148, 3154.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   179231.966 ±(99.9%) 146006.223 B/op [Average]
[info]   (min, avg, max) = (135772.734, 179231.966, 208718.994), stdev = 37917.352
[info]   CI (99.9%): [33225.743, 325238.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.664), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77.330 ±(99.9%) 647.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.330, 378.150), stdev = 168.170
[info]   CI (99.9%): [≈ 0, 724.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28430.363 ops/s
[info] # Warmup Iteration   2: 88281.714 ops/s
[info] # Warmup Iteration   3: 94503.476 ops/s
[info] # Warmup Iteration   4: 97154.011 ops/s
[info] # Warmup Iteration   5: 97888.213 ops/s
[info] Iteration   1: 96659.525 ops/s
[info]                  ·gc.alloc.rate:               1300.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          21162.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21768.956 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 95938.365 ops/s
[info]                  ·gc.alloc.rate:                   1285.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              21083.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21943.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 98959.835 ops/s
[info]                  ·gc.alloc.rate:                   1323.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              21045.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21294.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 96209.009 ops/s
[info]                  ·gc.alloc.rate:                   1300.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              21272.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21914.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 99348.290 ops/s
[info]                  ·gc.alloc.rate:                   1338.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              21210.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21168.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97423.005 ±(99.9%) 6187.870 ops/s [Average]
[info]   (min, avg, max) = (95938.365, 97423.005, 99348.290), stdev = 1606.970
[info]   CI (99.9%): [91235.135, 103610.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1309.714 ±(99.9%) 81.714 MB/sec [Average]
[info]   (min, avg, max) = (1285.495, 1309.714, 1338.978), stdev = 21.221
[info]   CI (99.9%): [1228.001, 1391.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21154.846 ±(99.9%) 356.173 B/op [Average]
[info]   (min, avg, max) = (21045.048, 21154.846, 21272.692), stdev = 92.497
[info]   CI (99.9%): [20798.673, 21511.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.104 ±(99.9%) 5.115 MB/sec [Average]
[info]   (min, avg, max) = (1336.315, 1338.104, 1339.774), stdev = 1.328
[info]   CI (99.9%): [1332.989, 1343.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21617.927 ±(99.9%) 1393.119 B/op [Average]
[info]   (min, avg, max) = (21168.644, 21617.927, 21943.458), stdev = 361.789
[info]   CI (99.9%): [20224.808, 23011.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.018), stdev = 1.779
[info]   CI (99.9%): [≈ 0, 7.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.678 ±(99.9%) 112.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.678, 65.725), stdev = 29.099
[info]   CI (99.9%): [≈ 0, 125.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129365.440 ops/s
[info] # Warmup Iteration   2: 252714.402 ops/s
[info] # Warmup Iteration   3: 235012.083 ops/s
[info] # Warmup Iteration   4: 242383.108 ops/s
[info] # Warmup Iteration   5: 243140.444 ops/s
[info] Iteration   1: 243459.839 ops/s
[info]                  ·gc.alloc.rate:               838.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          5420.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8677.734 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 260772.069 ops/s
[info]                  ·gc.alloc.rate:                   874.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              5279.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4052.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 259437.658 ops/s
[info]                  ·gc.alloc.rate:                   861.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              5225.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4077.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 256370.951 ops/s
[info]                  ·gc.alloc.rate:               860.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          5283.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4126.336 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 260324.568 ops/s
[info]                  ·gc.alloc.rate:                   876.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              5296.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8130.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   256073.017 ±(99.9%) 27944.283 ops/s [Average]
[info]   (min, avg, max) = (243459.839, 256073.017, 260772.069), stdev = 7257.042
[info]   CI (99.9%): [228128.734, 284017.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   862.402 ±(99.9%) 57.527 MB/sec [Average]
[info]   (min, avg, max) = (838.944, 862.402, 876.004), stdev = 14.940
[info]   CI (99.9%): [804.875, 919.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5301.198 ±(99.9%) 277.917 B/op [Average]
[info]   (min, avg, max) = (5225.537, 5301.198, 5420.877), stdev = 72.174
[info]   CI (99.9%): [5023.281, 5579.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.756 ±(99.9%) 1417.250 MB/sec [Average]
[info]   (min, avg, max) = (671.486, 940.756, 1344.898), stdev = 368.055
[info]   CI (99.9%): [≈ 0, 2358.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5812.990 ±(99.9%) 9139.718 B/op [Average]
[info]   (min, avg, max) = (4052.716, 5812.990, 8677.734), stdev = 2373.556
[info]   CI (99.9%): [≈ 0, 14952.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.252), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2325.142 ops/s
[info] # Warmup Iteration   2: 11516.107 ops/s
[info] # Warmup Iteration   3: 13242.036 ops/s
[info] # Warmup Iteration   4: 13479.784 ops/s
[info] # Warmup Iteration   5: 13390.249 ops/s
[info] Iteration   1: 13430.815 ops/s
[info]                  ·gc.alloc.rate:                   2043.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              239406.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235566.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.830 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 13634.894 ops/s
[info]                  ·gc.alloc.rate:                   2058.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              237627.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231581.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13620.332 ops/s
[info]                  ·gc.alloc.rate:               2070.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          239158.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231297.870 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 13598.179 ops/s
[info]                  ·gc.alloc.rate:               2080.301 MB/sec
[info]                  ·gc.alloc.rate.norm:          240761.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231517.810 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 13679.259 ops/s
[info]                  ·gc.alloc.rate:                   2093.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              240780.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230568.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.790 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   13592.696 ±(99.9%) 366.687 ops/s [Average]
[info]   (min, avg, max) = (13430.815, 13592.696, 13679.259), stdev = 95.228
[info]   CI (99.9%): [13226.008, 13959.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2069.069 ±(99.9%) 74.650 MB/sec [Average]
[info]   (min, avg, max) = (2043.008, 2069.069, 2093.339), stdev = 19.386
[info]   CI (99.9%): [1994.419, 2143.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   239546.974 ±(99.9%) 5038.888 B/op [Average]
[info]   (min, avg, max) = (237627.779, 239546.974, 240780.663), stdev = 1308.583
[info]   CI (99.9%): [234508.086, 244585.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.702 ±(99.9%) 14.764 MB/sec [Average]
[info]   (min, avg, max) = (2000.435, 2004.702, 2010.240), stdev = 3.834
[info]   CI (99.9%): [1989.938, 2019.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   232106.540 ±(99.9%) 7607.667 B/op [Average]
[info]   (min, avg, max) = (230568.696, 232106.540, 235566.649), stdev = 1975.687
[info]   CI (99.9%): [224498.874, 239714.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.899 ±(99.9%) 5.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.899, 3.310), stdev = 1.434
[info]   CI (99.9%): [≈ 0, 6.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   104.954 ±(99.9%) 646.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.954, 387.830), stdev = 167.945
[info]   CI (99.9%): [≈ 0, 751.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:54:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8310.791 ops/s
[info] # Warmup Iteration   2: 30339.104 ops/s
[info] # Warmup Iteration   3: 32323.891 ops/s
[info] # Warmup Iteration   4: 31632.283 ops/s
[info] # Warmup Iteration   5: 32779.038 ops/s
[info] Iteration   1: 33273.506 ops/s
[info]                  ·gc.alloc.rate:                   2770.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              131053.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126723.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33362.647 ops/s
[info]                  ·gc.alloc.rate:                   2777.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              131005.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126350.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.820 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33218.953 ops/s
[info]                  ·gc.alloc.rate:               2780.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          131663.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127126.900 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 33424.521 ops/s
[info]                  ·gc.alloc.rate:               2809.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          132296.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126657.191 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 32168.366 ops/s
[info]                  ·gc.alloc.rate:                   2722.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              133181.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131976.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   33089.599 ±(99.9%) 2006.360 ops/s [Average]
[info]   (min, avg, max) = (32168.366, 33089.599, 33424.521), stdev = 521.045
[info]   CI (99.9%): [31083.239, 35095.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2772.027 ±(99.9%) 121.595 MB/sec [Average]
[info]   (min, avg, max) = (2722.313, 2772.027, 2809.744), stdev = 31.578
[info]   CI (99.9%): [2650.431, 2893.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   131840.348 ±(99.9%) 3525.911 B/op [Average]
[info]   (min, avg, max) = (131005.975, 131840.348, 133181.799), stdev = 915.668
[info]   CI (99.9%): [128314.437, 135366.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2685.940 ±(99.9%) 30.884 MB/sec [Average]
[info]   (min, avg, max) = (2678.518, 2685.940, 2697.674), stdev = 8.020
[info]   CI (99.9%): [2655.056, 2716.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127767.032 ±(99.9%) 9123.301 B/op [Average]
[info]   (min, avg, max) = (126350.737, 127767.032, 131976.394), stdev = 2369.292
[info]   CI (99.9%): [118643.731, 136890.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.208), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.568 ±(99.9%) 15.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.568, 9.820), stdev = 4.140
[info]   CI (99.9%): [≈ 0, 18.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27626.838 ops/s
[info] # Warmup Iteration   2: 103724.209 ops/s
[info] # Warmup Iteration   3: 104890.232 ops/s
[info] # Warmup Iteration   4: 104745.112 ops/s
[info] # Warmup Iteration   5: 106463.905 ops/s
[info] Iteration   1: 105677.781 ops/s
[info]                  ·gc.alloc.rate:                   1491.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              22215.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29871.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 105429.150 ops/s
[info]                  ·gc.alloc.rate:                   1495.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              22325.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19988.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 106435.538 ops/s
[info]                  ·gc.alloc.rate:                   1511.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              22349.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19808.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 106428.270 ops/s
[info]                  ·gc.alloc.rate:                   1510.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              22330.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19760.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 106663.035 ops/s
[info]                  ·gc.alloc.rate:               1514.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          22344.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19697.105 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   106126.755 ±(99.9%) 2075.498 ops/s [Average]
[info]   (min, avg, max) = (105429.150, 106126.755, 106663.035), stdev = 539.000
[info]   CI (99.9%): [104051.257, 108202.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1504.695 ±(99.9%) 39.786 MB/sec [Average]
[info]   (min, avg, max) = (1491.662, 1504.695, 1514.296), stdev = 10.332
[info]   CI (99.9%): [1464.909, 1544.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22312.987 ±(99.9%) 213.010 B/op [Average]
[info]   (min, avg, max) = (22215.620, 22312.987, 22349.457), stdev = 55.318
[info]   CI (99.9%): [22099.977, 22525.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.195 ±(99.9%) 1150.612 MB/sec [Average]
[info]   (min, avg, max) = (1334.896, 1471.195, 2005.710), stdev = 298.810
[info]   CI (99.9%): [320.583, 2621.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21825.396 ±(99.9%) 17324.754 B/op [Average]
[info]   (min, avg, max) = (19697.105, 21825.396, 29871.445), stdev = 4499.184
[info]   CI (99.9%): [4500.642, 39150.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 6.491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.790), stdev = 1.686
[info]   CI (99.9%): [≈ 0, 7.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.452 ±(99.9%) 95.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.452, 56.024), stdev = 24.917
[info]   CI (99.9%): [≈ 0, 107.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 3.114
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107946.693 ops/s
[info] # Warmup Iteration   2: 172181.384 ops/s
[info] # Warmup Iteration   3: 179350.194 ops/s
[info] # Warmup Iteration   4: 179145.564 ops/s
[info] # Warmup Iteration   5: 179170.868 ops/s
[info] Iteration   1: 179210.425 ops/s
[info]                  ·gc.alloc.rate:               587.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          5162.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5888.214 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 176842.751 ops/s
[info]                  ·gc.alloc.rate:               586.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          5214.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5967.115 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 178805.933 ops/s
[info]                  ·gc.alloc.rate:                   591.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              5202.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5907.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 179336.282 ops/s
[info]                  ·gc.alloc.rate:      571.591 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 179243.384 ops/s
[info]                  ·gc.alloc.rate:               590.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          5188.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5892.815 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   178687.755 ±(99.9%) 4047.987 ops/s [Average]
[info]   (min, avg, max) = (176842.751, 178687.755, 179336.282), stdev = 1051.249
[info]   CI (99.9%): [174639.768, 182735.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.506 ±(99.9%) 31.021 MB/sec [Average]
[info]   (min, avg, max) = (571.591, 585.506, 591.094), stdev = 8.056
[info]   CI (99.9%): [554.485, 616.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5156.827 ±(99.9%) 312.091 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5156.827, 5214.178), stdev = 81.049
[info]   CI (99.9%): [4844.736, 5468.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.691 ±(99.9%) 1155.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.691, 671.156), stdev = 300.020
[info]   CI (99.9%): [≈ 0, 1691.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4731.118 ±(99.9%) 10184.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4731.118, 5967.115), stdev = 2644.963
[info]   CI (99.9%): [≈ 0, 14915.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116497.372 ops/s
[info] # Warmup Iteration   2: 192929.477 ops/s
[info] # Warmup Iteration   3: 194522.119 ops/s
[info] # Warmup Iteration   4: 194416.232 ops/s
[info] # Warmup Iteration   5: 194484.539 ops/s
[info] Iteration   1: 194559.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 194462.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 194546.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 194538.768 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 194513.005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   194523.941 ±(99.9%) 148.062 ops/s [Average]
[info]   (min, avg, max) = (194462.185, 194523.941, 194559.458), stdev = 38.451
[info]   CI (99.9%): [194375.878, 194672.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14207.868 ops/s
[info] # Warmup Iteration   2: 45000.252 ops/s
[info] # Warmup Iteration   3: 48771.291 ops/s
[info] # Warmup Iteration   4: 49246.779 ops/s
[info] # Warmup Iteration   5: 49621.107 ops/s
[info] Iteration   1: 49703.920 ops/s
[info]                  ·gc.alloc.rate:                   3516.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              111344.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105918.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.659 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 49611.038 ops/s
[info]                  ·gc.alloc.rate:                   3513.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              111453.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106436.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 49855.092 ops/s
[info]                  ·gc.alloc.rate:               3531.936 MB/sec
[info]                  ·gc.alloc.rate.norm:          111492.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106329.728 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 49519.451 ops/s
[info]                  ·gc.alloc.rate:               3508.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          111500.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107376.892 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 49377.128 ops/s
[info]                  ·gc.alloc.rate:               3499.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          111543.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3387.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107966.002 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   49613.326 ±(99.9%) 697.556 ops/s [Average]
[info]   (min, avg, max) = (49377.128, 49613.326, 49855.092), stdev = 181.153
[info]   CI (99.9%): [48915.770, 50310.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3513.913 ±(99.9%) 45.850 MB/sec [Average]
[info]   (min, avg, max) = (3499.602, 3513.913, 3531.936), stdev = 11.907
[info]   CI (99.9%): [3468.063, 3559.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111466.995 ±(99.9%) 290.287 B/op [Average]
[info]   (min, avg, max) = (111344.637, 111466.995, 111543.255), stdev = 75.387
[info]   CI (99.9%): [111176.709, 111757.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3366.899 ±(99.9%) 66.012 MB/sec [Average]
[info]   (min, avg, max) = (3345.057, 3366.899, 3387.368), stdev = 17.143
[info]   CI (99.9%): [3300.888, 3432.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106805.487 ±(99.9%) 3234.655 B/op [Average]
[info]   (min, avg, max) = (105918.579, 106805.487, 107966.002), stdev = 840.030
[info]   CI (99.9%): [103570.832, 110040.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.264 ±(99.9%) 1.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.264, 0.660), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2554.023 ops/s
[info] # Warmup Iteration   2: 23335.733 ops/s
[info] # Warmup Iteration   3: 25893.636 ops/s
[info] # Warmup Iteration   4: 25767.120 ops/s
[info] # Warmup Iteration   5: 25542.611 ops/s
[info] Iteration   1: 25229.275 ops/s
[info]                  ·gc.alloc.rate:               1379.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          86060.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83315.958 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 25878.028 ops/s
[info]                  ·gc.alloc.rate:                   1386.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              84295.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81230.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25937.560 ops/s
[info]                  ·gc.alloc.rate:               1383.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          83944.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81126.095 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 26512.090 ops/s
[info]                  ·gc.alloc.rate:               1437.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          85356.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79465.737 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 25932.793 ops/s
[info]                  ·gc.alloc.rate:               1394.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          84646.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81340.745 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   25897.949 ±(99.9%) 1751.381 ops/s [Average]
[info]   (min, avg, max) = (25229.275, 25897.949, 26512.090), stdev = 454.828
[info]   CI (99.9%): [24146.568, 27649.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1396.336 ±(99.9%) 91.903 MB/sec [Average]
[info]   (min, avg, max) = (1379.546, 1396.336, 1437.870), stdev = 23.867
[info]   CI (99.9%): [1304.433, 1488.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84860.814 ±(99.9%) 3272.168 B/op [Average]
[info]   (min, avg, max) = (83944.746, 84860.814, 86060.288), stdev = 849.772
[info]   CI (99.9%): [81588.645, 88132.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.424 ±(99.9%) 7.684 MB/sec [Average]
[info]   (min, avg, max) = (1335.554, 1337.424, 1340.176), stdev = 1.996
[info]   CI (99.9%): [1329.740, 1345.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81295.707 ±(99.9%) 5260.506 B/op [Average]
[info]   (min, avg, max) = (79465.737, 81295.707, 83315.958), stdev = 1366.137
[info]   CI (99.9%): [76035.201, 86556.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.506 ±(99.9%) 4.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.532), stdev = 1.132
[info]   CI (99.9%): [≈ 0, 4.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6110.795 ops/s
[info] # Warmup Iteration   2: 25361.327 ops/s
[info] # Warmup Iteration   3: 27326.272 ops/s
[info] # Warmup Iteration   4: 27092.055 ops/s
[info] # Warmup Iteration   5: 27176.620 ops/s
[info] Iteration   1: 27569.326 ops/s
[info]                  ·gc.alloc.rate:                   1193.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              68120.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76321.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 27580.441 ops/s
[info]                  ·gc.alloc.rate:               1184.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          67585.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76367.199 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 27582.310 ops/s
[info]                  ·gc.alloc.rate:                   1179.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              67311.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76418.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 27660.541 ops/s
[info]                  ·gc.alloc.rate:               1180.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          67172.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38111.085 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27627.790 ops/s
[info]                  ·gc.alloc.rate:                   1180.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              67231.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76351.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   27604.082 ±(99.9%) 149.017 ops/s [Average]
[info]   (min, avg, max) = (27569.326, 27604.082, 27660.541), stdev = 38.699
[info]   CI (99.9%): [27455.064, 27753.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1183.729 ±(99.9%) 22.956 MB/sec [Average]
[info]   (min, avg, max) = (1179.609, 1183.729, 1193.839), stdev = 5.962
[info]   CI (99.9%): [1160.774, 1206.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67484.331 ±(99.9%) 1499.095 B/op [Average]
[info]   (min, avg, max) = (67172.153, 67484.331, 68120.554), stdev = 389.310
[info]   CI (99.9%): [65985.236, 68983.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.040 ±(99.9%) 1152.132 MB/sec [Average]
[info]   (min, avg, max) = (669.809, 1205.040, 1340.287), stdev = 299.205
[info]   CI (99.9%): [52.908, 2357.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68713.943 ±(99.9%) 65875.100 B/op [Average]
[info]   (min, avg, max) = (38111.085, 68713.943, 76418.677), stdev = 17107.554
[info]   CI (99.9%): [2838.844, 134589.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.163), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 7.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48.148 ±(99.9%) 406.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.148, 237.174), stdev = 105.674
[info]   CI (99.9%): [≈ 0, 455.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327236.250 ops/s
[info] # Warmup Iteration   2: 639163.345 ops/s
[info] # Warmup Iteration   3: 650893.822 ops/s
[info] # Warmup Iteration   4: 660478.336 ops/s
[info] # Warmup Iteration   5: 655860.392 ops/s
[info] Iteration   1: 657211.404 ops/s
[info]                  ·gc.alloc.rate:                   1750.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              4192.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3224.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 660589.639 ops/s
[info]                  ·gc.alloc.rate:                   1785.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              4252.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4810.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.489 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 661234.903 ops/s
[info]                  ·gc.alloc.rate:               1774.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          4222.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3198.212 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 658772.744 ops/s
[info]                  ·gc.alloc.rate:               1766.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          4220.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4809.573 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 664284.007 ops/s
[info]                  ·gc.alloc.rate:               1782.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          4222.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3180.167 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   660418.539 ±(99.9%) 10302.168 ops/s [Average]
[info]   (min, avg, max) = (657211.404, 660418.539, 664284.007), stdev = 2675.440
[info]   CI (99.9%): [650116.371, 670720.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1771.834 ±(99.9%) 53.315 MB/sec [Average]
[info]   (min, avg, max) = (1750.635, 1771.834, 1785.042), stdev = 13.846
[info]   CI (99.9%): [1718.519, 1825.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4222.213 ±(99.9%) 82.278 B/op [Average]
[info]   (min, avg, max) = (4192.466, 4222.213, 4252.836), stdev = 21.367
[info]   CI (99.9%): [4139.935, 4304.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.980 ±(99.9%) 1417.289 MB/sec [Average]
[info]   (min, avg, max) = (1342.225, 1612.980, 2019.091), stdev = 368.066
[info]   CI (99.9%): [195.691, 3030.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3844.487 ±(99.9%) 3394.495 B/op [Average]
[info]   (min, avg, max) = (3180.167, 3844.487, 4810.455), stdev = 881.540
[info]   CI (99.9%): [449.992, 7238.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.143), stdev = 1.403
[info]   CI (99.9%): [≈ 0, 6.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.508 ±(99.9%) 12.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.508, 7.489), stdev = 3.344
[info]   CI (99.9%): [≈ 0, 14.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1310.268 ops/s
[info] # Warmup Iteration   2: 17905.543 ops/s
[info] # Warmup Iteration   3: 23604.366 ops/s
[info] # Warmup Iteration   4: 23429.793 ops/s
[info] # Warmup Iteration   5: 23413.524 ops/s
[info] Iteration   1: 23085.329 ops/s
[info]                  ·gc.alloc.rate:                   1709.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              116558.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136169.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 23577.785 ops/s
[info]                  ·gc.alloc.rate:                   1733.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              115626.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89152.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23553.863 ops/s
[info]                  ·gc.alloc.rate:                   1748.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              116800.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134176.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23604.421 ops/s
[info]                  ·gc.alloc.rate:                   1738.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              115938.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134242.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23600.375 ops/s
[info]                  ·gc.alloc.rate:               1726.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          115126.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89691.363 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   23484.355 ±(99.9%) 862.447 ops/s [Average]
[info]   (min, avg, max) = (23085.329, 23484.355, 23604.421), stdev = 223.975
[info]   CI (99.9%): [22621.907, 24346.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1731.307 ±(99.9%) 56.160 MB/sec [Average]
[info]   (min, avg, max) = (1709.705, 1731.307, 1748.635), stdev = 14.584
[info]   CI (99.9%): [1675.148, 1787.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   116010.174 ±(99.9%) 2625.565 B/op [Average]
[info]   (min, avg, max) = (115126.499, 116010.174, 116800.988), stdev = 681.851
[info]   CI (99.9%): [113384.609, 118635.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1740.128 ±(99.9%) 1404.676 MB/sec [Average]
[info]   (min, avg, max) = (1336.223, 1740.128, 2013.342), stdev = 364.790
[info]   CI (99.9%): [335.452, 3144.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   116686.423 ±(99.9%) 95890.858 B/op [Average]
[info]   (min, avg, max) = (89152.527, 116686.423, 136169.560), stdev = 24902.551
[info]   CI (99.9%): [20795.565, 212577.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.458), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.237 ±(99.9%) 50.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.237, 30.601), stdev = 13.098
[info]   CI (99.9%): [≈ 0, 57.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 5.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25544.196 ops/s
[info] # Warmup Iteration   2: 66162.443 ops/s
[info] # Warmup Iteration   3: 72217.214 ops/s
[info] # Warmup Iteration   4: 73349.487 ops/s
[info] # Warmup Iteration   5: 74240.925 ops/s
[info] Iteration   1: 74061.989 ops/s
[info]                  ·gc.alloc.rate:                   1971.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              41887.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42791.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 73670.721 ops/s
[info]                  ·gc.alloc.rate:                   1946.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              41582.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42978.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73244.815 ops/s
[info]                  ·gc.alloc.rate:               1950.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          41916.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43112.164 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 71907.151 ops/s
[info]                  ·gc.alloc.rate:                   1902.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              41643.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29284.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73589.839 ops/s
[info]                  ·gc.alloc.rate:               1971.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          42166.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42961.114 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   73294.903 ±(99.9%) 3189.888 ops/s [Average]
[info]   (min, avg, max) = (71907.151, 73294.903, 74061.989), stdev = 828.404
[info]   CI (99.9%): [70105.015, 76484.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1948.543 ±(99.9%) 108.234 MB/sec [Average]
[info]   (min, avg, max) = (1902.646, 1948.543, 1971.654), stdev = 28.108
[info]   CI (99.9%): [1840.309, 2056.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41839.472 ±(99.9%) 903.077 B/op [Average]
[info]   (min, avg, max) = (41582.259, 41839.472, 42166.904), stdev = 234.526
[info]   CI (99.9%): [40936.395, 42742.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1875.738 ±(99.9%) 1157.617 MB/sec [Average]
[info]   (min, avg, max) = (1337.979, 1875.738, 2013.639), stdev = 300.629
[info]   CI (99.9%): [718.122, 3033.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40225.533 ±(99.9%) 23555.145 B/op [Average]
[info]   (min, avg, max) = (29284.660, 40225.533, 43112.164), stdev = 6117.196
[info]   CI (99.9%): [16670.388, 63780.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.747 ±(99.9%) 4.866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.747, 2.925), stdev = 1.264
[info]   CI (99.9%): [≈ 0, 5.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.901 ±(99.9%) 103.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.901, 62.150), stdev = 26.853
[info]   CI (99.9%): [≈ 0, 119.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57683.038 ops/s
[info] # Warmup Iteration   2: 174534.091 ops/s
[info] # Warmup Iteration   3: 181198.899 ops/s
[info] # Warmup Iteration   4: 181702.178 ops/s
[info] # Warmup Iteration   5: 173816.349 ops/s
[info] Iteration   1: 177195.070 ops/s
[info]                  ·gc.alloc.rate:                   1985.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              17631.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17863.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 178523.687 ops/s
[info]                  ·gc.alloc.rate:                   1972.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              17393.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11792.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 177753.528 ops/s
[info]                  ·gc.alloc.rate:               1990.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          17622.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17748.381 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 179525.804 ops/s
[info]                  ·gc.alloc.rate:                   2024.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              17746.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17578.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 178495.288 ops/s
[info]                  ·gc.alloc.rate:               2013.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          17753.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17708.960 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   178298.676 ±(99.9%) 3395.485 ops/s [Average]
[info]   (min, avg, max) = (177195.070, 178298.676, 179525.804), stdev = 881.797
[info]   CI (99.9%): [174903.191, 181694.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1997.276 ±(99.9%) 81.152 MB/sec [Average]
[info]   (min, avg, max) = (1972.968, 1997.276, 2024.335), stdev = 21.075
[info]   CI (99.9%): [1916.125, 2078.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17629.412 ±(99.9%) 560.587 B/op [Average]
[info]   (min, avg, max) = (17393.506, 17629.412, 17753.176), stdev = 145.583
[info]   CI (99.9%): [17068.825, 18189.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.452 ±(99.9%) 1153.312 MB/sec [Average]
[info]   (min, avg, max) = (1337.692, 1873.452, 2011.373), stdev = 299.511
[info]   CI (99.9%): [720.140, 3026.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16538.423 ±(99.9%) 10222.466 B/op [Average]
[info]   (min, avg, max) = (11792.971, 16538.423, 17863.436), stdev = 2654.742
[info]   CI (99.9%): [6315.958, 26760.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.436 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.748), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.730 ±(99.9%) 57.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.730, 33.283), stdev = 14.844
[info]   CI (99.9%): [≈ 0, 63.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 827853.304 ops/s
[info] # Warmup Iteration   2: 1439682.656 ops/s
[info] # Warmup Iteration   3: 1498086.410 ops/s
[info] # Warmup Iteration   4: 1461647.803 ops/s
[info] # Warmup Iteration   5: 1536369.560 ops/s
[info] Iteration   1: 1521031.254 ops/s
[info]                  ·gc.alloc.rate:                   1292.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              1337.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1390.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1514866.846 ops/s
[info]                  ·gc.alloc.rate:                   1296.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1347.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1396.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1517218.849 ops/s
[info]                  ·gc.alloc.rate:                   1284.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              1332.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1395.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1517392.393 ops/s
[info]                  ·gc.alloc.rate:                   1297.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1346.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1395.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1520797.223 ops/s
[info]                  ·gc.alloc.rate:               1300.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          1346.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1389.804 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1518261.313 ±(99.9%) 10090.519 ops/s [Average]
[info]   (min, avg, max) = (1514866.846, 1518261.313, 1521031.254), stdev = 2620.476
[info]   CI (99.9%): [1508170.794, 1528351.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1294.507 ±(99.9%) 24.160 MB/sec [Average]
[info]   (min, avg, max) = (1284.570, 1294.507, 1300.710), stdev = 6.274
[info]   CI (99.9%): [1270.347, 1318.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1341.860 ±(99.9%) 25.184 B/op [Average]
[info]   (min, avg, max) = (1332.462, 1341.860, 1347.199), stdev = 6.540
[info]   CI (99.9%): [1316.675, 1367.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.440 ±(99.9%) 4.785 MB/sec [Average]
[info]   (min, avg, max) = (1342.945, 1344.440, 1345.755), stdev = 1.243
[info]   CI (99.9%): [1339.655, 1349.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1393.622 ±(99.9%) 12.711 B/op [Average]
[info]   (min, avg, max) = (1389.804, 1393.622, 1396.590), stdev = 3.301
[info]   CI (99.9%): [1380.911, 1406.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.620 ±(99.9%) 5.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 3.040), stdev = 1.352
[info]   CI (99.9%): [≈ 0, 5.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.643 ±(99.9%) 5.401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.643, 3.152), stdev = 1.403
[info]   CI (99.9%): [≈ 0, 6.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 731959.581 ops/s
[info] # Warmup Iteration   2: 1714581.590 ops/s
[info] # Warmup Iteration   3: 1746428.094 ops/s
[info] # Warmup Iteration   4: 1769307.721 ops/s
[info] # Warmup Iteration   5: 1770096.816 ops/s
[info] Iteration   1: 1770622.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1770825.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1770110.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1770167.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1769447.825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1770234.637 ±(99.9%) 2054.112 ops/s [Average]
[info]   (min, avg, max) = (1769447.825, 1770234.637, 1770825.003), stdev = 533.446
[info]   CI (99.9%): [1768180.525, 1772288.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35799.957 ops/s
[info] # Warmup Iteration   2: 146525.355 ops/s
[info] # Warmup Iteration   3: 144539.103 ops/s
[info] # Warmup Iteration   4: 154213.744 ops/s
[info] # Warmup Iteration   5: 154105.409 ops/s
[info] Iteration   1: 153967.077 ops/s
[info]                  ·gc.alloc.rate:                   1988.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              20325.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20527.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.175 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 154626.142 ops/s
[info]                  ·gc.alloc.rate:                   1995.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              20312.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20419.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 153285.103 ops/s
[info]                  ·gc.alloc.rate:                   1992.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              20459.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20560.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 153294.829 ops/s
[info]                  ·gc.alloc.rate:               2004.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          20580.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20559.241 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 151048.444 ops/s
[info]                  ·gc.alloc.rate:               1978.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          20609.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20902.666 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   153244.319 ±(99.9%) 5186.910 ops/s [Average]
[info]   (min, avg, max) = (151048.444, 153244.319, 154626.142), stdev = 1347.024
[info]   CI (99.9%): [148057.409, 158431.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1991.819 ±(99.9%) 37.399 MB/sec [Average]
[info]   (min, avg, max) = (1978.014, 1991.819, 2004.416), stdev = 9.713
[info]   CI (99.9%): [1954.419, 2029.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20457.515 ±(99.9%) 533.113 B/op [Average]
[info]   (min, avg, max) = (20312.666, 20457.515, 20609.565), stdev = 138.448
[info]   CI (99.9%): [19924.402, 20990.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2005.044 ±(99.9%) 9.703 MB/sec [Average]
[info]   (min, avg, max) = (2002.363, 2005.044, 2008.057), stdev = 2.520
[info]   CI (99.9%): [1995.340, 2014.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20593.789 ±(99.9%) 701.048 B/op [Average]
[info]   (min, avg, max) = (20419.320, 20593.789, 20902.666), stdev = 182.060
[info]   CI (99.9%): [19892.740, 21294.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 5.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.539), stdev = 1.526
[info]   CI (99.9%): [≈ 0, 6.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.425 ±(99.9%) 60.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.425, 36.175), stdev = 15.595
[info]   CI (99.9%): [≈ 0, 68.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8222.840 ops/s
[info] # Warmup Iteration   2: 36308.925 ops/s
[info] # Warmup Iteration   3: 40974.610 ops/s
[info] # Warmup Iteration   4: 41850.495 ops/s
[info] # Warmup Iteration   5: 42245.172 ops/s
[info] Iteration   1: 42119.524 ops/s
[info]                  ·gc.alloc.rate:                   1556.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              58164.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75022.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 42217.629 ops/s
[info]                  ·gc.alloc.rate:                   1565.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              58353.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49940.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 43419.186 ops/s
[info]                  ·gc.alloc.rate:                   1582.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              57353.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48581.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.420 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 42459.977 ops/s
[info]                  ·gc.alloc.rate:                   1587.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              58843.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74272.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 42588.518 ops/s
[info]                  ·gc.alloc.rate:                   1565.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              57837.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49306.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   42560.967 ±(99.9%) 1982.475 ops/s [Average]
[info]   (min, avg, max) = (42119.524, 42560.967, 43419.186), stdev = 514.842
[info]   CI (99.9%): [40578.492, 44543.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1571.449 ±(99.9%) 49.881 MB/sec [Average]
[info]   (min, avg, max) = (1556.570, 1571.449, 1587.533), stdev = 12.954
[info]   CI (99.9%): [1521.567, 1621.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58110.261 ±(99.9%) 2149.764 B/op [Average]
[info]   (min, avg, max) = (57353.409, 58110.261, 58843.418), stdev = 558.287
[info]   CI (99.9%): [55960.497, 60260.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1605.213 ±(99.9%) 1408.013 MB/sec [Average]
[info]   (min, avg, max) = (1334.300, 1605.213, 2007.731), stdev = 365.657
[info]   CI (99.9%): [197.200, 3013.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   59424.561 ±(99.9%) 53552.423 B/op [Average]
[info]   (min, avg, max) = (48581.180, 59424.561, 75022.743), stdev = 13907.394
[info]   CI (99.9%): [5872.138, 112976.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 7.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.874, 4.205), stdev = 1.862
[info]   CI (99.9%): [≈ 0, 8.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.723 ±(99.9%) 259.827 B/op [Average]
[info]   (min, avg, max) = (0.769, 31.723, 152.420), stdev = 67.476
[info]   CI (99.9%): [≈ 0, 291.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400059.143 ops/s
[info] # Warmup Iteration   2: 759488.696 ops/s
[info] # Warmup Iteration   3: 797587.173 ops/s
[info] # Warmup Iteration   4: 801919.351 ops/s
[info] # Warmup Iteration   5: 799486.030 ops/s
[info] Iteration   1: 797749.625 ops/s
[info]                  ·gc.alloc.rate:                   1599.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              3155.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3980.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 767811.734 ops/s
[info]                  ·gc.alloc.rate:                   1539.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              3153.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2759.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 788735.540 ops/s
[info]                  ·gc.alloc.rate:                   1577.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              3146.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2685.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 793476.551 ops/s
[info]                  ·gc.alloc.rate:                   1631.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              3236.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3996.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 811235.863 ops/s
[info]                  ·gc.alloc.rate:               1620.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          3143.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2605.338 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   791801.863 ±(99.9%) 60908.054 ops/s [Average]
[info]   (min, avg, max) = (767811.734, 791801.863, 811235.863), stdev = 15817.628
[info]   CI (99.9%): [730893.809, 852709.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1593.600 ±(99.9%) 142.233 MB/sec [Average]
[info]   (min, avg, max) = (1539.150, 1593.600, 1631.719), stdev = 36.937
[info]   CI (99.9%): [1451.367, 1735.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3167.122 ±(99.9%) 150.800 B/op [Average]
[info]   (min, avg, max) = (3143.270, 3167.122, 3236.620), stdev = 39.162
[info]   CI (99.9%): [3016.322, 3317.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.733 ±(99.9%) 1415.412 MB/sec [Average]
[info]   (min, avg, max) = (1343.388, 1613.733, 2017.764), stdev = 367.578
[info]   CI (99.9%): [198.321, 3029.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3205.552 ±(99.9%) 2761.533 B/op [Average]
[info]   (min, avg, max) = (2605.338, 3205.552, 3996.918), stdev = 717.161
[info]   CI (99.9%): [444.019, 5967.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.561), stdev = 1.113
[info]   CI (99.9%): [≈ 0, 4.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.182 ±(99.9%) 8.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.182, 5.249), stdev = 2.282
[info]   CI (99.9%): [≈ 0, 9.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1711.205 ops/s
[info] # Warmup Iteration   2: 23160.596 ops/s
[info] # Warmup Iteration   3: 30926.043 ops/s
[info] # Warmup Iteration   4: 31691.096 ops/s
[info] # Warmup Iteration   5: 31097.633 ops/s
[info] Iteration   1: 31782.743 ops/s
[info]                  ·gc.alloc.rate:                   2340.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              115893.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132539.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 31590.319 ops/s
[info]                  ·gc.alloc.rate:                   2314.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              115298.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100224.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 31511.739 ops/s
[info]                  ·gc.alloc.rate:               2284.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          114095.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100592.364 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 31312.973 ops/s
[info]                  ·gc.alloc.rate:                   2322.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              116744.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135261.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 31852.573 ops/s
[info]                  ·gc.alloc.rate:               2336.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          115424.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99943.531 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   31610.069 ±(99.9%) 832.464 ops/s [Average]
[info]   (min, avg, max) = (31312.973, 31610.069, 31852.573), stdev = 216.188
[info]   CI (99.9%): [30777.605, 32442.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2319.928 ±(99.9%) 85.304 MB/sec [Average]
[info]   (min, avg, max) = (2284.896, 2319.928, 2340.883), stdev = 22.153
[info]   CI (99.9%): [2234.624, 2405.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   115491.480 ±(99.9%) 3715.105 B/op [Average]
[info]   (min, avg, max) = (114095.346, 115491.480, 116744.719), stdev = 964.801
[info]   CI (99.9%): [111776.375, 119206.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2283.583 ±(99.9%) 1408.528 MB/sec [Average]
[info]   (min, avg, max) = (2012.198, 2283.583, 2691.344), stdev = 365.790
[info]   CI (99.9%): [875.055, 3692.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   113712.348 ±(99.9%) 71066.627 B/op [Average]
[info]   (min, avg, max) = (99943.531, 113712.348, 135261.248), stdev = 18455.777
[info]   CI (99.9%): [42645.721, 184778.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.302 ±(99.9%) 2.511 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.468), stdev = 0.652
[info]   CI (99.9%): [≈ 0, 2.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.955 ±(99.9%) 124.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.955, 72.690), stdev = 32.279
[info]   CI (99.9%): [≈ 0, 139.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139874.755 ops/s
[info] # Warmup Iteration   2: 350256.965 ops/s
[info] # Warmup Iteration   3: 384681.037 ops/s
[info] # Warmup Iteration   4: 387327.696 ops/s
[info] # Warmup Iteration   5: 383465.267 ops/s
[info] Iteration   1: 383965.116 ops/s
[info]                  ·gc.alloc.rate:                   1111.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              4556.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5479.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 386854.496 ops/s
[info]                  ·gc.alloc.rate:               1091.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          4439.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2720.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 384261.230 ops/s
[info]                  ·gc.alloc.rate:                   1121.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4593.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5484.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 381476.636 ops/s
[info]                  ·gc.alloc.rate:               1074.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          4431.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2763.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 379791.750 ops/s
[info]                  ·gc.alloc.rate:                   1083.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              4490.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5552.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   383269.846 ±(99.9%) 10479.964 ops/s [Average]
[info]   (min, avg, max) = (379791.750, 383269.846, 386854.496), stdev = 2721.613
[info]   CI (99.9%): [372789.881, 393749.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1096.446 ±(99.9%) 76.186 MB/sec [Average]
[info]   (min, avg, max) = (1074.133, 1096.446, 1121.650), stdev = 19.785
[info]   CI (99.9%): [1020.260, 1172.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4502.314 ±(99.9%) 275.517 B/op [Average]
[info]   (min, avg, max) = (4431.615, 4502.314, 4593.986), stdev = 71.551
[info]   CI (99.9%): [4226.797, 4777.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.925 ±(99.9%) 1411.795 MB/sec [Average]
[info]   (min, avg, max) = (668.796, 1070.925, 1339.908), stdev = 366.639
[info]   CI (99.9%): [≈ 0, 2482.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4400.261 ±(99.9%) 5829.733 B/op [Average]
[info]   (min, avg, max) = (2720.962, 4400.261, 5552.892), stdev = 1513.963
[info]   CI (99.9%): [≈ 0, 10229.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 5.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.268), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.777 ±(99.9%) 23.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.777, 13.544), stdev = 6.020
[info]   CI (99.9%): [≈ 0, 25.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964272.219 ops/s
[info] # Warmup Iteration   2: 1756959.170 ops/s
[info] # Warmup Iteration   3: 1831544.959 ops/s
[info] # Warmup Iteration   4: 1950831.763 ops/s
[info] # Warmup Iteration   5: 1961287.810 ops/s
[info] Iteration   1: 1980121.578 ops/s
[info]                  ·gc.alloc.rate:               1174.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          933.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 533.707 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1973596.781 ops/s
[info]                  ·gc.alloc.rate:                   1185.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1071.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1974161.379 ops/s
[info]                  ·gc.alloc.rate:                   1193.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1071.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1950315.725 ops/s
[info]                  ·gc.alloc.rate:                   1153.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              930.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1944426.612 ops/s
[info]                  ·gc.alloc.rate:                   1189.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              962.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1089.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.629 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1964524.415 ±(99.9%) 61618.092 ops/s [Average]
[info]   (min, avg, max) = (1944426.612, 1964524.415, 1980121.578), stdev = 16002.023
[info]   CI (99.9%): [1902906.323, 2026142.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1179.273 ±(99.9%) 61.347 MB/sec [Average]
[info]   (min, avg, max) = (1153.888, 1179.273, 1193.973), stdev = 15.932
[info]   CI (99.9%): [1117.926, 1240.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   944.727 ±(99.9%) 50.658 B/op [Average]
[info]   (min, avg, max) = (930.899, 944.727, 962.566), stdev = 13.156
[info]   CI (99.9%): [894.069, 995.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.583 ±(99.9%) 1418.231 MB/sec [Average]
[info]   (min, avg, max) = (671.585, 1075.583, 1345.525), stdev = 368.310
[info]   CI (99.9%): [≈ 0, 2493.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   861.792 ±(99.9%) 1137.916 B/op [Average]
[info]   (min, avg, max) = (533.707, 861.792, 1089.160), stdev = 295.513
[info]   CI (99.9%): [≈ 0, 1999.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 5.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.247), stdev = 1.441
[info]   CI (99.9%): [≈ 0, 6.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.542 ±(99.9%) 4.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.542, 2.629), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 5.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 949312.571 ops/s
[info] # Warmup Iteration   2: 2070083.912 ops/s
[info] # Warmup Iteration   3: 2234179.456 ops/s
[info] # Warmup Iteration   4: 2234598.306 ops/s
[info] # Warmup Iteration   5: 2233374.219 ops/s
[info] Iteration   1: 2233817.304 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2235760.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2235479.445 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2235515.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2235120.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2235138.635 ±(99.9%) 2977.326 ops/s [Average]
[info]   (min, avg, max) = (2233817.304, 2235138.635, 2235760.725), stdev = 773.202
[info]   CI (99.9%): [2232161.309, 2238115.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70198.793 ops/s
[info] # Warmup Iteration   2: 254034.297 ops/s
[info] # Warmup Iteration   3: 254814.444 ops/s
[info] # Warmup Iteration   4: 254945.328 ops/s
[info] # Warmup Iteration   5: 250802.732 ops/s
[info] Iteration   1: 252274.945 ops/s
[info]                  ·gc.alloc.rate:                   1669.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              10418.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8342.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 252591.647 ops/s
[info]                  ·gc.alloc.rate:                   1699.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              10587.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12510.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 253998.936 ops/s
[info]                  ·gc.alloc.rate:               1704.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          10558.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8279.937 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 259867.059 ops/s
[info]                  ·gc.alloc.rate:                   1734.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              10507.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12127.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 259084.150 ops/s
[info]                  ·gc.alloc.rate:                   1727.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              10494.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8111.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   255563.347 ±(99.9%) 14017.874 ops/s [Average]
[info]   (min, avg, max) = (252274.945, 255563.347, 259867.059), stdev = 3640.397
[info]   CI (99.9%): [241545.474, 269581.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1707.156 ±(99.9%) 99.076 MB/sec [Average]
[info]   (min, avg, max) = (1669.873, 1707.156, 1734.950), stdev = 25.730
[info]   CI (99.9%): [1608.080, 1806.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10513.170 ±(99.9%) 250.303 B/op [Average]
[info]   (min, avg, max) = (10418.234, 10513.170, 10587.195), stdev = 65.003
[info]   CI (99.9%): [10262.867, 10763.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.859 ±(99.9%) 1410.947 MB/sec [Average]
[info]   (min, avg, max) = (1335.266, 1603.859, 2008.079), stdev = 366.419
[info]   CI (99.9%): [192.912, 3014.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9874.435 ±(99.9%) 8614.977 B/op [Average]
[info]   (min, avg, max) = (8111.322, 9874.435, 12510.175), stdev = 2237.282
[info]   CI (99.9%): [1259.458, 18489.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.956), stdev = 1.760
[info]   CI (99.9%): [≈ 0, 7.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.031 ±(99.9%) 42.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.031, 24.645), stdev = 10.965
[info]   CI (99.9%): [≈ 0, 47.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17645.274 ops/s
[info] # Warmup Iteration   2: 61098.553 ops/s
[info] # Warmup Iteration   3: 69508.727 ops/s
[info] # Warmup Iteration   4: 71002.019 ops/s
[info] # Warmup Iteration   5: 70720.047 ops/s
[info] Iteration   1: 70737.668 ops/s
[info]                  ·gc.alloc.rate:                   1550.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              34506.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29864.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 70973.118 ops/s
[info]                  ·gc.alloc.rate:                   1553.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              34437.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29779.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 71133.460 ops/s
[info]                  ·gc.alloc.rate:                   1569.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              34712.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29712.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 70856.933 ops/s
[info]                  ·gc.alloc.rate:                   1600.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              35545.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44625.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71004.618 ops/s
[info]                  ·gc.alloc.rate:                   1566.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              34721.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29634.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70941.159 ±(99.9%) 579.297 ops/s [Average]
[info]   (min, avg, max) = (70737.668, 70941.159, 71133.460), stdev = 150.442
[info]   CI (99.9%): [70361.862, 71520.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1567.986 ±(99.9%) 76.126 MB/sec [Average]
[info]   (min, avg, max) = (1550.838, 1567.986, 1600.331), stdev = 19.770
[info]   CI (99.9%): [1491.860, 1644.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34784.486 ±(99.9%) 1706.927 B/op [Average]
[info]   (min, avg, max) = (34437.505, 34784.486, 35545.344), stdev = 443.283
[info]   CI (99.9%): [33077.560, 36491.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.908 ±(99.9%) 1149.996 MB/sec [Average]
[info]   (min, avg, max) = (1336.990, 1474.908, 2009.130), stdev = 298.650
[info]   CI (99.9%): [324.913, 2624.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32723.259 ±(99.9%) 25622.096 B/op [Average]
[info]   (min, avg, max) = (29634.472, 32723.259, 44625.292), stdev = 6653.977
[info]   CI (99.9%): [7101.164, 58345.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.305 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.829, 3.748), stdev = 1.637
[info]   CI (99.9%): [≈ 0, 7.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.338 ±(99.9%) 139.465 B/op [Average]
[info]   (min, avg, max) = (0.461, 18.338, 82.904), stdev = 36.219
[info]   CI (99.9%): [≈ 0, 157.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17988.312 ops/s
[info] # Warmup Iteration   2: 83440.889 ops/s
[info] # Warmup Iteration   3: 86909.615 ops/s
[info] # Warmup Iteration   4: 85115.141 ops/s
[info] # Warmup Iteration   5: 84472.875 ops/s
[info] Iteration   1: 88020.348 ops/s
[info]                  ·gc.alloc.rate:               1163.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          20804.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23833.438 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 86162.274 ops/s
[info]                  ·gc.alloc.rate:               1115.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          20370.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12180.152 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 86230.221 ops/s
[info]                  ·gc.alloc.rate:               1140.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          20810.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24364.565 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 85555.403 ops/s
[info]                  ·gc.alloc.rate:                   1118.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              20574.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24581.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 85882.440 ops/s
[info]                  ·gc.alloc.rate:                   1108.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              20304.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12256.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   86370.137 ±(99.9%) 3697.229 ops/s [Average]
[info]   (min, avg, max) = (85555.403, 86370.137, 88020.348), stdev = 960.159
[info]   CI (99.9%): [82672.908, 90067.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1129.160 ±(99.9%) 87.109 MB/sec [Average]
[info]   (min, avg, max) = (1108.242, 1129.160, 1163.531), stdev = 22.622
[info]   CI (99.9%): [1042.050, 1216.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20572.860 ±(99.9%) 908.722 B/op [Average]
[info]   (min, avg, max) = (20304.408, 20572.860, 20810.341), stdev = 235.992
[info]   CI (99.9%): [19664.138, 21481.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.010 ±(99.9%) 1406.355 MB/sec [Average]
[info]   (min, avg, max) = (666.897, 1068.010, 1336.275), stdev = 365.226
[info]   CI (99.9%): [≈ 0, 2474.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19443.238 ±(99.9%) 25418.959 B/op [Average]
[info]   (min, avg, max) = (12180.152, 19443.238, 24581.840), stdev = 6601.223
[info]   CI (99.9%): [≈ 0, 44862.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 7.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 4.373), stdev = 1.953
[info]   CI (99.9%): [≈ 0, 8.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.099 ±(99.9%) 137.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.099, 80.111), stdev = 35.784
[info]   CI (99.9%): [≈ 0, 153.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36150.624 ops/s
[info] # Warmup Iteration   2: 96900.046 ops/s
[info] # Warmup Iteration   3: 97413.970 ops/s
[info] # Warmup Iteration   4: 100792.517 ops/s
[info] # Warmup Iteration   5: 99991.364 ops/s
[info] Iteration   1: 100889.668 ops/s
[info]                  ·gc.alloc.rate:                   1245.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              19437.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20949.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 100876.628 ops/s
[info]                  ·gc.alloc.rate:                   1242.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              19354.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20886.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 101629.517 ops/s
[info]                  ·gc.alloc.rate:                   1235.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              19128.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10408.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101459.241 ops/s
[info]                  ·gc.alloc.rate:                   1247.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              19351.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20857.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 101511.661 ops/s
[info]                  ·gc.alloc.rate:                   1259.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              19525.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20836.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   101273.343 ±(99.9%) 1392.106 ops/s [Average]
[info]   (min, avg, max) = (100876.628, 101273.343, 101629.517), stdev = 361.526
[info]   CI (99.9%): [99881.237, 102665.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1246.041 ±(99.9%) 34.085 MB/sec [Average]
[info]   (min, avg, max) = (1235.268, 1246.041, 1259.429), stdev = 8.852
[info]   CI (99.9%): [1211.956, 1280.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19359.411 ±(99.9%) 568.560 B/op [Average]
[info]   (min, avg, max) = (19128.203, 19359.411, 19525.590), stdev = 147.653
[info]   CI (99.9%): [18790.851, 19927.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1208.796 ±(99.9%) 1155.116 MB/sec [Average]
[info]   (min, avg, max) = (672.183, 1208.796, 1344.536), stdev = 299.980
[info]   CI (99.9%): [53.680, 2363.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18787.664 ±(99.9%) 18036.882 B/op [Average]
[info]   (min, avg, max) = (10408.803, 18787.664, 20949.697), stdev = 4684.121
[info]   CI (99.9%): [750.782, 36824.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.657 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.641, 2.789), stdev = 1.210
[info]   CI (99.9%): [≈ 0, 5.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.945 ±(99.9%) 72.248 B/op [Average]
[info]   (min, avg, max) = (0.322, 9.945, 43.270), stdev = 18.762
[info]   CI (99.9%): [≈ 0, 82.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 2.049
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7362.374 ops/s
[info] # Warmup Iteration   2: 39383.984 ops/s
[info] # Warmup Iteration   3: 46032.163 ops/s
[info] # Warmup Iteration   4: 46123.497 ops/s
[info] # Warmup Iteration   5: 46212.870 ops/s
[info] Iteration   1: 46451.776 ops/s
[info]                  ·gc.alloc.rate:                   2169.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              73497.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68027.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 46619.070 ops/s
[info]                  ·gc.alloc.rate:                   2177.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              73504.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67555.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 46785.455 ops/s
[info]                  ·gc.alloc.rate:               2171.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          73044.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67181.648 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 47352.799 ops/s
[info]                  ·gc.alloc.rate:               2194.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          72917.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66467.306 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 47228.770 ops/s
[info]                  ·gc.alloc.rate:               2181.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          72694.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66804.045 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   46887.574 ±(99.9%) 1497.911 ops/s [Average]
[info]   (min, avg, max) = (46451.776, 46887.574, 47352.799), stdev = 389.003
[info]   CI (99.9%): [45389.663, 48385.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2178.839 ±(99.9%) 38.966 MB/sec [Average]
[info]   (min, avg, max) = (2169.194, 2178.839, 2194.706), stdev = 10.119
[info]   CI (99.9%): [2139.874, 2217.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73131.725 ±(99.9%) 1385.089 B/op [Average]
[info]   (min, avg, max) = (72694.736, 73131.725, 73504.806), stdev = 359.703
[info]   CI (99.9%): [71746.636, 74516.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.267 ±(99.9%) 15.746 MB/sec [Average]
[info]   (min, avg, max) = (1997.157, 2002.267, 2007.744), stdev = 4.089
[info]   CI (99.9%): [1986.520, 2018.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67207.193 ±(99.9%) 2361.591 B/op [Average]
[info]   (min, avg, max) = (66467.306, 67207.193, 68027.209), stdev = 613.298
[info]   CI (99.9%): [64845.602, 69568.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.949 ±(99.9%) 7.995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 4.663), stdev = 2.076
[info]   CI (99.9%): [≈ 0, 8.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32.161 ±(99.9%) 270.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.161, 157.993), stdev = 70.353
[info]   CI (99.9%): [≈ 0, 303.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44981.725 ops/s
[info] # Warmup Iteration   2: 106520.649 ops/s
[info] # Warmup Iteration   3: 110318.259 ops/s
[info] # Warmup Iteration   4: 115549.741 ops/s
[info] # Warmup Iteration   5: 115049.441 ops/s
[info] Iteration   1: 115299.233 ops/s
[info]                  ·gc.alloc.rate:                   1112.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              15188.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18272.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 115349.118 ops/s
[info]                  ·gc.alloc.rate:               1102.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          15043.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9134.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 115405.380 ops/s
[info]                  ·gc.alloc.rate:                   1106.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              15087.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18277.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 116038.072 ops/s
[info]                  ·gc.alloc.rate:               1108.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          15031.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9093.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 115552.509 ops/s
[info]                  ·gc.alloc.rate:                   1117.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              15218.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18268.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   115528.863 ±(99.9%) 1155.416 ops/s [Average]
[info]   (min, avg, max) = (115299.233, 115528.863, 116038.072), stdev = 300.058
[info]   CI (99.9%): [114373.446, 116684.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1109.448 ±(99.9%) 21.962 MB/sec [Average]
[info]   (min, avg, max) = (1102.553, 1109.448, 1117.300), stdev = 5.703
[info]   CI (99.9%): [1087.486, 1131.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15113.875 ±(99.9%) 326.425 B/op [Average]
[info]   (min, avg, max) = (15031.968, 15113.875, 15218.126), stdev = 84.771
[info]   CI (99.9%): [14787.450, 15440.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1072.033 ±(99.9%) 1413.317 MB/sec [Average]
[info]   (min, avg, max) = (669.467, 1072.033, 1341.290), stdev = 367.034
[info]   CI (99.9%): [≈ 0, 2485.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14609.346 ±(99.9%) 19317.154 B/op [Average]
[info]   (min, avg, max) = (9093.580, 14609.346, 18277.655), stdev = 5016.604
[info]   CI (99.9%): [≈ 0, 33926.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.916 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.456), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.641 ±(99.9%) 80.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.641, 47.067), stdev = 20.925
[info]   CI (99.9%): [≈ 0, 90.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154597.867 ops/s
[info] # Warmup Iteration   2: 324047.528 ops/s
[info] # Warmup Iteration   3: 333920.969 ops/s
[info] # Warmup Iteration   4: 333045.988 ops/s
[info] # Warmup Iteration   5: 335573.070 ops/s
[info] Iteration   1: 335268.682 ops/s
[info]                  ·gc.alloc.rate:               512.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          2406.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2401.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 331750.120 ops/s
[info]                  ·gc.alloc.rate:               524.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          2488.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3161.864 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 337652.871 ops/s
[info]                  ·gc.alloc.rate:               514.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          2397.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3106.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 315445.453 ops/s
[info]                  ·gc.alloc.rate:      468.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 326005.890 ops/s
[info]                  ·gc.alloc.rate:               507.787 MB/sec
[info]                  ·gc.alloc.rate.norm:          2451.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3222.281 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   329224.603 ±(99.9%) 34126.022 ops/s [Average]
[info]   (min, avg, max) = (315445.453, 329224.603, 337652.871), stdev = 8862.420
[info]   CI (99.9%): [295098.581, 363350.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   505.581 ±(99.9%) 83.559 MB/sec [Average]
[info]   (min, avg, max) = (468.312, 505.581, 524.492), stdev = 21.700
[info]   CI (99.9%): [422.022, 589.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2415.887 ±(99.9%) 221.852 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2415.887, 2488.200), stdev = 57.614
[info]   CI (99.9%): [2194.034, 2637.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.491 ±(99.9%) 1112.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.491, 667.534), stdev = 288.830
[info]   CI (99.9%): [≈ 0, 1614.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2378.459 ±(99.9%) 5277.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2378.459, 3222.281), stdev = 1370.541
[info]   CI (99.9%): [≈ 0, 7655.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411861.879 ops/s
[info] # Warmup Iteration   2: 691181.754 ops/s
[info] # Warmup Iteration   3: 660337.458 ops/s
[info] # Warmup Iteration   4: 680867.912 ops/s
[info] # Warmup Iteration   5: 683939.338 ops/s
[info] Iteration   1: 676462.993 ops/s
[info]                  ·gc.alloc.rate:               861.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          2004.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1561.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 690749.009 ops/s
[info]                  ·gc.alloc.rate:               874.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          1992.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1529.229 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 671964.536 ops/s
[info]                  ·gc.alloc.rate:               867.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          2030.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3145.410 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 675354.638 ops/s
[info]                  ·gc.alloc.rate:                   853.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              1988.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1566.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 668315.422 ops/s
[info]                  ·gc.alloc.rate:                   854.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              2011.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1582.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   676569.320 ±(99.9%) 32893.223 ops/s [Average]
[info]   (min, avg, max) = (668315.422, 676569.320, 690749.009), stdev = 8542.266
[info]   CI (99.9%): [643676.097, 709462.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   862.125 ±(99.9%) 33.919 MB/sec [Average]
[info]   (min, avg, max) = (853.428, 862.125, 874.291), stdev = 8.809
[info]   CI (99.9%): [828.205, 896.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2005.541 ±(99.9%) 65.034 B/op [Average]
[info]   (min, avg, max) = (1988.617, 2005.541, 2030.749), stdev = 16.889
[info]   CI (99.9%): [1940.507, 2070.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.934 ±(99.9%) 1156.000 MB/sec [Average]
[info]   (min, avg, max) = (671.141, 805.934, 1342.964), stdev = 300.210
[info]   CI (99.9%): [≈ 0, 1961.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1877.081 ±(99.9%) 2731.199 B/op [Average]
[info]   (min, avg, max) = (1529.229, 1877.081, 3145.410), stdev = 709.284
[info]   CI (99.9%): [≈ 0, 4608.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.049), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 387573.627 ops/s
[info] # Warmup Iteration   2: 757753.798 ops/s
[info] # Warmup Iteration   3: 754482.477 ops/s
[info] # Warmup Iteration   4: 762352.128 ops/s
[info] # Warmup Iteration   5: 757558.511 ops/s
[info] Iteration   1: 754086.824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 763928.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 756430.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 767987.156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 764205.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   761327.638 ±(99.9%) 22436.699 ops/s [Average]
[info]   (min, avg, max) = (754086.824, 761327.638, 767987.156), stdev = 5826.739
[info]   CI (99.9%): [738890.939, 783764.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85799.633 ops/s
[info] # Warmup Iteration   2: 192726.711 ops/s
[info] # Warmup Iteration   3: 198024.926 ops/s
[info] # Warmup Iteration   4: 202071.158 ops/s
[info] # Warmup Iteration   5: 206631.476 ops/s
[info] Iteration   1: 206220.536 ops/s
[info]                  ·gc.alloc.rate:               685.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          5229.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5091.730 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 206302.860 ops/s
[info]                  ·gc.alloc.rate:               693.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          5289.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5089.558 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 210415.371 ops/s
[info]                  ·gc.alloc.rate:               696.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          5210.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4995.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 210511.384 ops/s
[info]                  ·gc.alloc.rate:                   698.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              5223.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4992.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 206794.088 ops/s
[info]                  ·gc.alloc.rate:                   712.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              5415.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10151.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   208048.848 ±(99.9%) 8530.315 ops/s [Average]
[info]   (min, avg, max) = (206220.536, 208048.848, 210511.384), stdev = 2215.296
[info]   CI (99.9%): [199518.533, 216579.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   697.200 ±(99.9%) 37.813 MB/sec [Average]
[info]   (min, avg, max) = (685.192, 697.200, 712.167), stdev = 9.820
[info]   CI (99.9%): [659.386, 735.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5273.664 ±(99.9%) 326.763 B/op [Average]
[info]   (min, avg, max) = (5210.123, 5273.664, 5415.340), stdev = 84.859
[info]   CI (99.9%): [4946.901, 5600.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   800.985 ±(99.9%) 1149.546 MB/sec [Average]
[info]   (min, avg, max) = (667.128, 800.985, 1335.018), stdev = 298.533
[info]   CI (99.9%): [≈ 0, 1950.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6064.125 ±(99.9%) 8800.405 B/op [Average]
[info]   (min, avg, max) = (4992.768, 6064.125, 10151.523), stdev = 2285.437
[info]   CI (99.9%): [≈ 0, 14864.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 1.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.632), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22201.369 ops/s
[info] # Warmup Iteration   2: 109595.192 ops/s
[info] # Warmup Iteration   3: 121063.389 ops/s
[info] # Warmup Iteration   4: 124719.555 ops/s
[info] # Warmup Iteration   5: 124130.309 ops/s
[info] Iteration   1: 125222.493 ops/s
[info]                  ·gc.alloc.rate:                   1751.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              22017.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16854.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 125809.615 ops/s
[info]                  ·gc.alloc.rate:                   1787.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              22357.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25183.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 126506.174 ops/s
[info]                  ·gc.alloc.rate:                   1782.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              22176.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16657.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 125846.241 ops/s
[info]                  ·gc.alloc.rate:                   1785.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              22327.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25068.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 126336.651 ops/s
[info]                  ·gc.alloc.rate:               1779.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          22168.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16651.770 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   125944.235 ±(99.9%) 1942.957 ops/s [Average]
[info]   (min, avg, max) = (125222.493, 125944.235, 126506.174), stdev = 504.580
[info]   CI (99.9%): [124001.278, 127887.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1777.319 ±(99.9%) 56.024 MB/sec [Average]
[info]   (min, avg, max) = (1751.819, 1777.319, 1787.205), stdev = 14.549
[info]   CI (99.9%): [1721.294, 1833.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22209.605 ±(99.9%) 528.770 B/op [Average]
[info]   (min, avg, max) = (22017.724, 22209.605, 22357.989), stdev = 137.320
[info]   CI (99.9%): [21680.836, 22738.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.871 ±(99.9%) 1413.132 MB/sec [Average]
[info]   (min, avg, max) = (1336.685, 1606.871, 2013.037), stdev = 366.986
[info]   CI (99.9%): [193.739, 3020.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20083.059 ±(99.9%) 17729.413 B/op [Average]
[info]   (min, avg, max) = (16651.770, 20083.059, 25183.157), stdev = 4604.272
[info]   CI (99.9%): [2353.646, 37812.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.464 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.809), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.103 ±(99.9%) 80.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.103, 47.656), stdev = 21.000
[info]   CI (99.9%): [≈ 0, 90.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61766.600 ops/s
[info] # Warmup Iteration   2: 170939.259 ops/s
[info] # Warmup Iteration   3: 178614.630 ops/s
[info] # Warmup Iteration   4: 184130.170 ops/s
[info] # Warmup Iteration   5: 185077.222 ops/s
[info] Iteration   1: 183798.597 ops/s
[info]                  ·gc.alloc.rate:               1128.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          9659.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11442.579 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 180312.880 ops/s
[info]                  ·gc.alloc.rate:               1085.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          9468.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5835.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 178721.930 ops/s
[info]                  ·gc.alloc.rate:                   1097.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              9667.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11779.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 184132.491 ops/s
[info]                  ·gc.alloc.rate:               1121.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          9584.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11444.166 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 184374.045 ops/s
[info]                  ·gc.alloc.rate:                   1106.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              9443.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5717.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   182267.989 ±(99.9%) 9939.509 ops/s [Average]
[info]   (min, avg, max) = (178721.930, 182267.989, 184374.045), stdev = 2581.259
[info]   CI (99.9%): [172328.479, 192207.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1107.697 ±(99.9%) 67.055 MB/sec [Average]
[info]   (min, avg, max) = (1085.063, 1107.697, 1128.086), stdev = 17.414
[info]   CI (99.9%): [1040.642, 1174.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9564.624 ±(99.9%) 402.935 B/op [Average]
[info]   (min, avg, max) = (9443.412, 9564.624, 9667.177), stdev = 104.641
[info]   CI (99.9%): [9161.689, 9967.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.272 ±(99.9%) 1409.817 MB/sec [Average]
[info]   (min, avg, max) = (668.661, 1070.272, 1338.912), stdev = 366.125
[info]   CI (99.9%): [≈ 0, 2480.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9243.811 ±(99.9%) 12201.663 B/op [Average]
[info]   (min, avg, max) = (5717.355, 9243.811, 11779.907), stdev = 3168.733
[info]   CI (99.9%): [≈ 0, 21445.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.601), stdev = 1.602
[info]   CI (99.9%): [≈ 0, 6.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.295 ±(99.9%) 52.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.295, 30.740), stdev = 13.669
[info]   CI (99.9%): [≈ 0, 58.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161798.235 ops/s
[info] # Warmup Iteration   2: 412227.083 ops/s
[info] # Warmup Iteration   3: 450824.118 ops/s
[info] # Warmup Iteration   4: 447715.896 ops/s
[info] # Warmup Iteration   5: 447974.874 ops/s
[info] Iteration   1: 446602.046 ops/s
[info]                  ·gc.alloc.rate:                   301.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1061.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1802.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 446957.862 ops/s
[info]                  ·gc.alloc.rate:               312.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          1099.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1801.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 446440.927 ops/s
[info]                  ·gc.alloc.rate:      290.522 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 444092.622 ops/s
[info]                  ·gc.alloc.rate:               307.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          1088.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1813.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 445174.859 ops/s
[info]                  ·gc.alloc.rate:      289.642 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   445853.663 ±(99.9%) 4591.097 ops/s [Average]
[info]   (min, avg, max) = (444092.622, 445853.663, 446957.862), stdev = 1192.293
[info]   CI (99.9%): [441262.566, 450444.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   300.198 ±(99.9%) 38.766 MB/sec [Average]
[info]   (min, avg, max) = (289.642, 300.198, 312.430), stdev = 10.067
[info]   CI (99.9%): [261.433, 338.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1059.527 ±(99.9%) 136.070 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1059.527, 1099.773), stdev = 35.337
[info]   CI (99.9%): [923.457, 1195.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.019 ±(99.9%) 1079.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.019, 511.779), stdev = 280.269
[info]   CI (99.9%): [≈ 0, 1386.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1083.487 ±(99.9%) 3808.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1083.487, 1813.092), stdev = 989.094
[info]   CI (99.9%): [≈ 0, 4892.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5903.418 ops/s
[info] # Warmup Iteration   2: 59132.726 ops/s
[info] # Warmup Iteration   3: 67130.601 ops/s
[info] # Warmup Iteration   4: 68624.858 ops/s
[info] # Warmup Iteration   5: 69146.560 ops/s
[info] Iteration   1: 68387.141 ops/s
[info]                  ·gc.alloc.rate:                   2741.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              63094.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61814.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.916 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 68078.847 ops/s
[info]                  ·gc.alloc.rate:                   2716.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              62792.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46671.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 68787.367 ops/s
[info]                  ·gc.alloc.rate:                   2784.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              63719.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61758.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 68587.741 ops/s
[info]                  ·gc.alloc.rate:                   2777.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              63732.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62058.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 68204.485 ops/s
[info]                  ·gc.alloc.rate:                   2763.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              63757.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62530.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.961 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   68409.116 ±(99.9%) 1099.989 ops/s [Average]
[info]   (min, avg, max) = (68078.847, 68409.116, 68787.367), stdev = 285.664
[info]   CI (99.9%): [67309.127, 69509.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2756.618 ±(99.9%) 107.955 MB/sec [Average]
[info]   (min, avg, max) = (2716.146, 2756.618, 2784.998), stdev = 28.036
[info]   CI (99.9%): [2648.663, 2864.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63419.462 ±(99.9%) 1723.571 B/op [Average]
[info]   (min, avg, max) = (62792.462, 63419.462, 63757.825), stdev = 447.606
[info]   CI (99.9%): [61695.891, 65143.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2563.659 ±(99.9%) 1173.262 MB/sec [Average]
[info]   (min, avg, max) = (2018.840, 2563.659, 2709.849), stdev = 304.692
[info]   CI (99.9%): [1390.397, 3736.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   58966.784 ±(99.9%) 26491.476 B/op [Average]
[info]   (min, avg, max) = (46671.997, 58966.784, 62530.890), stdev = 6879.752
[info]   CI (99.9%): [32475.309, 85458.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.055 ±(99.9%) 2.413 B/op [Average]
[info]   (min, avg, max) = (0.476, 1.055, 1.916), stdev = 0.627
[info]   CI (99.9%): [≈ 0, 3.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73090.254 ops/s
[info] # Warmup Iteration   2: 175400.850 ops/s
[info] # Warmup Iteration   3: 182395.301 ops/s
[info] # Warmup Iteration   4: 184164.795 ops/s
[info] # Warmup Iteration   5: 184714.469 ops/s
[info] Iteration   1: 184798.291 ops/s
[info]                  ·gc.alloc.rate:               1205.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          10268.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11414.708 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 185762.132 ops/s
[info]                  ·gc.alloc.rate:               1202.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          10188.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5683.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 184796.415 ops/s
[info]                  ·gc.alloc.rate:                   1200.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              10219.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11428.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 179999.129 ops/s
[info]                  ·gc.alloc.rate:                   1181.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              10329.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11739.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 187818.430 ops/s
[info]                  ·gc.alloc.rate:                   1216.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              10193.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5626.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   184634.879 ±(99.9%) 11051.527 ops/s [Average]
[info]   (min, avg, max) = (179999.129, 184634.879, 187818.430), stdev = 2870.047
[info]   CI (99.9%): [173583.352, 195686.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1201.280 ±(99.9%) 48.961 MB/sec [Average]
[info]   (min, avg, max) = (1181.404, 1201.280, 1216.415), stdev = 12.715
[info]   CI (99.9%): [1152.319, 1250.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10239.741 ±(99.9%) 228.931 B/op [Average]
[info]   (min, avg, max) = (10188.139, 10239.741, 10329.725), stdev = 59.453
[info]   CI (99.9%): [10010.810, 10468.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.536 ±(99.9%) 1414.399 MB/sec [Average]
[info]   (min, avg, max) = (670.832, 1073.536, 1342.662), stdev = 367.315
[info]   CI (99.9%): [≈ 0, 2487.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9178.696 ±(99.9%) 12396.206 B/op [Average]
[info]   (min, avg, max) = (5626.851, 9178.696, 11739.704), stdev = 3219.255
[info]   CI (99.9%): [≈ 0, 21574.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 2.998), stdev = 1.300
[info]   CI (99.9%): [≈ 0, 5.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.115 ±(99.9%) 43.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.115, 26.211), stdev = 11.376
[info]   CI (99.9%): [≈ 0, 49.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252027.144 ops/s
[info] # Warmup Iteration   2: 526748.333 ops/s
[info] # Warmup Iteration   3: 546505.244 ops/s
[info] # Warmup Iteration   4: 540067.363 ops/s
[info] # Warmup Iteration   5: 543171.496 ops/s
[info] Iteration   1: 550650.565 ops/s
[info]                  ·gc.alloc.rate:               557.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          1593.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1904.930 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 552784.314 ops/s
[info]                  ·gc.alloc.rate:      545.498 MB/sec
[info]                  ·gc.alloc.rate.norm: 1553.157 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 549347.641 ops/s
[info]                  ·gc.alloc.rate:               556.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          1593.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1909.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 548526.150 ops/s
[info]                  ·gc.alloc.rate:                   566.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1626.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1915.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 550321.442 ops/s
[info]                  ·gc.alloc.rate:               562.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          1610.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1908.985 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   550326.022 ±(99.9%) 6192.632 ops/s [Average]
[info]   (min, avg, max) = (548526.150, 550326.022, 552784.314), stdev = 1608.207
[info]   CI (99.9%): [544133.390, 556518.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   557.784 ±(99.9%) 31.135 MB/sec [Average]
[info]   (min, avg, max) = (545.498, 557.784, 566.772), stdev = 8.086
[info]   CI (99.9%): [526.649, 588.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1595.183 ±(99.9%) 104.680 B/op [Average]
[info]   (min, avg, max) = (1553.157, 1595.183, 1626.202), stdev = 27.185
[info]   CI (99.9%): [1490.503, 1699.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.621 ±(99.9%) 1148.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.621, 667.511), stdev = 298.304
[info]   CI (99.9%): [≈ 0, 1682.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1527.709 ±(99.9%) 3288.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1527.709, 1915.186), stdev = 854.023
[info]   CI (99.9%): [≈ 0, 4816.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 698339.168 ops/s
[info] # Warmup Iteration   2: 1042950.423 ops/s
[info] # Warmup Iteration   3: 1147623.688 ops/s
[info] # Warmup Iteration   4: 1142888.417 ops/s
[info] # Warmup Iteration   5: 1143676.610 ops/s
[info] Iteration   1: 1146102.323 ops/s
[info]                  ·gc.alloc.rate:               874.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 921.679 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1135190.813 ops/s
[info]                  ·gc.alloc.rate:               860.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 930.500 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1161058.985 ops/s
[info]                  ·gc.alloc.rate:                   895.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1213.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1820.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1128762.582 ops/s
[info]                  ·gc.alloc.rate:               852.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          1187.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 937.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1152433.654 ops/s
[info]                  ·gc.alloc.rate:               869.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          1186.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.958 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1144709.671 ±(99.9%) 49977.508 ops/s [Average]
[info]   (min, avg, max) = (1128762.582, 1144709.671, 1161058.985), stdev = 12979.000
[info]   CI (99.9%): [1094732.163, 1194687.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   870.186 ±(99.9%) 62.608 MB/sec [Average]
[info]   (min, avg, max) = (852.273, 870.186, 895.118), stdev = 16.259
[info]   CI (99.9%): [807.578, 932.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1196.168 ±(99.9%) 42.461 B/op [Average]
[info]   (min, avg, max) = (1186.500, 1196.168, 1213.335), stdev = 11.027
[info]   CI (99.9%): [1153.706, 1238.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.018 ±(99.9%) 1155.774 MB/sec [Average]
[info]   (min, avg, max) = (671.121, 806.018, 1342.943), stdev = 300.151
[info]   CI (99.9%): [≈ 0, 1961.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1105.541 ±(99.9%) 1538.984 B/op [Average]
[info]   (min, avg, max) = (917.958, 1105.541, 1820.364), stdev = 399.669
[info]   CI (99.9%): [≈ 0, 2644.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 600058.098 ops/s
[info] # Warmup Iteration   2: 1184804.992 ops/s
[info] # Warmup Iteration   3: 1288210.965 ops/s
[info] # Warmup Iteration   4: 1287620.698 ops/s
[info] # Warmup Iteration   5: 1287575.002 ops/s
[info] Iteration   1: 1276121.080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1287966.969 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1287305.395 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1291973.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1291926.291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1287058.557 ±(99.9%) 24981.868 ops/s [Average]
[info]   (min, avg, max) = (1276121.080, 1287058.557, 1291973.049), stdev = 6487.712
[info]   CI (99.9%): [1262076.689, 1312040.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95214.540 ops/s
[info] # Warmup Iteration   2: 345428.122 ops/s
[info] # Warmup Iteration   3: 344218.776 ops/s
[info] # Warmup Iteration   4: 350644.414 ops/s
[info] # Warmup Iteration   5: 351715.807 ops/s
[info] Iteration   1: 349316.661 ops/s
[info]                  ·gc.alloc.rate:                   992.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              4470.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6005.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 351369.677 ops/s
[info]                  ·gc.alloc.rate:               972.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          4355.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2988.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 339796.700 ops/s
[info]                  ·gc.alloc.rate:                        961.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                   4454.953 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.017 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.078 B/op
[info]                  ·gc.churn.Metaspace:                   0.050 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1096.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          5079.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      18.995 B/op
[info]                  ·gc.count:                             3.000 counts
[info]                  ·gc.time:                              32.000 ms
[info] Iteration   4: 360824.877 ops/s
[info]                  ·gc.alloc.rate:                   1002.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              4371.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2912.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 360048.780 ops/s
[info]                  ·gc.alloc.rate:               1013.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          4431.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5829.596 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   352271.339 ±(99.9%) 33281.423 ops/s [Average]
[info]   (min, avg, max) = (339796.700, 352271.339, 360824.877), stdev = 8643.080
[info]   CI (99.9%): [318989.916, 385552.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   988.576 ±(99.9%) 82.238 MB/sec [Average]
[info]   (min, avg, max) = (961.817, 988.576, 1013.805), stdev = 21.357
[info]   CI (99.9%): [906.339, 1070.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4416.908 ±(99.9%) 196.470 B/op [Average]
[info]   (min, avg, max) = (4355.457, 4416.908, 4470.892), stdev = 51.023
[info]   CI (99.9%): [4220.438, 4613.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.016 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.046 ±(99.9%) 0.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.232), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1019.722 ±(99.9%) 1292.633 MB/sec [Average]
[info]   (min, avg, max) = (667.117, 1019.722, 1333.596), stdev = 335.693
[info]   CI (99.9%): [≈ 0, 2312.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4563.290 ±(99.9%) 5825.657 B/op [Average]
[info]   (min, avg, max) = (2912.889, 4563.290, 6005.703), stdev = 1512.905
[info]   CI (99.9%): [≈ 0, 10388.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 7.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.101), stdev = 1.829
[info]   CI (99.9%): [≈ 0, 7.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.836 ±(99.9%) 32.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.836, 18.995), stdev = 8.474
[info]   CI (99.9%): [≈ 0, 36.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 9.000, 32.000), stdev = 12.981
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175.633 ops/s
[info] # Warmup Iteration   2: 450.922 ops/s
[info] # Warmup Iteration   3: 578.456 ops/s
[info] # Warmup Iteration   4: 566.225 ops/s
[info] # Warmup Iteration   5: 569.113 ops/s
[info] Iteration   1: 575.845 ops/s
[info]                  ·gc.alloc.rate:               1213.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          3315838.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1827726.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 575.069 ops/s
[info]                  ·gc.alloc.rate:               1228.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          3360938.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3656362.667 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 571.277 ops/s
[info]                  ·gc.alloc.rate:                   1215.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              3347168.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3683764.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 576.116 ops/s
[info]                  ·gc.alloc.rate:                   1224.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              3343654.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3654569.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7950.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 573.983 ops/s
[info]                  ·gc.alloc.rate:                   1245.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              3411853.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3665456.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2735.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   574.458 ±(99.9%) 7.553 ops/s [Average]
[info]   (min, avg, max) = (571.277, 574.458, 576.116), stdev = 1.962
[info]   CI (99.9%): [566.905, 582.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1225.516 ±(99.9%) 48.811 MB/sec [Average]
[info]   (min, avg, max) = (1213.456, 1225.516, 1245.120), stdev = 12.676
[info]   CI (99.9%): [1176.705, 1274.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3355890.567 ±(99.9%) 135967.759 B/op [Average]
[info]   (min, avg, max) = (3315838.208, 3355890.567, 3411853.162), stdev = 35310.395
[info]   CI (99.9%): [3219922.808, 3491858.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1203.933 ±(99.9%) 1151.767 MB/sec [Average]
[info]   (min, avg, max) = (668.870, 1203.933, 1338.771), stdev = 299.110
[info]   CI (99.9%): [52.166, 2355.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3297575.943 ±(99.9%) 3164276.155 B/op [Average]
[info]   (min, avg, max) = (1827726.222, 3297575.943, 3683764.811), stdev = 821752.469
[info]   CI (99.9%): [133299.788, 6461852.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.786 ±(99.9%) 4.866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.786, 2.913), stdev = 1.264
[info]   CI (99.9%): [≈ 0, 5.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2148.669 ±(99.9%) 13285.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2148.669, 7950.641), stdev = 3450.166
[info]   CI (99.9%): [≈ 0, 15434.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168.502 ops/s
[info] # Warmup Iteration   2: 507.761 ops/s
[info] # Warmup Iteration   3: 572.348 ops/s
[info] # Warmup Iteration   4: 572.103 ops/s
[info] # Warmup Iteration   5: 590.324 ops/s
[info] Iteration   1: 590.018 ops/s
[info]                  ·gc.alloc.rate:                   1253.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              3341873.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3555577.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 588.660 ops/s
[info]                  ·gc.alloc.rate:               1243.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          3325229.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1784715.518 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 575.913 ops/s
[info]                  ·gc.alloc.rate:                   1220.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              3332628.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3645482.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 571.942 ops/s
[info]                  ·gc.alloc.rate:                   1223.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              3365868.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3673675.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10350.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 573.869 ops/s
[info]                  ·gc.alloc.rate:                   1238.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              3396913.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3662708.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1998.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   580.080 ±(99.9%) 33.044 ops/s [Average]
[info]   (min, avg, max) = (571.942, 580.080, 590.018), stdev = 8.581
[info]   CI (99.9%): [547.036, 613.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1236.167 ±(99.9%) 53.275 MB/sec [Average]
[info]   (min, avg, max) = (1220.532, 1236.167, 1253.568), stdev = 13.835
[info]   CI (99.9%): [1182.891, 1289.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3352502.533 ±(99.9%) 112310.149 B/op [Average]
[info]   (min, avg, max) = (3325229.664, 3352502.533, 3396913.491), stdev = 29166.589
[info]   CI (99.9%): [3240192.384, 3464812.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.627 ±(99.9%) 1149.413 MB/sec [Average]
[info]   (min, avg, max) = (667.658, 1201.627, 1335.829), stdev = 298.499
[info]   CI (99.9%): [52.214, 2351.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3264432.083 ±(99.9%) 3190248.146 B/op [Average]
[info]   (min, avg, max) = (1784715.518, 3264432.083, 3673675.951), stdev = 828497.312
[info]   CI (99.9%): [74183.937, 6454680.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.919 ±(99.9%) 6.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.919, 3.764), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 7.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2525.753 ±(99.9%) 17142.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2525.753, 10350.799), stdev = 4451.816
[info]   CI (99.9%): [≈ 0, 19668.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19906.136 ops/s
[info] # Warmup Iteration   2: 49411.449 ops/s
[info] # Warmup Iteration   3: 49792.724 ops/s
[info] # Warmup Iteration   4: 51244.187 ops/s
[info] # Warmup Iteration   5: 48973.354 ops/s
[info] Iteration   1: 51333.896 ops/s
[info]                  ·gc.alloc.rate:               848.008 MB/sec
[info]                  ·gc.alloc.rate.norm:          25998.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20545.097 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 51481.121 ops/s
[info]                  ·gc.alloc.rate:               856.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          26168.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20486.443 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 50413.277 ops/s
[info]                  ·gc.alloc.rate:                   840.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              26219.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20919.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 51129.545 ops/s
[info]                  ·gc.alloc.rate:               854.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          26291.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20627.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 50271.489 ops/s
[info]                  ·gc.alloc.rate:                   845.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              26483.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41961.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   50925.866 ±(99.9%) 2115.437 ops/s [Average]
[info]   (min, avg, max) = (50271.489, 50925.866, 51481.121), stdev = 549.372
[info]   CI (99.9%): [48810.429, 53041.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   848.842 ±(99.9%) 24.745 MB/sec [Average]
[info]   (min, avg, max) = (840.152, 848.842, 856.104), stdev = 6.426
[info]   CI (99.9%): [824.097, 873.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26232.425 ±(99.9%) 682.576 B/op [Average]
[info]   (min, avg, max) = (25998.437, 26232.425, 26483.973), stdev = 177.263
[info]   CI (99.9%): [25549.849, 26915.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.195 ±(99.9%) 1153.789 MB/sec [Average]
[info]   (min, avg, max) = (670.103, 804.195, 1340.199), stdev = 299.635
[info]   CI (99.9%): [≈ 0, 1957.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24908.148 ±(99.9%) 36714.000 B/op [Average]
[info]   (min, avg, max) = (20486.443, 24908.148, 41961.393), stdev = 9534.509
[info]   CI (99.9%): [≈ 0, 61622.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.521 ±(99.9%) 3.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.521, 1.955), stdev = 0.850
[info]   CI (99.9%): [≈ 0, 3.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141.437 ops/s
[info] # Warmup Iteration   2: 414.466 ops/s
[info] # Warmup Iteration   3: 561.303 ops/s
[info] # Warmup Iteration   4: 590.934 ops/s
[info] # Warmup Iteration   5: 591.180 ops/s
[info] Iteration   1: 589.665 ops/s
[info]                  ·gc.alloc.rate:               1288.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          3437946.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3558049.410 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 589.381 ops/s
[info]                  ·gc.alloc.rate:                   1285.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              3432941.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3558049.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 580.073 ops/s
[info]                  ·gc.alloc.rate:               1249.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          3387365.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1808387.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 574.251 ops/s
[info]                  ·gc.alloc.rate:                   1250.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              3425958.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3654515.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14645.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 574.171 ops/s
[info]                  ·gc.alloc.rate:                   1268.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              3476148.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3645397.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2621.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   581.508 ±(99.9%) 29.643 ops/s [Average]
[info]   (min, avg, max) = (574.171, 581.508, 589.665), stdev = 7.698
[info]   CI (99.9%): [551.865, 611.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1268.486 ±(99.9%) 71.963 MB/sec [Average]
[info]   (min, avg, max) = (1249.044, 1268.486, 1288.219), stdev = 18.689
[info]   CI (99.9%): [1196.523, 1340.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3432071.978 ±(99.9%) 121982.056 B/op [Average]
[info]   (min, avg, max) = (3387365.563, 3432071.978, 3476148.814), stdev = 31678.353
[info]   CI (99.9%): [3310089.921, 3554054.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1199.453 ±(99.9%) 1146.549 MB/sec [Average]
[info]   (min, avg, max) = (666.818, 1199.453, 1333.935), stdev = 297.755
[info]   CI (99.9%): [52.904, 2346.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3244879.783 ±(99.9%) 3097241.665 B/op [Average]
[info]   (min, avg, max) = (1808387.525, 3244879.783, 3654515.311), stdev = 804343.825
[info]   CI (99.9%): [147638.118, 6342121.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.277 ±(99.9%) 8.895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.277, 5.346), stdev = 2.310
[info]   CI (99.9%): [≈ 0, 10.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3497.893 ±(99.9%) 24372.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3497.893, 14645.871), stdev = 6329.426
[info]   CI (99.9%): [≈ 0, 27870.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6064.400 ops/s
[info] # Warmup Iteration   2: 14228.756 ops/s
[info] # Warmup Iteration   3: 14900.115 ops/s
[info] # Warmup Iteration   4: 15065.043 ops/s
[info] # Warmup Iteration   5: 14976.983 ops/s
[info] Iteration   1: 15131.358 ops/s
[info]                  ·gc.alloc.rate:               1175.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          122297.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69424.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 15029.246 ops/s
[info]                  ·gc.alloc.rate:                   1182.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              123802.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139791.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 14833.849 ops/s
[info]                  ·gc.alloc.rate:               1190.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          126347.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141709.011 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 15028.341 ops/s
[info]                  ·gc.alloc.rate:                   1191.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              124731.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139940.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 15166.702 ops/s
[info]                  ·gc.alloc.rate:                   1188.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              123337.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69329.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   15037.899 ±(99.9%) 498.832 ops/s [Average]
[info]   (min, avg, max) = (14833.849, 15037.899, 15166.702), stdev = 129.545
[info]   CI (99.9%): [14539.068, 15536.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1185.668 ±(99.9%) 25.260 MB/sec [Average]
[info]   (min, avg, max) = (1175.859, 1185.668, 1191.028), stdev = 6.560
[info]   CI (99.9%): [1160.408, 1210.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   124103.394 ±(99.9%) 5892.612 B/op [Average]
[info]   (min, avg, max) = (122297.664, 124103.394, 126347.122), stdev = 1530.293
[info]   CI (99.9%): [118210.783, 129996.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1068.439 ±(99.9%) 1408.322 MB/sec [Average]
[info]   (min, avg, max) = (667.499, 1068.439, 1336.249), stdev = 365.737
[info]   CI (99.9%): [≈ 0, 2476.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112038.926 ±(99.9%) 149991.326 B/op [Average]
[info]   (min, avg, max) = (69329.053, 112038.926, 141709.011), stdev = 38952.271
[info]   CI (99.9%): [≈ 0, 262030.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.157 ±(99.9%) 8.472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.157, 5.058), stdev = 2.200
[info]   CI (99.9%): [≈ 0, 9.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   121.078 ±(99.9%) 887.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.078, 529.747), stdev = 230.452
[info]   CI (99.9%): [≈ 0, 1008.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7205.275 ops/s
[info] # Warmup Iteration   2: 17806.999 ops/s
[info] # Warmup Iteration   3: 17940.636 ops/s
[info] # Warmup Iteration   4: 17971.053 ops/s
[info] # Warmup Iteration   5: 18095.895 ops/s
[info] Iteration   1: 17790.081 ops/s
[info]                  ·gc.alloc.rate:               1081.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          95667.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117863.879 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 17833.525 ops/s
[info]                  ·gc.alloc.rate:               1063.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          93803.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58815.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 18055.109 ops/s
[info]                  ·gc.alloc.rate:                   1089.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              94955.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116250.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.629 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 16948.957 ops/s
[info]                  ·gc.alloc.rate:               1059.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          98352.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61979.303 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 17999.399 ops/s
[info]                  ·gc.alloc.rate:                   1090.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              95274.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116722.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 464.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   17725.414 ±(99.9%) 1724.772 ops/s [Average]
[info]   (min, avg, max) = (16948.957, 17725.414, 18055.109), stdev = 447.918
[info]   CI (99.9%): [16000.642, 19450.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1076.653 ±(99.9%) 56.049 MB/sec [Average]
[info]   (min, avg, max) = (1059.100, 1076.653, 1090.059), stdev = 14.556
[info]   CI (99.9%): [1020.603, 1132.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   95610.827 ±(99.9%) 6480.987 B/op [Average]
[info]   (min, avg, max) = (93803.577, 95610.827, 98352.937), stdev = 1683.092
[info]   CI (99.9%): [89129.839, 102091.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1067.107 ±(99.9%) 1406.148 MB/sec [Average]
[info]   (min, avg, max) = (666.749, 1067.107, 1335.446), stdev = 365.172
[info]   CI (99.9%): [≈ 0, 2473.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94326.304 ±(99.9%) 119363.169 B/op [Average]
[info]   (min, avg, max) = (58815.961, 94326.304, 117863.879), stdev = 30998.236
[info]   CI (99.9%): [≈ 0, 213689.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.070 ±(99.9%) 9.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.070, 5.310), stdev = 2.370
[info]   CI (99.9%): [≈ 0, 10.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   93.553 ±(99.9%) 797.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.553, 464.136), stdev = 207.168
[info]   CI (99.9%): [≈ 0, 891.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131315.103 ops/s
[info] # Warmup Iteration   2: 202934.240 ops/s
[info] # Warmup Iteration   3: 219951.740 ops/s
[info] # Warmup Iteration   4: 220296.795 ops/s
[info] # Warmup Iteration   5: 220437.966 ops/s
[info] Iteration   1: 219124.122 ops/s
[info]                  ·gc.alloc.rate:                   814.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              5852.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9626.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 220978.196 ops/s
[info]                  ·gc.alloc.rate:               797.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          5677.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4772.918 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 221406.055 ops/s
[info]                  ·gc.alloc.rate:                   798.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              5675.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4763.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 219380.136 ops/s
[info]                  ·gc.alloc.rate:               788.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          5657.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4807.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 220361.120 ops/s
[info]                  ·gc.alloc.rate:                   795.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              5683.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4786.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   220249.926 ±(99.9%) 3803.837 ops/s [Average]
[info]   (min, avg, max) = (219124.122, 220249.926, 221406.055), stdev = 987.844
[info]   CI (99.9%): [216446.089, 224053.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   798.989 ±(99.9%) 36.989 MB/sec [Average]
[info]   (min, avg, max) = (788.625, 798.989, 814.766), stdev = 9.606
[info]   CI (99.9%): [762.000, 835.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5709.063 ±(99.9%) 310.310 B/op [Average]
[info]   (min, avg, max) = (5657.775, 5709.063, 5852.231), stdev = 80.587
[info]   CI (99.9%): [5398.753, 6019.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.226 ±(99.9%) 1153.818 MB/sec [Average]
[info]   (min, avg, max) = (670.135, 804.226, 1340.244), stdev = 299.643
[info]   CI (99.9%): [≈ 0, 1958.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5751.429 ±(99.9%) 8341.825 B/op [Average]
[info]   (min, avg, max) = (4763.564, 5751.429, 9626.591), stdev = 2166.346
[info]   CI (99.9%): [≈ 0, 14093.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.296), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153449.169 ops/s
[info] # Warmup Iteration   2: 230479.751 ops/s
[info] # Warmup Iteration   3: 240871.914 ops/s
[info] # Warmup Iteration   4: 239140.598 ops/s
[info] # Warmup Iteration   5: 240211.016 ops/s
[info] Iteration   1: 240064.849 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 239409.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 240023.816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 239871.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 239243.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   239722.576 ±(99.9%) 1438.168 ops/s [Average]
[info]   (min, avg, max) = (239243.491, 239722.576, 240064.849), stdev = 373.488
[info]   CI (99.9%): [238284.408, 241160.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7203.505 ops/s
[info] # Warmup Iteration   2: 17033.153 ops/s
[info] # Warmup Iteration   3: 18285.237 ops/s
[info] # Warmup Iteration   4: 18214.406 ops/s
[info] # Warmup Iteration   5: 18228.409 ops/s
[info] Iteration   1: 18193.536 ops/s
[info]                  ·gc.alloc.rate:               1155.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          99976.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57681.188 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 17730.896 ops/s
[info]                  ·gc.alloc.rate:               1152.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          102231.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118433.389 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 18278.469 ops/s
[info]                  ·gc.alloc.rate:                   1175.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              101247.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114947.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 18311.906 ops/s
[info]                  ·gc.alloc.rate:                   1183.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              101740.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114784.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 18429.647 ops/s
[info]                  ·gc.alloc.rate:                   1176.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              100492.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57056.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18188.891 ±(99.9%) 1038.428 ops/s [Average]
[info]   (min, avg, max) = (17730.896, 18188.891, 18429.647), stdev = 269.676
[info]   CI (99.9%): [17150.463, 19227.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1168.853 ±(99.9%) 54.119 MB/sec [Average]
[info]   (min, avg, max) = (1152.042, 1168.853, 1183.793), stdev = 14.054
[info]   CI (99.9%): [1114.734, 1222.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   101137.610 ±(99.9%) 3516.405 B/op [Average]
[info]   (min, avg, max) = (99976.469, 101137.610, 102231.320), stdev = 913.199
[info]   CI (99.9%): [97621.205, 104654.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.029 ±(99.9%) 1408.009 MB/sec [Average]
[info]   (min, avg, max) = (666.806, 1068.029, 1335.573), stdev = 365.655
[info]   CI (99.9%): [≈ 0, 2476.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   92580.531 ±(99.9%) 123904.222 B/op [Average]
[info]   (min, avg, max) = (57056.460, 92580.531, 118433.389), stdev = 32177.533
[info]   CI (99.9%): [≈ 0, 216484.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.216 ±(99.9%) 8.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.216, 5.204), stdev = 2.256
[info]   CI (99.9%): [≈ 0, 9.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   104.393 ±(99.9%) 746.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.393, 447.259), stdev = 193.899
[info]   CI (99.9%): [≈ 0, 851.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 3.209
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 834590.851 ops/s
[info] # Warmup Iteration   2: 1315362.609 ops/s
[info] # Warmup Iteration   3: 1494358.237 ops/s
[info] # Warmup Iteration   4: 1476444.951 ops/s
[info] # Warmup Iteration   5: 1496057.329 ops/s
[info] Iteration   1: 1474013.599 ops/s
[info]                  ·gc.alloc.rate:               75.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1495781.822 ops/s
[info]                  ·gc.alloc.rate:      60.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1496710.176 ops/s
[info]                  ·gc.alloc.rate:      60.873 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1497540.187 ops/s
[info]                  ·gc.alloc.rate:      60.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1501007.345 ops/s
[info]                  ·gc.alloc.rate:      61.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1493010.626 ±(99.9%) 41593.981 ops/s [Average]
[info]   (min, avg, max) = (1474013.599, 1493010.626, 1501007.345), stdev = 10801.825
[info]   CI (99.9%): [1451416.644, 1534604.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   63.823 ±(99.9%) 25.078 MB/sec [Average]
[info]   (min, avg, max) = (60.826, 63.823, 75.472), stdev = 6.513
[info]   CI (99.9%): [38.744, 88.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   67.317 ±(99.9%) 28.559 B/op [Average]
[info]   (min, avg, max) = (64.000, 67.317, 80.585), stdev = 7.417
[info]   CI (99.9%): [38.758, 95.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.320 ±(99.9%) 881.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.320, 511.598), stdev = 228.793
[info]   CI (99.9%): [≈ 0, 983.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   109.251 ±(99.9%) 940.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.251, 546.254), stdev = 244.292
[info]   CI (99.9%): [≈ 0, 1049.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5349.005 ops/s
[info] # Warmup Iteration   2: 69911.601 ops/s
[info] # Warmup Iteration   3: 78282.659 ops/s
[info] # Warmup Iteration   4: 81038.295 ops/s
[info] # Warmup Iteration   5: 81389.188 ops/s
[info] Iteration   1: 81690.434 ops/s
[info]                  ·gc.alloc.rate:                   3444.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              66361.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64768.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.208 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 81430.660 ops/s
[info]                  ·gc.alloc.rate:                   3487.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              67405.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65185.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 81087.351 ops/s
[info]                  ·gc.alloc.rate:                   3475.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              67440.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65634.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 80987.548 ops/s
[info]                  ·gc.alloc.rate:               3471.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          67456.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3389.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65858.008 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 80630.900 ops/s
[info]                  ·gc.alloc.rate:               3457.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          67481.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3395.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66273.894 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   81165.378 ±(99.9%) 1575.281 ops/s [Average]
[info]   (min, avg, max) = (80630.900, 81165.378, 81690.434), stdev = 409.096
[info]   CI (99.9%): [79590.097, 82740.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3467.317 ±(99.9%) 64.580 MB/sec [Average]
[info]   (min, avg, max) = (3444.538, 3467.317, 3487.692), stdev = 16.771
[info]   CI (99.9%): [3402.737, 3531.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67229.278 ±(99.9%) 1871.308 B/op [Average]
[info]   (min, avg, max) = (66361.369, 67229.278, 67481.898), stdev = 485.973
[info]   CI (99.9%): [65357.969, 69100.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3380.361 ±(99.9%) 51.110 MB/sec [Average]
[info]   (min, avg, max) = (3361.855, 3380.361, 3395.255), stdev = 13.273
[info]   CI (99.9%): [3329.251, 3431.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65544.174 ±(99.9%) 2252.925 B/op [Average]
[info]   (min, avg, max) = (64768.423, 65544.174, 66273.894), stdev = 585.077
[info]   CI (99.9%): [63291.249, 67797.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.884 ±(99.9%) 5.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.884, 3.208), stdev = 1.342
[info]   CI (99.9%): [≈ 0, 6.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542117.302 ops/s
[info] # Warmup Iteration   2: 1807032.961 ops/s
[info] # Warmup Iteration   3: 1877512.722 ops/s
[info] # Warmup Iteration   4: 1880281.780 ops/s
[info] # Warmup Iteration   5: 1882162.557 ops/s
[info] Iteration   1: 1870590.205 ops/s
[info]                  ·gc.alloc.rate:               1013.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          852.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1123.795 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1883313.370 ops/s
[info]                  ·gc.alloc.rate:               1004.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          839.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 558.669 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1871030.695 ops/s
[info]                  ·gc.alloc.rate:                   1012.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              851.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1866478.340 ops/s
[info]                  ·gc.alloc.rate:               1002.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          845.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 563.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1870152.911 ops/s
[info]                  ·gc.alloc.rate:               1019.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          857.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1126.803 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1872313.104 ±(99.9%) 24680.924 ops/s [Average]
[info]   (min, avg, max) = (1866478.340, 1872313.104, 1883313.370), stdev = 6409.557
[info]   CI (99.9%): [1847632.180, 1896994.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1010.420 ±(99.9%) 27.017 MB/sec [Average]
[info]   (min, avg, max) = (1002.350, 1010.420, 1019.385), stdev = 7.016
[info]   CI (99.9%): [983.403, 1037.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   849.322 ±(99.9%) 27.624 B/op [Average]
[info]   (min, avg, max) = (839.317, 849.322, 857.802), stdev = 7.174
[info]   CI (99.9%): [821.697, 876.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.919 ±(99.9%) 1410.511 MB/sec [Average]
[info]   (min, avg, max) = (668.547, 1069.919, 1339.056), stdev = 366.305
[info]   CI (99.9%): [≈ 0, 2480.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   899.626 ±(99.9%) 1189.276 B/op [Average]
[info]   (min, avg, max) = (558.669, 899.626, 1126.803), stdev = 308.851
[info]   CI (99.9%): [≈ 0, 2088.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1186691.028 ops/s
[info] # Warmup Iteration   2: 1968910.221 ops/s
[info] # Warmup Iteration   3: 2257146.670 ops/s
[info] # Warmup Iteration   4: 2252679.575 ops/s
[info] # Warmup Iteration   5: 2257840.853 ops/s
[info] Iteration   1: 2246654.379 ops/s
[info]                  ·gc.alloc.rate:                   662.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              463.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2233018.831 ops/s
[info]                  ·gc.alloc.rate:               639.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          450.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 472.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2246372.375 ops/s
[info]                  ·gc.alloc.rate:               653.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2253067.140 ops/s
[info]                  ·gc.alloc.rate:                   647.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2253957.089 ops/s
[info]                  ·gc.alloc.rate:                   647.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              451.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2246613.963 ±(99.9%) 32242.827 ops/s [Average]
[info]   (min, avg, max) = (2233018.831, 2246613.963, 2253957.089), stdev = 8373.360
[info]   CI (99.9%): [2214371.136, 2278856.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   649.988 ±(99.9%) 32.931 MB/sec [Average]
[info]   (min, avg, max) = (639.366, 649.988, 662.346), stdev = 8.552
[info]   CI (99.9%): [617.057, 682.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   455.313 ±(99.9%) 21.188 B/op [Average]
[info]   (min, avg, max) = (450.639, 455.313, 463.798), stdev = 5.502
[info]   CI (99.9%): [434.125, 476.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.127 ±(99.9%) 0.897 MB/sec [Average]
[info]   (min, avg, max) = (670.803, 671.127, 671.459), stdev = 0.233
[info]   CI (99.9%): [670.231, 672.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   470.129 ±(99.9%) 6.217 B/op [Average]
[info]   (min, avg, max) = (468.824, 470.129, 472.796), stdev = 1.615
[info]   CI (99.9%): [463.912, 476.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.015), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1241831.658 ops/s
[info] # Warmup Iteration   2: 2183777.401 ops/s
[info] # Warmup Iteration   3: 2407955.056 ops/s
[info] # Warmup Iteration   4: 2400081.434 ops/s
[info] # Warmup Iteration   5: 2401366.219 ops/s
[info] Iteration   1: 2401975.626 ops/s
[info]                  ·gc.alloc.rate:      24.419 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2401909.987 ops/s
[info]                  ·gc.alloc.rate:      24.419 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2401597.197 ops/s
[info]                  ·gc.alloc.rate:      24.415 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2401077.514 ops/s
[info]                  ·gc.alloc.rate:      24.413 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2401744.041 ops/s
[info]                  ·gc.alloc.rate:      24.417 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2401660.873 ±(99.9%) 1378.196 ops/s [Average]
[info]   (min, avg, max) = (2401077.514, 2401660.873, 2401975.626), stdev = 357.913
[info]   CI (99.9%): [2400282.677, 2403039.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.417 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (24.413, 24.417, 24.419), stdev = 0.002
[info]   CI (99.9%): [24.408, 24.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11150.142 ops/s
[info] # Warmup Iteration   2: 46426.047 ops/s
[info] # Warmup Iteration   3: 51896.881 ops/s
[info] # Warmup Iteration   4: 52606.726 ops/s
[info] # Warmup Iteration   5: 52385.827 ops/s
[info] Iteration   1: 52845.690 ops/s
[info]                  ·gc.alloc.rate:                   2256.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              67184.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59715.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.954 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 52613.396 ops/s
[info]                  ·gc.alloc.rate:                   2257.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              67502.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59821.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 52738.941 ops/s
[info]                  ·gc.alloc.rate:               2290.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          68335.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2666.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79538.782 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 52849.170 ops/s
[info]                  ·gc.alloc.rate:               2282.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          67966.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59638.367 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 52865.909 ops/s
[info]                  ·gc.alloc.rate:               2283.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          67972.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59762.526 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   52782.621 ±(99.9%) 412.434 ops/s [Average]
[info]   (min, avg, max) = (52613.396, 52782.621, 52865.909), stdev = 107.108
[info]   CI (99.9%): [52370.187, 53195.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2273.916 ±(99.9%) 62.013 MB/sec [Average]
[info]   (min, avg, max) = (2256.163, 2273.916, 2290.630), stdev = 16.105
[info]   CI (99.9%): [2211.903, 2335.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67792.179 ±(99.9%) 1734.498 B/op [Average]
[info]   (min, avg, max) = (67184.005, 67792.179, 68335.172), stdev = 450.444
[info]   CI (99.9%): [66057.680, 69526.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2136.411 ±(99.9%) 1140.418 MB/sec [Average]
[info]   (min, avg, max) = (2000.273, 2136.411, 2666.181), stdev = 296.163
[info]   CI (99.9%): [995.993, 3276.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63695.443 ±(99.9%) 34104.959 B/op [Average]
[info]   (min, avg, max) = (59638.367, 63695.443, 79538.782), stdev = 8856.950
[info]   CI (99.9%): [29590.484, 97800.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 7.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 4.331), stdev = 1.934
[info]   CI (99.9%): [≈ 0, 8.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25.915 ±(99.9%) 221.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.915, 128.954), stdev = 57.601
[info]   CI (99.9%): [≈ 0, 247.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94949.468 ops/s
[info] # Warmup Iteration   2: 673640.176 ops/s
[info] # Warmup Iteration   3: 867812.592 ops/s
[info] # Warmup Iteration   4: 863484.028 ops/s
[info] # Warmup Iteration   5: 873312.224 ops/s
[info] Iteration   1: 866114.181 ops/s
[info]                  ·gc.alloc.rate:                   2796.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5081.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4866.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 876973.836 ops/s
[info]                  ·gc.alloc.rate:                   2820.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              5061.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4801.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 878996.393 ops/s
[info]                  ·gc.alloc.rate:               2853.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          5108.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4798.284 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 881430.365 ops/s
[info]                  ·gc.alloc.rate:               2862.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          5110.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4797.034 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 878962.579 ops/s
[info]                  ·gc.alloc.rate:               2881.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          5160.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6033.744 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   876495.471 ±(99.9%) 23159.504 ops/s [Average]
[info]   (min, avg, max) = (866114.181, 876495.471, 881430.365), stdev = 6014.450
[info]   CI (99.9%): [853335.967, 899654.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2842.747 ±(99.9%) 131.498 MB/sec [Average]
[info]   (min, avg, max) = (2796.418, 2842.747, 2881.844), stdev = 34.150
[info]   CI (99.9%): [2711.249, 2974.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5104.392 ±(99.9%) 143.558 B/op [Average]
[info]   (min, avg, max) = (5061.329, 5104.392, 5160.273), stdev = 37.282
[info]   CI (99.9%): [4960.834, 5247.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2817.859 ±(99.9%) 1187.877 MB/sec [Average]
[info]   (min, avg, max) = (2675.251, 2817.859, 3369.649), stdev = 308.488
[info]   CI (99.9%): [1629.982, 4005.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5059.265 ±(99.9%) 2100.648 B/op [Average]
[info]   (min, avg, max) = (4797.034, 5059.265, 6033.744), stdev = 545.532
[info]   CI (99.9%): [2958.616, 7159.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.038), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.617 ops/s
[info] # Warmup Iteration   2: 4623705.900 ops/s
[info] # Warmup Iteration   3: 5090925.462 ops/s
[info] # Warmup Iteration   4: 5202842.721 ops/s
[info] # Warmup Iteration   5: 5199773.416 ops/s
[info] Iteration   1: 5238088.764 ops/s
[info]                  ·gc.alloc.rate:      319.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5201525.214 ops/s
[info]                  ·gc.alloc.rate:               333.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5228152.779 ops/s
[info]                  ·gc.alloc.rate:      318.902 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5221922.383 ops/s
[info]                  ·gc.alloc.rate:                   336.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5045456.201 ops/s
[info]                  ·gc.alloc.rate:      307.870 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5187029.068 ±(99.9%) 309065.516 ops/s [Average]
[info]   (min, avg, max) = (5045456.201, 5187029.068, 5238088.764), stdev = 80263.333
[info]   CI (99.9%): [4877963.552, 5496094.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   323.388 ±(99.9%) 45.569 MB/sec [Average]
[info]   (min, avg, max) = (307.870, 323.388, 336.634), stdev = 11.834
[info]   CI (99.9%): [277.819, 368.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.093 ±(99.9%) 11.004 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.093, 101.418), stdev = 2.858
[info]   CI (99.9%): [87.089, 109.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.603 ±(99.9%) 1260.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.603, 666.415), stdev = 327.224
[info]   CI (99.9%): [≈ 0, 1495.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   71.114 ±(99.9%) 380.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.114, 200.771), stdev = 98.724
[info]   CI (99.9%): [≈ 0, 451.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37174.515 ops/s
[info] # Warmup Iteration   2: 848320.149 ops/s
[info] # Warmup Iteration   3: 1000770.741 ops/s
[info] # Warmup Iteration   4: 1018255.278 ops/s
[info] # Warmup Iteration   5: 1012640.387 ops/s
[info] Iteration   1: 996245.532 ops/s
[info]                  ·gc.alloc.rate:                   1202.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              1899.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2106.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1012532.958 ops/s
[info]                  ·gc.alloc.rate:                   1226.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1905.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2074.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1018841.438 ops/s
[info]                  ·gc.alloc.rate:               1206.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          1862.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1031.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 992786.579 ops/s
[info]                  ·gc.alloc.rate:                   1188.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1883.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2118.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1017386.543 ops/s
[info]                  ·gc.alloc.rate:                   1241.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1919.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1007558.610 ±(99.9%) 46957.069 ops/s [Average]
[info]   (min, avg, max) = (992786.579, 1007558.610, 1018841.438), stdev = 12194.602
[info]   CI (99.9%): [960601.541, 1054515.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1212.878 ±(99.9%) 79.914 MB/sec [Average]
[info]   (min, avg, max) = (1188.657, 1212.878, 1241.159), stdev = 20.753
[info]   CI (99.9%): [1132.963, 1292.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1894.128 ±(99.9%) 84.674 B/op [Average]
[info]   (min, avg, max) = (1862.307, 1894.128, 1919.451), stdev = 21.989
[info]   CI (99.9%): [1809.454, 1978.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.166 ±(99.9%) 1150.387 MB/sec [Average]
[info]   (min, avg, max) = (667.751, 1202.166, 1338.023), stdev = 298.752
[info]   CI (99.9%): [51.779, 2352.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1879.991 ±(99.9%) 1829.089 B/op [Average]
[info]   (min, avg, max) = (1031.088, 1879.991, 2118.374), stdev = 475.009
[info]   CI (99.9%): [50.902, 3709.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.864 ±(99.9%) 7.374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.864, 4.290), stdev = 1.915
[info]   CI (99.9%): [≈ 0, 8.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.337 ±(99.9%) 11.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.337, 6.634), stdev = 2.961
[info]   CI (99.9%): [≈ 0, 12.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2148884.726 ops/s
[info] # Warmup Iteration   2: 8097777.166 ops/s
[info] # Warmup Iteration   3: 9130199.235 ops/s
[info] # Warmup Iteration   4: 9132422.815 ops/s
[info] # Warmup Iteration   5: 9147400.816 ops/s
[info] Iteration   1: 9121060.534 ops/s
[info]                  ·gc.alloc.rate:               433.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88.278 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 9096381.787 ops/s
[info]                  ·gc.alloc.rate:               432.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9120722.988 ops/s
[info]                  ·gc.alloc.rate:                   439.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9145553.007 ops/s
[info]                  ·gc.alloc.rate:      418.368 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9119113.014 ops/s
[info]                  ·gc.alloc.rate:               442.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          76.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.944 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9120566.266 ±(99.9%) 67016.889 ops/s [Average]
[info]   (min, avg, max) = (9096381.787, 9120566.266, 9145553.007), stdev = 17404.073
[info]   CI (99.9%): [9053549.377, 9187583.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   433.033 ±(99.9%) 35.462 MB/sec [Average]
[info]   (min, avg, max) = (418.368, 433.033, 442.243), stdev = 9.209
[info]   CI (99.9%): [397.571, 468.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.721 ±(99.9%) 6.424 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.721, 76.326), stdev = 1.668
[info]   CI (99.9%): [68.297, 81.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.405 ±(99.9%) 1064.632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.405, 671.801), stdev = 276.481
[info]   CI (99.9%): [≈ 0, 1538.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81.733 ±(99.9%) 183.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.733, 115.944), stdev = 47.719
[info]   CI (99.9%): [≈ 0, 265.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3449.756 ops/s
[info] # Warmup Iteration   2: 156697.565 ops/s
[info] # Warmup Iteration   3: 493668.910 ops/s
[info] # Warmup Iteration   4: 517844.404 ops/s
[info] # Warmup Iteration   5: 519320.781 ops/s
[info] Iteration   1: 517928.821 ops/s
[info]                  ·gc.alloc.rate:                   2211.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              6719.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6106.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 517998.473 ops/s
[info]                  ·gc.alloc.rate:                   2234.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              6789.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6117.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 517470.490 ops/s
[info]                  ·gc.alloc.rate:               2228.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          6776.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8173.306 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 519772.097 ops/s
[info]                  ·gc.alloc.rate:               2252.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          6819.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6113.869 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 521819.049 ops/s
[info]                  ·gc.alloc.rate:               2264.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          6825.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6097.634 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   518997.786 ±(99.9%) 6950.660 ops/s [Average]
[info]   (min, avg, max) = (517470.490, 518997.786, 521819.049), stdev = 1805.064
[info]   CI (99.9%): [512047.126, 525948.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2238.213 ±(99.9%) 79.274 MB/sec [Average]
[info]   (min, avg, max) = (2211.227, 2238.213, 2264.037), stdev = 20.587
[info]   CI (99.9%): [2158.939, 2317.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6785.979 ±(99.9%) 163.942 B/op [Average]
[info]   (min, avg, max) = (6719.410, 6785.979, 6825.437), stdev = 42.575
[info]   CI (99.9%): [6622.037, 6949.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2150.682 ±(99.9%) 1157.773 MB/sec [Average]
[info]   (min, avg, max) = (2009.513, 2150.682, 2688.461), stdev = 300.670
[info]   CI (99.9%): [992.909, 3308.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6521.811 ±(99.9%) 3555.090 B/op [Average]
[info]   (min, avg, max) = (6097.634, 6521.811, 8173.306), stdev = 923.246
[info]   CI (99.9%): [2966.721, 10076.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.353), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.835 ±(99.9%) 7.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.835, 4.111), stdev = 1.832
[info]   CI (99.9%): [≈ 0, 7.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 844.447 ops/s
[info] # Warmup Iteration   2: 3601.383 ops/s
[info] # Warmup Iteration   3: 3959.808 ops/s
[info] # Warmup Iteration   4: 4378.409 ops/s
[info] # Warmup Iteration   5: 4407.994 ops/s
[info] Iteration   1: 4417.740 ops/s
[info]                  ·gc.alloc.rate:                   2207.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              786358.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714474.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1480.836 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 4436.529 ops/s
[info]                  ·gc.alloc.rate:                   2230.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              790626.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943647.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.897 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4479.468 ops/s
[info]                  ·gc.alloc.rate:                   2248.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              790000.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702014.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4506.405 ops/s
[info]                  ·gc.alloc.rate:                   2261.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              789934.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     698275.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4510.739 ops/s
[info]                  ·gc.alloc.rate:                   2277.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              794671.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699283.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4470.176 ±(99.9%) 160.228 ops/s [Average]
[info]   (min, avg, max) = (4417.740, 4470.176, 4510.739), stdev = 41.611
[info]   CI (99.9%): [4309.948, 4630.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2245.232 ±(99.9%) 105.420 MB/sec [Average]
[info]   (min, avg, max) = (2207.421, 2245.232, 2277.684), stdev = 27.377
[info]   CI (99.9%): [2139.811, 2350.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   790318.436 ±(99.9%) 11386.347 B/op [Average]
[info]   (min, avg, max) = (786358.713, 790318.436, 794671.934), stdev = 2956.998
[info]   CI (99.9%): [778932.088, 801704.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2133.943 ±(99.9%) 1136.743 MB/sec [Average]
[info]   (min, avg, max) = (1998.278, 2133.943, 2661.999), stdev = 295.209
[info]   CI (99.9%): [997.200, 3270.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   751539.034 ±(99.9%) 414279.356 B/op [Average]
[info]   (min, avg, max) = (698275.322, 751539.034, 943647.662), stdev = 107587.033
[info]   CI (99.9%): [337259.678, 1165818.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.010 ±(99.9%) 6.791 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 1.010, 4.157), stdev = 1.764
[info]   CI (99.9%): [≈ 0, 7.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   359.137 ±(99.9%) 2420.797 B/op [Average]
[info]   (min, avg, max) = (14.538, 359.137, 1480.836), stdev = 628.673
[info]   CI (99.9%): [≈ 0, 2779.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 385.207 ops/s
[info] # Warmup Iteration   2: 5397.329 ops/s
[info] # Warmup Iteration   3: 6586.768 ops/s
[info] # Warmup Iteration   4: 6711.788 ops/s
[info] # Warmup Iteration   5: 6680.872 ops/s
[info] Iteration   1: 6750.192 ops/s
[info]                  ·gc.alloc.rate:                   2309.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              538450.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623834.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.858 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6851.068 ops/s
[info]                  ·gc.alloc.rate:                   2314.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              531434.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462242.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6859.547 ops/s
[info]                  ·gc.alloc.rate:               2316.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          531551.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462544.128 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6846.806 ops/s
[info]                  ·gc.alloc.rate:               2366.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          543974.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619223.327 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 6863.685 ops/s
[info]                  ·gc.alloc.rate:               2345.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          537855.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464260.270 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6834.260 ±(99.9%) 182.780 ops/s [Average]
[info]   (min, avg, max) = (6750.192, 6834.260, 6863.685), stdev = 47.468
[info]   CI (99.9%): [6651.479, 7017.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2330.495 ±(99.9%) 94.587 MB/sec [Average]
[info]   (min, avg, max) = (2309.420, 2330.495, 2366.398), stdev = 24.564
[info]   CI (99.9%): [2235.908, 2425.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   536652.991 ±(99.9%) 20333.518 B/op [Average]
[info]   (min, avg, max) = (531434.254, 536652.991, 543974.155), stdev = 5280.550
[info]   CI (99.9%): [516319.473, 556986.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2284.601 ±(99.9%) 1406.685 MB/sec [Average]
[info]   (min, avg, max) = (2012.840, 2284.601, 2693.747), stdev = 365.312
[info]   CI (99.9%): [877.916, 3691.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   526420.930 ±(99.9%) 334389.831 B/op [Average]
[info]   (min, avg, max) = (462242.536, 526420.930, 623834.389), stdev = 86839.977
[info]   CI (99.9%): [192031.099, 860810.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.196 ±(99.9%) 1.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.729), stdev = 0.317
[info]   CI (99.9%): [≈ 0, 1.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.447 ±(99.9%) 284.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.447, 169.858), stdev = 73.852
[info]   CI (99.9%): [≈ 0, 329.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27020.351 ops/s
[info] # Warmup Iteration   2: 44312.990 ops/s
[info] # Warmup Iteration   3: 45117.166 ops/s
[info] # Warmup Iteration   4: 46286.660 ops/s
[info] # Warmup Iteration   5: 46493.524 ops/s
[info] Iteration   1: 46302.096 ops/s
[info]                  ·gc.alloc.rate:               762.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          25913.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22802.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 46541.468 ops/s
[info]                  ·gc.alloc.rate:                   772.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              26131.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22706.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 46388.533 ops/s
[info]                  ·gc.alloc.rate:               786.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          26671.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45576.012 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 46499.781 ops/s
[info]                  ·gc.alloc.rate:                   765.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              25923.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22738.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46006.988 ops/s
[info]                  ·gc.alloc.rate:               757.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          25918.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22993.289 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   46347.773 ±(99.9%) 817.992 ops/s [Average]
[info]   (min, avg, max) = (46006.988, 46347.773, 46541.468), stdev = 212.430
[info]   CI (99.9%): [45529.781, 47165.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   769.041 ±(99.9%) 42.585 MB/sec [Average]
[info]   (min, avg, max) = (757.793, 769.041, 786.161), stdev = 11.059
[info]   CI (99.9%): [726.456, 811.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26111.881 ±(99.9%) 1256.766 B/op [Average]
[info]   (min, avg, max) = (25913.860, 26111.881, 26671.885), stdev = 326.378
[info]   CI (99.9%): [24855.115, 27368.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.988 ±(99.9%) 1156.748 MB/sec [Average]
[info]   (min, avg, max) = (670.842, 805.988, 1343.366), stdev = 300.404
[info]   CI (99.9%): [≈ 0, 1962.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27363.414 ±(99.9%) 39206.324 B/op [Average]
[info]   (min, avg, max) = (22706.982, 27363.414, 45576.012), stdev = 10181.758
[info]   CI (99.9%): [≈ 0, 66569.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.423 ±(99.9%) 2.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.423, 1.408), stdev = 0.630
[info]   CI (99.9%): [≈ 0, 2.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1558.866 ops/s
[info] # Warmup Iteration   2: 4049.513 ops/s
[info] # Warmup Iteration   3: 4607.647 ops/s
[info] # Warmup Iteration   4: 4764.572 ops/s
[info] # Warmup Iteration   5: 4811.446 ops/s
[info] Iteration   1: 4775.344 ops/s
[info]                  ·gc.alloc.rate:               998.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          329097.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 440546.793 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 4801.638 ops/s
[info]                  ·gc.alloc.rate:                   978.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              320561.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219299.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.645 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4778.766 ops/s
[info]                  ·gc.alloc.rate:                   985.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              324703.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440818.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4806.348 ops/s
[info]                  ·gc.alloc.rate:                   972.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              318466.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219180.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.446 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4806.497 ops/s
[info]                  ·gc.alloc.rate:               971.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          318200.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 219289.344 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4793.719 ±(99.9%) 59.240 ops/s [Average]
[info]   (min, avg, max) = (4775.344, 4793.719, 4806.497), stdev = 15.384
[info]   CI (99.9%): [4734.479, 4852.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   981.396 ±(99.9%) 42.878 MB/sec [Average]
[info]   (min, avg, max) = (971.803, 981.396, 998.571), stdev = 11.135
[info]   CI (99.9%): [938.518, 1024.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   322205.787 ±(99.9%) 17902.263 B/op [Average]
[info]   (min, avg, max) = (318200.075, 322205.787, 329097.206), stdev = 4649.161
[info]   CI (99.9%): [304303.524, 340108.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   936.695 ±(99.9%) 1409.380 MB/sec [Average]
[info]   (min, avg, max) = (669.067, 936.695, 1338.539), stdev = 366.011
[info]   CI (99.9%): [≈ 0, 2346.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   307826.893 ±(99.9%) 467007.257 B/op [Average]
[info]   (min, avg, max) = (219180.300, 307826.893, 440818.718), stdev = 121280.302
[info]   CI (99.9%): [≈ 0, 774834.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.931 ±(99.9%) 39.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.931, 20.566), stdev = 10.365
[info]   CI (99.9%): [≈ 0, 50.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 834.586 ops/s
[info] # Warmup Iteration   2: 4991.251 ops/s
[info] # Warmup Iteration   3: 5153.825 ops/s
[info] # Warmup Iteration   4: 5027.375 ops/s
[info] # Warmup Iteration   5: 5267.041 ops/s
[info] Iteration   1: 5311.269 ops/s
[info]                  ·gc.alloc.rate:                   397.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              117649.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151572.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5340.557 ops/s
[info]                  ·gc.alloc.rate:      386.408 MB/sec
[info]                  ·gc.alloc.rate.norm: 113845.393 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5324.845 ops/s
[info]                  ·gc.alloc.rate:               400.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          118441.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195500.557 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5068.161 ops/s
[info]                  ·gc.alloc.rate:      366.899 MB/sec
[info]                  ·gc.alloc.rate.norm: 113885.469 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5323.240 ops/s
[info]                  ·gc.alloc.rate:               398.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          117857.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195573.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5273.615 ±(99.9%) 444.068 ops/s [Average]
[info]   (min, avg, max) = (5068.161, 5273.615, 5340.557), stdev = 115.323
[info]   CI (99.9%): [4829.547, 5717.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   389.990 ±(99.9%) 54.124 MB/sec [Average]
[info]   (min, avg, max) = (366.899, 389.990, 400.874), stdev = 14.056
[info]   CI (99.9%): [335.866, 444.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   116335.645 ±(99.9%) 8754.992 B/op [Average]
[info]   (min, avg, max) = (113845.393, 116335.645, 118441.080), stdev = 2273.644
[info]   CI (99.9%): [107580.653, 125090.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.967 ±(99.9%) 1311.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.967, 661.689), stdev = 340.540
[info]   CI (99.9%): [≈ 0, 1678.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   108529.474 ±(99.9%) 387706.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108529.474, 195573.998), stdev = 100686.073
[info]   CI (99.9%): [≈ 0, 496235.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.234 ±(99.9%) 10.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.234, 6.168), stdev = 2.758
[info]   CI (99.9%): [≈ 0, 11.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3844.114 ops/s
[info] # Warmup Iteration   2: 6071.282 ops/s
[info] # Warmup Iteration   3: 6564.595 ops/s
[info] # Warmup Iteration   4: 6596.725 ops/s
[info] # Warmup Iteration   5: 6298.290 ops/s
[info] Iteration   1: 6571.723 ops/s
[info]                  ·gc.alloc.rate:               334.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          80023.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122517.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6590.665 ops/s
[info]                  ·gc.alloc.rate:      322.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6556.720 ops/s
[info]                  ·gc.alloc.rate:               331.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          79499.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122797.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6592.775 ops/s
[info]                  ·gc.alloc.rate:      322.208 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6568.422 ops/s
[info]                  ·gc.alloc.rate:                   334.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              80233.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160717.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6576.061 ±(99.9%) 59.151 ops/s [Average]
[info]   (min, avg, max) = (6556.720, 6576.061, 6592.775), stdev = 15.361
[info]   CI (99.9%): [6516.910, 6635.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   328.914 ±(99.9%) 24.340 MB/sec [Average]
[info]   (min, avg, max) = (322.102, 328.914, 334.880), stdev = 6.321
[info]   CI (99.9%): [304.575, 353.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   78713.132 ±(99.9%) 6441.851 B/op [Average]
[info]   (min, avg, max) = (76904.066, 78713.132, 80233.892), stdev = 1672.928
[info]   CI (99.9%): [72271.281, 85154.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.804 ±(99.9%) 1216.954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.804, 670.803), stdev = 316.039
[info]   CI (99.9%): [≈ 0, 1555.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81206.538 ±(99.9%) 291655.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81206.538, 160717.813), stdev = 75742.063
[info]   CI (99.9%): [≈ 0, 372862.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.493 ±(99.9%) 21.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.493, 12.466), stdev = 5.575
[info]   CI (99.9%): [≈ 0, 23.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3531.598 ops/s
[info] # Warmup Iteration   2: 6341.242 ops/s
[info] # Warmup Iteration   3: 6690.139 ops/s
[info] # Warmup Iteration   4: 6686.757 ops/s
[info] # Warmup Iteration   5: 6645.715 ops/s
[info] Iteration   1: 6703.871 ops/s
[info]                  ·gc.alloc.rate:      278.518 MB/sec
[info]                  ·gc.alloc.rate.norm: 65384.087 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6672.534 ops/s
[info]                  ·gc.alloc.rate:               287.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          67715.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120663.226 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6706.053 ops/s
[info]                  ·gc.alloc.rate:      278.619 MB/sec
[info]                  ·gc.alloc.rate.norm: 65384.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6667.585 ops/s
[info]                  ·gc.alloc.rate:               294.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          69465.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120753.691 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6689.858 ops/s
[info]                  ·gc.alloc.rate:      279.832 MB/sec
[info]                  ·gc.alloc.rate.norm: 65833.155 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6687.980 ±(99.9%) 67.722 ops/s [Average]
[info]   (min, avg, max) = (6667.585, 6687.980, 6706.053), stdev = 17.587
[info]   CI (99.9%): [6620.258, 6755.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   283.676 ±(99.9%) 26.648 MB/sec [Average]
[info]   (min, avg, max) = (278.518, 283.676, 294.297), stdev = 6.920
[info]   CI (99.9%): [257.028, 310.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   66756.462 ±(99.9%) 6908.963 B/op [Average]
[info]   (min, avg, max) = (65384.064, 66756.462, 69465.242), stdev = 1794.236
[info]   CI (99.9%): [59847.499, 73665.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.610), stdev = 280.213
[info]   CI (99.9%): [≈ 0, 1283.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   48283.383 ±(99.9%) 254584.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48283.383, 120753.691), stdev = 66114.753
[info]   CI (99.9%): [≈ 0, 302867.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2503.724 ops/s
[info] # Warmup Iteration   2: 7047.956 ops/s
[info] # Warmup Iteration   3: 8084.014 ops/s
[info] # Warmup Iteration   4: 8119.934 ops/s
[info] # Warmup Iteration   5: 7904.703 ops/s
[info] Iteration   1: 8103.061 ops/s
[info]                  ·gc.alloc.rate:                   1711.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              332413.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260365.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8095.983 ops/s
[info]                  ·gc.alloc.rate:                   1722.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              334879.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391111.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.772 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8153.280 ops/s
[info]                  ·gc.alloc.rate:                   1734.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              334897.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258447.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7974.250 ops/s
[info]                  ·gc.alloc.rate:                   1721.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              339797.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     395582.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7945.694 ops/s
[info]                  ·gc.alloc.rate:               1678.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          332456.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 264683.963 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8054.454 ±(99.9%) 345.031 ops/s [Average]
[info]   (min, avg, max) = (7945.694, 8054.454, 8153.280), stdev = 89.604
[info]   CI (99.9%): [7709.422, 8399.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1713.896 ±(99.9%) 81.913 MB/sec [Average]
[info]   (min, avg, max) = (1678.909, 1713.896, 1734.955), stdev = 21.273
[info]   CI (99.9%): [1631.983, 1795.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334888.984 ±(99.9%) 11574.114 B/op [Average]
[info]   (min, avg, max) = (332413.559, 334888.984, 339797.718), stdev = 3005.761
[info]   CI (99.9%): [323314.870, 346463.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.430 ±(99.9%) 1411.898 MB/sec [Average]
[info]   (min, avg, max) = (1336.655, 1606.430, 2011.927), stdev = 366.665
[info]   CI (99.9%): [194.532, 3018.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   314038.125 ±(99.9%) 278984.358 B/op [Average]
[info]   (min, avg, max) = (258447.303, 314038.125, 395582.395), stdev = 72451.352
[info]   CI (99.9%): [35053.768, 593022.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.839 ±(99.9%) 6.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.839, 3.816), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 7.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   163.127 ±(99.9%) 1247.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 163.127, 741.772), stdev = 323.981
[info]   CI (99.9%): [≈ 0, 1410.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.705 ops/s
[info] # Warmup Iteration   2: 16826.974 ops/s
[info] # Warmup Iteration   3: 18561.120 ops/s
[info] # Warmup Iteration   4: 18510.180 ops/s
[info] # Warmup Iteration   5: 19072.661 ops/s
[info] Iteration   1: 19183.423 ops/s
[info]                  ·gc.alloc.rate:      473.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18945.456 ops/s
[info]                  ·gc.alloc.rate:               495.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          41121.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55170.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 19087.007 ops/s
[info]                  ·gc.alloc.rate:               494.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          40734.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54760.373 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 18922.644 ops/s
[info]                  ·gc.alloc.rate:                   489.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              40711.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55293.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.731 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19194.353 ops/s
[info]                  ·gc.alloc.rate:      473.811 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   19066.577 ±(99.9%) 493.814 ops/s [Average]
[info]   (min, avg, max) = (18922.644, 19066.577, 19194.353), stdev = 128.242
[info]   CI (99.9%): [18572.762, 19560.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   485.139 ±(99.9%) 41.466 MB/sec [Average]
[info]   (min, avg, max) = (473.324, 485.139, 495.022), stdev = 10.769
[info]   CI (99.9%): [443.673, 526.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   40046.337 ±(99.9%) 4314.195 B/op [Average]
[info]   (min, avg, max) = (38832.023, 40046.337, 41121.158), stdev = 1120.383
[info]   CI (99.9%): [35732.143, 44360.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.623 ±(99.9%) 1401.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.623, 664.818), stdev = 363.892
[info]   CI (99.9%): [≈ 0, 1799.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   33044.859 ±(99.9%) 116159.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33044.859, 55293.187), stdev = 30166.337
[info]   CI (99.9%): [≈ 0, 149204.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.346 ±(99.9%) 2.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.731), stdev = 0.774
[info]   CI (99.9%): [≈ 0, 3.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2261.226 ops/s
[info] # Warmup Iteration   2: 12923.454 ops/s
[info] # Warmup Iteration   3: 15631.293 ops/s
[info] # Warmup Iteration   4: 15512.568 ops/s
[info] # Warmup Iteration   5: 15588.295 ops/s
[info] Iteration   1: 15600.027 ops/s
[info]                  ·gc.alloc.rate:               428.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          43230.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51612.278 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 15663.138 ops/s
[info]                  ·gc.alloc.rate:      416.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15562.675 ops/s
[info]                  ·gc.alloc.rate:               437.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          44210.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66794.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 15614.579 ops/s
[info]                  ·gc.alloc.rate:               439.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          44298.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66572.524 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 15650.200 ops/s
[info]                  ·gc.alloc.rate:      415.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15618.124 ±(99.9%) 154.862 ops/s [Average]
[info]   (min, avg, max) = (15562.675, 15618.124, 15663.138), stdev = 40.217
[info]   CI (99.9%): [15463.261, 15772.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   427.514 ±(99.9%) 42.886 MB/sec [Average]
[info]   (min, avg, max) = (415.997, 427.514, 439.513), stdev = 11.137
[info]   CI (99.9%): [384.628, 470.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43080.630 ±(99.9%) 4676.683 B/op [Average]
[info]   (min, avg, max) = (41832.028, 43080.630, 44298.175), stdev = 1214.520
[info]   CI (99.9%): [38403.947, 47757.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.530 ±(99.9%) 1309.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.530, 660.528), stdev = 340.072
[info]   CI (99.9%): [≈ 0, 1676.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   36995.947 ±(99.9%) 132186.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36995.947, 66794.931), stdev = 34328.526
[info]   CI (99.9%): [≈ 0, 169182.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13678.281 ops/s
[info] # Warmup Iteration   2: 22112.000 ops/s
[info] # Warmup Iteration   3: 22646.927 ops/s
[info] # Warmup Iteration   4: 23032.523 ops/s
[info] # Warmup Iteration   5: 22906.641 ops/s
[info] Iteration   1: 22012.006 ops/s
[info]                  ·gc.alloc.rate:               465.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          33273.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36578.233 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 23178.582 ops/s
[info]                  ·gc.alloc.rate:      426.020 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23054.948 ops/s
[info]                  ·gc.alloc.rate:               444.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          30338.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45767.205 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22979.222 ops/s
[info]                  ·gc.alloc.rate:               447.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          30650.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45922.537 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23488.624 ops/s
[info]                  ·gc.alloc.rate:      431.860 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22942.676 ±(99.9%) 2138.578 ops/s [Average]
[info]   (min, avg, max) = (22012.006, 22942.676, 23488.624), stdev = 555.382
[info]   CI (99.9%): [20804.098, 25081.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   443.105 ±(99.9%) 58.931 MB/sec [Average]
[info]   (min, avg, max) = (426.020, 443.105, 465.369), stdev = 15.304
[info]   CI (99.9%): [384.175, 502.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30423.800 ±(99.9%) 6848.674 B/op [Average]
[info]   (min, avg, max) = (28928.018, 30423.800, 33273.334), stdev = 1778.579
[info]   CI (99.9%): [23575.126, 37272.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.604 ±(99.9%) 1326.523 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.604, 670.771), stdev = 344.494
[info]   CI (99.9%): [≈ 0, 1697.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25653.595 ±(99.9%) 91345.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25653.595, 45922.537), stdev = 23722.083
[info]   CI (99.9%): [≈ 0, 116998.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51.977 ops/s
[info] # Warmup Iteration   2: 2784.908 ops/s
[info] # Warmup Iteration   3: 3891.842 ops/s
[info] # Warmup Iteration   4: 4096.561 ops/s
[info] # Warmup Iteration   5: 4157.168 ops/s
[info] Iteration   1: 4155.792 ops/s
[info]                  ·gc.alloc.rate:                   2677.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              1013845.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1015658.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 4109.647 ops/s
[info]                  ·gc.alloc.rate:                   2661.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              1019126.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1028425.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4159.266 ops/s
[info]                  ·gc.alloc.rate:                   2707.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024400.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1018083.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.875 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4161.766 ops/s
[info]                  ·gc.alloc.rate:               2708.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024448.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1019735.752 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 4163.727 ops/s
[info]                  ·gc.alloc.rate:               2684.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          1014572.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 765976.586 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4150.040 ±(99.9%) 87.695 ops/s [Average]
[info]   (min, avg, max) = (4109.647, 4150.040, 4163.727), stdev = 22.774
[info]   CI (99.9%): [4062.344, 4237.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2687.971 ±(99.9%) 78.473 MB/sec [Average]
[info]   (min, avg, max) = (2661.352, 2687.971, 2708.995), stdev = 20.379
[info]   CI (99.9%): [2609.498, 2766.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1019278.642 ±(99.9%) 19695.863 B/op [Average]
[info]   (min, avg, max) = (1013845.675, 1019278.642, 1024448.457), stdev = 5114.953
[info]   CI (99.9%): [999582.779, 1038974.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2556.384 ±(99.9%) 1139.795 MB/sec [Average]
[info]   (min, avg, max) = (2026.972, 2556.384, 2696.533), stdev = 296.001
[info]   CI (99.9%): [1416.589, 3696.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   969576.049 ±(99.9%) 438654.968 B/op [Average]
[info]   (min, avg, max) = (765976.586, 969576.049, 1028425.792), stdev = 113917.302
[info]   CI (99.9%): [530921.081, 1408231.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.499), stdev = 0.648
[info]   CI (99.9%): [≈ 0, 2.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   135.809 ±(99.9%) 944.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 135.809, 567.548), stdev = 245.301
[info]   CI (99.9%): [≈ 0, 1080.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2637.057 ops/s
[info] # Warmup Iteration   2: 9136.834 ops/s
[info] # Warmup Iteration   3: 10367.957 ops/s
[info] # Warmup Iteration   4: 10305.130 ops/s
[info] # Warmup Iteration   5: 10343.419 ops/s
[info] Iteration   1: 10429.245 ops/s
[info]                  ·gc.alloc.rate:                   2212.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              333811.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303355.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10373.143 ops/s
[info]                  ·gc.alloc.rate:                   2223.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              337295.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304213.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10294.299 ops/s
[info]                  ·gc.alloc.rate:                   2196.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              335875.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306496.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.183 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10283.697 ops/s
[info]                  ·gc.alloc.rate:               2208.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          337892.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 307070.594 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 10273.952 ops/s
[info]                  ·gc.alloc.rate:                   2232.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              342022.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410676.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10330.867 ±(99.9%) 260.218 ops/s [Average]
[info]   (min, avg, max) = (10273.952, 10330.867, 10429.245), stdev = 67.578
[info]   CI (99.9%): [10070.649, 10591.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2214.713 ±(99.9%) 52.732 MB/sec [Average]
[info]   (min, avg, max) = (2196.921, 2214.713, 2232.595), stdev = 13.694
[info]   CI (99.9%): [2161.981, 2267.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   337379.611 ±(99.9%) 11683.475 B/op [Average]
[info]   (min, avg, max) = (333811.223, 337379.611, 342022.825), stdev = 3034.161
[info]   CI (99.9%): [325696.136, 349063.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2141.637 ±(99.9%) 1160.484 MB/sec [Average]
[info]   (min, avg, max) = (2004.756, 2141.637, 2680.737), stdev = 301.374
[info]   CI (99.9%): [981.153, 3302.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   326362.403 ±(99.9%) 181588.897 B/op [Average]
[info]   (min, avg, max) = (303355.288, 326362.403, 410676.112), stdev = 47158.060
[info]   CI (99.9%): [144773.506, 507951.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.771 ±(99.9%) 6.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.771, 3.566), stdev = 1.566
[info]   CI (99.9%): [≈ 0, 6.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   116.358 ±(99.9%) 909.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.358, 538.140), stdev = 236.278
[info]   CI (99.9%): [≈ 0, 1026.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.822 ops/s
[info] # Warmup Iteration   2: 43347.016 ops/s
[info] # Warmup Iteration   3: 57516.015 ops/s
[info] # Warmup Iteration   4: 56555.681 ops/s
[info] # Warmup Iteration   5: 56899.910 ops/s
[info] Iteration   1: 57290.743 ops/s
[info]                  ·gc.alloc.rate:               547.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          15054.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18263.794 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 57408.490 ops/s
[info]                  ·gc.alloc.rate:               561.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          15383.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18224.989 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 57236.406 ops/s
[info]                  ·gc.alloc.rate:                   558.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              15362.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18298.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.572 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 57377.130 ops/s
[info]                  ·gc.alloc.rate:      536.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57047.986 ops/s
[info]                  ·gc.alloc.rate:                   552.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              15240.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18359.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   57272.151 ±(99.9%) 549.584 ops/s [Average]
[info]   (min, avg, max) = (57047.986, 57272.151, 57408.490), stdev = 142.725
[info]   CI (99.9%): [56722.566, 57821.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   551.332 ±(99.9%) 37.923 MB/sec [Average]
[info]   (min, avg, max) = (536.366, 551.332, 561.177), stdev = 9.849
[info]   CI (99.9%): [513.408, 589.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15150.557 ±(99.9%) 1070.510 B/op [Average]
[info]   (min, avg, max) = (14712.008, 15150.557, 15383.771), stdev = 278.008
[info]   CI (99.9%): [14080.047, 16221.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.117 ±(99.9%) 1145.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.117, 665.477), stdev = 297.463
[info]   CI (99.9%): [≈ 0, 1677.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14629.232 ±(99.9%) 31491.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14629.232, 18359.315), stdev = 8178.138
[info]   CI (99.9%): [≈ 0, 46120.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.176 ±(99.9%) 0.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.572), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17021.851 ops/s
[info] # Warmup Iteration   2: 44845.758 ops/s
[info] # Warmup Iteration   3: 45209.151 ops/s
[info] # Warmup Iteration   4: 45032.944 ops/s
[info] # Warmup Iteration   5: 44623.543 ops/s
[info] Iteration   1: 44530.435 ops/s
[info]                  ·gc.alloc.rate:                   657.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              23243.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23379.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45594.748 ops/s
[info]                  ·gc.alloc.rate:               674.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          23270.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      661.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22833.121 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 45595.762 ops/s
[info]                  ·gc.alloc.rate:               680.452 MB/sec
[info]                  ·gc.alloc.rate.norm:          23487.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22902.103 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 45637.603 ops/s
[info]                  ·gc.alloc.rate:                   676.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              23314.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22881.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.718 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 44603.294 ops/s
[info]                  ·gc.alloc.rate:               659.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          23266.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23469.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45192.369 ±(99.9%) 2201.977 ops/s [Average]
[info]   (min, avg, max) = (44530.435, 45192.369, 45637.603), stdev = 571.846
[info]   CI (99.9%): [42990.391, 47394.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   669.619 ±(99.9%) 39.704 MB/sec [Average]
[info]   (min, avg, max) = (657.774, 669.619, 680.452), stdev = 10.311
[info]   CI (99.9%): [629.915, 709.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23316.622 ±(99.9%) 381.286 B/op [Average]
[info]   (min, avg, max) = (23243.613, 23316.622, 23487.731), stdev = 99.019
[info]   CI (99.9%): [22935.336, 23697.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.094 ±(99.9%) 6.038 MB/sec [Average]
[info]   (min, avg, max) = (661.475, 663.094, 665.217), stdev = 1.568
[info]   CI (99.9%): [657.056, 669.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23092.999 ±(99.9%) 1175.263 B/op [Average]
[info]   (min, avg, max) = (22833.121, 23092.999, 23469.618), stdev = 305.212
[info]   CI (99.9%): [21917.735, 24268.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.291 ±(99.9%) 1.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 0.736), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36451.818 ops/s
[info] # Warmup Iteration   2: 80672.061 ops/s
[info] # Warmup Iteration   3: 89082.515 ops/s
[info] # Warmup Iteration   4: 89062.245 ops/s
[info] # Warmup Iteration   5: 89350.762 ops/s
[info] Iteration   1: 90930.853 ops/s
[info]                  ·gc.alloc.rate:                   708.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              12265.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11598.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 89868.433 ops/s
[info]                  ·gc.alloc.rate:               693.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          12137.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11724.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 89561.381 ops/s
[info]                  ·gc.alloc.rate:                   697.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              12261.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11764.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 89184.304 ops/s
[info]                  ·gc.alloc.rate:               689.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          12173.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11790.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 89393.360 ops/s
[info]                  ·gc.alloc.rate:               690.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          12149.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11763.041 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   89787.666 ±(99.9%) 2642.764 ops/s [Average]
[info]   (min, avg, max) = (89184.304, 89787.666, 90930.853), stdev = 686.318
[info]   CI (99.9%): [87144.902, 92430.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   695.949 ±(99.9%) 30.572 MB/sec [Average]
[info]   (min, avg, max) = (689.829, 695.949, 708.948), stdev = 7.939
[info]   CI (99.9%): [665.377, 726.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12197.500 ±(99.9%) 237.646 B/op [Average]
[info]   (min, avg, max) = (12137.536, 12197.500, 12265.240), stdev = 61.716
[info]   CI (99.9%): [11959.854, 12435.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   669.136 ±(99.9%) 3.772 MB/sec [Average]
[info]   (min, avg, max) = (668.135, 669.136, 670.436), stdev = 0.980
[info]   CI (99.9%): [665.364, 672.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11728.241 ±(99.9%) 292.788 B/op [Average]
[info]   (min, avg, max) = (11598.960, 11728.241, 11790.602), stdev = 76.036
[info]   CI (99.9%): [11435.452, 12021.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.693 ±(99.9%) 5.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.693, 3.443), stdev = 1.537
[info]   CI (99.9%): [≈ 0, 6.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.986 ±(99.9%) 102.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.986, 59.564), stdev = 26.597
[info]   CI (99.9%): [≈ 0, 114.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50095.987 ops/s
[info] # Warmup Iteration   2: 104634.409 ops/s
[info] # Warmup Iteration   3: 104784.955 ops/s
[info] # Warmup Iteration   4: 105719.769 ops/s
[info] # Warmup Iteration   5: 105231.890 ops/s
[info] Iteration   1: 105823.514 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 105198.358 ops/s
[info]                  ·gc.alloc.rate:      4.914 MB/sec
[info]                  ·gc.alloc.rate.norm: 73.517 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 105749.426 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105544.570 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 105738.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   105610.958 ±(99.9%) 972.953 ops/s [Average]
[info]   (min, avg, max) = (105198.358, 105610.958, 105823.514), stdev = 252.673
[info]   CI (99.9%): [104638.005, 106583.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.983 ±(99.9%) 8.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.983, 4.914), stdev = 2.198
[info]   CI (99.9%): [≈ 0, 9.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   14.707 ±(99.9%) 126.593 B/op [Average]
[info]   (min, avg, max) = (0.004, 14.707, 73.517), stdev = 32.876
[info]   CI (99.9%): [≈ 0, 141.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 744.689 ops/s
[info] # Warmup Iteration   2: 6644.414 ops/s
[info] # Warmup Iteration   3: 7696.160 ops/s
[info] # Warmup Iteration   4: 7603.789 ops/s
[info] # Warmup Iteration   5: 7713.566 ops/s
[info] Iteration   1: 7771.547 ops/s
[info]                  ·gc.alloc.rate:                   2349.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              475646.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406655.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7733.640 ops/s
[info]                  ·gc.alloc.rate:                   2321.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              472347.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409534.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7731.884 ops/s
[info]                  ·gc.alloc.rate:               2324.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          473122.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 547542.983 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 7742.888 ops/s
[info]                  ·gc.alloc.rate:               2342.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          475897.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 411036.377 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7669.144 ops/s
[info]                  ·gc.alloc.rate:                   2319.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              476010.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     415753.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7729.820 ±(99.9%) 144.237 ops/s [Average]
[info]   (min, avg, max) = (7669.144, 7729.820, 7771.547), stdev = 37.458
[info]   CI (99.9%): [7585.583, 7874.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2331.323 ±(99.9%) 51.999 MB/sec [Average]
[info]   (min, avg, max) = (2319.638, 2331.323, 2349.358), stdev = 13.504
[info]   CI (99.9%): [2279.324, 2383.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   474604.860 ±(99.9%) 6676.299 B/op [Average]
[info]   (min, avg, max) = (472347.730, 474604.860, 476010.248), stdev = 1733.814
[info]   CI (99.9%): [467928.561, 481281.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2151.993 ±(99.9%) 1158.554 MB/sec [Average]
[info]   (min, avg, max) = (2008.591, 2151.993, 2690.057), stdev = 300.873
[info]   CI (99.9%): [993.439, 3310.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   438104.486 ±(99.9%) 235915.505 B/op [Average]
[info]   (min, avg, max) = (406655.391, 438104.486, 547542.983), stdev = 61266.507
[info]   CI (99.9%): [202188.981, 674019.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.729), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.753 ±(99.9%) 246.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.753, 147.547), stdev = 63.991
[info]   CI (99.9%): [≈ 0, 280.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 701332.655 ops/s
[info] # Warmup Iteration   2: 7883843.297 ops/s
[info] # Warmup Iteration   3: 9051966.681 ops/s
[info] # Warmup Iteration   4: 9186644.208 ops/s
[info] # Warmup Iteration   5: 9172423.798 ops/s
[info] Iteration   1: 9175171.267 ops/s
[info]                  ·gc.alloc.rate:                   4969.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              852.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5389.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9180448.815 ops/s
[info]                  ·gc.alloc.rate:                   4947.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4736.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     812.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9232616.756 ops/s
[info]                  ·gc.alloc.rate:                   4976.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4750.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 9170702.309 ops/s
[info]                  ·gc.alloc.rate:                   4945.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4758.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     816.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8979768.928 ops/s
[info]                  ·gc.alloc.rate:                   4847.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              849.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   9147741.615 ±(99.9%) 374166.663 ops/s [Average]
[info]   (min, avg, max) = (8979768.928, 9147741.615, 9232616.756), stdev = 97169.894
[info]   CI (99.9%): [8773574.953, 9521908.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4937.138 ±(99.9%) 200.740 MB/sec [Average]
[info]   (min, avg, max) = (4847.076, 4937.138, 4976.009), stdev = 52.132
[info]   CI (99.9%): [4736.398, 5137.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   849.334 ±(99.9%) 7.020 B/op [Average]
[info]   (min, avg, max) = (848.137, 849.334, 852.527), stdev = 1.823
[info]   CI (99.9%): [842.314, 856.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4878.665 ±(99.9%) 1099.293 MB/sec [Average]
[info]   (min, avg, max) = (4736.772, 4878.665, 5389.100), stdev = 285.483
[info]   CI (99.9%): [3779.372, 5977.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   839.289 ±(99.9%) 186.777 B/op [Average]
[info]   (min, avg, max) = (809.712, 839.289, 924.421), stdev = 48.505
[info]   CI (99.9%): [652.512, 1026.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.006, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.596 ops/s
[info] # Warmup Iteration   2: 36762549.677 ops/s
[info] # Warmup Iteration   3: 38138751.690 ops/s
[info] # Warmup Iteration   4: 38199793.552 ops/s
[info] # Warmup Iteration   5: 38220533.688 ops/s
[info] Iteration   1: 38206116.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38201268.297 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37979927.761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38197265.928 ops/s
[info]                  ·gc.alloc.rate:      0.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38235698.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38164055.529 ±(99.9%) 400599.662 ops/s [Average]
[info]   (min, avg, max) = (37979927.761, 38164055.529, 38235698.906), stdev = 104034.460
[info]   CI (99.9%): [37763455.867, 38564655.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   0.009 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.009, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192848.615 ops/s
[info] # Warmup Iteration   2: 8993918.559 ops/s
[info] # Warmup Iteration   3: 9655490.706 ops/s
[info] # Warmup Iteration   4: 9699379.344 ops/s
[info] # Warmup Iteration   5: 10565438.271 ops/s
[info] Iteration   1: 10680537.570 ops/s
[info]                  ·gc.alloc.rate:                   3660.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3339.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10650847.753 ops/s
[info]                  ·gc.alloc.rate:                   3651.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10662898.419 ops/s
[info]                  ·gc.alloc.rate:               3655.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          539.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3363.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 496.474 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 10628471.310 ops/s
[info]                  ·gc.alloc.rate:               3672.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          543.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4051.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 599.935 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 10629926.191 ops/s
[info]                  ·gc.alloc.rate:                   3646.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     501.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10650536.248 ±(99.9%) 85338.374 ops/s [Average]
[info]   (min, avg, max) = (10628471.310, 10650536.248, 10680537.570), stdev = 22162.105
[info]   CI (99.9%): [10565197.874, 10735874.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3657.257 ±(99.9%) 37.711 MB/sec [Average]
[info]   (min, avg, max) = (3646.539, 3657.257, 3672.235), stdev = 9.793
[info]   CI (99.9%): [3619.547, 3694.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   540.453 ±(99.9%) 7.223 B/op [Average]
[info]   (min, avg, max) = (539.381, 540.453, 543.789), stdev = 1.876
[info]   CI (99.9%): [533.230, 547.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3498.220 ±(99.9%) 1192.620 MB/sec [Average]
[info]   (min, avg, max) = (3339.983, 3498.220, 4051.395), stdev = 309.720
[info]   CI (99.9%): [2305.600, 4690.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   516.996 ±(99.9%) 178.995 B/op [Average]
[info]   (min, avg, max) = (492.175, 516.996, 599.935), stdev = 46.484
[info]   CI (99.9%): [338.002, 695.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18944361.467 ops/s
[info] # Warmup Iteration   2: 44065250.344 ops/s
[info] # Warmup Iteration   3: 48870550.298 ops/s
[info] # Warmup Iteration   4: 48750990.893 ops/s
[info] # Warmup Iteration   5: 46581175.186 ops/s
[info] Iteration   1: 48893531.984 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48873408.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48934344.574 ops/s
[info]                  ·gc.alloc.rate:      0.010 MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48946343.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48937299.682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48916985.649 ±(99.9%) 122147.230 ops/s [Average]
[info]   (min, avg, max) = (48873408.281, 48916985.649, 48946343.725), stdev = 31721.248
[info]   CI (99.9%): [48794838.419, 49039132.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9125822.199 ops/s
[info] # Warmup Iteration   2: 29255415.004 ops/s
[info] # Warmup Iteration   3: 31380863.430 ops/s
[info] # Warmup Iteration   4: 31357954.829 ops/s
[info] # Warmup Iteration   5: 31705292.507 ops/s
[info] Iteration   1: 31591466.792 ops/s
[info]                  ·gc.alloc.rate:               830.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.453 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 31574739.573 ops/s
[info]                  ·gc.alloc.rate:                   841.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 31691200.101 ops/s
[info]                  ·gc.alloc.rate:               822.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.413 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 31616686.033 ops/s
[info]                  ·gc.alloc.rate:               819.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.491 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31588806.785 ops/s
[info]                  ·gc.alloc.rate:               818.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.521 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31612579.857 ±(99.9%) 178970.157 ops/s [Average]
[info]   (min, avg, max) = (31574739.573, 31612579.857, 31691200.101), stdev = 46477.981
[info]   CI (99.9%): [31433609.700, 31791550.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   826.604 ±(99.9%) 37.000 MB/sec [Average]
[info]   (min, avg, max) = (818.788, 826.604, 841.442), stdev = 9.609
[info]   CI (99.9%): [789.605, 863.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.154 ±(99.9%) 1.959 B/op [Average]
[info]   (min, avg, max) = (40.779, 41.154, 41.943), stdev = 0.509
[info]   CI (99.9%): [39.195, 43.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.810 ±(99.9%) 1156.806 MB/sec [Average]
[info]   (min, avg, max) = (671.465, 806.810, 1344.215), stdev = 300.419
[info]   CI (99.9%): [≈ 0, 1963.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.176 ±(99.9%) 57.748 B/op [Average]
[info]   (min, avg, max) = (33.413, 40.176, 67.004), stdev = 14.997
[info]   CI (99.9%): [≈ 0, 97.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 927868.453 ops/s
[info] # Warmup Iteration   2: 8441361.947 ops/s
[info] # Warmup Iteration   3: 8790574.368 ops/s
[info] # Warmup Iteration   4: 8932190.468 ops/s
[info] # Warmup Iteration   5: 9102677.797 ops/s
[info] Iteration   1: 9075685.051 ops/s
[info]                  ·gc.alloc.rate:               3848.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          667.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4017.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.702 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 9096558.012 ops/s
[info]                  ·gc.alloc.rate:                   3832.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9038587.027 ops/s
[info]                  ·gc.alloc.rate:               3836.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          667.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4047.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 704.754 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 8983262.632 ops/s
[info]                  ·gc.alloc.rate:               3787.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          663.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 592.723 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 9114438.470 ops/s
[info]                  ·gc.alloc.rate:                   3868.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              668.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9061706.239 ±(99.9%) 200812.454 ops/s [Average]
[info]   (min, avg, max) = (8983262.632, 9061706.239, 9114438.470), stdev = 52150.357
[info]   CI (99.9%): [8860893.784, 9262518.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3834.498 ±(99.9%) 115.525 MB/sec [Average]
[info]   (min, avg, max) = (3787.222, 3834.498, 3868.604), stdev = 30.001
[info]   CI (99.9%): [3718.973, 3950.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   665.984 ±(99.9%) 9.623 B/op [Average]
[info]   (min, avg, max) = (663.013, 665.984, 668.041), stdev = 2.499
[info]   CI (99.9%): [656.361, 675.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3775.690 ±(99.9%) 1422.124 MB/sec [Average]
[info]   (min, avg, max) = (3360.355, 3775.690, 4070.023), stdev = 369.321
[info]   CI (99.9%): [2353.566, 5197.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   655.680 ±(99.9%) 241.969 B/op [Average]
[info]   (min, avg, max) = (581.399, 655.680, 704.754), stdev = 62.838
[info]   CI (99.9%): [413.711, 897.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2949424.308 ops/s
[info] # Warmup Iteration   2: 12970558.241 ops/s
[info] # Warmup Iteration   3: 13827537.732 ops/s
[info] # Warmup Iteration   4: 13627074.516 ops/s
[info] # Warmup Iteration   5: 13723752.779 ops/s
[info] Iteration   1: 13806731.282 ops/s
[info]                  ·gc.alloc.rate:                   1669.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 13841901.102 ops/s
[info]                  ·gc.alloc.rate:                   1657.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13803615.123 ops/s
[info]                  ·gc.alloc.rate:                   1693.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              193.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13304532.125 ops/s
[info]                  ·gc.alloc.rate:               1607.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          190.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158.554 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13878295.248 ops/s
[info]                  ·gc.alloc.rate:                   1662.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   13727014.976 ±(99.9%) 916903.278 ops/s [Average]
[info]   (min, avg, max) = (13304532.125, 13727014.976, 13878295.248), stdev = 238116.870
[info]   CI (99.9%): [12810111.698, 14643918.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1658.178 ±(99.9%) 120.729 MB/sec [Average]
[info]   (min, avg, max) = (1607.748, 1658.178, 1693.486), stdev = 31.353
[info]   CI (99.9%): [1537.450, 1778.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   190.106 ±(99.9%) 7.083 B/op [Average]
[info]   (min, avg, max) = (188.511, 190.106, 193.012), stdev = 1.839
[info]   CI (99.9%): [183.023, 197.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.756 ±(99.9%) 1419.789 MB/sec [Average]
[info]   (min, avg, max) = (1340.205, 1610.756, 2014.763), stdev = 368.715
[info]   CI (99.9%): [190.967, 3030.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   184.525 ±(99.9%) 158.874 B/op [Average]
[info]   (min, avg, max) = (151.991, 184.525, 229.668), stdev = 41.259
[info]   CI (99.9%): [25.651, 343.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 4.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 2.852), stdev = 1.225
[info]   CI (99.9%): [≈ 0, 5.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.324), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.449
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.605 ops/s
[info] # Warmup Iteration   2: 40334741.466 ops/s
[info] # Warmup Iteration   3: 40505123.829 ops/s
[info] # Warmup Iteration   4: 42404728.205 ops/s
[info] # Warmup Iteration   5: 42555461.383 ops/s
[info] Iteration   1: 42215149.993 ops/s
[info]                  ·gc.alloc.rate:                   872.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42137028.556 ops/s
[info]                  ·gc.alloc.rate:                   902.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 41865378.263 ops/s
[info]                  ·gc.alloc.rate:               869.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 42572047.366 ops/s
[info]                  ·gc.alloc.rate:                   880.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42384907.586 ops/s
[info]                  ·gc.alloc.rate:                   891.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42234902.353 ±(99.9%) 1023659.158 ops/s [Average]
[info]   (min, avg, max) = (41865378.263, 42234902.353, 42572047.366), stdev = 265841.033
[info]   CI (99.9%): [41211243.195, 43258561.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   883.361 ±(99.9%) 52.608 MB/sec [Average]
[info]   (min, avg, max) = (869.482, 883.361, 902.345), stdev = 13.662
[info]   CI (99.9%): [830.753, 935.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.912 ±(99.9%) 1.932 B/op [Average]
[info]   (min, avg, max) = (32.534, 32.912, 33.703), stdev = 0.502
[info]   CI (99.9%): [30.980, 34.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933.443 ±(99.9%) 1406.682 MB/sec [Average]
[info]   (min, avg, max) = (665.830, 933.443, 1334.931), stdev = 365.311
[info]   CI (99.9%): [≈ 0, 2340.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   34.774 ±(99.9%) 52.348 B/op [Average]
[info]   (min, avg, max) = (24.663, 34.774, 49.762), stdev = 13.595
[info]   CI (99.9%): [≈ 0, 87.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.031), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1024168.284 ops/s
[info] # Warmup Iteration   2: 12585641.005 ops/s
[info] # Warmup Iteration   3: 12918653.271 ops/s
[info] # Warmup Iteration   4: 12950009.488 ops/s
[info] # Warmup Iteration   5: 12964259.242 ops/s
[info] Iteration   1: 12086352.171 ops/s
[info]                  ·gc.alloc.rate:               2459.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          320.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 261.183 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 12100715.390 ops/s
[info]                  ·gc.alloc.rate:                   2489.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12110476.867 ops/s
[info]                  ·gc.alloc.rate:                   2507.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12142616.589 ops/s
[info]                  ·gc.alloc.rate:               2486.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 260.845 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 12142376.444 ops/s
[info]                  ·gc.alloc.rate:                   2514.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              325.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   12116507.492 ±(99.9%) 97147.518 ops/s [Average]
[info]   (min, avg, max) = (12086352.171, 12116507.492, 12142616.589), stdev = 25228.902
[info]   CI (99.9%): [12019359.974, 12213655.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2491.495 ±(99.9%) 81.594 MB/sec [Average]
[info]   (min, avg, max) = (2459.702, 2491.495, 2514.257), stdev = 21.190
[info]   CI (99.9%): [2409.901, 2573.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.619 ±(99.9%) 9.136 B/op [Average]
[info]   (min, avg, max) = (320.295, 323.619, 325.900), stdev = 2.373
[info]   CI (99.9%): [314.483, 332.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2411.806 ±(99.9%) 1415.767 MB/sec [Average]
[info]   (min, avg, max) = (2005.753, 2411.806, 2690.521), stdev = 367.670
[info]   CI (99.9%): [996.039, 3827.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   313.263 ±(99.9%) 183.670 B/op [Average]
[info]   (min, avg, max) = (260.845, 313.263, 348.747), stdev = 47.699
[info]   CI (99.9%): [129.593, 496.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10326360.118 ops/s
[info] # Warmup Iteration   2: 47190400.571 ops/s
[info] # Warmup Iteration   3: 46716723.488 ops/s
[info] # Warmup Iteration   4: 47376572.379 ops/s
[info] # Warmup Iteration   5: 47495497.051 ops/s
[info] Iteration   1: 47353350.731 ops/s
[info]                  ·gc.alloc.rate:                   999.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 47460650.441 ops/s
[info]                  ·gc.alloc.rate:               981.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22.268 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 47627958.428 ops/s
[info]                  ·gc.alloc.rate:               994.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 46010557.092 ops/s
[info]                  ·gc.alloc.rate:                   964.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 47602829.886 ops/s
[info]                  ·gc.alloc.rate:                   981.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   47211069.316 ±(99.9%) 2619454.990 ops/s [Average]
[info]   (min, avg, max) = (46010557.092, 47211069.316, 47627958.428), stdev = 680264.143
[info]   CI (99.9%): [44591614.326, 49830524.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   984.214 ±(99.9%) 51.482 MB/sec [Average]
[info]   (min, avg, max) = (964.619, 984.214, 999.066), stdev = 13.370
[info]   CI (99.9%): [932.731, 1035.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.810 ±(99.9%) 1.194 B/op [Average]
[info]   (min, avg, max) = (32.449, 32.810, 33.205), stdev = 0.310
[info]   CI (99.9%): [31.616, 34.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.163 ±(99.9%) 1415.221 MB/sec [Average]
[info]   (min, avg, max) = (671.556, 940.163, 1343.833), stdev = 367.528
[info]   CI (99.9%): [≈ 0, 2355.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   31.447 ±(99.9%) 48.651 B/op [Average]
[info]   (min, avg, max) = (22.190, 31.447, 45.962), stdev = 12.635
[info]   CI (99.9%): [≈ 0, 80.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21027451.523 ops/s
[info] # Warmup Iteration   2: 59421973.489 ops/s
[info] # Warmup Iteration   3: 62677350.270 ops/s
[info] # Warmup Iteration   4: 62772042.172 ops/s
[info] # Warmup Iteration   5: 61283580.143 ops/s
[info] Iteration   1: 62718760.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62706329.980 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62591635.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62596638.942 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62579942.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   62638661.399 ±(99.9%) 261305.899 ops/s [Average]
[info]   (min, avg, max) = (62579942.417, 62638661.399, 62718760.153), stdev = 67860.312
[info]   CI (99.9%): [62377355.500, 62899967.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6282059.788 ops/s
[info] # Warmup Iteration   2: 17450257.692 ops/s
[info] # Warmup Iteration   3: 17898181.363 ops/s
[info] # Warmup Iteration   4: 17719567.990 ops/s
[info] # Warmup Iteration   5: 17905866.439 ops/s
[info] Iteration   1: 17872504.391 ops/s
[info]                  ·gc.alloc.rate:                   1664.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              146.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18006951.256 ops/s
[info]                  ·gc.alloc.rate:               1697.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          148.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.864 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 18030562.297 ops/s
[info]                  ·gc.alloc.rate:                   1690.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              147.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17908858.033 ops/s
[info]                  ·gc.alloc.rate:                   1704.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              149.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17927407.481 ops/s
[info]                  ·gc.alloc.rate:                   1694.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17949256.692 ±(99.9%) 257875.438 ops/s [Average]
[info]   (min, avg, max) = (17872504.391, 17949256.692, 18030562.297), stdev = 66969.432
[info]   CI (99.9%): [17691381.254, 18207132.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1690.262 ±(99.9%) 58.175 MB/sec [Average]
[info]   (min, avg, max) = (1664.935, 1690.262, 1704.498), stdev = 15.108
[info]   CI (99.9%): [1632.087, 1748.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148.191 ±(99.9%) 4.644 B/op [Average]
[info]   (min, avg, max) = (146.614, 148.191, 149.778), stdev = 1.206
[info]   CI (99.9%): [143.547, 152.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1612.824 ±(99.9%) 1418.987 MB/sec [Average]
[info]   (min, avg, max) = (1338.667, 1612.824, 2020.260), stdev = 368.506
[info]   CI (99.9%): [193.838, 3031.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   141.390 ±(99.9%) 124.127 B/op [Average]
[info]   (min, avg, max) = (117.283, 141.390, 177.524), stdev = 32.235
[info]   CI (99.9%): [17.263, 265.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278680.129 ops/s
[info] # Warmup Iteration   2: 2511720.627 ops/s
[info] # Warmup Iteration   3: 2666128.680 ops/s
[info] # Warmup Iteration   4: 2697140.407 ops/s
[info] # Warmup Iteration   5: 2706568.108 ops/s
[info] Iteration   1: 2731372.210 ops/s
[info]                  ·gc.alloc.rate:                   2188.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1160.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2731349.284 ops/s
[info]                  ·gc.alloc.rate:                   2202.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1157.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2714114.055 ops/s
[info]                  ·gc.alloc.rate:               2176.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1163.486 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2742502.271 ops/s
[info]                  ·gc.alloc.rate:                   2238.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1284.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1537.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2735507.732 ops/s
[info]                  ·gc.alloc.rate:               2208.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          1270.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1158.390 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2730969.110 ±(99.9%) 40294.592 ops/s [Average]
[info]   (min, avg, max) = (2714114.055, 2730969.110, 2742502.271), stdev = 10464.378
[info]   CI (99.9%): [2690674.518, 2771263.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2202.826 ±(99.9%) 90.068 MB/sec [Average]
[info]   (min, avg, max) = (2176.240, 2202.826, 2238.262), stdev = 23.390
[info]   CI (99.9%): [2112.758, 2292.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1269.229 ±(99.9%) 36.303 B/op [Average]
[info]   (min, avg, max) = (1261.263, 1269.229, 1284.514), stdev = 9.428
[info]   CI (99.9%): [1232.927, 1305.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2144.689 ±(99.9%) 1149.152 MB/sec [Average]
[info]   (min, avg, max) = (2006.891, 2144.689, 2678.510), stdev = 298.431
[info]   CI (99.9%): [995.537, 3293.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1235.456 ±(99.9%) 649.517 B/op [Average]
[info]   (min, avg, max) = (1157.684, 1235.456, 1537.168), stdev = 168.677
[info]   CI (99.9%): [585.939, 1884.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 6.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.560), stdev = 1.587
[info]   CI (99.9%): [≈ 0, 6.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.415 ±(99.9%) 3.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 2.051), stdev = 0.915
[info]   CI (99.9%): [≈ 0, 3.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55827.295 ops/s
[info] # Warmup Iteration   2: 162685.239 ops/s
[info] # Warmup Iteration   3: 168397.275 ops/s
[info] # Warmup Iteration   4: 170585.384 ops/s
[info] # Warmup Iteration   5: 170879.464 ops/s
[info] Iteration   1: 171202.564 ops/s
[info]                  ·gc.alloc.rate:                   3260.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              29972.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30867.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.531 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 170032.395 ops/s
[info]                  ·gc.alloc.rate:                   3225.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              29859.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24897.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 168813.805 ops/s
[info]                  ·gc.alloc.rate:               3244.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          30245.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31415.856 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 171142.258 ops/s
[info]                  ·gc.alloc.rate:               3276.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          30114.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31082.441 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 170677.795 ops/s
[info]                  ·gc.alloc.rate:               3238.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          29862.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24984.230 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   170373.763 ±(99.9%) 3811.910 ops/s [Average]
[info]   (min, avg, max) = (168813.805, 170373.763, 171202.564), stdev = 989.941
[info]   CI (99.9%): [166561.853, 174185.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3249.086 ±(99.9%) 75.618 MB/sec [Average]
[info]   (min, avg, max) = (3225.836, 3249.086, 3276.146), stdev = 19.638
[info]   CI (99.9%): [3173.468, 3324.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30011.017 ±(99.9%) 645.483 B/op [Average]
[info]   (min, avg, max) = (29859.302, 30011.017, 30245.872), stdev = 167.630
[info]   CI (99.9%): [29365.534, 30656.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3101.693 ±(99.9%) 1413.888 MB/sec [Average]
[info]   (min, avg, max) = (2689.810, 3101.693, 3381.410), stdev = 367.182
[info]   CI (99.9%): [1687.805, 4515.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28649.504 ±(99.9%) 13058.300 B/op [Average]
[info]   (min, avg, max) = (24897.684, 28649.504, 31415.856), stdev = 3391.199
[info]   CI (99.9%): [15591.203, 41707.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.167), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.345 ±(99.9%) 2.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.345, 1.531), stdev = 0.668
[info]   CI (99.9%): [≈ 0, 2.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 1.871
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2053.061 ops/s
[info] # Warmup Iteration   2: 29209.225 ops/s
[info] # Warmup Iteration   3: 35697.146 ops/s
[info] # Warmup Iteration   4: 35063.077 ops/s
[info] # Warmup Iteration   5: 35783.022 ops/s
[info] Iteration   1: 35776.707 ops/s
[info]                  ·gc.alloc.rate:                   2570.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              113098.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117848.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.810 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 36052.290 ops/s
[info]                  ·gc.alloc.rate:                   2566.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              112033.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117313.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 36160.813 ops/s
[info]                  ·gc.alloc.rate:               2587.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          112598.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87939.472 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 36115.930 ops/s
[info]                  ·gc.alloc.rate:                   2611.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              113821.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117689.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.907 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 36093.588 ops/s
[info]                  ·gc.alloc.rate:               2610.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          113839.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118047.948 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   36039.866 ±(99.9%) 586.219 ops/s [Average]
[info]   (min, avg, max) = (35776.707, 36039.866, 36160.813), stdev = 152.239
[info]   CI (99.9%): [35453.646, 36626.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2589.405 ±(99.9%) 82.475 MB/sec [Average]
[info]   (min, avg, max) = (2566.449, 2589.405, 2611.921), stdev = 21.418
[info]   CI (99.9%): [2506.930, 2671.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   113078.288 ±(99.9%) 3015.002 B/op [Average]
[info]   (min, avg, max) = (112033.897, 113078.288, 113839.268), stdev = 782.987
[info]   CI (99.9%): [110063.286, 116093.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2558.919 ±(99.9%) 1159.525 MB/sec [Average]
[info]   (min, avg, max) = (2020.616, 2558.919, 2707.147), stdev = 301.125
[info]   CI (99.9%): [1399.395, 3718.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   111767.553 ±(99.9%) 51302.238 B/op [Average]
[info]   (min, avg, max) = (87939.472, 111767.553, 118047.948), stdev = 13323.028
[info]   CI (99.9%): [60465.315, 163069.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.541), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.125 ±(99.9%) 40.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.125, 23.810), stdev = 10.455
[info]   CI (99.9%): [≈ 0, 45.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32562.324 ops/s
[info] # Warmup Iteration   2: 136655.419 ops/s
[info] # Warmup Iteration   3: 139421.940 ops/s
[info] # Warmup Iteration   4: 140462.530 ops/s
[info] # Warmup Iteration   5: 140656.077 ops/s
[info] Iteration   1: 141719.185 ops/s
[info]                  ·gc.alloc.rate:                   1237.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              13742.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14832.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 143026.497 ops/s
[info]                  ·gc.alloc.rate:               1219.685 MB/sec
[info]                  ·gc.alloc.rate.norm:          13420.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7352.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 141940.135 ops/s
[info]                  ·gc.alloc.rate:                   1224.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              13572.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14824.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 143127.541 ops/s
[info]                  ·gc.alloc.rate:                   1233.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              13560.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14716.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 143155.562 ops/s
[info]                  ·gc.alloc.rate:                   1244.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              13683.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14698.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   142593.784 ±(99.9%) 2709.107 ops/s [Average]
[info]   (min, avg, max) = (141719.185, 142593.784, 143155.562), stdev = 703.547
[info]   CI (99.9%): [139884.677, 145302.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1231.804 ±(99.9%) 38.837 MB/sec [Average]
[info]   (min, avg, max) = (1219.685, 1231.804, 1244.685), stdev = 10.086
[info]   CI (99.9%): [1192.967, 1270.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13595.656 ±(99.9%) 478.680 B/op [Average]
[info]   (min, avg, max) = (13420.098, 13595.656, 13742.484), stdev = 124.312
[info]   CI (99.9%): [13116.976, 14074.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.231 ±(99.9%) 1151.643 MB/sec [Average]
[info]   (min, avg, max) = (668.226, 1203.231, 1338.262), stdev = 299.078
[info]   CI (99.9%): [51.587, 2354.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13284.887 ±(99.9%) 12772.225 B/op [Average]
[info]   (min, avg, max) = (7352.435, 13284.887, 14832.861), stdev = 3316.906
[info]   CI (99.9%): [512.662, 26057.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 6.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 3.789), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.341 ±(99.9%) 69.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.341, 41.662), stdev = 18.145
[info]   CI (99.9%): [≈ 0, 79.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131862.487 ops/s
[info] # Warmup Iteration   2: 427451.235 ops/s
[info] # Warmup Iteration   3: 433985.566 ops/s
[info] # Warmup Iteration   4: 444196.527 ops/s
[info] # Warmup Iteration   5: 445845.437 ops/s
[info] Iteration   1: 443239.628 ops/s
[info]                  ·gc.alloc.rate:                   1775.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              6304.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7158.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 443336.466 ops/s
[info]                  ·gc.alloc.rate:                   1779.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              6318.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4777.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 446170.102 ops/s
[info]                  ·gc.alloc.rate:                   1805.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              6367.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7096.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 438707.473 ops/s
[info]                  ·gc.alloc.rate:                   1743.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              6255.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4808.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 445886.051 ops/s
[info]                  ·gc.alloc.rate:                   1810.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              6390.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7098.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   443467.944 ±(99.9%) 11532.727 ops/s [Average]
[info]   (min, avg, max) = (438707.473, 443467.944, 446170.102), stdev = 2995.013
[info]   CI (99.9%): [431935.217, 455000.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1782.919 ±(99.9%) 102.840 MB/sec [Average]
[info]   (min, avg, max) = (1743.582, 1782.919, 1810.392), stdev = 26.707
[info]   CI (99.9%): [1680.079, 1885.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6327.013 ±(99.9%) 205.089 B/op [Average]
[info]   (min, avg, max) = (6255.403, 6327.013, 6390.351), stdev = 53.261
[info]   CI (99.9%): [6121.924, 6532.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1745.088 ±(99.9%) 1413.437 MB/sec [Average]
[info]   (min, avg, max) = (1340.241, 1745.088, 2016.508), stdev = 367.065
[info]   CI (99.9%): [331.651, 3158.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6187.952 ±(99.9%) 4905.362 B/op [Average]
[info]   (min, avg, max) = (4777.209, 6187.952, 7158.924), stdev = 1273.907
[info]   CI (99.9%): [1282.590, 11093.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.700 ±(99.9%) 5.577 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.700, 3.289), stdev = 1.448
[info]   CI (99.9%): [≈ 0, 6.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.484 ±(99.9%) 19.798 B/op [Average]
[info]   (min, avg, max) = (0.073, 2.484, 11.677), stdev = 5.141
[info]   CI (99.9%): [≈ 0, 22.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232796.553 ops/s
[info] # Warmup Iteration   2: 464557.491 ops/s
[info] # Warmup Iteration   3: 477133.429 ops/s
[info] # Warmup Iteration   4: 482215.646 ops/s
[info] # Warmup Iteration   5: 484233.111 ops/s
[info] Iteration   1: 486008.537 ops/s
[info]                  ·gc.alloc.rate:               1386.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          4488.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4351.045 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 482626.463 ops/s
[info]                  ·gc.alloc.rate:               1387.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          4525.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4383.730 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 484475.564 ops/s
[info]                  ·gc.alloc.rate:                   1388.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              4508.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4369.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 482989.612 ops/s
[info]                  ·gc.alloc.rate:                   1388.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              4522.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4380.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.289 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 486012.873 ops/s
[info]                  ·gc.alloc.rate:               1409.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          4564.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4346.641 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   484422.610 ±(99.9%) 6187.007 ops/s [Average]
[info]   (min, avg, max) = (482626.463, 484422.610, 486012.873), stdev = 1606.746
[info]   CI (99.9%): [478235.603, 490609.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1391.913 ±(99.9%) 37.766 MB/sec [Average]
[info]   (min, avg, max) = (1386.144, 1391.913, 1409.391), stdev = 9.808
[info]   CI (99.9%): [1354.147, 1429.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4521.938 ±(99.9%) 106.741 B/op [Average]
[info]   (min, avg, max) = (4488.785, 4521.938, 4564.205), stdev = 27.720
[info]   CI (99.9%): [4415.197, 4628.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1343.957 ±(99.9%) 4.289 MB/sec [Average]
[info]   (min, avg, max) = (1342.209, 1343.957, 1345.062), stdev = 1.114
[info]   CI (99.9%): [1339.668, 1348.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4366.187 ±(99.9%) 64.687 B/op [Average]
[info]   (min, avg, max) = (4346.641, 4366.187, 4383.730), stdev = 16.799
[info]   CI (99.9%): [4301.500, 4430.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.650 ±(99.9%) 4.787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 2.852), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.111 ±(99.9%) 15.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.111, 9.265), stdev = 4.038
[info]   CI (99.9%): [≈ 0, 17.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12989.498 ops/s
[info] # Warmup Iteration   2: 68755.829 ops/s
[info] # Warmup Iteration   3: 75034.396 ops/s
[info] # Warmup Iteration   4: 75284.785 ops/s
[info] # Warmup Iteration   5: 75295.141 ops/s
[info] Iteration   1: 75316.877 ops/s
[info]                  ·gc.alloc.rate:               1554.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          32473.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27923.051 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 75324.291 ops/s
[info]                  ·gc.alloc.rate:                   1554.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              32485.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27948.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 75518.796 ops/s
[info]                  ·gc.alloc.rate:                   1571.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              32742.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27890.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 75687.054 ops/s
[info]                  ·gc.alloc.rate:                   1574.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              32742.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41609.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 75938.021 ops/s
[info]                  ·gc.alloc.rate:               1564.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          32431.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27611.908 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   75557.008 ±(99.9%) 1010.314 ops/s [Average]
[info]   (min, avg, max) = (75316.877, 75557.008, 75938.021), stdev = 262.375
[info]   CI (99.9%): [74546.694, 76567.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1563.876 ±(99.9%) 35.928 MB/sec [Average]
[info]   (min, avg, max) = (1554.058, 1563.876, 1574.632), stdev = 9.330
[info]   CI (99.9%): [1527.948, 1599.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32575.269 ±(99.9%) 593.133 B/op [Average]
[info]   (min, avg, max) = (32431.449, 32575.269, 32742.924), stdev = 154.035
[info]   CI (99.9%): [31982.136, 33168.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.102 ±(99.9%) 1145.156 MB/sec [Average]
[info]   (min, avg, max) = (1332.265, 1469.102, 2001.079), stdev = 297.393
[info]   CI (99.9%): [323.946, 2614.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30596.703 ±(99.9%) 23711.598 B/op [Average]
[info]   (min, avg, max) = (27611.908, 30596.703, 41609.499), stdev = 6157.827
[info]   CI (99.9%): [6885.105, 54308.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 4.351), stdev = 1.924
[info]   CI (99.9%): [≈ 0, 8.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.001 ±(99.9%) 154.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.001, 90.672), stdev = 40.090
[info]   CI (99.9%): [≈ 0, 173.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81333.601 ops/s
[info] # Warmup Iteration   2: 288491.111 ops/s
[info] # Warmup Iteration   3: 324565.386 ops/s
[info] # Warmup Iteration   4: 327803.095 ops/s
[info] # Warmup Iteration   5: 327321.906 ops/s
[info] Iteration   1: 329206.475 ops/s
[info]                  ·gc.alloc.rate:                   2443.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              11683.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9627.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.185 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 327295.714 ops/s
[info]                  ·gc.alloc.rate:                   2442.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              11745.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12877.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 330111.619 ops/s
[info]                  ·gc.alloc.rate:               2464.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          11747.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9579.169 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 329675.947 ops/s
[info]                  ·gc.alloc.rate:               2488.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          11880.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12811.636 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 329762.650 ops/s
[info]                  ·gc.alloc.rate:               2488.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          11878.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12844.702 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   329210.481 ±(99.9%) 4305.128 ops/s [Average]
[info]   (min, avg, max) = (327295.714, 329210.481, 330111.619), stdev = 1118.028
[info]   CI (99.9%): [324905.353, 333515.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2465.595 ±(99.9%) 87.588 MB/sec [Average]
[info]   (min, avg, max) = (2442.649, 2465.595, 2488.762), stdev = 22.746
[info]   CI (99.9%): [2378.008, 2553.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11787.070 ±(99.9%) 338.703 B/op [Average]
[info]   (min, avg, max) = (11683.994, 11787.070, 11880.342), stdev = 87.960
[info]   CI (99.9%): [11448.366, 12125.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2415.194 ±(99.9%) 1419.267 MB/sec [Average]
[info]   (min, avg, max) = (2009.290, 2415.194, 2691.257), stdev = 368.579
[info]   CI (99.9%): [995.927, 3834.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11548.024 ±(99.9%) 6837.472 B/op [Average]
[info]   (min, avg, max) = (9579.169, 11548.024, 12877.519), stdev = 1775.670
[info]   CI (99.9%): [4710.551, 18385.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 1.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.666), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.677 ±(99.9%) 5.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 3.185), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93985.265 ops/s
[info] # Warmup Iteration   2: 547732.361 ops/s
[info] # Warmup Iteration   3: 578495.371 ops/s
[info] # Warmup Iteration   4: 575387.938 ops/s
[info] # Warmup Iteration   5: 583428.146 ops/s
[info] Iteration   1: 587208.488 ops/s
[info]                  ·gc.alloc.rate:                   1548.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              4148.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5370.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 592611.287 ops/s
[info]                  ·gc.alloc.rate:                   1533.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              4073.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3552.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 592430.672 ops/s
[info]                  ·gc.alloc.rate:                   1532.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              4072.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3555.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 593302.545 ops/s
[info]                  ·gc.alloc.rate:                   1560.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              4138.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3541.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 572613.709 ops/s
[info]                  ·gc.alloc.rate:                   1520.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              4177.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5493.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   587633.340 ±(99.9%) 33663.088 ops/s [Average]
[info]   (min, avg, max) = (572613.709, 587633.340, 593302.545), stdev = 8742.197
[info]   CI (99.9%): [553970.252, 621296.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1539.098 ±(99.9%) 59.351 MB/sec [Average]
[info]   (min, avg, max) = (1520.235, 1539.098, 1560.276), stdev = 15.413
[info]   CI (99.9%): [1479.746, 1598.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4122.280 ±(99.9%) 182.099 B/op [Average]
[info]   (min, avg, max) = (4072.417, 4122.280, 4177.926), stdev = 47.291
[info]   CI (99.9%): [3940.181, 4304.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1602.817 ±(99.9%) 1401.184 MB/sec [Average]
[info]   (min, avg, max) = (1335.069, 1602.817, 2004.069), stdev = 363.883
[info]   CI (99.9%): [201.633, 3004.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4302.676 ±(99.9%) 3973.066 B/op [Average]
[info]   (min, avg, max) = (3541.346, 4302.676, 5493.061), stdev = 1031.793
[info]   CI (99.9%): [329.610, 8275.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.636 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.908, 4.455), stdev = 1.983
[info]   CI (99.9%): [≈ 0, 8.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.412 ±(99.9%) 20.285 B/op [Average]
[info]   (min, avg, max) = (0.055, 2.412, 11.835), stdev = 5.268
[info]   CI (99.9%): [≈ 0, 22.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637364.830 ops/s
[info] # Warmup Iteration   2: 1317492.359 ops/s
[info] # Warmup Iteration   3: 1348532.621 ops/s
[info] # Warmup Iteration   4: 1364107.820 ops/s
[info] # Warmup Iteration   5: 1353093.589 ops/s
[info] Iteration   1: 1366354.058 ops/s
[info]                  ·gc.alloc.rate:                   2734.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              3149.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3093.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1373784.986 ops/s
[info]                  ·gc.alloc.rate:                   2787.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              3193.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3078.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1372133.058 ops/s
[info]                  ·gc.alloc.rate:                   2785.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              3194.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3088.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1373276.543 ops/s
[info]                  ·gc.alloc.rate:                   2789.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              3194.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3093.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1361271.508 ops/s
[info]                  ·gc.alloc.rate:               2745.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          3172.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2344.763 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1369364.031 ±(99.9%) 20831.679 ops/s [Average]
[info]   (min, avg, max) = (1361271.508, 1369364.031, 1373784.986), stdev = 5409.921
[info]   CI (99.9%): [1348532.352, 1390195.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2768.242 ±(99.9%) 100.620 MB/sec [Average]
[info]   (min, avg, max) = (2734.601, 2768.242, 2789.025), stdev = 26.131
[info]   CI (99.9%): [2667.622, 2868.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3180.940 ±(99.9%) 76.508 B/op [Average]
[info]   (min, avg, max) = (3149.574, 3180.940, 3194.996), stdev = 19.869
[info]   CI (99.9%): [3104.431, 3257.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2559.128 ±(99.9%) 1141.464 MB/sec [Average]
[info]   (min, avg, max) = (2028.945, 2559.128, 2700.446), stdev = 296.435
[info]   CI (99.9%): [1417.663, 3700.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2939.853 ±(99.9%) 1281.198 B/op [Average]
[info]   (min, avg, max) = (2344.763, 2939.853, 3093.878), stdev = 332.723
[info]   CI (99.9%): [1658.656, 4221.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.167), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15821.443 ops/s
[info] # Warmup Iteration   2: 98935.255 ops/s
[info] # Warmup Iteration   3: 105913.228 ops/s
[info] # Warmup Iteration   4: 107442.219 ops/s
[info] # Warmup Iteration   5: 109924.790 ops/s
[info] Iteration   1: 111502.726 ops/s
[info]                  ·gc.alloc.rate:               3585.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          50600.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3339.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47126.589 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 111220.667 ops/s
[info]                  ·gc.alloc.rate:                   3577.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              50623.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47401.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 111009.209 ops/s
[info]                  ·gc.alloc.rate:               3572.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          50646.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3362.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47671.131 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 106746.188 ops/s
[info]                  ·gc.alloc.rate:                   3456.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              50972.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49766.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.228 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 111172.027 ops/s
[info]                  ·gc.alloc.rate:                   3524.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              49890.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47916.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   110330.163 ±(99.9%) 7745.113 ops/s [Average]
[info]   (min, avg, max) = (106746.188, 110330.163, 111502.726), stdev = 2011.381
[info]   CI (99.9%): [102585.051, 118075.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3543.329 ±(99.9%) 207.363 MB/sec [Average]
[info]   (min, avg, max) = (3456.950, 3543.329, 3585.553), stdev = 53.851
[info]   CI (99.9%): [3335.966, 3750.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50546.748 ±(99.9%) 1528.252 B/op [Average]
[info]   (min, avg, max) = (49890.853, 50546.748, 50972.290), stdev = 396.882
[info]   CI (99.9%): [49018.496, 52075.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3362.335 ±(99.9%) 71.107 MB/sec [Average]
[info]   (min, avg, max) = (3339.416, 3362.335, 3384.997), stdev = 18.466
[info]   CI (99.9%): [3291.228, 3433.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47976.452 ±(99.9%) 4017.753 B/op [Average]
[info]   (min, avg, max) = (47126.589, 47976.452, 49766.624), stdev = 1043.398
[info]   CI (99.9%): [43958.699, 51994.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.363 ±(99.9%) 1.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.363, 1.228), stdev = 0.505
[info]   CI (99.9%): [≈ 0, 2.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126965.016 ops/s
[info] # Warmup Iteration   2: 335903.240 ops/s
[info] # Warmup Iteration   3: 349221.926 ops/s
[info] # Warmup Iteration   4: 344613.715 ops/s
[info] # Warmup Iteration   5: 347202.370 ops/s
[info] Iteration   1: 351740.648 ops/s
[info]                  ·gc.alloc.rate:                   1197.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              5358.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2999.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 342902.843 ops/s
[info]                  ·gc.alloc.rate:               1179.983 MB/sec
[info]                  ·gc.alloc.rate.norm:          5415.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6156.206 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 342567.955 ops/s
[info]                  ·gc.alloc.rate:               1190.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          5471.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6166.762 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 341938.135 ops/s
[info]                  ·gc.alloc.rate:                   1184.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              5450.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6182.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 344667.391 ops/s
[info]                  ·gc.alloc.rate:                   1182.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              5401.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3067.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   344763.394 ±(99.9%) 15517.066 ops/s [Average]
[info]   (min, avg, max) = (341938.135, 344763.394, 351740.648), stdev = 4029.733
[info]   CI (99.9%): [329246.328, 360280.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1187.107 ±(99.9%) 27.325 MB/sec [Average]
[info]   (min, avg, max) = (1179.983, 1187.107, 1197.580), stdev = 7.096
[info]   CI (99.9%): [1159.782, 1214.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5419.506 ±(99.9%) 169.098 B/op [Average]
[info]   (min, avg, max) = (5358.355, 5419.506, 5471.137), stdev = 43.914
[info]   CI (99.9%): [5250.408, 5588.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.815 ±(99.9%) 1415.497 MB/sec [Average]
[info]   (min, avg, max) = (670.482, 1073.815, 1343.215), stdev = 367.600
[info]   CI (99.9%): [≈ 0, 2489.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4914.623 ±(99.9%) 6612.086 B/op [Average]
[info]   (min, avg, max) = (2999.951, 4914.623, 6182.540), stdev = 1717.138
[info]   CI (99.9%): [≈ 0, 11526.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 4.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 2.956), stdev = 1.288
[info]   CI (99.9%): [≈ 0, 5.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.082 ±(99.9%) 22.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.082, 13.605), stdev = 5.928
[info]   CI (99.9%): [≈ 0, 25.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283263.001 ops/s
[info] # Warmup Iteration   2: 801740.974 ops/s
[info] # Warmup Iteration   3: 836012.412 ops/s
[info] # Warmup Iteration   4: 823250.206 ops/s
[info] # Warmup Iteration   5: 851905.654 ops/s
[info] Iteration   1: 852227.459 ops/s
[info]                  ·gc.alloc.rate:               639.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          1180.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1229.528 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 832516.889 ops/s
[info]                  ·gc.alloc.rate:               615.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          1163.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1258.712 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 830000.545 ops/s
[info]                  ·gc.alloc.rate:               617.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          1170.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1264.424 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 833170.383 ops/s
[info]                  ·gc.alloc.rate:                   620.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1172.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 831328.019 ops/s
[info]                  ·gc.alloc.rate:               617.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1263.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   835848.659 ±(99.9%) 35562.503 ops/s [Average]
[info]   (min, avg, max) = (830000.545, 835848.659, 852227.459), stdev = 9235.469
[info]   CI (99.9%): [800286.156, 871411.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   622.097 ±(99.9%) 37.966 MB/sec [Average]
[info]   (min, avg, max) = (615.437, 622.097, 639.384), stdev = 9.860
[info]   CI (99.9%): [584.131, 660.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1171.167 ±(99.9%) 24.596 B/op [Average]
[info]   (min, avg, max) = (1163.013, 1171.167, 1180.567), stdev = 6.388
[info]   CI (99.9%): [1146.571, 1195.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.627 ±(99.9%) 2.445 MB/sec [Average]
[info]   (min, avg, max) = (665.901, 666.627, 667.448), stdev = 0.635
[info]   CI (99.9%): [664.182, 669.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1255.178 ±(99.9%) 56.040 B/op [Average]
[info]   (min, avg, max) = (1229.528, 1255.178, 1264.424), stdev = 14.553
[info]   CI (99.9%): [1199.138, 1311.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1287403.815 ops/s
[info] # Warmup Iteration   2: 2010679.655 ops/s
[info] # Warmup Iteration   3: 2131705.128 ops/s
[info] # Warmup Iteration   4: 2134413.175 ops/s
[info] # Warmup Iteration   5: 2117904.986 ops/s
[info] Iteration   1: 2127783.158 ops/s
[info]                  ·gc.alloc.rate:               1008.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 496.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2128207.731 ops/s
[info]                  ·gc.alloc.rate:                   1025.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              758.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     993.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2130786.173 ops/s
[info]                  ·gc.alloc.rate:               1000.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          739.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 496.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2120607.453 ops/s
[info]                  ·gc.alloc.rate:                   1019.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2131360.416 ops/s
[info]                  ·gc.alloc.rate:                   999.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              737.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2127748.986 ±(99.9%) 16503.957 ops/s [Average]
[info]   (min, avg, max) = (2120607.453, 2127748.986, 2131360.416), stdev = 4286.025
[info]   CI (99.9%): [2111245.030, 2144252.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1010.744 ±(99.9%) 44.480 MB/sec [Average]
[info]   (min, avg, max) = (999.497, 1010.744, 1025.708), stdev = 11.551
[info]   CI (99.9%): [966.263, 1055.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   747.621 ±(99.9%) 36.990 B/op [Average]
[info]   (min, avg, max) = (737.984, 747.621, 758.525), stdev = 9.606
[info]   CI (99.9%): [710.631, 784.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.669 ±(99.9%) 1416.930 MB/sec [Average]
[info]   (min, avg, max) = (671.121, 940.669, 1344.581), stdev = 367.972
[info]   CI (99.9%): [≈ 0, 2357.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   696.100 ±(99.9%) 1052.564 B/op [Average]
[info]   (min, avg, max) = (496.408, 696.100, 997.938), stdev = 273.347
[info]   CI (99.9%): [≈ 0, 1748.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1369209.203 ops/s
[info] # Warmup Iteration   2: 2337771.901 ops/s
[info] # Warmup Iteration   3: 2350660.324 ops/s
[info] # Warmup Iteration   4: 2348176.675 ops/s
[info] # Warmup Iteration   5: 2357453.551 ops/s
[info] Iteration   1: 2350580.234 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2345750.351 ops/s
[info]                  ·gc.alloc.rate:      1.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2351862.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2351804.199 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2351377.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2350274.810 ±(99.9%) 9936.923 ops/s [Average]
[info]   (min, avg, max) = (2345750.351, 2350274.810, 2351862.095), stdev = 2580.587
[info]   CI (99.9%): [2340337.888, 2360211.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.310 ±(99.9%) 2.665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.310, 1.548), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 2.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.208 ±(99.9%) 1.788 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.208, 1.039), stdev = 0.464
[info]   CI (99.9%): [≈ 0, 1.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169553.889 ops/s
[info] # Warmup Iteration   2: 474984.586 ops/s
[info] # Warmup Iteration   3: 475975.454 ops/s
[info] # Warmup Iteration   4: 477505.323 ops/s
[info] # Warmup Iteration   5: 486974.393 ops/s
[info] Iteration   1: 482337.789 ops/s
[info]                  ·gc.alloc.rate:               713.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          2327.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2180.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 486335.990 ops/s
[info]                  ·gc.alloc.rate:               727.737 MB/sec
[info]                  ·gc.alloc.rate.norm:          2354.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2164.355 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 478275.517 ops/s
[info]                  ·gc.alloc.rate:                   710.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2337.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2200.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 481523.762 ops/s
[info]                  ·gc.alloc.rate:               713.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          2333.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2188.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 477506.704 ops/s
[info]                  ·gc.alloc.rate:                   706.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              2327.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2206.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   481195.952 ±(99.9%) 13610.097 ops/s [Average]
[info]   (min, avg, max) = (477506.704, 481195.952, 486335.990), stdev = 3534.499
[info]   CI (99.9%): [467585.855, 494806.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   714.378 ±(99.9%) 31.018 MB/sec [Average]
[info]   (min, avg, max) = (706.355, 714.378, 727.737), stdev = 8.055
[info]   CI (99.9%): [683.360, 745.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2336.091 ±(99.9%) 42.298 B/op [Average]
[info]   (min, avg, max) = (2327.336, 2336.091, 2354.102), stdev = 10.985
[info]   CI (99.9%): [2293.793, 2378.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   669.054 ±(99.9%) 2.275 MB/sec [Average]
[info]   (min, avg, max) = (668.191, 669.054, 669.724), stdev = 0.591
[info]   CI (99.9%): [666.779, 671.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2188.019 ±(99.9%) 64.847 B/op [Average]
[info]   (min, avg, max) = (2164.355, 2188.019, 2206.641), stdev = 16.840
[info]   CI (99.9%): [2123.172, 2252.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.069), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10330.996 ops/s
[info] # Warmup Iteration   2: 52894.615 ops/s
[info] # Warmup Iteration   3: 58731.533 ops/s
[info] # Warmup Iteration   4: 60282.737 ops/s
[info] # Warmup Iteration   5: 59207.415 ops/s
[info] Iteration   1: 59715.240 ops/s
[info]                  ·gc.alloc.rate:                   2103.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              55420.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53110.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 60852.356 ops/s
[info]                  ·gc.alloc.rate:                   2115.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              54705.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51960.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 59530.053 ops/s
[info]                  ·gc.alloc.rate:               2096.561 MB/sec
[info]                  ·gc.alloc.rate.norm:          55430.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53046.086 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 59372.670 ops/s
[info]                  ·gc.alloc.rate:               2092.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          55459.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53204.889 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 59637.038 ops/s
[info]                  ·gc.alloc.rate:               2101.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          55453.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53055.516 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59821.471 ±(99.9%) 2273.487 ops/s [Average]
[info]   (min, avg, max) = (59372.670, 59821.471, 60852.356), stdev = 590.417
[info]   CI (99.9%): [57547.985, 62094.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2101.889 ±(99.9%) 33.605 MB/sec [Average]
[info]   (min, avg, max) = (2092.192, 2101.889, 2115.272), stdev = 8.727
[info]   CI (99.9%): [2068.284, 2135.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55293.873 ±(99.9%) 1268.090 B/op [Average]
[info]   (min, avg, max) = (54705.475, 55293.873, 55459.725), stdev = 329.319
[info]   CI (99.9%): [54025.783, 56561.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2009.894 ±(99.9%) 14.668 MB/sec [Average]
[info]   (min, avg, max) = (2006.392, 2009.894, 2015.939), stdev = 3.809
[info]   CI (99.9%): [1995.226, 2024.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   52875.339 ±(99.9%) 1984.842 B/op [Average]
[info]   (min, avg, max) = (51960.193, 52875.339, 53204.889), stdev = 515.457
[info]   CI (99.9%): [50890.497, 54860.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.771 ±(99.9%) 6.545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.771, 3.811), stdev = 1.700
[info]   CI (99.9%): [≈ 0, 7.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.296 ±(99.9%) 172.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.296, 100.404), stdev = 44.784
[info]   CI (99.9%): [≈ 0, 192.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21035.838 ops/s
[info] # Warmup Iteration   2: 85250.596 ops/s
[info] # Warmup Iteration   3: 94542.983 ops/s
[info] # Warmup Iteration   4: 94479.370 ops/s
[info] # Warmup Iteration   5: 94372.370 ops/s
[info] Iteration   1: 94953.798 ops/s
[info]                  ·gc.alloc.rate:               1735.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          28771.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22165.066 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 93906.920 ops/s
[info]                  ·gc.alloc.rate:                   1731.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              29024.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33649.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.662 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 95702.205 ops/s
[info]                  ·gc.alloc.rate:                   1750.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              28792.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21953.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 93458.730 ops/s
[info]                  ·gc.alloc.rate:                   1737.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              29252.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33653.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 94843.145 ops/s
[info]                  ·gc.alloc.rate:               1735.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          28797.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22114.790 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   94572.960 ±(99.9%) 3432.450 ops/s [Average]
[info]   (min, avg, max) = (93458.730, 94572.960, 95702.205), stdev = 891.396
[info]   CI (99.9%): [91140.509, 98005.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1738.278 ±(99.9%) 28.089 MB/sec [Average]
[info]   (min, avg, max) = (1731.777, 1738.278, 1750.803), stdev = 7.295
[info]   CI (99.9%): [1710.189, 1766.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28927.556 ±(99.9%) 803.502 B/op [Average]
[info]   (min, avg, max) = (28771.439, 28927.556, 29252.135), stdev = 208.667
[info]   CI (99.9%): [28124.054, 29731.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1602.315 ±(99.9%) 1409.364 MB/sec [Average]
[info]   (min, avg, max) = (1332.900, 1602.315, 2007.769), stdev = 366.007
[info]   CI (99.9%): [192.952, 3011.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26707.350 ±(99.9%) 24411.782 B/op [Average]
[info]   (min, avg, max) = (21953.742, 26707.350, 33653.508), stdev = 6339.662
[info]   CI (99.9%): [2295.567, 51119.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.455), stdev = 1.974
[info]   CI (99.9%): [≈ 0, 8.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.483 ±(99.9%) 127.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.483, 74.662), stdev = 33.093
[info]   CI (99.9%): [≈ 0, 142.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51967.072 ops/s
[info] # Warmup Iteration   2: 156402.049 ops/s
[info] # Warmup Iteration   3: 163859.138 ops/s
[info] # Warmup Iteration   4: 167040.523 ops/s
[info] # Warmup Iteration   5: 168894.261 ops/s
[info] Iteration   1: 169164.432 ops/s
[info]                  ·gc.alloc.rate:                   2684.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              24979.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24976.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.292 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 169912.753 ops/s
[info]                  ·gc.alloc.rate:                   2697.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              24985.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24854.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 170582.812 ops/s
[info]                  ·gc.alloc.rate:               2721.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          25105.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2685.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24780.691 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 168656.130 ops/s
[info]                  ·gc.alloc.rate:               2692.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          25124.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25119.725 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 165707.363 ops/s
[info]                  ·gc.alloc.rate:               2646.866 MB/sec
[info]                  ·gc.alloc.rate.norm:          25140.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25637.833 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   168804.698 ±(99.9%) 7238.402 ops/s [Average]
[info]   (min, avg, max) = (165707.363, 168804.698, 170582.812), stdev = 1879.790
[info]   CI (99.9%): [161566.296, 176043.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2688.612 ±(99.9%) 103.907 MB/sec [Average]
[info]   (min, avg, max) = (2646.866, 2688.612, 2721.193), stdev = 26.984
[info]   CI (99.9%): [2584.705, 2792.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25066.909 ±(99.9%) 301.292 B/op [Average]
[info]   (min, avg, max) = (24979.205, 25066.909, 25140.253), stdev = 78.245
[info]   CI (99.9%): [24765.618, 25368.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2689.063 ±(99.9%) 25.836 MB/sec [Average]
[info]   (min, avg, max) = (2683.169, 2689.063, 2699.253), stdev = 6.709
[info]   CI (99.9%): [2663.227, 2714.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25073.793 ±(99.9%) 1311.229 B/op [Average]
[info]   (min, avg, max) = (24780.691, 25073.793, 25637.833), stdev = 340.522
[info]   CI (99.9%): [23762.565, 26385.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.354), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.697 ±(99.9%) 5.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.697, 3.292), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3109.791 ops/s
[info] # Warmup Iteration   2: 27603.761 ops/s
[info] # Warmup Iteration   3: 33295.011 ops/s
[info] # Warmup Iteration   4: 34007.955 ops/s
[info] # Warmup Iteration   5: 33323.111 ops/s
[info] Iteration   1: 34171.880 ops/s
[info]                  ·gc.alloc.rate:                   2267.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              104411.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92423.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 34034.228 ops/s
[info]                  ·gc.alloc.rate:                   2273.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              105109.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93010.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.963 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33466.418 ops/s
[info]                  ·gc.alloc.rate:               2224.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          104588.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94829.541 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 33479.866 ops/s
[info]                  ·gc.alloc.rate:               2279.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          107117.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126703.455 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 34131.726 ops/s
[info]                  ·gc.alloc.rate:               2294.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          105800.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93404.013 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33856.824 ±(99.9%) 1362.522 ops/s [Average]
[info]   (min, avg, max) = (33466.418, 33856.824, 34171.880), stdev = 353.843
[info]   CI (99.9%): [32494.302, 35219.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2267.921 ±(99.9%) 100.598 MB/sec [Average]
[info]   (min, avg, max) = (2224.933, 2267.921, 2294.875), stdev = 26.125
[info]   CI (99.9%): [2167.323, 2368.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105405.613 ±(99.9%) 4231.295 B/op [Average]
[info]   (min, avg, max) = (104411.959, 105405.613, 107117.801), stdev = 1098.854
[info]   CI (99.9%): [101174.318, 109636.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2151.573 ±(99.9%) 1172.295 MB/sec [Average]
[info]   (min, avg, max) = (2007.105, 2151.573, 2696.027), stdev = 304.441
[info]   CI (99.9%): [979.278, 3323.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   100074.141 ±(99.9%) 57423.319 B/op [Average]
[info]   (min, avg, max) = (92423.056, 100074.141, 126703.455), stdev = 14912.654
[info]   CI (99.9%): [42650.822, 157497.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.521), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 0.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.986 ±(99.9%) 40.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.986, 23.969), stdev = 10.620
[info]   CI (99.9%): [≈ 0, 45.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50709.844 ops/s
[info] # Warmup Iteration   2: 151797.087 ops/s
[info] # Warmup Iteration   3: 156650.632 ops/s
[info] # Warmup Iteration   4: 160804.453 ops/s
[info] # Warmup Iteration   5: 160895.047 ops/s
[info] Iteration   1: 160231.603 ops/s
[info]                  ·gc.alloc.rate:               1063.362 MB/sec
[info]                  ·gc.alloc.rate.norm:          10444.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6552.782 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 161145.184 ops/s
[info]                  ·gc.alloc.rate:               1084.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          10595.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13044.660 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 160847.471 ops/s
[info]                  ·gc.alloc.rate:                   1091.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              10676.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13075.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 161666.013 ops/s
[info]                  ·gc.alloc.rate:               1067.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          10394.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6511.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 160481.655 ops/s
[info]                  ·gc.alloc.rate:                   1074.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              10534.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13124.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   160874.385 ±(99.9%) 2168.135 ops/s [Average]
[info]   (min, avg, max) = (160231.603, 160874.385, 161666.013), stdev = 563.058
[info]   CI (99.9%): [158706.250, 163042.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1076.282 ±(99.9%) 44.525 MB/sec [Average]
[info]   (min, avg, max) = (1063.362, 1076.282, 1091.096), stdev = 11.563
[info]   CI (99.9%): [1031.757, 1120.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10529.142 ±(99.9%) 435.914 B/op [Average]
[info]   (min, avg, max) = (10394.548, 10529.142, 10676.158), stdev = 113.206
[info]   CI (99.9%): [10093.227, 10965.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.241 ±(99.9%) 1410.351 MB/sec [Average]
[info]   (min, avg, max) = (667.121, 1069.241, 1338.255), stdev = 366.264
[info]   CI (99.9%): [≈ 0, 2479.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10461.586 ±(99.9%) 13813.620 B/op [Average]
[info]   (min, avg, max) = (6511.203, 10461.586, 13124.021), stdev = 3587.353
[info]   CI (99.9%): [≈ 0, 24275.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.789), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.472 ±(99.9%) 63.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.472, 37.154), stdev = 16.593
[info]   CI (99.9%): [≈ 0, 71.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183024.056 ops/s
[info] # Warmup Iteration   2: 436212.293 ops/s
[info] # Warmup Iteration   3: 459870.556 ops/s
[info] # Warmup Iteration   4: 460609.273 ops/s
[info] # Warmup Iteration   5: 461049.840 ops/s
[info] Iteration   1: 460918.092 ops/s
[info]                  ·gc.alloc.rate:                   527.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              1800.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1746.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 461851.814 ops/s
[info]                  ·gc.alloc.rate:               525.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          1791.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2283.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 460969.448 ops/s
[info]                  ·gc.alloc.rate:                   536.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              1831.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2288.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 463269.197 ops/s
[info]                  ·gc.alloc.rate:      511.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 462165.650 ops/s
[info]                  ·gc.alloc.rate:               535.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          1823.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2284.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   461834.840 ±(99.9%) 3731.568 ops/s [Average]
[info]   (min, avg, max) = (460918.092, 461834.840, 463269.197), stdev = 969.076
[info]   CI (99.9%): [458103.272, 465566.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   527.193 ±(99.9%) 39.552 MB/sec [Average]
[info]   (min, avg, max) = (511.007, 527.193, 536.590), stdev = 10.272
[info]   CI (99.9%): [487.641, 566.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1796.612 ±(99.9%) 145.267 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1796.612, 1831.769), stdev = 37.725
[info]   CI (99.9%): [1651.344, 1941.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.544 ±(99.9%) 1117.876 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.544, 670.754), stdev = 290.309
[info]   CI (99.9%): [≈ 0, 1622.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1720.590 ±(99.9%) 3810.989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1720.590, 2288.032), stdev = 989.702
[info]   CI (99.9%): [≈ 0, 5531.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.142), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209732.687 ops/s
[info] # Warmup Iteration   2: 499185.277 ops/s
[info] # Warmup Iteration   3: 510865.759 ops/s
[info] # Warmup Iteration   4: 511020.867 ops/s
[info] # Warmup Iteration   5: 510742.662 ops/s
[info] Iteration   1: 509529.142 ops/s
[info]                  ·gc.alloc.rate:      5.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 510901.811 ops/s
[info]                  ·gc.alloc.rate:      5.195 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 510977.486 ops/s
[info]                  ·gc.alloc.rate:      5.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 510839.206 ops/s
[info]                  ·gc.alloc.rate:      5.194 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 509363.953 ops/s
[info]                  ·gc.alloc.rate:      5.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   510322.319 ±(99.9%) 3092.419 ops/s [Average]
[info]   (min, avg, max) = (509363.953, 510322.319, 510977.486), stdev = 803.091
[info]   CI (99.9%): [507229.901, 513414.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.189 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (5.180, 5.189, 5.196), stdev = 0.008
[info]   CI (99.9%): [5.158, 5.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11397.180 ops/s
[info] # Warmup Iteration   2: 65756.586 ops/s
[info] # Warmup Iteration   3: 72462.647 ops/s
[info] # Warmup Iteration   4: 76520.920 ops/s
[info] # Warmup Iteration   5: 76351.985 ops/s
[info] Iteration   1: 74939.856 ops/s
[info]                  ·gc.alloc.rate:                   1340.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              28154.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27847.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 75224.238 ops/s
[info]                  ·gc.alloc.rate:                   1339.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              28017.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27770.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 75083.447 ops/s
[info]                  ·gc.alloc.rate:                   1344.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              28181.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27863.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 75784.390 ops/s
[info]                  ·gc.alloc.rate:                   1356.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              28174.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27653.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 75489.812 ops/s
[info]                  ·gc.alloc.rate:                   1365.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              28475.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27818.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.868 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   75304.349 ±(99.9%) 1295.709 ops/s [Average]
[info]   (min, avg, max) = (74939.856, 75304.349, 75784.390), stdev = 336.492
[info]   CI (99.9%): [74008.639, 76600.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1349.375 ±(99.9%) 44.135 MB/sec [Average]
[info]   (min, avg, max) = (1339.370, 1349.375, 1365.828), stdev = 11.462
[info]   CI (99.9%): [1305.240, 1393.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28200.639 ±(99.9%) 644.311 B/op [Average]
[info]   (min, avg, max) = (28017.854, 28200.639, 28475.205), stdev = 167.325
[info]   CI (99.9%): [27556.328, 28844.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1329.737 ±(99.9%) 12.798 MB/sec [Average]
[info]   (min, avg, max) = (1325.943, 1329.737, 1334.347), stdev = 3.324
[info]   CI (99.9%): [1316.939, 1342.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27790.665 ±(99.9%) 324.510 B/op [Average]
[info]   (min, avg, max) = (27653.809, 27790.665, 27863.076), stdev = 84.274
[info]   CI (99.9%): [27466.155, 28115.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.027 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.027, 0.042), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.561 ±(99.9%) 1.281 B/op [Average]
[info]   (min, avg, max) = (0.211, 0.561, 0.873), stdev = 0.333
[info]   CI (99.9%): [≈ 0, 1.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188495.542 ops/s
[info] # Warmup Iteration   2: 2690147.321 ops/s
[info] # Warmup Iteration   3: 2893819.086 ops/s
[info] # Warmup Iteration   4: 2893237.722 ops/s
[info] # Warmup Iteration   5: 2830210.519 ops/s
[info] Iteration   1: 2923978.801 ops/s
[info]                  ·gc.alloc.rate:                   3744.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              2015.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3348.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1802.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2916130.785 ops/s
[info]                  ·gc.alloc.rate:                   3778.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              2038.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4030.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2174.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2909493.817 ops/s
[info]                  ·gc.alloc.rate:               3742.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          2024.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1823.894 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2893398.998 ops/s
[info]                  ·gc.alloc.rate:               3723.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          2025.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1839.458 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 2924386.989 ops/s
[info]                  ·gc.alloc.rate:               3789.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          2039.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4067.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2189.240 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2913477.878 ±(99.9%) 49287.872 ops/s [Average]
[info]   (min, avg, max) = (2893398.998, 2913477.878, 2924386.989), stdev = 12799.904
[info]   CI (99.9%): [2864190.006, 2962765.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3755.573 ±(99.9%) 105.580 MB/sec [Average]
[info]   (min, avg, max) = (3723.052, 3755.573, 3789.224), stdev = 27.419
[info]   CI (99.9%): [3649.993, 3861.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2028.587 ±(99.9%) 38.808 B/op [Average]
[info]   (min, avg, max) = (2015.640, 2028.587, 2039.347), stdev = 10.078
[info]   CI (99.9%): [1989.780, 2067.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3639.942 ±(99.9%) 1439.734 MB/sec [Average]
[info]   (min, avg, max) = (3348.434, 3639.942, 4067.733), stdev = 373.894
[info]   CI (99.9%): [2200.208, 5079.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1965.815 ±(99.9%) 760.873 B/op [Average]
[info]   (min, avg, max) = (1802.305, 1965.815, 2189.240), stdev = 197.596
[info]   CI (99.9%): [1204.942, 2726.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.045), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.662 ops/s
[info] # Warmup Iteration   2: 771340.066 ops/s
[info] # Warmup Iteration   3: 789225.784 ops/s
[info] # Warmup Iteration   4: 820647.442 ops/s
[info] # Warmup Iteration   5: 822103.962 ops/s
[info] Iteration   1: 826971.014 ops/s
[info]                  ·gc.alloc.rate:      479.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 823700.518 ops/s
[info]                  ·gc.alloc.rate:               477.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1272.854 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 794689.801 ops/s
[info]                  ·gc.alloc.rate:                   461.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              913.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1319.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 793477.222 ops/s
[info]                  ·gc.alloc.rate:               472.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          937.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1321.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 780006.868 ops/s
[info]                  ·gc.alloc.rate:      451.972 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   803769.085 ±(99.9%) 79116.218 ops/s [Average]
[info]   (min, avg, max) = (780006.868, 803769.085, 826971.014), stdev = 20546.231
[info]   CI (99.9%): [724652.867, 882885.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   468.453 ±(99.9%) 44.546 MB/sec [Average]
[info]   (min, avg, max) = (451.972, 468.453, 479.198), stdev = 11.568
[info]   CI (99.9%): [423.908, 512.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   917.360 ±(99.9%) 43.136 B/op [Average]
[info]   (min, avg, max) = (912.001, 917.360, 937.369), stdev = 11.202
[info]   CI (99.9%): [874.224, 960.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.753 ±(99.9%) 1405.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.753, 666.472), stdev = 364.922
[info]   CI (99.9%): [≈ 0, 1804.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   782.816 ±(99.9%) 2752.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 782.816, 1321.966), stdev = 714.877
[info]   CI (99.9%): [≈ 0, 3535.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19441.487 ops/s
[info] # Warmup Iteration   2: 183828.197 ops/s
[info] # Warmup Iteration   3: 343887.465 ops/s
[info] # Warmup Iteration   4: 358882.805 ops/s
[info] # Warmup Iteration   5: 361837.411 ops/s
[info] Iteration   1: 360760.430 ops/s
[info]                  ·gc.alloc.rate:               852.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          3718.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2907.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 353100.024 ops/s
[info]                  ·gc.alloc.rate:               840.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          3747.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2973.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 355005.366 ops/s
[info]                  ·gc.alloc.rate:                   862.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              3824.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5917.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 350081.747 ops/s
[info]                  ·gc.alloc.rate:               831.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          3738.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3000.774 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 349539.316 ops/s
[info]                  ·gc.alloc.rate:               830.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          3737.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3008.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   353697.377 ±(99.9%) 17468.161 ops/s [Average]
[info]   (min, avg, max) = (349539.316, 353697.377, 360760.430), stdev = 4536.426
[info]   CI (99.9%): [336229.216, 371165.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   843.491 ±(99.9%) 53.710 MB/sec [Average]
[info]   (min, avg, max) = (830.042, 843.491, 862.715), stdev = 13.948
[info]   CI (99.9%): [789.781, 897.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3753.241 ±(99.9%) 158.786 B/op [Average]
[info]   (min, avg, max) = (3718.197, 3753.241, 3824.466), stdev = 41.236
[info]   CI (99.9%): [3594.455, 3912.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.823 ±(99.9%) 1149.384 MB/sec [Average]
[info]   (min, avg, max) = (666.519, 800.823, 1334.780), stdev = 298.491
[info]   CI (99.9%): [≈ 0, 1950.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3561.569 ±(99.9%) 5072.883 B/op [Average]
[info]   (min, avg, max) = (2907.690, 3561.569, 5917.158), stdev = 1317.412
[info]   CI (99.9%): [≈ 0, 8634.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327477.578 ops/s
[info] # Warmup Iteration   2: 671698.786 ops/s
[info] # Warmup Iteration   3: 730899.107 ops/s
[info] # Warmup Iteration   4: 727103.288 ops/s
[info] # Warmup Iteration   5: 735665.709 ops/s
[info] Iteration   1: 734998.692 ops/s
[info]                  ·gc.alloc.rate:               662.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          1419.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1438.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 735187.488 ops/s
[info]                  ·gc.alloc.rate:               671.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          1438.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1438.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 724678.064 ops/s
[info]                  ·gc.alloc.rate:               661.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          1436.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1460.489 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 727422.837 ops/s
[info]                  ·gc.alloc.rate:                   664.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              1436.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1454.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 722278.132 ops/s
[info]                  ·gc.alloc.rate:               664.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          1448.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1466.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   728913.043 ±(99.9%) 22827.985 ops/s [Average]
[info]   (min, avg, max) = (722278.132, 728913.043, 735187.488), stdev = 5928.355
[info]   CI (99.9%): [706085.057, 751741.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   665.002 ±(99.9%) 15.483 MB/sec [Average]
[info]   (min, avg, max) = (661.481, 665.002, 671.832), stdev = 4.021
[info]   CI (99.9%): [649.518, 680.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1435.851 ±(99.9%) 40.487 B/op [Average]
[info]   (min, avg, max) = (1419.290, 1435.851, 1448.567), stdev = 10.514
[info]   CI (99.9%): [1395.364, 1476.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672.295 ±(99.9%) 1.669 MB/sec [Average]
[info]   (min, avg, max) = (671.795, 672.295, 672.791), stdev = 0.433
[info]   CI (99.9%): [670.626, 673.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1451.632 ±(99.9%) 49.080 B/op [Average]
[info]   (min, avg, max) = (1438.185, 1451.632, 1466.049), stdev = 12.746
[info]   CI (99.9%): [1402.552, 1500.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733291.471 ops/s
[info] # Warmup Iteration   2: 2363967.408 ops/s
[info] # Warmup Iteration   3: 3203732.637 ops/s
[info] # Warmup Iteration   4: 3217781.004 ops/s
[info] # Warmup Iteration   5: 3168688.563 ops/s
[info] Iteration   1: 3226283.269 ops/s
[info]                  ·gc.alloc.rate:                   1950.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3209772.559 ops/s
[info]                  ·gc.alloc.rate:                   1928.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     990.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3198622.834 ops/s
[info]                  ·gc.alloc.rate:               1925.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          947.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661.771 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 3227801.114 ops/s
[info]                  ·gc.alloc.rate:                   1933.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3226343.902 ops/s
[info]                  ·gc.alloc.rate:                   1966.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              959.219 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     984.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3217764.736 ±(99.9%) 50102.178 ops/s [Average]
[info]   (min, avg, max) = (3198622.834, 3217764.736, 3227801.114), stdev = 13011.376
[info]   CI (99.9%): [3167662.558, 3267866.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1940.985 ±(99.9%) 65.759 MB/sec [Average]
[info]   (min, avg, max) = (1925.904, 1940.985, 1966.290), stdev = 17.077
[info]   CI (99.9%): [1875.226, 2006.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   949.316 ±(99.9%) 24.696 B/op [Average]
[info]   (min, avg, max) = (942.662, 949.316, 959.219), stdev = 6.413
[info]   CI (99.9%): [924.621, 974.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1884.228 ±(99.9%) 1160.843 MB/sec [Average]
[info]   (min, avg, max) = (1344.956, 1884.228, 2020.967), stdev = 301.467
[info]   CI (99.9%): [723.385, 3045.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   921.179 ±(99.9%) 558.503 B/op [Average]
[info]   (min, avg, max) = (661.771, 921.179, 990.702), stdev = 145.041
[info]   CI (99.9%): [362.677, 1479.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.529 ±(99.9%) 4.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 2.540), stdev = 1.125
[info]   CI (99.9%): [≈ 0, 4.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.259 ±(99.9%) 2.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.259, 1.245), stdev = 0.551
[info]   CI (99.9%): [≈ 0, 2.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1232962.725 ops/s
[info] # Warmup Iteration   2: 4235471.150 ops/s
[info] # Warmup Iteration   3: 7240851.063 ops/s
[info] # Warmup Iteration   4: 7231891.238 ops/s
[info] # Warmup Iteration   5: 7231508.766 ops/s
[info] Iteration   1: 7281520.894 ops/s
[info]                  ·gc.alloc.rate:                   814.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7234675.958 ops/s
[info]                  ·gc.alloc.rate:               792.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 7264998.623 ops/s
[info]                  ·gc.alloc.rate:               793.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145.687 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 7290822.619 ops/s
[info]                  ·gc.alloc.rate:               794.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145.243 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 7302374.280 ops/s
[info]                  ·gc.alloc.rate:               793.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145.013 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7274878.475 ±(99.9%) 101298.480 ops/s [Average]
[info]   (min, avg, max) = (7234675.958, 7274878.475, 7302374.280), stdev = 26306.894
[info]   CI (99.9%): [7173579.995, 7376176.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   797.595 ±(99.9%) 36.752 MB/sec [Average]
[info]   (min, avg, max) = (792.018, 797.595, 814.571), stdev = 9.544
[info]   CI (99.9%): [760.843, 834.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   172.546 ±(99.9%) 7.777 B/op [Average]
[info]   (min, avg, max) = (171.012, 172.546, 176.068), stdev = 2.020
[info]   CI (99.9%): [164.769, 180.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   806.893 ±(99.9%) 1155.400 MB/sec [Average]
[info]   (min, avg, max) = (672.496, 806.893, 1343.645), stdev = 300.054
[info]   CI (99.9%): [≈ 0, 1962.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   174.534 ±(99.9%) 249.474 B/op [Average]
[info]   (min, avg, max) = (145.013, 174.534, 290.426), stdev = 64.788
[info]   CI (99.9%): [≈ 0, 424.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2997.854 ops/s
[info] # Warmup Iteration   2: 68526.177 ops/s
[info] # Warmup Iteration   3: 215409.677 ops/s
[info] # Warmup Iteration   4: 230004.489 ops/s
[info] # Warmup Iteration   5: 229898.611 ops/s
[info] Iteration   1: 228963.020 ops/s
[info]                  ·gc.alloc.rate:               2021.277 MB/sec
[info]                  ·gc.alloc.rate.norm:          13894.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13803.499 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 227298.092 ops/s
[info]                  ·gc.alloc.rate:                   2023.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              14009.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13934.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 226265.409 ops/s
[info]                  ·gc.alloc.rate:                   2012.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              13999.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14012.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 226837.716 ops/s
[info]                  ·gc.alloc.rate:               1993.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          13830.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13988.563 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 226812.523 ops/s
[info]                  ·gc.alloc.rate:               2006.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          13923.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14008.533 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   227235.352 ±(99.9%) 3976.833 ops/s [Average]
[info]   (min, avg, max) = (226265.409, 227235.352, 228963.020), stdev = 1032.771
[info]   CI (99.9%): [223258.519, 231212.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2011.432 ±(99.9%) 46.596 MB/sec [Average]
[info]   (min, avg, max) = (1993.443, 2011.432, 2023.285), stdev = 12.101
[info]   CI (99.9%): [1964.836, 2058.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13931.408 ±(99.9%) 288.021 B/op [Average]
[info]   (min, avg, max) = (13830.011, 13931.408, 14009.539), stdev = 74.798
[info]   CI (99.9%): [13643.387, 14219.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2014.008 ±(99.9%) 15.821 MB/sec [Average]
[info]   (min, avg, max) = (2007.991, 2014.008, 2018.852), stdev = 4.109
[info]   CI (99.9%): [1998.187, 2029.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13949.490 ±(99.9%) 336.242 B/op [Average]
[info]   (min, avg, max) = (13803.499, 13949.490, 14012.337), stdev = 87.321
[info]   CI (99.9%): [13613.248, 14285.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.312 ±(99.9%) 1.840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.082), stdev = 0.478
[info]   CI (99.9%): [≈ 0, 2.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.165 ±(99.9%) 12.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.165, 7.495), stdev = 3.310
[info]   CI (99.9%): [≈ 0, 14.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 989996.475 ops/s
[info] # Warmup Iteration   2: 1570270.997 ops/s
[info] # Warmup Iteration   3: 1520730.593 ops/s
[info] # Warmup Iteration   4: 1572345.928 ops/s
[info] # Warmup Iteration   5: 1582280.574 ops/s
[info] Iteration   1: 1582062.178 ops/s
[info]                  ·gc.alloc.rate:      88.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1582067.883 ops/s
[info]                  ·gc.alloc.rate:      88.458 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1587011.530 ops/s
[info]                  ·gc.alloc.rate:      88.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.080 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1586296.856 ops/s
[info]                  ·gc.alloc.rate:      88.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1581681.630 ops/s
[info]                  ·gc.alloc.rate:                   101.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     509.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1583824.015 ±(99.9%) 10014.095 ops/s [Average]
[info]   (min, avg, max) = (1581681.630, 1583824.015, 1587011.530), stdev = 2600.629
[info]   CI (99.9%): [1573809.920, 1593838.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   91.157 ±(99.9%) 21.853 MB/sec [Average]
[info]   (min, avg, max) = (88.457, 91.157, 101.305), stdev = 5.675
[info]   CI (99.9%): [69.305, 113.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   90.575 ±(99.9%) 22.002 B/op [Average]
[info]   (min, avg, max) = (88.000, 90.575, 100.796), stdev = 5.714
[info]   CI (99.9%): [68.574, 112.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.329 ±(99.9%) 881.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.329, 511.646), stdev = 228.815
[info]   CI (99.9%): [≈ 0, 983.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   101.816 ±(99.9%) 876.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.816, 509.079), stdev = 227.667
[info]   CI (99.9%): [≈ 0, 978.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.165 ±(99.9%) 1.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.827), stdev = 0.370
[info]   CI (99.9%): [≈ 0, 1.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.165 ±(99.9%) 1.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.823), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 1.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5692.161 ops/s
[info] # Warmup Iteration   2: 63348.824 ops/s
[info] # Warmup Iteration   3: 75181.121 ops/s
[info] # Warmup Iteration   4: 75969.255 ops/s
[info] # Warmup Iteration   5: 77369.008 ops/s
[info] Iteration   1: 76248.148 ops/s
[info]                  ·gc.alloc.rate:               3346.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          69078.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3361.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69375.691 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 77032.987 ops/s
[info]                  ·gc.alloc.rate:                   3408.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              69612.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68874.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 76381.983 ops/s
[info]                  ·gc.alloc.rate:                   3381.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              69663.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69678.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.287 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 76788.301 ops/s
[info]                  ·gc.alloc.rate:               3371.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          69098.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2710.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55549.310 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 76363.463 ops/s
[info]                  ·gc.alloc.rate:               3380.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          69671.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3393.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69937.102 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   76562.976 ±(99.9%) 1281.985 ops/s [Average]
[info]   (min, avg, max) = (76248.148, 76562.976, 77032.987), stdev = 332.927
[info]   CI (99.9%): [75280.992, 77844.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3377.701 ±(99.9%) 85.298 MB/sec [Average]
[info]   (min, avg, max) = (3346.632, 3377.701, 3408.294), stdev = 22.152
[info]   CI (99.9%): [3292.403, 3462.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69424.828 ±(99.9%) 1185.878 B/op [Average]
[info]   (min, avg, max) = (69078.208, 69424.828, 69671.102), stdev = 307.969
[info]   CI (99.9%): [68238.950, 70610.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3243.864 ±(99.9%) 1149.261 MB/sec [Average]
[info]   (min, avg, max) = (2710.393, 3243.864, 3393.305), stdev = 298.459
[info]   CI (99.9%): [2094.603, 4393.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66683.093 ±(99.9%) 24014.581 B/op [Average]
[info]   (min, avg, max) = (55549.310, 66683.093, 69937.102), stdev = 6236.510
[info]   CI (99.9%): [42668.512, 90697.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.342 ±(99.9%) 2.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.342, 1.287), stdev = 0.559
[info]   CI (99.9%): [≈ 0, 2.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 566212.620 ops/s
[info] # Warmup Iteration   2: 1519479.816 ops/s
[info] # Warmup Iteration   3: 1558929.500 ops/s
[info] # Warmup Iteration   4: 1558023.831 ops/s
[info] # Warmup Iteration   5: 1571269.337 ops/s
[info] Iteration   1: 1569081.718 ops/s
[info]                  ·gc.alloc.rate:               859.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          862.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1339.025 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1569434.260 ops/s
[info]                  ·gc.alloc.rate:               850.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          853.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 669.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1564046.769 ops/s
[info]                  ·gc.alloc.rate:                   836.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              841.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     672.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1541650.100 ops/s
[info]                  ·gc.alloc.rate:               822.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          839.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 682.445 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1533751.243 ops/s
[info]                  ·gc.alloc.rate:                   833.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              855.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1373.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1555592.818 ±(99.9%) 64331.661 ops/s [Average]
[info]   (min, avg, max) = (1533751.243, 1555592.818, 1569434.260), stdev = 16706.728
[info]   CI (99.9%): [1491261.157, 1619924.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   840.671 ±(99.9%) 56.476 MB/sec [Average]
[info]   (min, avg, max) = (822.513, 840.671, 859.621), stdev = 14.667
[info]   CI (99.9%): [784.195, 897.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   850.507 ±(99.9%) 36.542 B/op [Average]
[info]   (min, avg, max) = (839.694, 850.507, 862.255), stdev = 9.490
[info]   CI (99.9%): [813.965, 887.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.607 ±(99.9%) 1409.595 MB/sec [Average]
[info]   (min, avg, max) = (667.842, 935.607, 1338.290), stdev = 366.067
[info]   CI (99.9%): [≈ 0, 2345.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   947.420 ±(99.9%) 1437.626 B/op [Average]
[info]   (min, avg, max) = (669.698, 947.420, 1373.282), stdev = 373.347
[info]   CI (99.9%): [≈ 0, 2385.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.043), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 763483.300 ops/s
[info] # Warmup Iteration   2: 1607652.825 ops/s
[info] # Warmup Iteration   3: 1704663.840 ops/s
[info] # Warmup Iteration   4: 1704565.640 ops/s
[info] # Warmup Iteration   5: 1722080.202 ops/s
[info] Iteration   1: 1715712.582 ops/s
[info]                  ·gc.alloc.rate:               492.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          452.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1706367.194 ops/s
[info]                  ·gc.alloc.rate:                   500.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              461.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     618.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1679811.629 ops/s
[info]                  ·gc.alloc.rate:      469.615 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1663196.423 ops/s
[info]                  ·gc.alloc.rate:               484.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          458.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 634.488 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1695147.070 ops/s
[info]                  ·gc.alloc.rate:               496.669 MB/sec
[info]                  ·gc.alloc.rate.norm:          461.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 622.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1692046.980 ±(99.9%) 80698.286 ops/s [Average]
[info]   (min, avg, max) = (1663196.423, 1692046.980, 1715712.582), stdev = 20957.089
[info]   CI (99.9%): [1611348.693, 1772745.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   488.899 ±(99.9%) 47.134 MB/sec [Average]
[info]   (min, avg, max) = (469.615, 488.899, 500.536), stdev = 12.241
[info]   CI (99.9%): [441.764, 536.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   454.725 ±(99.9%) 34.930 B/op [Average]
[info]   (min, avg, max) = (440.000, 454.725, 461.629), stdev = 9.071
[info]   CI (99.9%): [419.795, 489.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.689 ±(99.9%) 1118.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.689, 670.809), stdev = 290.413
[info]   CI (99.9%): [≈ 0, 1622.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   468.997 ±(99.9%) 1042.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 468.997, 634.488), stdev = 270.798
[info]   CI (99.9%): [≈ 0, 1511.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 816614.452 ops/s
[info] # Warmup Iteration   2: 1764453.132 ops/s
[info] # Warmup Iteration   3: 1803527.265 ops/s
[info] # Warmup Iteration   4: 1804251.533 ops/s
[info] # Warmup Iteration   5: 1803041.904 ops/s
[info] Iteration   1: 1803895.572 ops/s
[info]                  ·gc.alloc.rate:      18.339 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1804270.346 ops/s
[info]                  ·gc.alloc.rate:      18.342 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1805203.291 ops/s
[info]                  ·gc.alloc.rate:      18.352 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1804161.438 ops/s
[info]                  ·gc.alloc.rate:      18.345 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1804885.331 ops/s
[info]                  ·gc.alloc.rate:      18.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1804483.196 ±(99.9%) 2086.453 ops/s [Average]
[info]   (min, avg, max) = (1803895.572, 1804483.196, 1805203.291), stdev = 541.845
[info]   CI (99.9%): [1802396.743, 1806569.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.345 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (18.339, 18.345, 18.352), stdev = 0.005
[info]   CI (99.9%): [18.325, 18.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13542.277 ops/s
[info] # Warmup Iteration   2: 48398.839 ops/s
[info] # Warmup Iteration   3: 50985.516 ops/s
[info] # Warmup Iteration   4: 50815.681 ops/s
[info] # Warmup Iteration   5: 50775.795 ops/s
[info] Iteration   1: 51317.072 ops/s
[info]                  ·gc.alloc.rate:                   2217.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              68009.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61535.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 51872.432 ops/s
[info]                  ·gc.alloc.rate:                   2228.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              67611.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60714.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52154.936 ops/s
[info]                  ·gc.alloc.rate:               2225.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          67151.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60366.040 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 51830.855 ops/s
[info]                  ·gc.alloc.rate:                   2266.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              68818.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81096.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.632 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 52218.892 ops/s
[info]                  ·gc.alloc.rate:               2256.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          68002.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60520.637 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   51878.837 ±(99.9%) 1374.674 ops/s [Average]
[info]   (min, avg, max) = (51317.072, 51878.837, 52218.892), stdev = 356.999
[info]   CI (99.9%): [50504.163, 53253.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2238.785 ±(99.9%) 81.929 MB/sec [Average]
[info]   (min, avg, max) = (2217.539, 2238.785, 2266.309), stdev = 21.277
[info]   CI (99.9%): [2156.857, 2320.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67918.591 ±(99.9%) 2364.386 B/op [Average]
[info]   (min, avg, max) = (67151.298, 67918.591, 68818.471), stdev = 614.023
[info]   CI (99.9%): [65554.206, 70282.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.347 ±(99.9%) 1148.009 MB/sec [Average]
[info]   (min, avg, max) = (2000.421, 2137.347, 2670.633), stdev = 298.134
[info]   CI (99.9%): [989.339, 3285.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64846.536 ±(99.9%) 35021.515 B/op [Average]
[info]   (min, avg, max) = (60366.040, 64846.536, 81096.107), stdev = 9094.976
[info]   CI (99.9%): [29825.021, 99868.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 7.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.226), stdev = 1.879
[info]   CI (99.9%): [≈ 0, 8.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.552 ±(99.9%) 221.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.552, 129.604), stdev = 57.617
[info]   CI (99.9%): [≈ 0, 248.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144017.647 ops/s
[info] # Warmup Iteration   2: 263585.985 ops/s
[info] # Warmup Iteration   3: 273151.760 ops/s
[info] # Warmup Iteration   4: 261194.388 ops/s
[info] # Warmup Iteration   5: 274055.029 ops/s
[info] Iteration   1: 273246.240 ops/s
[info]                  ·gc.alloc.rate:               1102.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          6352.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7738.951 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 275314.808 ops/s
[info]                  ·gc.alloc.rate:               1092.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          6246.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3842.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 273958.300 ops/s
[info]                  ·gc.alloc.rate:                   1101.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              6330.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7722.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 273156.058 ops/s
[info]                  ·gc.alloc.rate:                   1097.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              6319.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7753.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 265405.027 ops/s
[info]                  ·gc.alloc.rate:                   1052.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              6241.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3989.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.925 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   272216.087 ±(99.9%) 15033.876 ops/s [Average]
[info]   (min, avg, max) = (265405.027, 272216.087, 275314.808), stdev = 3904.250
[info]   CI (99.9%): [257182.210, 287249.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1089.526 ±(99.9%) 80.518 MB/sec [Average]
[info]   (min, avg, max) = (1052.807, 1089.526, 1102.877), stdev = 20.910
[info]   CI (99.9%): [1009.009, 1170.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6297.996 ±(99.9%) 194.990 B/op [Average]
[info]   (min, avg, max) = (6241.492, 6297.996, 6352.444), stdev = 50.638
[info]   CI (99.9%): [6103.006, 6492.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.841 ±(99.9%) 1417.399 MB/sec [Average]
[info]   (min, avg, max) = (672.238, 1075.841, 1346.131), stdev = 368.094
[info]   CI (99.9%): [≈ 0, 2493.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6209.337 ±(99.9%) 8063.821 B/op [Average]
[info]   (min, avg, max) = (3842.319, 6209.337, 7753.156), stdev = 2094.149
[info]   CI (99.9%): [≈ 0, 14273.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.546 ±(99.9%) 4.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.686), stdev = 1.197
[info]   CI (99.9%): [≈ 0, 5.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.233 ±(99.9%) 27.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.233, 15.925), stdev = 7.095
[info]   CI (99.9%): [≈ 0, 30.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 2.191
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1903.098 ops/s
[info] # Warmup Iteration   2: 30502.932 ops/s
[info] # Warmup Iteration   3: 39225.722 ops/s
[info] # Warmup Iteration   4: 38402.824 ops/s
[info] # Warmup Iteration   5: 39022.637 ops/s
[info] Iteration   1: 39644.985 ops/s
[info]                  ·gc.alloc.rate:               1951.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          77474.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79637.512 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 39893.111 ops/s
[info]                  ·gc.alloc.rate:                   1985.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              78334.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79341.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.522 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40086.218 ops/s
[info]                  ·gc.alloc.rate:               1996.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          78383.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79064.283 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 39985.227 ops/s
[info]                  ·gc.alloc.rate:                   1973.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              77699.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79368.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 39927.667 ops/s
[info]                  ·gc.alloc.rate:               2001.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          78879.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79613.423 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   39907.442 ±(99.9%) 631.286 ops/s [Average]
[info]   (min, avg, max) = (39644.985, 39907.442, 40086.218), stdev = 163.943
[info]   CI (99.9%): [39276.155, 40538.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1981.771 ±(99.9%) 76.543 MB/sec [Average]
[info]   (min, avg, max) = (1951.581, 1981.771, 2001.140), stdev = 19.878
[info]   CI (99.9%): [1905.228, 2058.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78154.269 ±(99.9%) 2179.032 B/op [Average]
[info]   (min, avg, max) = (77474.391, 78154.269, 78879.767), stdev = 565.888
[info]   CI (99.9%): [75975.237, 80333.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.448 ±(99.9%) 20.069 MB/sec [Average]
[info]   (min, avg, max) = (2006.070, 2013.448, 2019.753), stdev = 5.212
[info]   CI (99.9%): [1993.380, 2033.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79405.135 ±(99.9%) 900.826 B/op [Average]
[info]   (min, avg, max) = (79064.283, 79405.135, 79637.512), stdev = 233.942
[info]   CI (99.9%): [78504.309, 80305.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.260 ±(99.9%) 2.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.281), stdev = 0.570
[info]   CI (99.9%): [≈ 0, 2.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.268 ±(99.9%) 86.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.268, 50.522), stdev = 22.505
[info]   CI (99.9%): [≈ 0, 96.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37376.904 ops/s
[info] # Warmup Iteration   2: 112195.152 ops/s
[info] # Warmup Iteration   3: 112026.396 ops/s
[info] # Warmup Iteration   4: 114166.160 ops/s
[info] # Warmup Iteration   5: 113024.896 ops/s
[info] Iteration   1: 113094.150 ops/s
[info]                  ·gc.alloc.rate:                   1157.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              16106.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18576.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 109232.481 ops/s
[info]                  ·gc.alloc.rate:                   1108.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              15974.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19254.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 112408.142 ops/s
[info]                  ·gc.alloc.rate:               1112.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          15579.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9359.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 112113.245 ops/s
[info]                  ·gc.alloc.rate:                   1123.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              15760.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18787.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 114216.831 ops/s
[info]                  ·gc.alloc.rate:                   1143.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              15752.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18450.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   112212.970 ±(99.9%) 7132.347 ops/s [Average]
[info]   (min, avg, max) = (109232.481, 112212.970, 114216.831), stdev = 1852.248
[info]   CI (99.9%): [105080.623, 119345.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1129.126 ±(99.9%) 80.454 MB/sec [Average]
[info]   (min, avg, max) = (1108.708, 1129.126, 1157.871), stdev = 20.894
[info]   CI (99.9%): [1048.672, 1209.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15834.536 ±(99.9%) 796.558 B/op [Average]
[info]   (min, avg, max) = (15579.099, 15834.536, 16106.510), stdev = 206.864
[info]   CI (99.9%): [15037.978, 16631.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.617 ±(99.9%) 1151.917 MB/sec [Average]
[info]   (min, avg, max) = (668.490, 1203.617, 1338.997), stdev = 299.149
[info]   CI (99.9%): [51.700, 2355.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16885.504 ±(99.9%) 16243.342 B/op [Average]
[info]   (min, avg, max) = (9359.371, 16885.504, 19254.192), stdev = 4218.344
[info]   CI (99.9%): [642.162, 33128.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.143), stdev = 1.843
[info]   CI (99.9%): [≈ 0, 7.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.651 ±(99.9%) 97.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.651, 57.083), stdev = 25.398
[info]   CI (99.9%): [≈ 0, 109.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159982.700 ops/s
[info] # Warmup Iteration   2: 318534.667 ops/s
[info] # Warmup Iteration   3: 332055.106 ops/s
[info] # Warmup Iteration   4: 332829.350 ops/s
[info] # Warmup Iteration   5: 333051.238 ops/s
[info] Iteration   1: 325874.657 ops/s
[info]                  ·gc.alloc.rate:               449.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          2171.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2470.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 336160.612 ops/s
[info]                  ·gc.alloc.rate:               467.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          2187.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3139.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 339825.845 ops/s
[info]                  ·gc.alloc.rate:      457.880 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.263 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 336636.589 ops/s
[info]                  ·gc.alloc.rate:               477.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          2231.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3134.572 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 336836.735 ops/s
[info]                  ·gc.alloc.rate:                   477.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              2230.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3134.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   335066.888 ±(99.9%) 20551.162 ops/s [Average]
[info]   (min, avg, max) = (325874.657, 335066.888, 339825.845), stdev = 5337.072
[info]   CI (99.9%): [314515.725, 355618.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   465.902 ±(99.9%) 47.024 MB/sec [Average]
[info]   (min, avg, max) = (449.586, 465.902, 477.394), stdev = 12.212
[info]   CI (99.9%): [418.879, 512.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2188.343 ±(99.9%) 178.734 B/op [Average]
[info]   (min, avg, max) = (2120.263, 2188.343, 2231.954), stdev = 46.417
[info]   CI (99.9%): [2009.609, 2367.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.678 ±(99.9%) 1118.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.678, 670.782), stdev = 290.397
[info]   CI (99.9%): [≈ 0, 1622.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2375.796 ±(99.9%) 5232.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2375.796, 3139.178), stdev = 1358.972
[info]   CI (99.9%): [≈ 0, 7608.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.195), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145656.471 ops/s
[info] # Warmup Iteration   2: 353115.157 ops/s
[info] # Warmup Iteration   3: 364482.545 ops/s
[info] # Warmup Iteration   4: 364537.522 ops/s
[info] # Warmup Iteration   5: 364428.468 ops/s
[info] Iteration   1: 364551.315 ops/s
[info]                  ·gc.alloc.rate:      3.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 364629.006 ops/s
[info]                  ·gc.alloc.rate:      3.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 362068.060 ops/s
[info]                  ·gc.alloc.rate:      3.681 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 364263.083 ops/s
[info]                  ·gc.alloc.rate:      3.703 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 364566.173 ops/s
[info]                  ·gc.alloc.rate:      3.706 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   364015.527 ±(99.9%) 4227.188 ops/s [Average]
[info]   (min, avg, max) = (362068.060, 364015.527, 364629.006), stdev = 1097.787
[info]   CI (99.9%): [359788.339, 368242.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.701 ±(99.9%) 0.043 MB/sec [Average]
[info]   (min, avg, max) = (3.681, 3.701, 3.707), stdev = 0.011
[info]   CI (99.9%): [3.658, 3.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.002), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10161.677 ops/s
[info] # Warmup Iteration   2: 56722.362 ops/s
[info] # Warmup Iteration   3: 59791.215 ops/s
[info] # Warmup Iteration   4: 60941.459 ops/s
[info] # Warmup Iteration   5: 60692.477 ops/s
[info] Iteration   1: 60766.393 ops/s
[info]                  ·gc.alloc.rate:               1255.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          32519.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34574.127 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 59626.972 ops/s
[info]                  ·gc.alloc.rate:               1209.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          31922.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17635.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 60934.678 ops/s
[info]                  ·gc.alloc.rate:                   1249.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              32269.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34529.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 60175.164 ops/s
[info]                  ·gc.alloc.rate:                   1245.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              32572.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34993.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 61126.144 ops/s
[info]                  ·gc.alloc.rate:                   1262.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              32516.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34414.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   60525.870 ±(99.9%) 2370.819 ops/s [Average]
[info]   (min, avg, max) = (59626.972, 60525.870, 61126.144), stdev = 615.694
[info]   CI (99.9%): [58155.052, 62896.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1244.541 ±(99.9%) 79.725 MB/sec [Average]
[info]   (min, avg, max) = (1209.438, 1244.541, 1262.859), stdev = 20.704
[info]   CI (99.9%): [1164.816, 1324.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32360.149 ±(99.9%) 1044.303 B/op [Average]
[info]   (min, avg, max) = (31922.991, 32360.149, 32572.960), stdev = 271.202
[info]   CI (99.9%): [31315.846, 33404.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.904 ±(99.9%) 1151.111 MB/sec [Average]
[info]   (min, avg, max) = (668.148, 1202.904, 1337.903), stdev = 298.940
[info]   CI (99.9%): [51.793, 2354.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31229.370 ±(99.9%) 29273.562 B/op [Average]
[info]   (min, avg, max) = (17635.685, 31229.370, 34993.186), stdev = 7602.251
[info]   CI (99.9%): [1955.807, 60502.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 6.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 3.809), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22.715 ±(99.9%) 166.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.715, 99.635), stdev = 43.342
[info]   CI (99.9%): [≈ 0, 189.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13332.066 ops/s
[info] # Warmup Iteration   2: 64138.125 ops/s
[info] # Warmup Iteration   3: 70377.922 ops/s
[info] # Warmup Iteration   4: 72530.116 ops/s
[info] # Warmup Iteration   5: 73276.379 ops/s
[info] Iteration   1: 73693.491 ops/s
[info]                  ·gc.alloc.rate:               1717.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          36684.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43008.361 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 72581.555 ops/s
[info]                  ·gc.alloc.rate:                   1700.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              36870.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29126.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 72614.927 ops/s
[info]                  ·gc.alloc.rate:                   1714.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              37147.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43609.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 73520.260 ops/s
[info]                  ·gc.alloc.rate:               1721.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          36858.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28662.475 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 74204.800 ops/s
[info]                  ·gc.alloc.rate:               1737.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          36856.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42561.005 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73323.007 ±(99.9%) 2726.120 ops/s [Average]
[info]   (min, avg, max) = (72581.555, 73323.007, 74204.800), stdev = 707.965
[info]   CI (99.9%): [70596.887, 76049.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1718.389 ±(99.9%) 51.996 MB/sec [Average]
[info]   (min, avg, max) = (1700.388, 1718.389, 1737.777), stdev = 13.503
[info]   CI (99.9%): [1666.393, 1770.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   36883.477 ±(99.9%) 641.729 B/op [Average]
[info]   (min, avg, max) = (36684.014, 36883.477, 37147.664), stdev = 166.655
[info]   CI (99.9%): [36241.747, 37525.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.049 ±(99.9%) 1412.993 MB/sec [Average]
[info]   (min, avg, max) = (1338.928, 1743.049, 2013.963), stdev = 366.950
[info]   CI (99.9%): [330.055, 3156.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37393.601 ±(99.9%) 29916.212 B/op [Average]
[info]   (min, avg, max) = (28662.475, 37393.601, 43609.454), stdev = 7769.145
[info]   CI (99.9%): [7477.389, 67309.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.914), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.338 ±(99.9%) 105.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.338, 63.193), stdev = 27.390
[info]   CI (99.9%): [≈ 0, 121.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20573.358 ops/s
[info] # Warmup Iteration   2: 112471.323 ops/s
[info] # Warmup Iteration   3: 133345.349 ops/s
[info] # Warmup Iteration   4: 135987.063 ops/s
[info] # Warmup Iteration   5: 136301.684 ops/s
[info] Iteration   1: 136669.301 ops/s
[info]                  ·gc.alloc.rate:               925.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          10660.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7667.362 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 136847.834 ops/s
[info]                  ·gc.alloc.rate:                   931.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              10711.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7657.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 135398.432 ops/s
[info]                  ·gc.alloc.rate:               935.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          10878.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15494.595 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 133393.766 ops/s
[info]                  ·gc.alloc.rate:                   903.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              10660.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7871.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 133551.898 ops/s
[info]                  ·gc.alloc.rate:               904.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          10655.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7861.985 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   135172.246 ±(99.9%) 6353.109 ops/s [Average]
[info]   (min, avg, max) = (133393.766, 135172.246, 136847.834), stdev = 1649.882
[info]   CI (99.9%): [128819.137, 141525.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   920.221 ±(99.9%) 59.151 MB/sec [Average]
[info]   (min, avg, max) = (903.513, 920.221, 935.964), stdev = 15.361
[info]   CI (99.9%): [861.070, 979.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10713.354 ±(99.9%) 367.189 B/op [Average]
[info]   (min, avg, max) = (10655.858, 10713.354, 10878.960), stdev = 95.358
[info]   CI (99.9%): [10346.165, 11080.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   799.841 ±(99.9%) 1147.810 MB/sec [Average]
[info]   (min, avg, max) = (665.938, 799.841, 1333.066), stdev = 298.083
[info]   CI (99.9%): [≈ 0, 1947.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9310.514 ±(99.9%) 13317.521 B/op [Average]
[info]   (min, avg, max) = (7657.390, 9310.514, 15494.595), stdev = 3458.518
[info]   CI (99.9%): [≈ 0, 22628.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.246), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106036.969 ops/s
[info] # Warmup Iteration   2: 237807.203 ops/s
[info] # Warmup Iteration   3: 256353.940 ops/s
[info] # Warmup Iteration   4: 257031.162 ops/s
[info] # Warmup Iteration   5: 256754.648 ops/s
[info] Iteration   1: 255525.185 ops/s
[info]                  ·gc.alloc.rate:               1088.344 MB/sec
[info]                  ·gc.alloc.rate.norm:          6703.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8273.675 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 258014.045 ops/s
[info]                  ·gc.alloc.rate:               1076.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          6569.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4097.936 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 256062.219 ops/s
[info]                  ·gc.alloc.rate:               1084.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          6664.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8262.436 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 256632.659 ops/s
[info]                  ·gc.alloc.rate:                   1070.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              6566.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4124.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 255230.572 ops/s
[info]                  ·gc.alloc.rate:                   1091.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8295.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   256292.936 ±(99.9%) 4239.609 ops/s [Average]
[info]   (min, avg, max) = (255230.572, 256292.936, 258014.045), stdev = 1101.013
[info]   CI (99.9%): [252053.327, 260532.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1082.295 ±(99.9%) 32.444 MB/sec [Average]
[info]   (min, avg, max) = (1070.622, 1082.295, 1091.172), stdev = 8.426
[info]   CI (99.9%): [1049.852, 1114.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6646.559 ±(99.9%) 290.094 B/op [Average]
[info]   (min, avg, max) = (6566.270, 6646.559, 6728.882), stdev = 75.337
[info]   CI (99.9%): [6356.464, 6936.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.410 ±(99.9%) 1417.660 MB/sec [Average]
[info]   (min, avg, max) = (671.804, 1075.410, 1345.244), stdev = 368.162
[info]   CI (99.9%): [≈ 0, 2493.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6610.745 ±(99.9%) 8787.222 B/op [Average]
[info]   (min, avg, max) = (4097.936, 6610.745, 8295.657), stdev = 2282.014
[info]   CI (99.9%): [≈ 0, 15397.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.852), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.568 ±(99.9%) 30.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.568, 17.586), stdev = 7.837
[info]   CI (99.9%): [≈ 0, 33.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 956.436 ops/s
[info] # Warmup Iteration   2: 25066.547 ops/s
[info] # Warmup Iteration   3: 32261.707 ops/s
[info] # Warmup Iteration   4: 32286.730 ops/s
[info] # Warmup Iteration   5: 32013.676 ops/s
[info] Iteration   1: 32387.205 ops/s
[info]                  ·gc.alloc.rate:                   1615.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              78493.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64904.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 32299.370 ops/s
[info]                  ·gc.alloc.rate:                   1646.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              80233.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97817.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 32361.025 ops/s
[info]                  ·gc.alloc.rate:                   1633.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              79453.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65201.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32547.797 ops/s
[info]                  ·gc.alloc.rate:                   1643.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              79463.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64873.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32444.044 ops/s
[info]                  ·gc.alloc.rate:                   1663.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              80694.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97690.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   32407.888 ±(99.9%) 361.641 ops/s [Average]
[info]   (min, avg, max) = (32299.370, 32407.888, 32547.797), stdev = 93.917
[info]   CI (99.9%): [32046.247, 32769.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1640.533 ±(99.9%) 68.537 MB/sec [Average]
[info]   (min, avg, max) = (1615.311, 1640.533, 1663.779), stdev = 17.799
[info]   CI (99.9%): [1571.996, 1709.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79667.704 ±(99.9%) 3246.035 B/op [Average]
[info]   (min, avg, max) = (78493.209, 79667.704, 80694.750), stdev = 842.985
[info]   CI (99.9%): [76421.669, 82913.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.908 ±(99.9%) 1416.319 MB/sec [Average]
[info]   (min, avg, max) = (1335.674, 1607.908, 2014.190), stdev = 367.814
[info]   CI (99.9%): [191.589, 3024.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78097.482 ±(99.9%) 69095.842 B/op [Average]
[info]   (min, avg, max) = (64873.654, 78097.482, 97817.105), stdev = 17943.971
[info]   CI (99.9%): [9001.640, 147193.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.312 ±(99.9%) 2.415 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.312, 1.434), stdev = 0.627
[info]   CI (99.9%): [≈ 0, 2.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.157 ±(99.9%) 117.462 B/op [Average]
[info]   (min, avg, max) = (1.007, 15.157, 69.718), stdev = 30.504
[info]   CI (99.9%): [≈ 0, 132.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24782.209 ops/s
[info] # Warmup Iteration   2: 171284.543 ops/s
[info] # Warmup Iteration   3: 177272.712 ops/s
[info] # Warmup Iteration   4: 177404.307 ops/s
[info] # Warmup Iteration   5: 180834.680 ops/s
[info] Iteration   1: 178224.394 ops/s
[info]                  ·gc.alloc.rate:                   1036.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              9155.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11777.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 181099.443 ops/s
[info]                  ·gc.alloc.rate:               1017.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          8839.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5801.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 179551.407 ops/s
[info]                  ·gc.alloc.rate:                   1023.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              8970.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11710.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 177882.294 ops/s
[info]                  ·gc.alloc.rate:               1009.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          8932.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5914.518 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 177335.753 ops/s
[info]                  ·gc.alloc.rate:                   1007.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              8945.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11871.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   178818.658 ±(99.9%) 5829.575 ops/s [Average]
[info]   (min, avg, max) = (177335.753, 178818.658, 181099.443), stdev = 1513.922
[info]   CI (99.9%): [172989.083, 184648.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1018.998 ±(99.9%) 45.140 MB/sec [Average]
[info]   (min, avg, max) = (1007.912, 1018.998, 1036.822), stdev = 11.723
[info]   CI (99.9%): [973.859, 1064.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8968.797 ±(99.9%) 445.899 B/op [Average]
[info]   (min, avg, max) = (8839.259, 8968.797, 9155.875), stdev = 115.799
[info]   CI (99.9%): [8522.899, 9414.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.649 ±(99.9%) 1408.136 MB/sec [Average]
[info]   (min, avg, max) = (667.551, 1068.649, 1337.508), stdev = 365.688
[info]   CI (99.9%): [≈ 0, 2476.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9414.897 ±(99.9%) 12506.596 B/op [Average]
[info]   (min, avg, max) = (5801.074, 9414.897, 11871.229), stdev = 3247.923
[info]   CI (99.9%): [≈ 0, 21921.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.183 ±(99.9%) 0.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.547), stdev = 0.223
[info]   CI (99.9%): [≈ 0, 1.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233639.022 ops/s
[info] # Warmup Iteration   2: 460286.333 ops/s
[info] # Warmup Iteration   3: 469847.288 ops/s
[info] # Warmup Iteration   4: 470115.145 ops/s
[info] # Warmup Iteration   5: 483108.688 ops/s
[info] Iteration   1: 484083.697 ops/s
[info]                  ·gc.alloc.rate:                   1447.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              4706.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4368.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 482686.788 ops/s
[info]                  ·gc.alloc.rate:                   1492.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              4863.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6574.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 482537.837 ops/s
[info]                  ·gc.alloc.rate:                   1453.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              4740.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4388.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 484784.332 ops/s
[info]                  ·gc.alloc.rate:               1458.558 MB/sec
[info]                  ·gc.alloc.rate.norm:          4734.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4360.145 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 483819.155 ops/s
[info]                  ·gc.alloc.rate:               1469.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          4781.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4364.380 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   483582.362 ±(99.9%) 3675.915 ops/s [Average]
[info]   (min, avg, max) = (482537.837, 483582.362, 484784.332), stdev = 954.623
[info]   CI (99.9%): [479906.447, 487258.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1464.327 ±(99.9%) 67.710 MB/sec [Average]
[info]   (min, avg, max) = (1447.779, 1464.327, 1492.287), stdev = 17.584
[info]   CI (99.9%): [1396.617, 1532.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4765.170 ±(99.9%) 235.858 B/op [Average]
[info]   (min, avg, max) = (4706.577, 4765.170, 4863.859), stdev = 61.252
[info]   CI (99.9%): [4529.312, 5001.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.293 ±(99.9%) 1160.004 MB/sec [Average]
[info]   (min, avg, max) = (1341.558, 1478.293, 2017.179), stdev = 301.249
[info]   CI (99.9%): [318.289, 2638.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4811.289 ±(99.9%) 3796.015 B/op [Average]
[info]   (min, avg, max) = (4360.145, 4811.289, 6574.655), stdev = 985.813
[info]   CI (99.9%): [1015.274, 8607.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 5.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 3.060), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 5.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.037 ±(99.9%) 17.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.037, 9.981), stdev = 4.441
[info]   CI (99.9%): [≈ 0, 19.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.302
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254066.945 ops/s
[info] # Warmup Iteration   2: 503245.112 ops/s
[info] # Warmup Iteration   3: 504725.647 ops/s
[info] # Warmup Iteration   4: 503057.436 ops/s
[info] # Warmup Iteration   5: 510851.261 ops/s
[info] Iteration   1: 518552.229 ops/s
[info]                  ·gc.alloc.rate:                   994.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              3017.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4074.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 516214.384 ops/s
[info]                  ·gc.alloc.rate:                   968.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              2952.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2047.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 518908.705 ops/s
[info]                  ·gc.alloc.rate:                   990.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              3003.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4074.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 516992.052 ops/s
[info]                  ·gc.alloc.rate:               963.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          2931.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2045.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 502195.212 ops/s
[info]                  ·gc.alloc.rate:               935.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          2930.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2106.429 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   514572.516 ±(99.9%) 26981.187 ops/s [Average]
[info]   (min, avg, max) = (502195.212, 514572.516, 518908.705), stdev = 7006.929
[info]   CI (99.9%): [487591.329, 541553.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   970.288 ±(99.9%) 91.509 MB/sec [Average]
[info]   (min, avg, max) = (935.095, 970.288, 994.111), stdev = 23.765
[info]   CI (99.9%): [878.779, 1061.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2967.112 ±(99.9%) 156.385 B/op [Average]
[info]   (min, avg, max) = (2930.582, 2967.112, 3017.142), stdev = 40.613
[info]   CI (99.9%): [2810.727, 3123.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   940.308 ±(99.9%) 1415.130 MB/sec [Average]
[info]   (min, avg, max) = (671.794, 940.308, 1343.387), stdev = 367.505
[info]   CI (99.9%): [≈ 0, 2355.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2869.487 ±(99.9%) 4235.949 B/op [Average]
[info]   (min, avg, max) = (2045.184, 2869.487, 4074.311), stdev = 1100.062
[info]   CI (99.9%): [≈ 0, 7105.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.063), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10025.518 ops/s
[info] # Warmup Iteration   2: 71058.492 ops/s
[info] # Warmup Iteration   3: 75281.682 ops/s
[info] # Warmup Iteration   4: 77003.842 ops/s
[info] # Warmup Iteration   5: 75636.035 ops/s
[info] Iteration   1: 77376.990 ops/s
[info]                  ·gc.alloc.rate:               1378.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          28034.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27125.587 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 77345.123 ops/s
[info]                  ·gc.alloc.rate:                   1370.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              27892.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27164.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 77290.810 ops/s
[info]                  ·gc.alloc.rate:               1381.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          28140.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27210.021 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 77629.260 ops/s
[info]                  ·gc.alloc.rate:                   1386.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              28116.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27118.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 77534.995 ops/s
[info]                  ·gc.alloc.rate:               1399.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          28410.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27072.065 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   77435.436 ±(99.9%) 544.457 ops/s [Average]
[info]   (min, avg, max) = (77290.810, 77435.436, 77629.260), stdev = 141.394
[info]   CI (99.9%): [76890.978, 77979.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1383.490 ±(99.9%) 41.518 MB/sec [Average]
[info]   (min, avg, max) = (1370.738, 1383.490, 1399.658), stdev = 10.782
[info]   CI (99.9%): [1341.972, 1425.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28118.937 ±(99.9%) 729.587 B/op [Average]
[info]   (min, avg, max) = (27892.786, 28118.937, 28410.370), stdev = 189.471
[info]   CI (99.9%): [27389.350, 28848.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1335.219 ±(99.9%) 6.644 MB/sec [Average]
[info]   (min, avg, max) = (1333.553, 1335.219, 1337.610), stdev = 1.725
[info]   CI (99.9%): [1328.575, 1341.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27138.034 ±(99.9%) 199.802 B/op [Average]
[info]   (min, avg, max) = (27072.065, 27138.034, 27210.021), stdev = 51.888
[info]   CI (99.9%): [26938.232, 27337.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 7.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.309), stdev = 1.925
[info]   CI (99.9%): [≈ 0, 8.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.557 ±(99.9%) 150.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.557, 87.361), stdev = 39.022
[info]   CI (99.9%): [≈ 0, 167.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32237.485 ops/s
[info] # Warmup Iteration   2: 87885.812 ops/s
[info] # Warmup Iteration   3: 91830.763 ops/s
[info] # Warmup Iteration   4: 98396.806 ops/s
[info] # Warmup Iteration   5: 99352.176 ops/s
[info] Iteration   1: 99240.912 ops/s
[info]                  ·gc.alloc.rate:                   1613.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              25592.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21297.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 99411.862 ops/s
[info]                  ·gc.alloc.rate:                   1641.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              25985.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31902.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 99683.670 ops/s
[info]                  ·gc.alloc.rate:                   1630.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              25748.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21193.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 99858.754 ops/s
[info]                  ·gc.alloc.rate:                   1672.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              26363.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31665.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 98882.659 ops/s
[info]                  ·gc.alloc.rate:               1617.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          25747.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21291.099 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   99415.572 ±(99.9%) 1469.820 ops/s [Average]
[info]   (min, avg, max) = (98882.659, 99415.572, 99858.754), stdev = 381.708
[info]   CI (99.9%): [97945.751, 100885.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1635.264 ±(99.9%) 90.971 MB/sec [Average]
[info]   (min, avg, max) = (1613.676, 1635.264, 1672.723), stdev = 23.625
[info]   CI (99.9%): [1544.294, 1726.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25887.655 ±(99.9%) 1157.492 B/op [Average]
[info]   (min, avg, max) = (25592.847, 25887.655, 26363.290), stdev = 300.597
[info]   CI (99.9%): [24730.163, 27045.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.420 ±(99.9%) 1415.512 MB/sec [Average]
[info]   (min, avg, max) = (1337.706, 1609.420, 2015.066), stdev = 367.604
[info]   CI (99.9%): [193.908, 3024.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25469.978 ±(99.9%) 22197.267 B/op [Average]
[info]   (min, avg, max) = (21193.234, 25469.978, 31902.545), stdev = 5764.560
[info]   CI (99.9%): [3272.711, 47667.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 4.817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 2.935), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 5.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.252 ±(99.9%) 76.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.252, 46.470), stdev = 19.805
[info]   CI (99.9%): [≈ 0, 88.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 9.000), stdev = 2.864
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33938.361 ops/s
[info] # Warmup Iteration   2: 165071.785 ops/s
[info] # Warmup Iteration   3: 174201.007 ops/s
[info] # Warmup Iteration   4: 175228.051 ops/s
[info] # Warmup Iteration   5: 177029.418 ops/s
[info] Iteration   1: 177369.180 ops/s
[info]                  ·gc.alloc.rate:                   747.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              6630.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5902.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 175339.666 ops/s
[info]                  ·gc.alloc.rate:               746.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          6696.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5982.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 176991.507 ops/s
[info]                  ·gc.alloc.rate:                   746.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              6639.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5926.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 176896.067 ops/s
[info]                  ·gc.alloc.rate:               746.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          6641.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5932.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 176474.106 ops/s
[info]                  ·gc.alloc.rate:                   743.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              6626.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5946.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   176614.105 ±(99.9%) 3004.902 ops/s [Average]
[info]   (min, avg, max) = (175339.666, 176614.105, 177369.180), stdev = 780.363
[info]   CI (99.9%): [173609.203, 179619.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   745.977 ±(99.9%) 6.328 MB/sec [Average]
[info]   (min, avg, max) = (743.145, 745.977, 747.319), stdev = 1.643
[info]   CI (99.9%): [739.649, 752.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6647.086 ±(99.9%) 109.666 B/op [Average]
[info]   (min, avg, max) = (6626.950, 6647.086, 6696.861), stdev = 28.480
[info]   CI (99.9%): [6537.420, 6756.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.409 ±(99.9%) 2.617 MB/sec [Average]
[info]   (min, avg, max) = (665.215, 666.409, 666.867), stdev = 0.680
[info]   CI (99.9%): [663.792, 669.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5938.110 ±(99.9%) 114.277 B/op [Average]
[info]   (min, avg, max) = (5902.067, 5938.110, 5982.654), stdev = 29.677
[info]   CI (99.9%): [5823.832, 6052.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.186), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98956.758 ops/s
[info] # Warmup Iteration   2: 258343.528 ops/s
[info] # Warmup Iteration   3: 271748.299 ops/s
[info] # Warmup Iteration   4: 273619.187 ops/s
[info] # Warmup Iteration   5: 279676.916 ops/s
[info] Iteration   1: 278917.721 ops/s
[info]                  ·gc.alloc.rate:               1039.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          5862.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7577.894 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 276240.628 ops/s
[info]                  ·gc.alloc.rate:                   1002.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              5709.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3829.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 279767.664 ops/s
[info]                  ·gc.alloc.rate:               1029.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          5791.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7562.071 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 277812.763 ops/s
[info]                  ·gc.alloc.rate:               1018.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          5771.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3807.857 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 278277.255 ops/s
[info]                  ·gc.alloc.rate:               1028.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          5812.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7610.335 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   278203.206 ±(99.9%) 5082.157 ops/s [Average]
[info]   (min, avg, max) = (276240.628, 278203.206, 279767.664), stdev = 1319.820
[info]   CI (99.9%): [273121.049, 283285.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1023.610 ±(99.9%) 53.496 MB/sec [Average]
[info]   (min, avg, max) = (1002.400, 1023.610, 1039.199), stdev = 13.893
[info]   CI (99.9%): [970.115, 1077.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5789.635 ±(99.9%) 215.877 B/op [Average]
[info]   (min, avg, max) = (5709.692, 5789.635, 5862.591), stdev = 56.062
[info]   CI (99.9%): [5573.758, 6005.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.611 ±(99.9%) 1417.962 MB/sec [Average]
[info]   (min, avg, max) = (672.153, 1075.611, 1346.109), stdev = 368.240
[info]   CI (99.9%): [≈ 0, 2493.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6077.517 ±(99.9%) 7940.600 B/op [Average]
[info]   (min, avg, max) = (3807.857, 6077.517, 7610.335), stdev = 2062.148
[info]   CI (99.9%): [≈ 0, 14018.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10117.712 ops/s
[info] # Warmup Iteration   2: 67254.806 ops/s
[info] # Warmup Iteration   3: 71017.866 ops/s
[info] # Warmup Iteration   4: 72506.363 ops/s
[info] # Warmup Iteration   5: 72949.116 ops/s
[info] Iteration   1: 72095.200 ops/s
[info]                  ·gc.alloc.rate:               2686.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          58647.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43742.169 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 73153.718 ops/s
[info]                  ·gc.alloc.rate:                   2759.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              59351.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57442.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 72941.613 ops/s
[info]                  ·gc.alloc.rate:                   2749.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              59313.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57711.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 72113.204 ops/s
[info]                  ·gc.alloc.rate:               2732.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          59632.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2682.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58530.446 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 72114.906 ops/s
[info]                  ·gc.alloc.rate:               2747.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          59939.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58730.723 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   72483.728 ±(99.9%) 2003.462 ops/s [Average]
[info]   (min, avg, max) = (72095.200, 72483.728, 73153.718), stdev = 520.293
[info]   CI (99.9%): [70480.266, 74487.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2735.141 ±(99.9%) 110.361 MB/sec [Average]
[info]   (min, avg, max) = (2686.820, 2735.141, 2759.451), stdev = 28.660
[info]   CI (99.9%): [2624.780, 2845.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   59376.989 ±(99.9%) 1844.495 B/op [Average]
[info]   (min, avg, max) = (58647.913, 59376.989, 59939.360), stdev = 479.010
[info]   CI (99.9%): [57532.494, 61221.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2544.783 ±(99.9%) 1164.618 MB/sec [Average]
[info]   (min, avg, max) = (2003.947, 2544.783, 2692.322), stdev = 302.448
[info]   CI (99.9%): [1380.165, 3709.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55231.484 ±(99.9%) 24818.878 B/op [Average]
[info]   (min, avg, max) = (43742.169, 55231.484, 58730.723), stdev = 6445.384
[info]   CI (99.9%): [30412.607, 80050.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.179 ±(99.9%) 0.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.449), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46816.934 ops/s
[info] # Warmup Iteration   2: 196166.837 ops/s
[info] # Warmup Iteration   3: 199388.432 ops/s
[info] # Warmup Iteration   4: 204267.638 ops/s
[info] # Warmup Iteration   5: 205630.099 ops/s
[info] Iteration   1: 206177.439 ops/s
[info]                  ·gc.alloc.rate:                   1441.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              11002.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10236.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 205663.473 ops/s
[info]                  ·gc.alloc.rate:                   1425.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              10904.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10269.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 206058.589 ops/s
[info]                  ·gc.alloc.rate:                   1438.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              10987.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10254.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 206923.631 ops/s
[info]                  ·gc.alloc.rate:                   1444.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10204.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 205065.317 ops/s
[info]                  ·gc.alloc.rate:               1445.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          11096.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10281.260 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   205977.690 ±(99.9%) 2634.530 ops/s [Average]
[info]   (min, avg, max) = (205065.317, 205977.690, 206923.631), stdev = 684.179
[info]   CI (99.9%): [203343.160, 208612.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1438.993 ±(99.9%) 31.722 MB/sec [Average]
[info]   (min, avg, max) = (1425.125, 1438.993, 1445.793), stdev = 8.238
[info]   CI (99.9%): [1407.272, 1470.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10995.148 ±(99.9%) 263.198 B/op [Average]
[info]   (min, avg, max) = (10904.496, 10995.148, 11096.367), stdev = 68.352
[info]   CI (99.9%): [10731.950, 11258.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.365 ±(99.9%) 4.513 MB/sec [Average]
[info]   (min, avg, max) = (1339.589, 1341.365, 1342.595), stdev = 1.172
[info]   CI (99.9%): [1336.853, 1345.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10249.196 ±(99.9%) 116.386 B/op [Average]
[info]   (min, avg, max) = (10204.306, 10249.196, 10281.260), stdev = 30.225
[info]   CI (99.9%): [10132.810, 10365.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.227), stdev = 1.406
[info]   CI (99.9%): [≈ 0, 6.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.500 ±(99.9%) 41.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.500, 24.645), stdev = 10.739
[info]   CI (99.9%): [≈ 0, 46.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166903.306 ops/s
[info] # Warmup Iteration   2: 488943.802 ops/s
[info] # Warmup Iteration   3: 509432.974 ops/s
[info] # Warmup Iteration   4: 514074.398 ops/s
[info] # Warmup Iteration   5: 513667.115 ops/s
[info] Iteration   1: 510978.541 ops/s
[info]                  ·gc.alloc.rate:      402.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 508239.645 ops/s
[info]                  ·gc.alloc.rate:               421.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          1303.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1584.204 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 509300.064 ops/s
[info]                  ·gc.alloc.rate:                   419.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1294.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2057.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 506194.016 ops/s
[info]                  ·gc.alloc.rate:      398.812 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 508618.278 ops/s
[info]                  ·gc.alloc.rate:                   417.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1292.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2060.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   508666.109 ±(99.9%) 6681.906 ops/s [Average]
[info]   (min, avg, max) = (506194.016, 508666.109, 510978.541), stdev = 1735.270
[info]   CI (99.9%): [501984.203, 515348.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   411.823 ±(99.9%) 39.707 MB/sec [Average]
[info]   (min, avg, max) = (398.812, 411.823, 421.007), stdev = 10.312
[info]   CI (99.9%): [372.117, 451.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1274.192 ±(99.9%) 121.281 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1274.192, 1303.722), stdev = 31.496
[info]   CI (99.9%): [1152.910, 1395.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.659 ±(99.9%) 1318.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.659, 665.870), stdev = 342.381
[info]   CI (99.9%): [≈ 0, 1687.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1140.410 ±(99.9%) 4077.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1140.410, 2060.259), stdev = 1058.933
[info]   CI (99.9%): [≈ 0, 5217.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.064), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329990.124 ops/s
[info] # Warmup Iteration   2: 622361.370 ops/s
[info] # Warmup Iteration   3: 638225.020 ops/s
[info] # Warmup Iteration   4: 640212.347 ops/s
[info] # Warmup Iteration   5: 638322.552 ops/s
[info] Iteration   1: 628393.633 ops/s
[info]                  ·gc.alloc.rate:               352.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          881.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1281.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 639585.840 ops/s
[info]                  ·gc.alloc.rate:      344.669 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 623477.685 ops/s
[info]                  ·gc.alloc.rate:               352.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          889.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1291.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 634744.607 ops/s
[info]                  ·gc.alloc.rate:      342.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 635700.983 ops/s
[info]                  ·gc.alloc.rate:                   360.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              892.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1659.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   632380.550 ±(99.9%) 24632.594 ops/s [Average]
[info]   (min, avg, max) = (623477.685, 632380.550, 639585.840), stdev = 6397.006
[info]   CI (99.9%): [607747.956, 657013.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   350.350 ±(99.9%) 28.128 MB/sec [Average]
[info]   (min, avg, max) = (342.001, 350.350, 360.553), stdev = 7.305
[info]   CI (99.9%): [322.221, 378.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   871.949 ±(99.9%) 85.622 B/op [Average]
[info]   (min, avg, max) = (848.001, 871.949, 892.667), stdev = 22.236
[info]   CI (99.9%): [786.327, 957.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.782 ±(99.9%) 1216.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.782, 670.464), stdev = 315.981
[info]   CI (99.9%): [≈ 0, 1555.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   846.548 ±(99.9%) 3033.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 846.548, 1659.953), stdev = 787.702
[info]   CI (99.9%): [≈ 0, 3879.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381589.382 ops/s
[info] # Warmup Iteration   2: 662372.486 ops/s
[info] # Warmup Iteration   3: 674381.192 ops/s
[info] # Warmup Iteration   4: 691660.949 ops/s
[info] # Warmup Iteration   5: 693775.130 ops/s
[info] Iteration   1: 694665.135 ops/s
[info]                  ·gc.alloc.rate:      7.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 693969.964 ops/s
[info]                  ·gc.alloc.rate:      7.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 692028.546 ops/s
[info]                  ·gc.alloc.rate:      7.036 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 689735.146 ops/s
[info]                  ·gc.alloc.rate:      7.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 694447.373 ops/s
[info]                  ·gc.alloc.rate:      7.060 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   692969.233 ±(99.9%) 8032.690 ops/s [Average]
[info]   (min, avg, max) = (689735.146, 692969.233, 694665.135), stdev = 2086.064
[info]   CI (99.9%): [684936.543, 701001.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.045 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (7.012, 7.045, 7.063), stdev = 0.021
[info]   CI (99.9%): [6.963, 7.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11703.964 ops/s
[info] # Warmup Iteration   2: 32203.386 ops/s
[info] # Warmup Iteration   3: 35101.356 ops/s
[info] # Warmup Iteration   4: 35246.794 ops/s
[info] # Warmup Iteration   5: 35551.829 ops/s
[info] Iteration   1: 35592.938 ops/s
[info]                  ·gc.alloc.rate:                   1930.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              85355.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88959.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35394.573 ops/s
[info]                  ·gc.alloc.rate:                   1931.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              85890.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89309.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35881.881 ops/s
[info]                  ·gc.alloc.rate:               1943.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          85254.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58611.331 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 35930.925 ops/s
[info]                  ·gc.alloc.rate:               1928.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          84486.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58534.672 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 35890.151 ops/s
[info]                  ·gc.alloc.rate:               1936.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          84933.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87960.727 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35738.094 ±(99.9%) 903.173 ops/s [Average]
[info]   (min, avg, max) = (35394.573, 35738.094, 35930.925), stdev = 234.551
[info]   CI (99.9%): [34834.920, 36641.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1934.286 ±(99.9%) 23.177 MB/sec [Average]
[info]   (min, avg, max) = (1928.941, 1934.286, 1943.627), stdev = 6.019
[info]   CI (99.9%): [1911.109, 1957.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85184.259 ±(99.9%) 2004.104 B/op [Average]
[info]   (min, avg, max) = (84486.326, 85184.259, 85890.650), stdev = 520.459
[info]   CI (99.9%): [83180.155, 87188.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1739.784 ±(99.9%) 1418.259 MB/sec [Average]
[info]   (min, avg, max) = (1336.210, 1739.784, 2011.885), stdev = 368.317
[info]   CI (99.9%): [321.525, 3158.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76675.134 ±(99.9%) 63660.154 B/op [Average]
[info]   (min, avg, max) = (58534.672, 76675.134, 89309.208), stdev = 16532.340
[info]   CI (99.9%): [13014.980, 140335.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 5.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.019), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.397 ±(99.9%) 223.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.397, 133.476), stdev = 57.975
[info]   CI (99.9%): [≈ 0, 258.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66223.791 ops/s
[info] # Warmup Iteration   2: 776729.946 ops/s
[info] # Warmup Iteration   3: 828978.676 ops/s
[info] # Warmup Iteration   4: 858256.590 ops/s
[info] # Warmup Iteration   5: 853157.212 ops/s
[info] Iteration   1: 863730.600 ops/s
[info]                  ·gc.alloc.rate:                   2313.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              4214.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3667.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 853029.125 ops/s
[info]                  ·gc.alloc.rate:                   2300.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              4242.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3703.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 862895.886 ops/s
[info]                  ·gc.alloc.rate:               2325.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          4240.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4875.702 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 867329.215 ops/s
[info]                  ·gc.alloc.rate:               2337.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          4241.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3643.898 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 865509.825 ops/s
[info]                  ·gc.alloc.rate:               2332.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          4241.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3658.815 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   862498.930 ±(99.9%) 21417.763 ops/s [Average]
[info]   (min, avg, max) = (853029.125, 862498.930, 867329.215), stdev = 5562.125
[info]   CI (99.9%): [841081.167, 883916.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2321.828 ±(99.9%) 58.384 MB/sec [Average]
[info]   (min, avg, max) = (2300.245, 2321.828, 2337.510), stdev = 15.162
[info]   CI (99.9%): [2263.443, 2380.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4236.322 ±(99.9%) 46.289 B/op [Average]
[info]   (min, avg, max) = (4214.869, 4236.322, 4242.952), stdev = 12.021
[info]   CI (99.9%): [4190.033, 4282.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2142.860 ±(99.9%) 1142.556 MB/sec [Average]
[info]   (min, avg, max) = (2007.654, 2142.860, 2673.631), stdev = 296.718
[info]   CI (99.9%): [1000.304, 3285.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3909.760 ±(99.9%) 2080.962 B/op [Average]
[info]   (min, avg, max) = (3643.898, 3909.760, 4875.702), stdev = 540.419
[info]   CI (99.9%): [1828.799, 5990.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.872), stdev = 1.719
[info]   CI (99.9%): [≈ 0, 7.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.457 ±(99.9%) 12.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.457, 7.056), stdev = 3.131
[info]   CI (99.9%): [≈ 0, 13.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15518.847 ops/s
[info] # Warmup Iteration   2: 1526014.178 ops/s
[info] # Warmup Iteration   3: 1887233.109 ops/s
[info] # Warmup Iteration   4: 1916796.353 ops/s
[info] # Warmup Iteration   5: 1902709.871 ops/s
[info] Iteration   1: 1920690.067 ops/s
[info]                  ·gc.alloc.rate:               1234.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          1011.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1093.380 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 1924622.303 ops/s
[info]                  ·gc.alloc.rate:                   1223.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1092.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1928627.454 ops/s
[info]                  ·gc.alloc.rate:               1210.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          987.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 545.254 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1927359.529 ops/s
[info]                  ·gc.alloc.rate:                   1248.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              1019.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1091.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1928465.018 ops/s
[info]                  ·gc.alloc.rate:                   1224.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              999.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1091.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1925952.874 ±(99.9%) 12902.599 ops/s [Average]
[info]   (min, avg, max) = (1920690.067, 1925952.874, 1928627.454), stdev = 3350.764
[info]   CI (99.9%): [1913050.275, 1938855.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1228.244 ±(99.9%) 54.892 MB/sec [Average]
[info]   (min, avg, max) = (1210.214, 1228.244, 1248.677), stdev = 14.255
[info]   CI (99.9%): [1173.352, 1283.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1003.638 ±(99.9%) 46.686 B/op [Average]
[info]   (min, avg, max) = (987.639, 1003.638, 1019.289), stdev = 12.124
[info]   CI (99.9%): [956.953, 1050.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.649 ±(99.9%) 1150.600 MB/sec [Average]
[info]   (min, avg, max) = (668.132, 1202.649, 1337.736), stdev = 298.807
[info]   CI (99.9%): [52.049, 2353.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   982.858 ±(99.9%) 941.980 B/op [Average]
[info]   (min, avg, max) = (545.254, 982.858, 1093.380), stdev = 244.629
[info]   CI (99.9%): [40.878, 1924.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.901 ±(99.9%) 7.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.901, 4.455), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 8.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.736 ±(99.9%) 6.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.736, 3.636), stdev = 1.621
[info]   CI (99.9%): [≈ 0, 6.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2560143.960 ops/s
[info] # Warmup Iteration   2: 8163360.089 ops/s
[info] # Warmup Iteration   3: 8514125.306 ops/s
[info] # Warmup Iteration   4: 8500799.172 ops/s
[info] # Warmup Iteration   5: 8533107.663 ops/s
[info] Iteration   1: 8526773.041 ops/s
[info]                  ·gc.alloc.rate:                   276.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8588565.427 ops/s
[info]                  ·gc.alloc.rate:      261.938 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8572646.054 ops/s
[info]                  ·gc.alloc.rate:               273.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 8593879.183 ops/s
[info]                  ·gc.alloc.rate:      262.107 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8496215.753 ops/s
[info]                  ·gc.alloc.rate:                   272.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8555615.892 ±(99.9%) 163369.715 ops/s [Average]
[info]   (min, avg, max) = (8496215.753, 8555615.892, 8593879.183), stdev = 42426.596
[info]   CI (99.9%): [8392246.177, 8718985.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   269.317 ±(99.9%) 26.339 MB/sec [Average]
[info]   (min, avg, max) = (261.938, 269.317, 276.513), stdev = 6.840
[info]   CI (99.9%): [242.978, 295.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.546 ±(99.9%) 5.546 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.546, 51.040), stdev = 1.440
[info]   CI (99.9%): [44.000, 55.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.963 ±(99.9%) 1079.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.963, 511.652), stdev = 280.217
[info]   CI (99.9%): [≈ 0, 1385.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   56.625 ±(99.9%) 199.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.625, 94.768), stdev = 51.692
[info]   CI (99.9%): [≈ 0, 255.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2197.299 ops/s
[info] # Warmup Iteration   2: 88919.123 ops/s
[info] # Warmup Iteration   3: 294287.668 ops/s
[info] # Warmup Iteration   4: 345095.764 ops/s
[info] # Warmup Iteration   5: 346622.196 ops/s
[info] Iteration   1: 339321.493 ops/s
[info]                  ·gc.alloc.rate:               2235.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          10364.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9323.250 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 340486.312 ops/s
[info]                  ·gc.alloc.rate:                   2267.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              10479.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12412.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.832 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 344984.231 ops/s
[info]                  ·gc.alloc.rate:                   2265.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              10333.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9197.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 347342.206 ops/s
[info]                  ·gc.alloc.rate:               2306.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          10449.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9144.260 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 345789.104 ops/s
[info]                  ·gc.alloc.rate:               2296.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          10453.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9197.450 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   343584.669 ±(99.9%) 13437.572 ops/s [Average]
[info]   (min, avg, max) = (339321.493, 343584.669, 347342.206), stdev = 3489.695
[info]   CI (99.9%): [330147.097, 357022.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2274.316 ±(99.9%) 107.924 MB/sec [Average]
[info]   (min, avg, max) = (2235.428, 2274.316, 2306.044), stdev = 28.027
[info]   CI (99.9%): [2166.392, 2382.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10416.059 ±(99.9%) 244.356 B/op [Average]
[info]   (min, avg, max) = (10333.403, 10416.059, 10479.534), stdev = 63.458
[info]   CI (99.9%): [10171.703, 10660.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2150.437 ±(99.9%) 1152.865 MB/sec [Average]
[info]   (min, avg, max) = (2010.935, 2150.437, 2685.973), stdev = 299.395
[info]   CI (99.9%): [997.572, 3303.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9854.931 ±(99.9%) 5510.762 B/op [Average]
[info]   (min, avg, max) = (9144.260, 9854.931, 12412.299), stdev = 1431.128
[info]   CI (99.9%): [4344.168, 15365.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.304 ±(99.9%) 2.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 1.478), stdev = 0.657
[info]   CI (99.9%): [≈ 0, 2.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.404 ±(99.9%) 11.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.404, 6.832), stdev = 3.035
[info]   CI (99.9%): [≈ 0, 13.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76558.086 ops/s
[info] # Warmup Iteration   2: 1047706.175 ops/s
[info] # Warmup Iteration   3: 1106963.653 ops/s
[info] # Warmup Iteration   4: 1113035.383 ops/s
[info] # Warmup Iteration   5: 1089204.762 ops/s
[info] Iteration   1: 1110107.377 ops/s
[info]                  ·gc.alloc.rate:                   1793.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              2542.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1900.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1111186.662 ops/s
[info]                  ·gc.alloc.rate:                   1816.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              2571.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2849.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1113303.330 ops/s
[info]                  ·gc.alloc.rate:                   1830.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              2586.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2835.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1115389.054 ops/s
[info]                  ·gc.alloc.rate:                   1808.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              2551.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1885.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1115915.239 ops/s
[info]                  ·gc.alloc.rate:               1836.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          2589.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2827.956 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1113180.333 ±(99.9%) 9777.730 ops/s [Average]
[info]   (min, avg, max) = (1110107.377, 1113180.333, 1115915.239), stdev = 2539.245
[info]   CI (99.9%): [1103402.603, 1122958.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1816.888 ±(99.9%) 66.010 MB/sec [Average]
[info]   (min, avg, max) = (1793.239, 1816.888, 1836.215), stdev = 17.143
[info]   CI (99.9%): [1750.878, 1882.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2568.520 ±(99.9%) 80.798 B/op [Average]
[info]   (min, avg, max) = (2542.406, 2568.520, 2589.803), stdev = 20.983
[info]   CI (99.9%): [2487.722, 2649.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1740.166 ±(99.9%) 1412.200 MB/sec [Average]
[info]   (min, avg, max) = (1336.303, 1740.166, 2012.907), stdev = 366.744
[info]   CI (99.9%): [327.966, 3152.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2459.910 ±(99.9%) 1992.854 B/op [Average]
[info]   (min, avg, max) = (1885.522, 2459.910, 2849.843), stdev = 517.538
[info]   CI (99.9%): [467.056, 4452.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.796 ±(99.9%) 6.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 3.894), stdev = 1.732
[info]   CI (99.9%): [≈ 0, 7.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.126 ±(99.9%) 9.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.126, 5.514), stdev = 2.453
[info]   CI (99.9%): [≈ 0, 10.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79029.851 ops/s
[info] # Warmup Iteration   2: 2597639.041 ops/s
[info] # Warmup Iteration   3: 2592476.934 ops/s
[info] # Warmup Iteration   4: 2811718.567 ops/s
[info] # Warmup Iteration   5: 2803195.897 ops/s
[info] Iteration   1: 2803403.373 ops/s
[info]                  ·gc.alloc.rate:               1227.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          688.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 750.041 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2767653.147 ops/s
[info]                  ·gc.alloc.rate:                   1216.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              691.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     760.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2789775.192 ops/s
[info]                  ·gc.alloc.rate:               1226.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          692.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 755.022 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2800747.251 ops/s
[info]                  ·gc.alloc.rate:                   1209.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              679.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2708210.409 ops/s
[info]                  ·gc.alloc.rate:                   1196.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     778.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2773957.875 ±(99.9%) 151567.899 ops/s [Average]
[info]   (min, avg, max) = (2708210.409, 2773957.875, 2803403.373), stdev = 39361.702
[info]   CI (99.9%): [2622389.975, 2925525.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1215.407 ±(99.9%) 49.076 MB/sec [Average]
[info]   (min, avg, max) = (1196.976, 1215.407, 1227.165), stdev = 12.745
[info]   CI (99.9%): [1166.331, 1264.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   689.550 ±(99.9%) 23.136 B/op [Average]
[info]   (min, avg, max) = (679.587, 689.550, 695.324), stdev = 6.008
[info]   CI (99.9%): [666.414, 712.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.365 ±(99.9%) 1151.420 MB/sec [Average]
[info]   (min, avg, max) = (669.472, 1204.365, 1340.822), stdev = 299.020
[info]   CI (99.9%): [52.946, 2355.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   684.086 ±(99.9%) 664.050 B/op [Average]
[info]   (min, avg, max) = (376.213, 684.086, 778.884), stdev = 172.452
[info]   CI (99.9%): [20.036, 1348.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.756 ±(99.9%) 6.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.728), stdev = 1.661
[info]   CI (99.9%): [≈ 0, 7.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.439 ±(99.9%) 3.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.439, 2.165), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1241011.099 ops/s
[info] # Warmup Iteration   2: 5977323.607 ops/s
[info] # Warmup Iteration   3: 6364414.059 ops/s
[info] # Warmup Iteration   4: 6351805.307 ops/s
[info] # Warmup Iteration   5: 6329795.470 ops/s
[info] Iteration   1: 6328490.137 ops/s
[info]                  ·gc.alloc.rate:               734.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          182.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166.669 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 6292028.745 ops/s
[info]                  ·gc.alloc.rate:               719.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6378848.990 ops/s
[info]                  ·gc.alloc.rate:               733.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6386977.243 ops/s
[info]                  ·gc.alloc.rate:                   730.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              180.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6379810.942 ops/s
[info]                  ·gc.alloc.rate:               729.502 MB/sec
[info]                  ·gc.alloc.rate.norm:          179.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6353231.211 ±(99.9%) 159458.159 ops/s [Average]
[info]   (min, avg, max) = (6292028.745, 6353231.211, 6386977.243), stdev = 41410.778
[info]   CI (99.9%): [6193773.052, 6512689.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   729.463 ±(99.9%) 22.345 MB/sec [Average]
[info]   (min, avg, max) = (719.705, 729.463, 734.509), stdev = 5.803
[info]   CI (99.9%): [707.117, 751.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   180.687 ±(99.9%) 4.334 B/op [Average]
[info]   (min, avg, max) = (179.965, 180.687, 182.588), stdev = 1.125
[info]   CI (99.9%): [176.353, 185.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.052 ±(99.9%) 1.721 MB/sec [Average]
[info]   (min, avg, max) = (670.472, 671.052, 671.524), stdev = 0.447
[info]   CI (99.9%): [669.331, 672.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   166.223 ±(99.9%) 3.890 B/op [Average]
[info]   (min, avg, max) = (165.471, 166.223, 167.803), stdev = 1.010
[info]   CI (99.9%): [162.332, 170.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1046227.733 ops/s
[info] # Warmup Iteration   2: 6452419.625 ops/s
[info] # Warmup Iteration   3: 6820033.432 ops/s
[info] # Warmup Iteration   4: 6763241.980 ops/s
[info] # Warmup Iteration   5: 6598343.864 ops/s
[info] Iteration   1: 6788448.807 ops/s
[info]                  ·gc.alloc.rate:               427.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.614 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6813413.460 ops/s
[info]                  ·gc.alloc.rate:               435.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 6842848.364 ops/s
[info]                  ·gc.alloc.rate:      417.403 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6817417.993 ops/s
[info]                  ·gc.alloc.rate:                   433.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6787286.871 ops/s
[info]                  ·gc.alloc.rate:               435.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          101.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 155.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6809883.099 ±(99.9%) 88773.112 ops/s [Average]
[info]   (min, avg, max) = (6787286.871, 6809883.099, 6842848.364), stdev = 23054.095
[info]   CI (99.9%): [6721109.987, 6898656.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   429.870 ±(99.9%) 30.075 MB/sec [Average]
[info]   (min, avg, max) = (417.403, 429.870, 435.948), stdev = 7.810
[info]   CI (99.9%): [399.795, 459.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   99.354 ±(99.9%) 7.796 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.354, 101.093), stdev = 2.025
[info]   CI (99.9%): [91.557, 107.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.823 ±(99.9%) 1062.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.823, 670.453), stdev = 275.991
[info]   CI (99.9%): [≈ 0, 1535.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   109.409 ±(99.9%) 245.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.409, 155.473), stdev = 63.860
[info]   CI (99.9%): [≈ 0, 355.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12022.378 ops/s
[info] # Warmup Iteration   2: 342854.536 ops/s
[info] # Warmup Iteration   3: 412019.163 ops/s
[info] # Warmup Iteration   4: 418252.251 ops/s
[info] # Warmup Iteration   5: 416225.622 ops/s
[info] Iteration   1: 420047.400 ops/s
[info]                  ·gc.alloc.rate:                   2365.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              8862.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7510.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 421759.545 ops/s
[info]                  ·gc.alloc.rate:                   2374.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              8859.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7455.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 419496.437 ops/s
[info]                  ·gc.alloc.rate:               2349.691 MB/sec
[info]                  ·gc.alloc.rate.norm:          8815.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2662.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9988.961 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 420768.085 ops/s
[info]                  ·gc.alloc.rate:               2369.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          8864.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7482.603 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 416817.600 ops/s
[info]                  ·gc.alloc.rate:               2376.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          8969.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10097.941 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   419777.814 ±(99.9%) 7158.110 ops/s [Average]
[info]   (min, avg, max) = (416817.600, 419777.814, 421759.545), stdev = 1858.939
[info]   CI (99.9%): [412619.703, 426935.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2367.212 ±(99.9%) 41.022 MB/sec [Average]
[info]   (min, avg, max) = (2349.691, 2367.212, 2376.089), stdev = 10.653
[info]   CI (99.9%): [2326.190, 2408.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8874.183 ±(99.9%) 220.026 B/op [Average]
[info]   (min, avg, max) = (8815.133, 8874.183, 8969.686), stdev = 57.140
[info]   CI (99.9%): [8654.157, 9094.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2268.230 ±(99.9%) 1408.089 MB/sec [Average]
[info]   (min, avg, max) = (1998.356, 2268.230, 2674.965), stdev = 365.676
[info]   CI (99.9%): [860.140, 3676.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8507.026 ±(99.9%) 5403.313 B/op [Average]
[info]   (min, avg, max) = (7455.168, 8507.026, 10097.941), stdev = 1403.223
[info]   CI (99.9%): [3103.713, 13910.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.962 ±(99.9%) 8.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.962, 4.685), stdev = 2.082
[info]   CI (99.9%): [≈ 0, 8.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.603 ±(99.9%) 30.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.603, 17.550), stdev = 7.799
[info]   CI (99.9%): [≈ 0, 33.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22217.925 ops/s
[info] # Warmup Iteration   2: 72031.105 ops/s
[info] # Warmup Iteration   3: 79166.028 ops/s
[info] # Warmup Iteration   4: 78244.924 ops/s
[info] # Warmup Iteration   5: 78554.510 ops/s
[info] Iteration   1: 79302.580 ops/s
[info]                  ·gc.alloc.rate:                   2197.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              43612.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39977.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 78088.296 ops/s
[info]                  ·gc.alloc.rate:                   2192.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              44190.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40493.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 79352.102 ops/s
[info]                  ·gc.alloc.rate:                   2198.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              43599.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39808.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 79584.030 ops/s
[info]                  ·gc.alloc.rate:                   2232.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              44154.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39731.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.412 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 78857.492 ops/s
[info]                  ·gc.alloc.rate:                   2240.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              44709.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53565.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.831 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   79036.900 ±(99.9%) 2279.151 ops/s [Average]
[info]   (min, avg, max) = (78088.296, 79036.900, 79584.030), stdev = 591.888
[info]   CI (99.9%): [76757.749, 81316.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2212.278 ±(99.9%) 85.712 MB/sec [Average]
[info]   (min, avg, max) = (2192.737, 2212.278, 2240.050), stdev = 22.259
[info]   CI (99.9%): [2126.566, 2297.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44053.217 ±(99.9%) 1784.962 B/op [Average]
[info]   (min, avg, max) = (43599.520, 44053.217, 44709.194), stdev = 463.549
[info]   CI (99.9%): [42268.255, 45838.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2144.747 ±(99.9%) 1160.346 MB/sec [Average]
[info]   (min, avg, max) = (2007.208, 2144.747, 2683.776), stdev = 301.338
[info]   CI (99.9%): [984.401, 3305.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42715.393 ±(99.9%) 23383.647 B/op [Average]
[info]   (min, avg, max) = (39731.462, 42715.393, 53565.522), stdev = 6072.659
[info]   CI (99.9%): [19331.746, 66099.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.169 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 3.643), stdev = 1.602
[info]   CI (99.9%): [≈ 0, 6.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.461 ±(99.9%) 122.406 B/op [Average]
[info]   (min, avg, max) = (0.412, 15.461, 72.298), stdev = 31.788
[info]   CI (99.9%): [≈ 0, 137.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13440.966 ops/s
[info] # Warmup Iteration   2: 115526.176 ops/s
[info] # Warmup Iteration   3: 123993.812 ops/s
[info] # Warmup Iteration   4: 126097.980 ops/s
[info] # Warmup Iteration   5: 124418.412 ops/s
[info] Iteration   1: 122243.593 ops/s
[info]                  ·gc.alloc.rate:                   1931.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              24864.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25816.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 123573.374 ops/s
[info]                  ·gc.alloc.rate:                   1925.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              24510.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17011.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 125673.824 ops/s
[info]                  ·gc.alloc.rate:                   1996.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              25005.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25019.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 126859.879 ops/s
[info]                  ·gc.alloc.rate:               1988.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          24664.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24772.668 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 127073.844 ops/s
[info]                  ·gc.alloc.rate:               2018.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          25002.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24763.957 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   125084.903 ±(99.9%) 8125.457 ops/s [Average]
[info]   (min, avg, max) = (122243.593, 125084.903, 127073.844), stdev = 2110.155
[info]   CI (99.9%): [116959.446, 133210.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1971.969 ±(99.9%) 159.977 MB/sec [Average]
[info]   (min, avg, max) = (1925.040, 1971.969, 2018.634), stdev = 41.545
[info]   CI (99.9%): [1811.992, 2131.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24809.458 ±(99.9%) 836.553 B/op [Average]
[info]   (min, avg, max) = (24510.638, 24809.458, 25005.103), stdev = 217.250
[info]   CI (99.9%): [23972.905, 25646.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1867.084 ±(99.9%) 1143.088 MB/sec [Average]
[info]   (min, avg, max) = (1336.083, 1867.084, 2005.251), stdev = 296.856
[info]   CI (99.9%): [723.996, 3010.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23476.821 ±(99.9%) 14014.711 B/op [Average]
[info]   (min, avg, max) = (17011.732, 23476.821, 25816.221), stdev = 3639.576
[info]   CI (99.9%): [9462.110, 37491.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.351), stdev = 1.917
[info]   CI (99.9%): [≈ 0, 8.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.888 ±(99.9%) 95.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.888, 56.017), stdev = 24.684
[info]   CI (99.9%): [≈ 0, 106.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47644.219 ops/s
[info] # Warmup Iteration   2: 156009.265 ops/s
[info] # Warmup Iteration   3: 163613.209 ops/s
[info] # Warmup Iteration   4: 161752.994 ops/s
[info] # Warmup Iteration   5: 165578.153 ops/s
[info] Iteration   1: 168809.442 ops/s
[info]                  ·gc.alloc.rate:                   2570.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              23968.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25047.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 167195.964 ops/s
[info]                  ·gc.alloc.rate:                   2561.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              24111.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25258.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.784 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 173159.209 ops/s
[info]                  ·gc.alloc.rate:                   2650.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              24088.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24403.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 172883.096 ops/s
[info]                  ·gc.alloc.rate:               2619.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          23847.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18365.696 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 170553.628 ops/s
[info]                  ·gc.alloc.rate:                   2612.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              24108.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24877.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   170520.268 ±(99.9%) 9916.063 ops/s [Average]
[info]   (min, avg, max) = (167195.964, 170520.268, 173159.209), stdev = 2575.170
[info]   CI (99.9%): [160604.205, 180436.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2603.064 ±(99.9%) 140.805 MB/sec [Average]
[info]   (min, avg, max) = (2561.936, 2603.064, 2650.612), stdev = 36.567
[info]   CI (99.9%): [2462.259, 2743.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24025.157 ±(99.9%) 444.198 B/op [Average]
[info]   (min, avg, max) = (23847.553, 24025.157, 24111.685), stdev = 115.357
[info]   CI (99.9%): [23580.959, 24469.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2553.725 ±(99.9%) 1154.889 MB/sec [Average]
[info]   (min, avg, max) = (2017.276, 2553.725, 2695.845), stdev = 299.921
[info]   CI (99.9%): [1398.836, 3708.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23590.478 ±(99.9%) 11312.015 B/op [Average]
[info]   (min, avg, max) = (18365.696, 23590.478, 25258.128), stdev = 2937.694
[info]   CI (99.9%): [12278.463, 34902.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.541), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.242 ±(99.9%) 8.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.242, 5.046), stdev = 2.147
[info]   CI (99.9%): [≈ 0, 9.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4411.946 ops/s
[info] # Warmup Iteration   2: 56379.798 ops/s
[info] # Warmup Iteration   3: 60773.008 ops/s
[info] # Warmup Iteration   4: 61456.232 ops/s
[info] # Warmup Iteration   5: 61076.319 ops/s
[info] Iteration   1: 61140.718 ops/s
[info]                  ·gc.alloc.rate:                   2990.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              76969.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68655.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.608 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 61225.019 ops/s
[info]                  ·gc.alloc.rate:                   3054.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              78514.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85780.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.070 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 62310.947 ops/s
[info]                  ·gc.alloc.rate:               3080.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          77804.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67652.778 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 62351.357 ops/s
[info]                  ·gc.alloc.rate:               3097.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          78130.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3356.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84676.020 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 61848.423 ops/s
[info]                  ·gc.alloc.rate:                   3059.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              77835.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68650.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   61775.293 ±(99.9%) 2220.064 ops/s [Average]
[info]   (min, avg, max) = (61140.718, 61775.293, 62351.357), stdev = 576.543
[info]   CI (99.9%): [59555.229, 63995.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3056.313 ±(99.9%) 157.044 MB/sec [Average]
[info]   (min, avg, max) = (2990.067, 3056.313, 3097.140), stdev = 40.784
[info]   CI (99.9%): [2899.269, 3213.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77850.968 ±(99.9%) 2193.733 B/op [Average]
[info]   (min, avg, max) = (76969.462, 77850.968, 78514.604), stdev = 569.705
[info]   CI (99.9%): [75657.235, 80044.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2947.547 ±(99.9%) 1404.352 MB/sec [Average]
[info]   (min, avg, max) = (2667.096, 2947.547, 3356.590), stdev = 364.706
[info]   CI (99.9%): [1543.194, 4351.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75083.086 ±(99.9%) 35727.640 B/op [Average]
[info]   (min, avg, max) = (67652.778, 75083.086, 85780.284), stdev = 9278.355
[info]   CI (99.9%): [39355.446, 110810.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.641 ±(99.9%) 2.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 1.608), stdev = 0.699
[info]   CI (99.9%): [≈ 0, 3.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67833.116 ops/s
[info] # Warmup Iteration   2: 177952.128 ops/s
[info] # Warmup Iteration   3: 185475.121 ops/s
[info] # Warmup Iteration   4: 192148.032 ops/s
[info] # Warmup Iteration   5: 189984.565 ops/s
[info] Iteration   1: 191624.784 ops/s
[info]                  ·gc.alloc.rate:                   1346.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              11044.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10982.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 190371.982 ops/s
[info]                  ·gc.alloc.rate:               1321.446 MB/sec
[info]                  ·gc.alloc.rate.norm:          10922.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5545.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 191225.397 ops/s
[info]                  ·gc.alloc.rate:               1353.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          11136.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11047.569 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 191923.213 ops/s
[info]                  ·gc.alloc.rate:                   1345.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              11031.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11012.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 191382.267 ops/s
[info]                  ·gc.alloc.rate:                   1366.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              11241.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11022.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   191305.528 ±(99.9%) 2251.291 ops/s [Average]
[info]   (min, avg, max) = (190371.982, 191305.528, 191923.213), stdev = 584.653
[info]   CI (99.9%): [189054.237, 193556.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1346.672 ±(99.9%) 63.536 MB/sec [Average]
[info]   (min, avg, max) = (1321.446, 1346.672, 1366.949), stdev = 16.500
[info]   CI (99.9%): [1283.135, 1410.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11075.522 ±(99.9%) 461.897 B/op [Average]
[info]   (min, avg, max) = (10922.629, 11075.522, 11241.770), stdev = 119.953
[info]   CI (99.9%): [10613.625, 11537.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.063 ±(99.9%) 1154.114 MB/sec [Average]
[info]   (min, avg, max) = (670.917, 1207.063, 1343.244), stdev = 299.720
[info]   CI (99.9%): [52.949, 2361.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9921.988 ±(99.9%) 9420.994 B/op [Average]
[info]   (min, avg, max) = (5545.574, 9921.988, 11047.569), stdev = 2446.602
[info]   CI (99.9%): [500.994, 19342.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.540), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 6.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.043 ±(99.9%) 49.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.043, 29.020), stdev = 12.849
[info]   CI (99.9%): [≈ 0, 55.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144922.203 ops/s
[info] # Warmup Iteration   2: 449112.246 ops/s
[info] # Warmup Iteration   3: 462725.140 ops/s
[info] # Warmup Iteration   4: 463058.971 ops/s
[info] # Warmup Iteration   5: 454519.971 ops/s
[info] Iteration   1: 456900.511 ops/s
[info]                  ·gc.alloc.rate:               412.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          1421.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1762.235 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 453859.570 ops/s
[info]                  ·gc.alloc.rate:               404.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          1402.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1774.017 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 457695.712 ops/s
[info]                  ·gc.alloc.rate:      395.520 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 453451.235 ops/s
[info]                  ·gc.alloc.rate:               407.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          1414.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2312.017 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 454045.828 ops/s
[info]                  ·gc.alloc.rate:                   407.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1413.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2309.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   455190.571 ±(99.9%) 7532.639 ops/s [Average]
[info]   (min, avg, max) = (453451.235, 455190.571, 457695.712), stdev = 1956.203
[info]   CI (99.9%): [447657.932, 462723.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   405.566 ±(99.9%) 24.434 MB/sec [Average]
[info]   (min, avg, max) = (395.520, 405.566, 412.612), stdev = 6.345
[info]   CI (99.9%): [381.132, 430.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1402.308 ±(99.9%) 94.851 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1402.308, 1421.273), stdev = 24.632
[info]   CI (99.9%): [1307.457, 1497.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.090 ±(99.9%) 1056.804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.090, 666.134), stdev = 274.449
[info]   CI (99.9%): [≈ 0, 1527.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1631.469 ±(99.9%) 3663.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1631.469, 2312.017), stdev = 951.500
[info]   CI (99.9%): [≈ 0, 5295.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381868.220 ops/s
[info] # Warmup Iteration   2: 616362.996 ops/s
[info] # Warmup Iteration   3: 653362.739 ops/s
[info] # Warmup Iteration   4: 656848.992 ops/s
[info] # Warmup Iteration   5: 654546.170 ops/s
[info] Iteration   1: 651213.955 ops/s
[info]                  ·gc.alloc.rate:                   364.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              881.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1236.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 653951.544 ops/s
[info]                  ·gc.alloc.rate:               366.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          882.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1231.272 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 656900.785 ops/s
[info]                  ·gc.alloc.rate:      354.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 653977.639 ops/s
[info]                  ·gc.alloc.rate:                   375.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              903.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1612.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 646436.623 ops/s
[info]                  ·gc.alloc.rate:      348.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   652496.109 ±(99.9%) 15169.249 ops/s [Average]
[info]   (min, avg, max) = (646436.623, 652496.109, 656900.785), stdev = 3939.406
[info]   CI (99.9%): [637326.860, 667665.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   361.823 ±(99.9%) 41.456 MB/sec [Average]
[info]   (min, avg, max) = (348.292, 361.823, 375.551), stdev = 10.766
[info]   CI (99.9%): [320.366, 403.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   872.614 ±(99.9%) 92.975 B/op [Average]
[info]   (min, avg, max) = (848.001, 872.614, 903.445), stdev = 24.145
[info]   CI (99.9%): [779.640, 965.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.719 ±(99.9%) 1216.531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.719, 670.393), stdev = 315.929
[info]   CI (99.9%): [≈ 0, 1555.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   816.089 ±(99.9%) 2929.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 816.089, 1612.733), stdev = 760.874
[info]   CI (99.9%): [≈ 0, 3745.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375381.585 ops/s
[info] # Warmup Iteration   2: 674308.997 ops/s
[info] # Warmup Iteration   3: 713393.191 ops/s
[info] # Warmup Iteration   4: 716882.346 ops/s
[info] # Warmup Iteration   5: 699291.450 ops/s
[info] Iteration   1: 713598.675 ops/s
[info]                  ·gc.alloc.rate:      7.255 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 712864.723 ops/s
[info]                  ·gc.alloc.rate:      7.247 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 714582.133 ops/s
[info]                  ·gc.alloc.rate:      7.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 715872.088 ops/s
[info]                  ·gc.alloc.rate:      7.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 717001.288 ops/s
[info]                  ·gc.alloc.rate:      7.291 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   714783.781 ±(99.9%) 6451.889 ops/s [Average]
[info]   (min, avg, max) = (712864.723, 714783.781, 717001.288), stdev = 1675.535
[info]   CI (99.9%): [708331.893, 721235.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.267 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (7.247, 7.267, 7.291), stdev = 0.018
[info]   CI (99.9%): [7.200, 7.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11330.483 ops/s
[info] # Warmup Iteration   2: 31901.519 ops/s
[info] # Warmup Iteration   3: 35084.772 ops/s
[info] # Warmup Iteration   4: 33506.654 ops/s
[info] # Warmup Iteration   5: 35471.605 ops/s
[info] Iteration   1: 35641.501 ops/s
[info]                  ·gc.alloc.rate:                   1933.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              85366.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88952.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35493.214 ops/s
[info]                  ·gc.alloc.rate:                   1911.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              84741.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59457.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35406.940 ops/s
[info]                  ·gc.alloc.rate:                   1934.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              85978.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89214.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35437.362 ops/s
[info]                  ·gc.alloc.rate:                   1922.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              85363.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89047.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35686.741 ops/s
[info]                  ·gc.alloc.rate:               1962.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          86520.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88509.861 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   35533.152 ±(99.9%) 479.514 ops/s [Average]
[info]   (min, avg, max) = (35406.940, 35533.152, 35686.741), stdev = 124.528
[info]   CI (99.9%): [35053.637, 36012.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1932.625 ±(99.9%) 73.508 MB/sec [Average]
[info]   (min, avg, max) = (1911.169, 1932.625, 1962.347), stdev = 19.090
[info]   CI (99.9%): [1859.116, 2006.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85594.251 ±(99.9%) 2610.397 B/op [Average]
[info]   (min, avg, max) = (84741.978, 85594.251, 86520.846), stdev = 677.912
[info]   CI (99.9%): [82983.854, 88204.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.994 ±(99.9%) 1149.711 MB/sec [Average]
[info]   (min, avg, max) = (1340.922, 1874.994, 2014.460), stdev = 298.576
[info]   CI (99.9%): [725.283, 3024.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83036.414 ±(99.9%) 50766.364 B/op [Average]
[info]   (min, avg, max) = (59457.015, 83036.414, 89214.681), stdev = 13183.864
[info]   CI (99.9%): [32270.050, 133802.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 4.887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 2.977), stdev = 1.269
[info]   CI (99.9%): [≈ 0, 5.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.631 ±(99.9%) 215.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.631, 131.451), stdev = 56.041
[info]   CI (99.9%): [≈ 0, 252.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 974001.847 ops/s
[info] # Warmup Iteration   2: 3066150.327 ops/s
[info] # Warmup Iteration   3: 3413450.141 ops/s
[info] # Warmup Iteration   4: 3440914.017 ops/s
[info] # Warmup Iteration   5: 3432343.456 ops/s
[info] Iteration   1: 3408998.117 ops/s
[info]                  ·gc.alloc.rate:                   2877.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1549.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3445779.058 ops/s
[info]                  ·gc.alloc.rate:                   2908.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1230.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3368975.502 ops/s
[info]                  ·gc.alloc.rate:               2847.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          1330.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1261.759 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 3397478.061 ops/s
[info]                  ·gc.alloc.rate:               2869.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          1329.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1254.090 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3437244.120 ops/s
[info]                  ·gc.alloc.rate:               2903.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          1329.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2712.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1241.845 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3411694.972 ±(99.9%) 119444.942 ops/s [Average]
[info]   (min, avg, max) = (3368975.502, 3411694.972, 3445779.058), stdev = 31019.472
[info]   CI (99.9%): [3292250.030, 3531139.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2881.443 ±(99.9%) 97.176 MB/sec [Average]
[info]   (min, avg, max) = (2847.196, 2881.443, 2908.421), stdev = 25.236
[info]   CI (99.9%): [2784.267, 2978.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1329.253 ±(99.9%) 2.623 B/op [Average]
[info]   (min, avg, max) = (1328.418, 1329.253, 1330.110), stdev = 0.681
[info]   CI (99.9%): [1326.630, 1331.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2833.965 ±(99.9%) 1123.230 MB/sec [Average]
[info]   (min, avg, max) = (2693.915, 2833.965, 3355.628), stdev = 291.699
[info]   CI (99.9%): [1710.735, 3957.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1307.480 ±(99.9%) 522.480 B/op [Average]
[info]   (min, avg, max) = (1230.443, 1307.480, 1549.264), stdev = 135.686
[info]   CI (99.9%): [785.000, 1829.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.844 ops/s
[info] # Warmup Iteration   2: 5576760.853 ops/s
[info] # Warmup Iteration   3: 6009655.189 ops/s
[info] # Warmup Iteration   4: 5973228.951 ops/s
[info] # Warmup Iteration   5: 6023728.227 ops/s
[info] Iteration   1: 5983576.810 ops/s
[info]                  ·gc.alloc.rate:                   1145.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              301.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5954701.021 ops/s
[info]                  ·gc.alloc.rate:               1161.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 352.397 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 6033764.683 ops/s
[info]                  ·gc.alloc.rate:                   1165.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6011703.994 ops/s
[info]                  ·gc.alloc.rate:               1157.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6001563.485 ops/s
[info]                  ·gc.alloc.rate:                   1169.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   5997061.998 ±(99.9%) 114844.143 ops/s [Average]
[info]   (min, avg, max) = (5954701.021, 5997061.998, 6033764.683), stdev = 29824.659
[info]   CI (99.9%): [5882217.855, 6111906.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1159.617 ±(99.9%) 35.559 MB/sec [Average]
[info]   (min, avg, max) = (1145.023, 1159.617, 1169.254), stdev = 9.235
[info]   CI (99.9%): [1124.058, 1195.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.294 ±(99.9%) 9.224 B/op [Average]
[info]   (min, avg, max) = (301.181, 304.294, 306.799), stdev = 2.395
[info]   CI (99.9%): [295.070, 313.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1067.714 ±(99.9%) 1408.475 MB/sec [Average]
[info]   (min, avg, max) = (666.481, 1067.714, 1336.481), stdev = 365.777
[info]   CI (99.9%): [≈ 0, 2476.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   280.183 ±(99.9%) 369.688 B/op [Average]
[info]   (min, avg, max) = (174.746, 280.183, 352.397), stdev = 96.007
[info]   CI (99.9%): [≈ 0, 649.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.892 ±(99.9%) 7.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.892, 4.395), stdev = 1.959
[info]   CI (99.9%): [≈ 0, 8.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.234 ±(99.9%) 1.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.234, 1.152), stdev = 0.514
[info]   CI (99.9%): [≈ 0, 2.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 832157.254 ops/s
[info] # Warmup Iteration   2: 4107430.502 ops/s
[info] # Warmup Iteration   3: 4140065.521 ops/s
[info] # Warmup Iteration   4: 4014100.481 ops/s
[info] # Warmup Iteration   5: 4081344.902 ops/s
[info] Iteration   1: 4071589.828 ops/s
[info]                  ·gc.alloc.rate:                   2236.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     776.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4053694.324 ops/s
[info]                  ·gc.alloc.rate:                   2242.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              870.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     777.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4052479.490 ops/s
[info]                  ·gc.alloc.rate:               2267.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          880.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1037.178 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4109023.437 ops/s
[info]                  ·gc.alloc.rate:               2272.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 768.514 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4139159.636 ops/s
[info]                  ·gc.alloc.rate:               2289.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 764.446 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4085189.343 ±(99.9%) 145711.059 ops/s [Average]
[info]   (min, avg, max) = (4052479.490, 4085189.343, 4139159.636), stdev = 37840.699
[info]   CI (99.9%): [3939478.284, 4230900.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2261.634 ±(99.9%) 84.388 MB/sec [Average]
[info]   (min, avg, max) = (2236.251, 2261.634, 2289.215), stdev = 21.915
[info]   CI (99.9%): [2177.246, 2346.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   871.279 ±(99.9%) 22.528 B/op [Average]
[info]   (min, avg, max) = (864.415, 871.279, 880.644), stdev = 5.850
[info]   CI (99.9%): [848.751, 893.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2139.778 ±(99.9%) 1142.575 MB/sec [Average]
[info]   (min, avg, max) = (2003.763, 2139.778, 2670.554), stdev = 296.723
[info]   CI (99.9%): [997.203, 3282.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   824.786 ±(99.9%) 457.668 B/op [Average]
[info]   (min, avg, max) = (764.446, 824.786, 1037.178), stdev = 118.855
[info]   CI (99.9%): [367.119, 1282.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.914), stdev = 1.748
[info]   CI (99.9%): [≈ 0, 7.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.304 ±(99.9%) 2.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 1.513), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 2.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4102600.134 ops/s
[info] # Warmup Iteration   2: 6588952.061 ops/s
[info] # Warmup Iteration   3: 6938325.179 ops/s
[info] # Warmup Iteration   4: 6963113.797 ops/s
[info] # Warmup Iteration   5: 6904127.379 ops/s
[info] Iteration   1: 7005972.236 ops/s
[info]                  ·gc.alloc.rate:                   1351.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6979518.772 ops/s
[info]                  ·gc.alloc.rate:                   1352.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6966061.327 ops/s
[info]                  ·gc.alloc.rate:                   1349.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6917007.875 ops/s
[info]                  ·gc.alloc.rate:                   1341.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6955661.292 ops/s
[info]                  ·gc.alloc.rate:                   1346.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6964844.300 ±(99.9%) 125972.267 ops/s [Average]
[info]   (min, avg, max) = (6917007.875, 6964844.300, 7005972.236), stdev = 32714.598
[info]   CI (99.9%): [6838872.033, 7090816.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1348.406 ±(99.9%) 17.266 MB/sec [Average]
[info]   (min, avg, max) = (1341.303, 1348.406, 1352.228), stdev = 4.484
[info]   CI (99.9%): [1331.140, 1365.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.700 ±(99.9%) 2.368 B/op [Average]
[info]   (min, avg, max) = (303.634, 304.700, 305.198), stdev = 0.615
[info]   CI (99.9%): [302.331, 307.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1343.767 ±(99.9%) 3.958 MB/sec [Average]
[info]   (min, avg, max) = (1342.232, 1343.767, 1344.968), stdev = 1.028
[info]   CI (99.9%): [1339.810, 1347.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   303.655 ±(99.9%) 5.747 B/op [Average]
[info]   (min, avg, max) = (301.765, 303.655, 305.875), stdev = 1.492
[info]   CI (99.9%): [297.908, 309.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.197 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.625, 2.540), stdev = 1.090
[info]   CI (99.9%): [≈ 0, 4.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 0.948 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.141, 0.574), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1294175.028 ops/s
[info] # Warmup Iteration   2: 4143970.157 ops/s
[info] # Warmup Iteration   3: 4263038.528 ops/s
[info] # Warmup Iteration   4: 4312944.678 ops/s
[info] # Warmup Iteration   5: 4321219.290 ops/s
[info] Iteration   1: 4346112.127 ops/s
[info]                  ·gc.alloc.rate:                   2473.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4346690.025 ops/s
[info]                  ·gc.alloc.rate:                   2499.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              905.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4313122.133 ops/s
[info]                  ·gc.alloc.rate:               2468.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          900.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 731.906 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 4348971.334 ops/s
[info]                  ·gc.alloc.rate:               2516.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          910.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 970.100 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 4349276.418 ops/s
[info]                  ·gc.alloc.rate:               2489.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          901.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 729.683 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4340834.408 ±(99.9%) 59889.270 ops/s [Average]
[info]   (min, avg, max) = (4313122.133, 4340834.408, 4349276.418), stdev = 15553.053
[info]   CI (99.9%): [4280945.138, 4400723.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2489.642 ±(99.9%) 73.957 MB/sec [Average]
[info]   (min, avg, max) = (2468.931, 2489.642, 2516.030), stdev = 19.206
[info]   CI (99.9%): [2415.685, 2563.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   902.650 ±(99.9%) 21.087 B/op [Average]
[info]   (min, avg, max) = (895.796, 902.650, 910.506), stdev = 5.476
[info]   CI (99.9%): [881.563, 923.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2409.820 ±(99.9%) 1401.732 MB/sec [Average]
[info]   (min, avg, max) = (2005.779, 2409.820, 2680.709), stdev = 364.025
[info]   CI (99.9%): [1008.089, 3811.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   873.501 ±(99.9%) 501.659 B/op [Average]
[info]   (min, avg, max) = (729.683, 873.501, 970.100), stdev = 130.279
[info]   CI (99.9%): [371.842, 1375.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.396), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.143), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1040129.876 ops/s
[info] # Warmup Iteration   2: 2119584.123 ops/s
[info] # Warmup Iteration   3: 2212853.557 ops/s
[info] # Warmup Iteration   4: 2230364.635 ops/s
[info] # Warmup Iteration   5: 2227885.714 ops/s
[info] Iteration   1: 2233729.535 ops/s
[info]                  ·gc.alloc.rate:                   1336.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2232641.274 ops/s
[info]                  ·gc.alloc.rate:                   1332.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              939.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     946.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2244350.070 ops/s
[info]                  ·gc.alloc.rate:               1327.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          930.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470.901 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2186555.896 ops/s
[info]                  ·gc.alloc.rate:                   1320.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2192680.738 ops/s
[info]                  ·gc.alloc.rate:                   1322.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2217991.503 ±(99.9%) 101621.764 ops/s [Average]
[info]   (min, avg, max) = (2186555.896, 2217991.503, 2244350.070), stdev = 26390.849
[info]   CI (99.9%): [2116369.739, 2319613.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1327.800 ±(99.9%) 25.749 MB/sec [Average]
[info]   (min, avg, max) = (1320.022, 1327.800, 1336.336), stdev = 6.687
[info]   CI (99.9%): [1302.052, 1353.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   942.147 ±(99.9%) 30.669 B/op [Average]
[info]   (min, avg, max) = (930.793, 942.147, 950.027), stdev = 7.965
[info]   CI (99.9%): [911.478, 972.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.816 ±(99.9%) 1154.124 MB/sec [Average]
[info]   (min, avg, max) = (671.660, 1207.816, 1343.142), stdev = 299.722
[info]   CI (99.9%): [53.692, 2361.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   858.182 ±(99.9%) 834.452 B/op [Average]
[info]   (min, avg, max) = (470.901, 858.182, 966.666), stdev = 216.705
[info]   CI (99.9%): [23.730, 1692.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 5.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.185), stdev = 1.409
[info]   CI (99.9%): [≈ 0, 6.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.479 ±(99.9%) 3.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.479, 2.293), stdev = 1.014
[info]   CI (99.9%): [≈ 0, 4.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.704 ops/s
[info] # Warmup Iteration   2: 5591569.076 ops/s
[info] # Warmup Iteration   3: 5637017.549 ops/s
[info] # Warmup Iteration   4: 5881053.396 ops/s
[info] # Warmup Iteration   5: 5907291.352 ops/s
[info] Iteration   1: 5909654.784 ops/s
[info]                  ·gc.alloc.rate:               588.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.226 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5936321.146 ops/s
[info]                  ·gc.alloc.rate:               592.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.436 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5932719.329 ops/s
[info]                  ·gc.alloc.rate:                   595.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5923727.425 ops/s
[info]                  ·gc.alloc.rate:               587.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.897 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 5920675.757 ops/s
[info]                  ·gc.alloc.rate:               595.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.079 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5924619.688 ±(99.9%) 40515.444 ops/s [Average]
[info]   (min, avg, max) = (5909654.784, 5924619.688, 5936321.146), stdev = 10521.732
[info]   CI (99.9%): [5884104.244, 5965135.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   592.032 ±(99.9%) 15.338 MB/sec [Average]
[info]   (min, avg, max) = (587.029, 592.032, 595.968), stdev = 3.983
[info]   CI (99.9%): [576.694, 607.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.249 ±(99.9%) 3.828 B/op [Average]
[info]   (min, avg, max) = (155.913, 157.249, 158.429), stdev = 0.994
[info]   CI (99.9%): [153.421, 161.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.833 ±(99.9%) 1.047 MB/sec [Average]
[info]   (min, avg, max) = (665.465, 665.833, 666.125), stdev = 0.272
[info]   CI (99.9%): [664.786, 666.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   176.852 ±(99.9%) 1.248 B/op [Average]
[info]   (min, avg, max) = (176.436, 176.852, 177.226), stdev = 0.324
[info]   CI (99.9%): [175.604, 178.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2098529.844 ops/s
[info] # Warmup Iteration   2: 4548730.184 ops/s
[info] # Warmup Iteration   3: 4656444.751 ops/s
[info] # Warmup Iteration   4: 4734233.398 ops/s
[info] # Warmup Iteration   5: 4721930.213 ops/s
[info] Iteration   1: 4588791.833 ops/s
[info]                  ·gc.alloc.rate:                   1244.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              426.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4618009.449 ops/s
[info]                  ·gc.alloc.rate:               1249.866 MB/sec
[info]                  ·gc.alloc.rate.norm:          425.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456.320 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 4723489.185 ops/s
[info]                  ·gc.alloc.rate:                   1288.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4698981.151 ops/s
[info]                  ·gc.alloc.rate:                   1285.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              430.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4733627.048 ops/s
[info]                  ·gc.alloc.rate:               1296.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          430.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 444.762 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4672579.733 ±(99.9%) 251133.951 ops/s [Average]
[info]   (min, avg, max) = (4588791.833, 4672579.733, 4733627.048), stdev = 65218.690
[info]   CI (99.9%): [4421445.782, 4923713.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1272.937 ±(99.9%) 92.794 MB/sec [Average]
[info]   (min, avg, max) = (1244.052, 1272.937, 1296.174), stdev = 24.098
[info]   CI (99.9%): [1180.143, 1365.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   428.724 ±(99.9%) 8.931 B/op [Average]
[info]   (min, avg, max) = (425.940, 428.724, 430.958), stdev = 2.319
[info]   CI (99.9%): [419.793, 437.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.881 ±(99.9%) 4.325 MB/sec [Average]
[info]   (min, avg, max) = (1337.692, 1338.881, 1340.273), stdev = 1.123
[info]   CI (99.9%): [1334.556, 1343.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   451.028 ±(99.9%) 23.858 B/op [Average]
[info]   (min, avg, max) = (444.762, 451.028, 458.778), stdev = 6.196
[info]   CI (99.9%): [427.169, 474.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.789), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.258 ±(99.9%) 2.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.269), stdev = 0.565
[info]   CI (99.9%): [≈ 0, 2.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3989925.565 ops/s
[info] # Warmup Iteration   2: 5662991.114 ops/s
[info] # Warmup Iteration   3: 5954067.774 ops/s
[info] # Warmup Iteration   4: 5944573.304 ops/s
[info] # Warmup Iteration   5: 5994635.530 ops/s
[info] Iteration   1: 6038021.599 ops/s
[info]                  ·gc.alloc.rate:               608.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.760 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5942915.889 ops/s
[info]                  ·gc.alloc.rate:               597.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5988037.620 ops/s
[info]                  ·gc.alloc.rate:                   601.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5882512.656 ops/s
[info]                  ·gc.alloc.rate:      568.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6041496.581 ops/s
[info]                  ·gc.alloc.rate:               605.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.843 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   5978596.869 ±(99.9%) 258897.525 ops/s [Average]
[info]   (min, avg, max) = (5882512.656, 5978596.869, 6041496.581), stdev = 67234.865
[info]   CI (99.9%): [5719699.344, 6237494.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   596.220 ±(99.9%) 62.619 MB/sec [Average]
[info]   (min, avg, max) = (568.104, 596.220, 608.373), stdev = 16.262
[info]   CI (99.9%): [533.601, 658.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   156.931 ±(99.9%) 10.672 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.931, 158.572), stdev = 2.771
[info]   CI (99.9%): [146.260, 167.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.654 ±(99.9%) 1155.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.654, 671.170), stdev = 299.999
[info]   CI (99.9%): [≈ 0, 1691.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   140.710 ±(99.9%) 302.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.710, 177.555), stdev = 78.668
[info]   CI (99.9%): [≈ 0, 443.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4344062.891 ops/s
[info] # Warmup Iteration   2: 6441259.120 ops/s
[info] # Warmup Iteration   3: 6446298.668 ops/s
[info] # Warmup Iteration   4: 6461527.146 ops/s
[info] # Warmup Iteration   5: 6459268.950 ops/s
[info] Iteration   1: 6457296.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6461911.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6465116.370 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6458014.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6461172.499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6460702.231 ±(99.9%) 12175.410 ops/s [Average]
[info]   (min, avg, max) = (6457296.547, 6460702.231, 6465116.370), stdev = 3161.915
[info]   CI (99.9%): [6448526.821, 6472877.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1587320.189 ops/s
[info] # Warmup Iteration   2: 4410445.096 ops/s
[info] # Warmup Iteration   3: 4473019.109 ops/s
[info] # Warmup Iteration   4: 4502326.524 ops/s
[info] # Warmup Iteration   5: 4550650.539 ops/s
[info] Iteration   1: 4630791.825 ops/s
[info]                  ·gc.alloc.rate:                   1303.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4623038.316 ops/s
[info]                  ·gc.alloc.rate:               1308.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 455.825 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 4584723.965 ops/s
[info]                  ·gc.alloc.rate:                   1286.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4518225.150 ops/s
[info]                  ·gc.alloc.rate:                   1280.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              446.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4494915.168 ops/s
[info]                  ·gc.alloc.rate:                   1272.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4570338.885 ±(99.9%) 236142.893 ops/s [Average]
[info]   (min, avg, max) = (4494915.168, 4570338.885, 4630791.825), stdev = 61325.559
[info]   CI (99.9%): [4334195.992, 4806481.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1290.388 ±(99.9%) 58.973 MB/sec [Average]
[info]   (min, avg, max) = (1272.674, 1290.388, 1308.985), stdev = 15.315
[info]   CI (99.9%): [1231.415, 1349.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   444.367 ±(99.9%) 7.764 B/op [Average]
[info]   (min, avg, max) = (441.527, 444.367, 446.112), stdev = 2.016
[info]   CI (99.9%): [436.603, 452.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1339.077 ±(99.9%) 5.954 MB/sec [Average]
[info]   (min, avg, max) = (1337.570, 1339.077, 1340.987), stdev = 1.546
[info]   CI (99.9%): [1333.123, 1345.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   461.191 ±(99.9%) 24.346 B/op [Average]
[info]   (min, avg, max) = (454.587, 461.191, 468.352), stdev = 6.323
[info]   CI (99.9%): [436.845, 485.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.768), stdev = 1.674
[info]   CI (99.9%): [≈ 0, 7.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.270 ±(99.9%) 2.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 1.313), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252263.196 ops/s
[info] # Warmup Iteration   2: 1498359.787 ops/s
[info] # Warmup Iteration   3: 1492943.192 ops/s
[info] # Warmup Iteration   4: 1532136.803 ops/s
[info] # Warmup Iteration   5: 1515538.253 ops/s
[info] Iteration   1: 1535194.990 ops/s
[info]                  ·gc.alloc.rate:                   2175.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              2230.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2067.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1541145.047 ops/s
[info]                  ·gc.alloc.rate:                   2173.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              2218.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2054.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1549052.539 ops/s
[info]                  ·gc.alloc.rate:                   2170.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              2205.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2042.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1517294.102 ops/s
[info]                  ·gc.alloc.rate:               2154.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          2234.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2087.723 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1538662.189 ops/s
[info]                  ·gc.alloc.rate:               2210.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          2261.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2749.028 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1536269.773 ±(99.9%) 45321.700 ops/s [Average]
[info]   (min, avg, max) = (1517294.102, 1536269.773, 1549052.539), stdev = 11769.901
[info]   CI (99.9%): [1490948.074, 1581591.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2176.934 ±(99.9%) 78.952 MB/sec [Average]
[info]   (min, avg, max) = (2154.420, 2176.934, 2210.417), stdev = 20.504
[info]   CI (99.9%): [2097.982, 2255.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2230.129 ±(99.9%) 79.520 B/op [Average]
[info]   (min, avg, max) = (2205.488, 2230.129, 2261.022), stdev = 20.651
[info]   CI (99.9%): [2150.609, 2309.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2148.025 ±(99.9%) 1161.301 MB/sec [Average]
[info]   (min, avg, max) = (2010.454, 2148.025, 2687.501), stdev = 301.586
[info]   CI (99.9%): [986.724, 3309.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2200.361 ±(99.9%) 1182.808 B/op [Average]
[info]   (min, avg, max) = (2042.632, 2200.361, 2749.028), stdev = 307.171
[info]   CI (99.9%): [1017.553, 3383.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 5.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.185), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.662 ±(99.9%) 5.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.265), stdev = 1.456
[info]   CI (99.9%): [≈ 0, 6.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.690 ops/s
[info] # Warmup Iteration   2: 2695829.300 ops/s
[info] # Warmup Iteration   3: 2886391.094 ops/s
[info] # Warmup Iteration   4: 2897184.026 ops/s
[info] # Warmup Iteration   5: 2897531.694 ops/s
[info] Iteration   1: 2899170.495 ops/s
[info]                  ·gc.alloc.rate:                   560.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2894768.858 ops/s
[info]                  ·gc.alloc.rate:               570.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 361.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 2881687.435 ops/s
[info]                  ·gc.alloc.rate:                   555.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2920282.886 ops/s
[info]                  ·gc.alloc.rate:      549.440 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2910306.156 ops/s
[info]                  ·gc.alloc.rate:               569.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 360.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2901243.166 ±(99.9%) 56896.048 ops/s [Average]
[info]   (min, avg, max) = (2881687.435, 2901243.166, 2920282.886), stdev = 14775.723
[info]   CI (99.9%): [2844347.118, 2958139.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   560.861 ±(99.9%) 34.190 MB/sec [Average]
[info]   (min, avg, max) = (549.440, 560.861, 570.153), stdev = 8.879
[info]   CI (99.9%): [526.671, 595.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.224 ±(99.9%) 20.529 B/op [Average]
[info]   (min, avg, max) = (296.000, 304.224, 309.962), stdev = 5.331
[info]   CI (99.9%): [283.695, 324.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.822 ±(99.9%) 1146.939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.822, 666.221), stdev = 297.856
[info]   CI (99.9%): [≈ 0, 1679.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   289.502 ±(99.9%) 623.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 289.502, 363.823), stdev = 161.842
[info]   CI (99.9%): [≈ 0, 912.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227016.167 ops/s
[info] # Warmup Iteration   2: 1659550.183 ops/s
[info] # Warmup Iteration   3: 1713985.768 ops/s
[info] # Warmup Iteration   4: 1724388.998 ops/s
[info] # Warmup Iteration   5: 1717463.349 ops/s
[info] Iteration   1: 1723199.821 ops/s
[info]                  ·gc.alloc.rate:                   944.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     609.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1714955.230 ops/s
[info]                  ·gc.alloc.rate:                   950.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1696956.081 ops/s
[info]                  ·gc.alloc.rate:               922.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          854.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619.986 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1726537.028 ops/s
[info]                  ·gc.alloc.rate:                   937.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              854.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     609.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1723319.071 ops/s
[info]                  ·gc.alloc.rate:                   970.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              886.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1716993.446 ±(99.9%) 46178.153 ops/s [Average]
[info]   (min, avg, max) = (1696956.081, 1716993.446, 1726537.028), stdev = 11992.320
[info]   CI (99.9%): [1670815.293, 1763171.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   944.910 ±(99.9%) 68.791 MB/sec [Average]
[info]   (min, avg, max) = (922.037, 944.910, 970.821), stdev = 17.865
[info]   CI (99.9%): [876.120, 1013.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   866.069 ±(99.9%) 51.736 B/op [Average]
[info]   (min, avg, max) = (854.609, 866.069, 886.617), stdev = 13.436
[info]   CI (99.9%): [814.333, 917.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.128 ±(99.9%) 1411.100 MB/sec [Average]
[info]   (min, avg, max) = (667.794, 936.128, 1338.643), stdev = 366.458
[info]   CI (99.9%): [≈ 0, 2347.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   857.757 ±(99.9%) 1289.068 B/op [Average]
[info]   (min, avg, max) = (609.933, 857.757, 1226.354), stdev = 334.767
[info]   CI (99.9%): [≈ 0, 2146.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.021), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.019), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1058185.263 ops/s
[info] # Warmup Iteration   2: 2297554.582 ops/s
[info] # Warmup Iteration   3: 2351824.241 ops/s
[info] # Warmup Iteration   4: 2435424.258 ops/s
[info] # Warmup Iteration   5: 2382967.134 ops/s
[info] Iteration   1: 2428835.074 ops/s
[info]                  ·gc.alloc.rate:               474.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 331.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2439352.110 ops/s
[info]                  ·gc.alloc.rate:      458.771 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2432546.426 ops/s
[info]                  ·gc.alloc.rate:               476.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 434.662 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2429426.784 ops/s
[info]                  ·gc.alloc.rate:                   473.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2440094.819 ops/s
[info]                  ·gc.alloc.rate:      458.907 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2434051.043 ±(99.9%) 20690.048 ops/s [Average]
[info]   (min, avg, max) = (2428835.074, 2434051.043, 2440094.819), stdev = 5373.140
[info]   CI (99.9%): [2413360.995, 2454741.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   468.304 ±(99.9%) 33.589 MB/sec [Average]
[info]   (min, avg, max) = (458.771, 468.304, 476.496), stdev = 8.723
[info]   CI (99.9%): [434.715, 501.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   302.814 ±(99.9%) 24.069 B/op [Average]
[info]   (min, avg, max) = (296.000, 302.814, 308.278), stdev = 6.251
[info]   CI (99.9%): [278.745, 326.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.050 ±(99.9%) 1328.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.050, 671.845), stdev = 344.978
[info]   CI (99.9%): [≈ 0, 1699.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   240.278 ±(99.9%) 860.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 240.278, 435.211), stdev = 223.369
[info]   CI (99.9%): [≈ 0, 1100.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168390.954 ops/s
[info] # Warmup Iteration   2: 1550995.746 ops/s
[info] # Warmup Iteration   3: 1718668.948 ops/s
[info] # Warmup Iteration   4: 1699836.937 ops/s
[info] # Warmup Iteration   5: 1700707.889 ops/s
[info] Iteration   1: 1697450.937 ops/s
[info]                  ·gc.alloc.rate:                   1026.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1239.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1726152.115 ops/s
[info]                  ·gc.alloc.rate:               1013.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          924.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 610.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1716189.097 ops/s
[info]                  ·gc.alloc.rate:                   1024.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              939.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1227.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1720418.324 ops/s
[info]                  ·gc.alloc.rate:               1011.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          925.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612.458 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1699515.022 ops/s
[info]                  ·gc.alloc.rate:               1035.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          959.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1241.185 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1711945.099 ±(99.9%) 49321.094 ops/s [Average]
[info]   (min, avg, max) = (1697450.937, 1711945.099, 1726152.115), stdev = 12808.531
[info]   CI (99.9%): [1662624.005, 1761266.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1022.263 ±(99.9%) 38.173 MB/sec [Average]
[info]   (min, avg, max) = (1011.210, 1022.263, 1035.570), stdev = 9.913
[info]   CI (99.9%): [984.090, 1060.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   939.907 ±(99.9%) 59.659 B/op [Average]
[info]   (min, avg, max) = (924.273, 939.907, 959.027), stdev = 15.493
[info]   CI (99.9%): [880.247, 999.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.889 ±(99.9%) 1411.626 MB/sec [Average]
[info]   (min, avg, max) = (669.145, 1070.889, 1340.247), stdev = 366.595
[info]   CI (99.9%): [≈ 0, 2482.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   986.196 ±(99.9%) 1318.027 B/op [Average]
[info]   (min, avg, max) = (610.110, 986.196, 1241.185), stdev = 342.287
[info]   CI (99.9%): [≈ 0, 2304.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.019 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.052), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.048), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189893.405 ops/s
[info] # Warmup Iteration   2: 1172677.063 ops/s
[info] # Warmup Iteration   3: 1219020.976 ops/s
[info] # Warmup Iteration   4: 1157331.966 ops/s
[info] # Warmup Iteration   5: 1205003.501 ops/s
[info] Iteration   1: 1174365.049 ops/s
[info]                  ·gc.alloc.rate:               888.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          1190.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 898.135 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1215838.669 ops/s
[info]                  ·gc.alloc.rate:               920.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          1191.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 867.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1218663.136 ops/s
[info]                  ·gc.alloc.rate:                   935.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.728 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1732.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1210155.366 ops/s
[info]                  ·gc.alloc.rate:               915.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          1190.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 872.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1221099.077 ops/s
[info]                  ·gc.alloc.rate:               930.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          1199.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 865.028 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1208024.259 ±(99.9%) 74135.787 ops/s [Average]
[info]   (min, avg, max) = (1174365.049, 1208024.259, 1221099.077), stdev = 19252.829
[info]   CI (99.9%): [1133888.472, 1282160.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   918.042 ±(99.9%) 71.281 MB/sec [Average]
[info]   (min, avg, max) = (888.317, 918.042, 935.960), stdev = 18.511
[info]   CI (99.9%): [846.761, 989.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1195.973 ±(99.9%) 30.796 B/op [Average]
[info]   (min, avg, max) = (1190.210, 1195.973, 1208.728), stdev = 7.998
[info]   CI (99.9%): [1165.177, 1226.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   804.858 ±(99.9%) 1155.403 MB/sec [Average]
[info]   (min, avg, max) = (670.131, 804.858, 1341.611), stdev = 300.054
[info]   CI (99.9%): [≈ 0, 1960.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1047.221 ±(99.9%) 1476.197 B/op [Average]
[info]   (min, avg, max) = (865.028, 1047.221, 1732.599), stdev = 383.364
[info]   CI (99.9%): [≈ 0, 2523.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.596 ops/s
[info] # Warmup Iteration   2: 2780490.153 ops/s
[info] # Warmup Iteration   3: 3101255.736 ops/s
[info] # Warmup Iteration   4: 3111106.340 ops/s
[info] # Warmup Iteration   5: 3089145.803 ops/s
[info] Iteration   1: 3109030.414 ops/s
[info]                  ·gc.alloc.rate:                   829.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              419.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3112419.883 ops/s
[info]                  ·gc.alloc.rate:               832.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          420.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 337.360 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3108884.925 ops/s
[info]                  ·gc.alloc.rate:                   830.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3107391.269 ops/s
[info]                  ·gc.alloc.rate:                   829.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     338.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3104811.569 ops/s
[info]                  ·gc.alloc.rate:               846.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          428.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 677.215 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3108507.612 ±(99.9%) 10655.314 ops/s [Average]
[info]   (min, avg, max) = (3104811.569, 3108507.612, 3112419.883), stdev = 2767.151
[info]   CI (99.9%): [3097852.298, 3119162.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   833.400 ±(99.9%) 27.619 MB/sec [Average]
[info]   (min, avg, max) = (829.054, 833.400, 846.078), stdev = 7.172
[info]   CI (99.9%): [805.781, 861.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   421.929 ±(99.9%) 15.054 B/op [Average]
[info]   (min, avg, max) = (419.689, 421.929, 428.900), stdev = 3.910
[info]   CI (99.9%): [406.874, 436.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.948 ±(99.9%) 1151.571 MB/sec [Average]
[info]   (min, avg, max) = (666.439, 800.948, 1335.921), stdev = 299.059
[info]   CI (99.9%): [≈ 0, 1952.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   405.585 ±(99.9%) 584.705 B/op [Average]
[info]   (min, avg, max) = (337.360, 405.585, 677.215), stdev = 151.846
[info]   CI (99.9%): [≈ 0, 990.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.046), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679972.970 ops/s
[info] # Warmup Iteration   2: 2804639.733 ops/s
[info] # Warmup Iteration   3: 2943968.448 ops/s
[info] # Warmup Iteration   4: 2876303.787 ops/s
[info] # Warmup Iteration   5: 2932271.975 ops/s
[info] Iteration   1: 2938246.518 ops/s
[info]                  ·gc.alloc.rate:               1288.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          690.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 716.851 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2913197.332 ops/s
[info]                  ·gc.alloc.rate:               1283.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          693.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 723.374 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2945812.607 ops/s
[info]                  ·gc.alloc.rate:                   1298.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2980927.679 ops/s
[info]                  ·gc.alloc.rate:                   1312.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3011253.603 ops/s
[info]                  ·gc.alloc.rate:                   1312.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              685.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2957887.548 ±(99.9%) 147981.668 ops/s [Average]
[info]   (min, avg, max) = (2913197.332, 2957887.548, 3011253.603), stdev = 38430.369
[info]   CI (99.9%): [2809905.879, 3105869.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1299.145 ±(99.9%) 51.167 MB/sec [Average]
[info]   (min, avg, max) = (1283.830, 1299.145, 1312.740), stdev = 13.288
[info]   CI (99.9%): [1247.978, 1350.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   691.267 ±(99.9%) 12.575 B/op [Average]
[info]   (min, avg, max) = (685.957, 691.267, 693.514), stdev = 3.266
[info]   CI (99.9%): [678.692, 703.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.755 ±(99.9%) 1154.447 MB/sec [Average]
[info]   (min, avg, max) = (669.450, 1205.755, 1341.592), stdev = 299.806
[info]   CI (99.9%): [51.308, 2360.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   642.904 ±(99.9%) 631.036 B/op [Average]
[info]   (min, avg, max) = (349.906, 642.904, 723.374), stdev = 163.878
[info]   CI (99.9%): [11.869, 1273.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.404), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.376 ±(99.9%) 3.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.797), stdev = 0.795
[info]   CI (99.9%): [≈ 0, 3.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1374076.366 ops/s
[info] # Warmup Iteration   2: 3233344.922 ops/s
[info] # Warmup Iteration   3: 3368151.183 ops/s
[info] # Warmup Iteration   4: 3377060.260 ops/s
[info] # Warmup Iteration   5: 3340420.380 ops/s
[info] Iteration   1: 3372612.049 ops/s
[info]                  ·gc.alloc.rate:               892.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3364468.506 ops/s
[info]                  ·gc.alloc.rate:               892.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          417.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.943 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3299418.910 ops/s
[info]                  ·gc.alloc.rate:                   902.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              430.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     640.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3375614.811 ops/s
[info]                  ·gc.alloc.rate:               897.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3370584.688 ops/s
[info]                  ·gc.alloc.rate:               887.797 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.856 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3356539.793 ±(99.9%) 123956.835 ops/s [Average]
[info]   (min, avg, max) = (3299418.910, 3356539.793, 3375614.811), stdev = 32191.197
[info]   CI (99.9%): [3232582.957, 3480496.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   894.623 ±(99.9%) 21.387 MB/sec [Average]
[info]   (min, avg, max) = (887.797, 894.623, 902.167), stdev = 5.554
[info]   CI (99.9%): [873.237, 916.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   419.526 ±(99.9%) 23.989 B/op [Average]
[info]   (min, avg, max) = (414.546, 419.526, 430.339), stdev = 6.230
[info]   CI (99.9%): [395.536, 443.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.905 ±(99.9%) 1156.062 MB/sec [Average]
[info]   (min, avg, max) = (671.116, 805.905, 1342.965), stdev = 300.226
[info]   CI (99.9%): [≈ 0, 1961.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   378.994 ±(99.9%) 563.133 B/op [Average]
[info]   (min, avg, max) = (313.178, 378.994, 640.603), stdev = 146.244
[info]   CI (99.9%): [≈ 0, 942.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1283373.220 ops/s
[info] # Warmup Iteration   2: 3428282.557 ops/s
[info] # Warmup Iteration   3: 3431850.198 ops/s
[info] # Warmup Iteration   4: 3620344.271 ops/s
[info] # Warmup Iteration   5: 3620268.947 ops/s
[info] Iteration   1: 3619471.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3617069.124 ops/s
[info]                  ·gc.alloc.rate:      0.871 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.379 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3621722.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3619544.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3623507.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3620263.144 ±(99.9%) 9432.070 ops/s [Average]
[info]   (min, avg, max) = (3617069.124, 3620263.144, 3623507.253), stdev = 2449.479
[info]   CI (99.9%): [3610831.074, 3629695.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.174 ±(99.9%) 1.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.174, 0.871), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.076 ±(99.9%) 0.652 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.076, 0.379), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674232.509 ops/s
[info] # Warmup Iteration   2: 2805124.716 ops/s
[info] # Warmup Iteration   3: 2854987.660 ops/s
[info] # Warmup Iteration   4: 2852756.406 ops/s
[info] # Warmup Iteration   5: 2869056.781 ops/s
[info] Iteration   1: 2846659.436 ops/s
[info]                  ·gc.alloc.rate:                   1420.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              785.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2853920.668 ops/s
[info]                  ·gc.alloc.rate:               1413.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          779.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 740.026 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 2853126.860 ops/s
[info]                  ·gc.alloc.rate:                   1405.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              775.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     740.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2858783.559 ops/s
[info]                  ·gc.alloc.rate:                   1420.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     738.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2877043.864 ops/s
[info]                  ·gc.alloc.rate:               1430.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          782.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 732.833 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2857906.877 ±(99.9%) 44417.649 ops/s [Average]
[info]   (min, avg, max) = (2846659.436, 2857906.877, 2877043.864), stdev = 11535.122
[info]   CI (99.9%): [2813489.229, 2902324.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1418.097 ±(99.9%) 35.078 MB/sec [Average]
[info]   (min, avg, max) = (1405.472, 1418.097, 1430.084), stdev = 9.110
[info]   CI (99.9%): [1383.020, 1453.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   780.861 ±(99.9%) 14.763 B/op [Average]
[info]   (min, avg, max) = (775.163, 780.861, 785.455), stdev = 3.834
[info]   CI (99.9%): [766.097, 795.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.644 ±(99.9%) 5.350 MB/sec [Average]
[info]   (min, avg, max) = (1339.577, 1341.644, 1343.216), stdev = 1.389
[info]   CI (99.9%): [1336.294, 1346.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   738.774 ±(99.9%) 13.324 B/op [Average]
[info]   (min, avg, max) = (732.833, 738.774, 741.384), stdev = 3.460
[info]   CI (99.9%): [725.450, 752.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.677 ±(99.9%) 4.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 2.977), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 5.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.373 ±(99.9%) 2.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.642), stdev = 0.716
[info]   CI (99.9%): [≈ 0, 3.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2593.535 ops/s
[info] # Warmup Iteration   2: 8857.165 ops/s
[info] # Warmup Iteration   3: 11574.153 ops/s
[info] # Warmup Iteration   4: 11966.862 ops/s
[info] # Warmup Iteration   5: 11869.524 ops/s
[info] Iteration   1: 11946.988 ops/s
[info]                  ·gc.alloc.rate:                   1407.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              185387.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176151.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11576.171 ops/s
[info]                  ·gc.alloc.rate:                   1365.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              185684.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181902.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11813.870 ops/s
[info]                  ·gc.alloc.rate:                   1391.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              185311.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178327.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 428.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11948.801 ops/s
[info]                  ·gc.alloc.rate:                   1403.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              184922.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176181.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11806.754 ops/s
[info]                  ·gc.alloc.rate:                   1414.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              188577.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177944.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11818.517 ±(99.9%) 585.154 ops/s [Average]
[info]   (min, avg, max) = (11576.171, 11818.517, 11948.801), stdev = 151.963
[info]   CI (99.9%): [11233.363, 12403.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1396.598 ±(99.9%) 73.907 MB/sec [Average]
[info]   (min, avg, max) = (1365.835, 1396.598, 1414.694), stdev = 19.194
[info]   CI (99.9%): [1322.690, 1470.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   185976.680 ±(99.9%) 5694.146 B/op [Average]
[info]   (min, avg, max) = (184922.948, 185976.680, 188577.020), stdev = 1478.752
[info]   CI (99.9%): [180282.534, 191670.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.298 ±(99.9%) 5.518 MB/sec [Average]
[info]   (min, avg, max) = (1334.929, 1337.298, 1338.703), stdev = 1.433
[info]   CI (99.9%): [1331.781, 1342.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   178101.407 ±(99.9%) 9032.636 B/op [Average]
[info]   (min, avg, max) = (176151.993, 178101.407, 181902.306), stdev = 2345.747
[info]   CI (99.9%): [169068.771, 187134.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.827 ±(99.9%) 5.329 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.827, 3.217), stdev = 1.384
[info]   CI (99.9%): [≈ 0, 6.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   109.909 ±(99.9%) 709.767 B/op [Average]
[info]   (min, avg, max) = (2.742, 109.909, 428.581), stdev = 184.324
[info]   CI (99.9%): [≈ 0, 819.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3668.720 ops/s
[info] # Warmup Iteration   2: 20336.313 ops/s
[info] # Warmup Iteration   3: 21864.154 ops/s
[info] # Warmup Iteration   4: 21750.564 ops/s
[info] # Warmup Iteration   5: 21750.077 ops/s
[info] Iteration   1: 21700.120 ops/s
[info]                  ·gc.alloc.rate:               343.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          24915.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37104.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 21990.606 ops/s
[info]                  ·gc.alloc.rate:               338.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          24199.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36614.821 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 22155.597 ops/s
[info]                  ·gc.alloc.rate:      328.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 23352.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21994.951 ops/s
[info]                  ·gc.alloc.rate:                   344.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              24620.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47188.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.490 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22121.676 ops/s
[info]                  ·gc.alloc.rate:      328.337 MB/sec
[info]                  ·gc.alloc.rate.norm: 23352.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   21992.590 ±(99.9%) 690.928 ops/s [Average]
[info]   (min, avg, max) = (21700.120, 21992.590, 22155.597), stdev = 179.432
[info]   CI (99.9%): [21301.662, 22683.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   336.591 ±(99.9%) 29.629 MB/sec [Average]
[info]   (min, avg, max) = (328.337, 336.591, 344.071), stdev = 7.695
[info]   CI (99.9%): [306.962, 366.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24087.965 ±(99.9%) 2766.060 B/op [Average]
[info]   (min, avg, max) = (23352.019, 24087.965, 24915.446), stdev = 718.337
[info]   CI (99.9%): [21321.905, 26854.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.566 ±(99.9%) 1205.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.566, 659.453), stdev = 313.107
[info]   CI (99.9%): [≈ 0, 1542.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24181.388 ±(99.9%) 86540.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24181.388, 47188.065), stdev = 22474.273
[info]   CI (99.9%): [≈ 0, 110721.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.298 ±(99.9%) 2.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 1.490), stdev = 0.666
[info]   CI (99.9%): [≈ 0, 2.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11243.444 ops/s
[info] # Warmup Iteration   2: 21508.185 ops/s
[info] # Warmup Iteration   3: 22646.710 ops/s
[info] # Warmup Iteration   4: 22528.925 ops/s
[info] # Warmup Iteration   5: 22715.120 ops/s
[info] Iteration   1: 22360.382 ops/s
[info]                  ·gc.alloc.rate:               264.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          18632.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36009.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22683.334 ops/s
[info]                  ·gc.alloc.rate:      246.547 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22625.576 ops/s
[info]                  ·gc.alloc.rate:               256.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          17826.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35587.360 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22715.284 ops/s
[info]                  ·gc.alloc.rate:      246.858 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22015.307 ops/s
[info]                  ·gc.alloc.rate:               251.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          17978.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36573.249 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22479.977 ±(99.9%) 1136.011 ops/s [Average]
[info]   (min, avg, max) = (22015.307, 22479.977, 22715.284), stdev = 295.019
[info]   CI (99.9%): [21343.965, 23615.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253.230 ±(99.9%) 29.340 MB/sec [Average]
[info]   (min, avg, max) = (246.547, 253.230, 264.836), stdev = 7.620
[info]   CI (99.9%): [223.890, 282.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17729.144 ±(99.9%) 2487.892 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17729.144, 18632.812), stdev = 646.098
[info]   CI (99.9%): [15241.252, 20217.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.062 ±(99.9%) 1079.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.062, 511.812), stdev = 280.308
[info]   CI (99.9%): [≈ 0, 1386.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21633.932 ±(99.9%) 76058.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21633.932, 36573.249), stdev = 19752.084
[info]   CI (99.9%): [≈ 0, 97692.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265.718 ops/s
[info] # Warmup Iteration   2: 3062.295 ops/s
[info] # Warmup Iteration   3: 6358.318 ops/s
[info] # Warmup Iteration   4: 7483.095 ops/s
[info] # Warmup Iteration   5: 7509.518 ops/s
[info] Iteration   1: 7509.956 ops/s
[info]                  ·gc.alloc.rate:                   2117.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              443757.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1972.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     413316.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7392.864 ops/s
[info]                  ·gc.alloc.rate:                   2089.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              444827.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1979.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     421472.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 452.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7437.434 ops/s
[info]                  ·gc.alloc.rate:                   2114.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              447361.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1985.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     420121.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7491.135 ops/s
[info]                  ·gc.alloc.rate:               2127.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          446976.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1989.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 418072.975 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7524.776 ops/s
[info]                  ·gc.alloc.rate:               2151.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          450063.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 557234.489 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7471.233 ±(99.9%) 211.316 ops/s [Average]
[info]   (min, avg, max) = (7392.864, 7471.233, 7524.776), stdev = 54.878
[info]   CI (99.9%): [7259.917, 7682.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2120.190 ±(99.9%) 87.058 MB/sec [Average]
[info]   (min, avg, max) = (2089.585, 2120.190, 2151.977), stdev = 22.609
[info]   CI (99.9%): [2033.133, 2207.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   446597.179 ±(99.9%) 9419.554 B/op [Average]
[info]   (min, avg, max) = (443757.380, 446597.179, 450063.208), stdev = 2446.228
[info]   CI (99.9%): [437177.626, 456016.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2118.421 ±(99.9%) 1175.568 MB/sec [Average]
[info]   (min, avg, max) = (1972.414, 2118.421, 2664.416), stdev = 305.291
[info]   CI (99.9%): [942.852, 3293.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   446043.516 ±(99.9%) 239643.017 B/op [Average]
[info]   (min, avg, max) = (413316.498, 446043.516, 557234.489), stdev = 62234.530
[info]   CI (99.9%): [206400.499, 685686.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.479 ±(99.9%) 3.555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.479, 2.123), stdev = 0.923
[info]   CI (99.9%): [≈ 0, 4.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101.834 ±(99.9%) 757.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.834, 452.034), stdev = 196.593
[info]   CI (99.9%): [≈ 0, 858.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11300.176 ops/s
[info] # Warmup Iteration   2: 57304.215 ops/s
[info] # Warmup Iteration   3: 62235.054 ops/s
[info] # Warmup Iteration   4: 63783.520 ops/s
[info] # Warmup Iteration   5: 64142.227 ops/s
[info] Iteration   1: 63862.498 ops/s
[info]                  ·gc.alloc.rate:                   836.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              20620.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32711.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 63923.413 ops/s
[info]                  ·gc.alloc.rate:               825.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          20313.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16351.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 63742.895 ops/s
[info]                  ·gc.alloc.rate:               821.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          20273.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16422.806 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 64055.101 ops/s
[info]                  ·gc.alloc.rate:                   822.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              20207.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16342.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 64355.818 ops/s
[info]                  ·gc.alloc.rate:               824.681 MB/sec
[info]                  ·gc.alloc.rate.norm:          20165.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16281.932 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   63987.945 ±(99.9%) 902.628 ops/s [Average]
[info]   (min, avg, max) = (63742.895, 63987.945, 64355.818), stdev = 234.410
[info]   CI (99.9%): [63085.317, 64890.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   826.120 ±(99.9%) 23.745 MB/sec [Average]
[info]   (min, avg, max) = (821.128, 826.120, 836.731), stdev = 6.166
[info]   CI (99.9%): [802.375, 849.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20316.368 ±(99.9%) 691.389 B/op [Average]
[info]   (min, avg, max) = (20165.523, 20316.368, 20620.713), stdev = 179.551
[info]   CI (99.9%): [19624.979, 21007.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.607 ±(99.9%) 1140.254 MB/sec [Average]
[info]   (min, avg, max) = (664.422, 797.607, 1327.323), stdev = 296.120
[info]   CI (99.9%): [≈ 0, 1937.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19621.964 ±(99.9%) 28175.910 B/op [Average]
[info]   (min, avg, max) = (16281.932, 19621.964, 32711.053), stdev = 7317.194
[info]   CI (99.9%): [≈ 0, 47797.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 1.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 0.826), stdev = 0.423
[info]   CI (99.9%): [≈ 0, 1.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31166.376 ops/s
[info] # Warmup Iteration   2: 69105.852 ops/s
[info] # Warmup Iteration   3: 69046.832 ops/s
[info] # Warmup Iteration   4: 69859.718 ops/s
[info] # Warmup Iteration   5: 70063.271 ops/s
[info] Iteration   1: 69922.953 ops/s
[info]                  ·gc.alloc.rate:               477.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          10741.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11515.234 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 70013.383 ops/s
[info]                  ·gc.alloc.rate:               489.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          10997.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14921.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 69727.862 ops/s
[info]                  ·gc.alloc.rate:                   484.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              10932.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14983.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 70149.003 ops/s
[info]                  ·gc.alloc.rate:      469.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 10521.221 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 70048.300 ops/s
[info]                  ·gc.alloc.rate:               483.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          10868.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14944.165 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   69972.300 ±(99.9%) 611.491 ops/s [Average]
[info]   (min, avg, max) = (69727.862, 69972.300, 70149.003), stdev = 158.802
[info]   CI (99.9%): [69360.809, 70583.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   480.785 ±(99.9%) 30.058 MB/sec [Average]
[info]   (min, avg, max) = (469.102, 480.785, 489.300), stdev = 7.806
[info]   CI (99.9%): [450.726, 510.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10812.228 ±(99.9%) 724.406 B/op [Average]
[info]   (min, avg, max) = (10521.221, 10812.228, 10997.430), stdev = 188.126
[info]   CI (99.9%): [10087.822, 11536.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   500.943 ±(99.9%) 1107.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 500.943, 665.263), stdev = 287.737
[info]   CI (99.9%): [≈ 0, 1608.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11272.836 ±(99.9%) 24932.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11272.836, 14983.309), stdev = 6474.844
[info]   CI (99.9%): [≈ 0, 36205.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.188 ±(99.9%) 1.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.940), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31738.846 ops/s
[info] # Warmup Iteration   2: 72983.241 ops/s
[info] # Warmup Iteration   3: 75966.017 ops/s
[info] # Warmup Iteration   4: 76369.366 ops/s
[info] # Warmup Iteration   5: 76376.706 ops/s
[info] Iteration   1: 76457.996 ops/s
[info]                  ·gc.alloc.rate:      7.773 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 76508.471 ops/s
[info]                  ·gc.alloc.rate:      7.779 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76425.117 ops/s
[info]                  ·gc.alloc.rate:      7.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 76558.964 ops/s
[info]                  ·gc.alloc.rate:      8.900 MB/sec
[info]                  ·gc.alloc.rate.norm: 182.943 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 76431.621 ops/s
[info]                  ·gc.alloc.rate:      7.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 160.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   76476.434 ±(99.9%) 217.989 ops/s [Average]
[info]   (min, avg, max) = (76425.117, 76476.434, 76558.964), stdev = 56.611
[info]   CI (99.9%): [76258.445, 76694.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.999 ±(99.9%) 1.941 MB/sec [Average]
[info]   (min, avg, max) = (7.770, 7.999, 8.900), stdev = 0.504
[info]   CI (99.9%): [6.057, 9.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   164.593 ±(99.9%) 39.499 B/op [Average]
[info]   (min, avg, max) = (160.006, 164.593, 182.943), stdev = 10.258
[info]   CI (99.9%): [125.094, 204.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60828.963 ops/s
[info] # Warmup Iteration   2: 284142.009 ops/s
[info] # Warmup Iteration   3: 307027.933 ops/s
[info] # Warmup Iteration   4: 322460.744 ops/s
[info] # Warmup Iteration   5: 322011.347 ops/s
[info] Iteration   1: 322747.727 ops/s
[info]                  ·gc.alloc.rate:                   1925.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              9387.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9829.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 322434.186 ops/s
[info]                  ·gc.alloc.rate:                   1934.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              9439.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9835.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 321139.809 ops/s
[info]                  ·gc.alloc.rate:                   1940.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              9507.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9849.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 323956.157 ops/s
[info]                  ·gc.alloc.rate:               1943.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          9440.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9759.080 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 324589.796 ops/s
[info]                  ·gc.alloc.rate:               1933.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          9377.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6497.156 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   322973.535 ±(99.9%) 5195.616 ops/s [Average]
[info]   (min, avg, max) = (321139.809, 322973.535, 324589.796), stdev = 1349.285
[info]   CI (99.9%): [317777.919, 328169.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1935.521 ±(99.9%) 27.881 MB/sec [Average]
[info]   (min, avg, max) = (1925.060, 1935.521, 1943.814), stdev = 7.241
[info]   CI (99.9%): [1907.639, 1963.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9430.381 ±(99.9%) 199.259 B/op [Average]
[info]   (min, avg, max) = (9377.389, 9430.381, 9507.074), stdev = 51.747
[info]   CI (99.9%): [9231.123, 9629.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.175 ±(99.9%) 1158.580 MB/sec [Average]
[info]   (min, avg, max) = (1339.968, 1878.175, 2015.648), stdev = 300.880
[info]   CI (99.9%): [719.594, 3036.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9154.150 ±(99.9%) 5720.968 B/op [Average]
[info]   (min, avg, max) = (6497.156, 9154.150, 9849.294), stdev = 1485.717
[info]   CI (99.9%): [3433.182, 14875.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.560), stdev = 1.579
[info]   CI (99.9%): [≈ 0, 6.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.597 ±(99.9%) 29.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.597, 17.375), stdev = 7.705
[info]   CI (99.9%): [≈ 0, 33.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108160.036 ops/s
[info] # Warmup Iteration   2: 483337.884 ops/s
[info] # Warmup Iteration   3: 481709.168 ops/s
[info] # Warmup Iteration   4: 501294.310 ops/s
[info] # Warmup Iteration   5: 503435.322 ops/s
[info] Iteration   1: 507108.835 ops/s
[info]                  ·gc.alloc.rate:      536.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 1664.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 505143.568 ops/s
[info]                  ·gc.alloc.rate:               549.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          1710.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2073.470 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 503562.108 ops/s
[info]                  ·gc.alloc.rate:               549.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          1717.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2079.930 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 504764.438 ops/s
[info]                  ·gc.alloc.rate:                   558.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1739.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2077.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 505084.164 ops/s
[info]                  ·gc.alloc.rate:               554.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          1727.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2076.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   505132.623 ±(99.9%) 4912.386 ops/s [Average]
[info]   (min, avg, max) = (503562.108, 505132.623, 507108.835), stdev = 1275.731
[info]   CI (99.9%): [500220.237, 510045.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   549.481 ±(99.9%) 32.038 MB/sec [Average]
[info]   (min, avg, max) = (536.140, 549.481, 558.086), stdev = 8.320
[info]   CI (99.9%): [517.442, 581.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1712.003 ±(99.9%) 111.474 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1712.003, 1739.670), stdev = 28.950
[info]   CI (99.9%): [1600.529, 1823.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.811 ±(99.9%) 1146.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.811, 666.607), stdev = 297.851
[info]   CI (99.9%): [≈ 0, 1679.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1661.623 ±(99.9%) 3576.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1661.623, 2079.930), stdev = 928.879
[info]   CI (99.9%): [≈ 0, 5238.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645736.232 ops/s
[info] # Warmup Iteration   2: 1191252.165 ops/s
[info] # Warmup Iteration   3: 1266184.956 ops/s
[info] # Warmup Iteration   4: 1262142.711 ops/s
[info] # Warmup Iteration   5: 1244796.319 ops/s
[info] Iteration   1: 1264481.227 ops/s
[info]                  ·gc.alloc.rate:                   676.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              842.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1265997.580 ops/s
[info]                  ·gc.alloc.rate:               687.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          854.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 835.180 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1265659.882 ops/s
[info]                  ·gc.alloc.rate:               686.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          853.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 835.370 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1267507.484 ops/s
[info]                  ·gc.alloc.rate:               680.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          844.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 833.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1263232.915 ops/s
[info]                  ·gc.alloc.rate:      661.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1265375.817 ±(99.9%) 6210.054 ops/s [Average]
[info]   (min, avg, max) = (1263232.915, 1265375.817, 1267507.484), stdev = 1612.731
[info]   CI (99.9%): [1259165.764, 1271585.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   678.484 ±(99.9%) 40.333 MB/sec [Average]
[info]   (min, avg, max) = (661.433, 678.484, 687.409), stdev = 10.474
[info]   CI (99.9%): [638.151, 718.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   843.811 ±(99.9%) 47.336 B/op [Average]
[info]   (min, avg, max) = (824.000, 843.811, 854.580), stdev = 12.293
[info]   CI (99.9%): [796.475, 891.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.212 ±(99.9%) 1156.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.212, 671.803), stdev = 300.311
[info]   CI (99.9%): [≈ 0, 1693.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   667.841 ±(99.9%) 1437.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 667.841, 835.370), stdev = 373.335
[info]   CI (99.9%): [≈ 0, 2105.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14284.320 ops/s
[info] # Warmup Iteration   2: 97573.415 ops/s
[info] # Warmup Iteration   3: 106641.855 ops/s
[info] # Warmup Iteration   4: 109345.651 ops/s
[info] # Warmup Iteration   5: 111203.930 ops/s
[info] Iteration   1: 111029.449 ops/s
[info]                  ·gc.alloc.rate:                   3370.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              47772.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47331.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.656 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 111791.037 ops/s
[info]                  ·gc.alloc.rate:                   3432.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              48330.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3346.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47121.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 111783.629 ops/s
[info]                  ·gc.alloc.rate:                   3434.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              48348.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47304.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 111634.784 ops/s
[info]                  ·gc.alloc.rate:                   3430.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              48362.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47537.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 110298.269 ops/s
[info]                  ·gc.alloc.rate:                   3364.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              48003.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38598.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.594 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   111307.433 ±(99.9%) 2483.204 ops/s [Average]
[info]   (min, avg, max) = (110298.269, 111307.433, 111791.037), stdev = 644.880
[info]   CI (99.9%): [108824.230, 113790.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3406.374 ±(99.9%) 138.067 MB/sec [Average]
[info]   (min, avg, max) = (3364.269, 3406.374, 3434.164), stdev = 35.856
[info]   CI (99.9%): [3268.307, 3544.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48163.631 ±(99.9%) 1018.735 B/op [Average]
[info]   (min, avg, max) = (47772.722, 48163.631, 48362.366), stdev = 264.562
[info]   CI (99.9%): [47144.896, 49182.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3224.591 ±(99.9%) 1119.312 MB/sec [Average]
[info]   (min, avg, max) = (2705.091, 3224.591, 3371.951), stdev = 290.682
[info]   CI (99.9%): [2105.280, 4343.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   45578.485 ±(99.9%) 15036.332 B/op [Average]
[info]   (min, avg, max) = (38598.181, 45578.485, 47537.036), stdev = 3904.888
[info]   CI (99.9%): [30542.153, 60614.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.187), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.885 ±(99.9%) 3.855 B/op [Average]
[info]   (min, avg, max) = (0.293, 0.885, 2.656), stdev = 1.001
[info]   CI (99.9%): [≈ 0, 4.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121112.372 ops/s
[info] # Warmup Iteration   2: 321629.874 ops/s
[info] # Warmup Iteration   3: 332177.864 ops/s
[info] # Warmup Iteration   4: 344121.206 ops/s
[info] # Warmup Iteration   5: 346508.452 ops/s
[info] Iteration   1: 345880.637 ops/s
[info]                  ·gc.alloc.rate:               1191.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          5421.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3052.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 339817.424 ops/s
[info]                  ·gc.alloc.rate:               1185.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          5492.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6215.262 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 341619.831 ops/s
[info]                  ·gc.alloc.rate:                   1200.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              5529.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6185.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 342857.866 ops/s
[info]                  ·gc.alloc.rate:                   1191.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              5470.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6167.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 346592.331 ops/s
[info]                  ·gc.alloc.rate:                   1202.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              5459.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3052.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   343353.618 ±(99.9%) 10998.214 ops/s [Average]
[info]   (min, avg, max) = (339817.424, 343353.618, 346592.331), stdev = 2856.201
[info]   CI (99.9%): [332355.404, 354351.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1194.399 ±(99.9%) 26.180 MB/sec [Average]
[info]   (min, avg, max) = (1185.889, 1194.399, 1202.307), stdev = 6.799
[info]   CI (99.9%): [1168.219, 1220.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5474.699 ±(99.9%) 154.159 B/op [Average]
[info]   (min, avg, max) = (5421.474, 5474.699, 5529.767), stdev = 40.035
[info]   CI (99.9%): [5320.540, 5628.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074.288 ±(99.9%) 1415.673 MB/sec [Average]
[info]   (min, avg, max) = (670.988, 1074.288, 1343.594), stdev = 367.646
[info]   CI (99.9%): [≈ 0, 2489.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4934.625 ±(99.9%) 6617.125 B/op [Average]
[info]   (min, avg, max) = (3052.134, 4934.625, 6215.262), stdev = 1718.446
[info]   CI (99.9%): [≈ 0, 11551.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.674 ±(99.9%) 4.954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 2.956), stdev = 1.286
[info]   CI (99.9%): [≈ 0, 5.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.092 ±(99.9%) 22.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.092, 13.570), stdev = 5.907
[info]   CI (99.9%): [≈ 0, 25.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217718.929 ops/s
[info] # Warmup Iteration   2: 741523.105 ops/s
[info] # Warmup Iteration   3: 752422.910 ops/s
[info] # Warmup Iteration   4: 752483.238 ops/s
[info] # Warmup Iteration   5: 747517.677 ops/s
[info] Iteration   1: 760195.375 ops/s
[info]                  ·gc.alloc.rate:               600.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          1243.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1379.792 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 761068.622 ops/s
[info]                  ·gc.alloc.rate:               594.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          1230.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1378.172 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 761750.682 ops/s
[info]                  ·gc.alloc.rate:      581.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 760912.547 ops/s
[info]                  ·gc.alloc.rate:                   602.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1246.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1380.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 725702.154 ops/s
[info]                  ·gc.alloc.rate:               574.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          1244.757 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1447.603 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   753925.876 ±(99.9%) 60790.959 ops/s [Average]
[info]   (min, avg, max) = (725702.154, 753925.876, 761750.682), stdev = 15787.219
[info]   CI (99.9%): [693134.918, 814716.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   590.681 ±(99.9%) 48.493 MB/sec [Average]
[info]   (min, avg, max) = (574.018, 590.681, 602.758), stdev = 12.593
[info]   CI (99.9%): [542.188, 639.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1233.069 ±(99.9%) 75.492 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1233.069, 1246.781), stdev = 19.605
[info]   CI (99.9%): [1157.577, 1308.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.591 ±(99.9%) 1148.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.591, 667.560), stdev = 298.287
[info]   CI (99.9%): [≈ 0, 1682.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1117.240 ±(99.9%) 2407.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1117.240, 1447.603), stdev = 625.252
[info]   CI (99.9%): [≈ 0, 3524.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 820860.757 ops/s
[info] # Warmup Iteration   2: 1567122.955 ops/s
[info] # Warmup Iteration   3: 1587610.239 ops/s
[info] # Warmup Iteration   4: 1511097.195 ops/s
[info] # Warmup Iteration   5: 1603380.783 ops/s
[info] Iteration   1: 1623603.029 ops/s
[info]                  ·gc.alloc.rate:                   776.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1623145.473 ops/s
[info]                  ·gc.alloc.rate:               770.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 648.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1623268.214 ops/s
[info]                  ·gc.alloc.rate:                   769.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1622420.857 ops/s
[info]                  ·gc.alloc.rate:               766.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 648.144 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1627025.256 ops/s
[info]                  ·gc.alloc.rate:               768.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 646.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1623892.566 ±(99.9%) 6944.909 ops/s [Average]
[info]   (min, avg, max) = (1622420.857, 1623892.566, 1627025.256), stdev = 1803.571
[info]   CI (99.9%): [1616947.657, 1630837.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   770.138 ±(99.9%) 14.516 MB/sec [Average]
[info]   (min, avg, max) = (766.274, 770.138, 776.180), stdev = 3.770
[info]   CI (99.9%): [755.622, 784.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   746.350 ±(99.9%) 14.698 B/op [Average]
[info]   (min, avg, max) = (742.961, 746.350, 752.405), stdev = 3.817
[info]   CI (99.9%): [731.652, 761.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.460 ±(99.9%) 1.463 MB/sec [Average]
[info]   (min, avg, max) = (668.119, 668.460, 668.935), stdev = 0.380
[info]   CI (99.9%): [666.997, 669.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   647.812 ±(99.9%) 3.372 B/op [Average]
[info]   (min, avg, max) = (646.319, 647.812, 648.507), stdev = 0.876
[info]   CI (99.9%): [644.441, 651.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.040), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1008828.911 ops/s
[info] # Warmup Iteration   2: 1656016.102 ops/s
[info] # Warmup Iteration   3: 1752794.136 ops/s
[info] # Warmup Iteration   4: 1752208.527 ops/s
[info] # Warmup Iteration   5: 1752832.045 ops/s
[info] Iteration   1: 1753153.844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1751548.679 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1753001.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1752420.792 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1752263.147 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1752477.525 ±(99.9%) 2468.271 ops/s [Average]
[info]   (min, avg, max) = (1751548.679, 1752477.525, 1753153.844), stdev = 641.002
[info]   CI (99.9%): [1750009.254, 1754945.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94982.660 ops/s
[info] # Warmup Iteration   2: 442002.736 ops/s
[info] # Warmup Iteration   3: 461253.834 ops/s
[info] # Warmup Iteration   4: 458000.850 ops/s
[info] # Warmup Iteration   5: 459300.085 ops/s
[info] Iteration   1: 461362.352 ops/s
[info]                  ·gc.alloc.rate:               702.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          2397.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2279.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 459663.025 ops/s
[info]                  ·gc.alloc.rate:                   730.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              2502.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4577.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 452627.864 ops/s
[info]                  ·gc.alloc.rate:               690.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          2399.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2325.495 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 452908.218 ops/s
[info]                  ·gc.alloc.rate:               687.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          2387.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2326.470 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 452683.173 ops/s
[info]                  ·gc.alloc.rate:               688.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          2392.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2327.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   455848.926 ±(99.9%) 16561.150 ops/s [Average]
[info]   (min, avg, max) = (452627.864, 455848.926, 461362.352), stdev = 4300.878
[info]   CI (99.9%): [439287.776, 472410.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   699.868 ±(99.9%) 71.323 MB/sec [Average]
[info]   (min, avg, max) = (687.171, 699.868, 730.999), stdev = 18.522
[info]   CI (99.9%): [628.545, 771.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2416.138 ±(99.9%) 187.385 B/op [Average]
[info]   (min, avg, max) = (2387.819, 2416.138, 2502.785), stdev = 48.663
[info]   CI (99.9%): [2228.753, 2603.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.568 ±(99.9%) 1150.310 MB/sec [Average]
[info]   (min, avg, max) = (668.125, 802.568, 1336.955), stdev = 298.732
[info]   CI (99.9%): [≈ 0, 1952.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2767.243 ±(99.9%) 3897.408 B/op [Average]
[info]   (min, avg, max) = (2279.217, 2767.243, 4577.451), stdev = 1012.145
[info]   CI (99.9%): [≈ 0, 6664.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:00
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    818523.276 ±   47666.199   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2376.449 ±     147.106  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4569.324 ±     161.689    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2419.041 ±    1416.139  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4655.660 ±    2845.478    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.016 ±       0.085    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        25.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1946695.741 ±  115851.680   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1290.235 ±      69.429  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1043.138 ±      42.050    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1202.459 ±    1151.501  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       974.720 ±     963.020    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.862 ±       7.264  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.697 ±       5.877    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   5744155.796 ±  511134.491   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       390.691 ±      45.639  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.051 ±      10.733    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       339.113 ±    1218.436  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        93.125 ±     332.439    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.003 ±       0.019    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    305826.457 ±   12223.498   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2707.823 ±     100.914  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13933.766 ±     256.985    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2694.569 ±      35.346  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     13866.693 ±     644.249    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.256 ±       2.160  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         1.314 ±      11.084    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        20.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    901742.470 ±   38576.326   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2422.128 ±     102.077  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4227.346 ±     107.294    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2411.723 ±    1419.964  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4213.093 ±    2587.465    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.770 ±       6.498  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.348 ±      11.370    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2902093.981 ±  204977.606   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1241.762 ±      84.623  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       673.415 ±      12.136    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1203.929 ±    1149.635  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       654.817 ±     647.270    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.787 ±       6.508  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.426 ±       3.526    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  14453880.863 ±  313893.642   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       759.424 ±      26.039  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82.682 ±       3.943    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       671.265 ±       1.527  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        73.083 ±       1.550    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        15.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  16687820.911 ±  135253.955   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.507 ±       4.363  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.048 ±       0.413    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    493186.136 ±   14554.218   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1474.135 ±      61.944  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4703.894 ±     136.920    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      1467.151 ±    1143.623  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4684.292 ±    3725.177    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.956 ±       7.022  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         3.078 ±      22.636    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        11.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2139753.249 ±   37191.441   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      3002.323 ±      24.024  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2208.321 ±      43.253    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2954.490 ±    1428.321  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2173.806 ±    1078.039    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.012 ±       0.077    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  10217200.033 ±   32160.850   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1282.002 ±      30.452  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       197.479 ±       4.898    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1195.904 ±    1141.079  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       184.224 ±     175.870    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.025 ±       0.036  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.004 ±       0.006    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3139408.607 ±  125713.485   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      1962.159 ±      67.194  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       983.608 ±      35.064    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      1869.840 ±    1145.719  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       938.041 ±     591.353    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.845 ±       7.235  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.424 ±       3.631    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13481884.655 ±  680522.530   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1771.628 ±     107.501  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.766 ±       5.560    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1749.577 ±    1415.910  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       204.208 ±     165.356    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.625 ±       4.805  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.074 ±       0.567    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1254996.929 ±   37559.760   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      3039.270 ±     104.236  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3810.480 ±      97.149    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2831.068 ±    1159.417  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3548.959 ±    1424.358    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.042 ±       0.316  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.052 ±       0.395    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2480790.483 ±  112442.255   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2195.011 ±     156.490  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1392.355 ±      47.387    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2143.052 ±    1148.556  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1359.142 ±     711.459    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.754 ±       6.310  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.477 ±       3.989    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  18758759.695 ±  118119.429   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       593.433 ±      11.122  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.780 ±       1.071    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       666.410 ±       2.005  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        55.902 ±       0.426    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.014 ±       0.050  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.004    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6046204.352 ±  232744.551   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1720.761 ±      80.904  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       447.890 ±      15.893    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1737.588 ±    1408.703  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       452.278 ±     366.770    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.762 ±       6.428  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.199 ±       1.677    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  28775719.661 ±  868250.844   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       903.400 ±      58.898  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.396 ±       1.946    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       805.842 ±    1156.353  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        44.035 ±      62.640    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.006    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34750205.813 ±   99239.754   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5         0.203 ±       1.744  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5         0.009 ±       0.079    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1839108.683 ±   68942.151   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2877.124 ±      91.240  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2461.788 ±      42.766    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2809.485 ±    1126.799  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2403.699 ±     948.859    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.058 ±       0.243  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.050 ±       0.207    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    318288.499 ±   12827.896   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1957.044 ±     108.403  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9676.195 ±     249.391    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1877.186 ±    1150.389  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9286.102 ±    5790.683    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.720 ±       5.109  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.588 ±      25.512    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    515255.939 ±   22727.350   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       666.411 ±      23.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2035.585 ±      51.021    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.912 ±       2.810  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2034.197 ±      90.150    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.064 ±       0.304    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1315515.269 ±  218357.084   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       902.670 ±     161.097  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1079.918 ±      64.606    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       940.869 ±    1418.158  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1121.896 ±    1627.348    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.020 ±       0.123    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    119272.748 ±    5446.524   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3639.362 ±     175.627  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     48016.111 ±     185.514    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3497.833 ±    1097.772  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     46132.568 ±   13170.940    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.033 ±       0.108  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.439 ±       1.422    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    345442.625 ±   14688.081   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1190.028 ±      85.109  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5421.406 ±     169.220    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1073.420 ±    1415.088  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4880.224 ±    6318.062    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.687 ±       5.095  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.098 ±      22.919    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    888657.769 ±   48824.766   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       659.241 ±      31.845  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1167.386 ±      27.489    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       666.664 ±       2.541  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1180.682 ±      64.263    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2529406.678 ±  277798.127   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1205.325 ±     106.906  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       750.067 ±      33.016    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1209.905 ±    1157.385  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       755.528 ±     753.690    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.616 ±       4.819  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.382 ±       2.975    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2777850.058 ±   28547.089   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.061 ±       0.523  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.034 ±       0.295    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    456810.754 ±    3487.280   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       678.992 ±      12.143  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2338.394 ±      31.661    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.887 ±       1.720  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2303.603 ±      13.937    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.014 ±       0.123    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        15.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     16944.951 ±     921.930   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1360.674 ±      73.105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126334.638 ±    3619.382    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1343.411 ±       3.702  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    124748.992 ±    6880.084    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.754 ±       6.179  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        69.765 ±     571.787    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     36012.796 ±     783.598   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       993.096 ±      40.747  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43384.877 ±    2287.182    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       935.846 ±    1407.632  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     40950.501 ±   62442.409    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.549 ±       3.148    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     42545.741 ±    5270.166   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       589.636 ±      73.041  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     21806.073 ±    1594.876    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       537.122 ±    1156.197  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     19986.052 ±   43123.378    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.467 ±       2.642    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     28830.490 ±      63.567   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1461.826 ±      35.335  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79773.169 ±    1976.191    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1471.847 ±    1152.040  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     80319.286 ±   62847.983    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.916 ±       5.757  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        50.004 ±     314.270    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     24167.599 ±    1337.997   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1755.349 ±     126.861  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    114277.797 ±    4482.228    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1743.428 ±    1412.476  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    113501.806 ±   91832.281    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.745 ±       5.847  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        48.569 ±     381.662    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     24772.556 ±    1831.544   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1552.576 ±     127.118  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     98629.623 ±    2922.291    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1603.245 ±    1402.513  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    102116.499 ±   94835.922    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.837 ±       6.850  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        52.816 ±     431.677    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27672.189 ±     458.438   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1640.335 ±      56.587  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93290.072 ±    2358.065    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1611.425 ±    1412.250  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     91602.299 ±   79278.688    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.704 ±       4.287  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        40.184 ±     245.394    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27554.319 ±     864.703   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1577.694 ±      46.381  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     90105.618 ±    4413.803    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1612.295 ±    1414.598  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     92174.313 ±   82964.295    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.712 ±       4.082  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        40.578 ±     233.044    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7887.424 ±     202.889   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1175.434 ±      36.898  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    234535.895 ±    8109.554    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1071.578 ±    1412.789  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    213716.103 ±  280686.258    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.766 ±       6.551  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       152.680 ±    1305.704    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17752.265 ±    1069.190   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1625.676 ±      77.873  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144130.392 ±    3845.175    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.627 ±    1415.845  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    142973.646 ±  129321.623    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.741 ±       4.092  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        66.219 ±     367.971    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     43007.216 ±    1381.149   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1215.475 ±      42.138  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44479.218 ±    1329.786    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.113 ±    1152.988  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     44130.582 ±   42591.388    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.800 ±       5.351  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        29.199 ±     195.595    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     62376.430 ±     541.708   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       828.731 ±      54.412  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     20905.385 ±    1395.931    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       805.777 ±    1154.294  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20329.074 ±   29171.635    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.105 ±       0.903    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     33245.878 ±     227.050   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2199.556 ±      80.453  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    104123.499 ±    4056.528    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2152.292 ±    1166.905  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    101895.509 ±   55643.365    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.262 ±       1.319  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        12.426 ±      62.503    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27192.260 ±     953.638   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1757.030 ±      88.419  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101681.755 ±    2963.928    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1738.707 ±    1409.649  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    100563.945 ±   80248.209    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.837 ±       6.937  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        49.128 ±     407.507    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34293.180 ±    1274.928   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1546.704 ±      43.404  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     70981.481 ±    1570.884    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1478.261 ±    1162.773  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67824.627 ±   52847.010    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.675 ±       4.225  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        30.864 ±     193.302    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     35129.312 ±     303.797   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1520.874 ±      56.924  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68132.581 ±    2336.000    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1478.670 ±    1151.627  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     66238.320 ±   51466.754    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.695 ±       5.459  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        31.193 ±     245.012    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    339547.764 ±    2804.264   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1928.182 ±      49.432  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8937.438 ±     218.881    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1877.097 ±    1157.760  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8700.994 ±    5374.458    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.749 ±       6.140  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.470 ±      28.433    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1515192.241 ±    8733.093   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       490.889 ±      28.801  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       509.888 ±      32.440    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       532.923 ±    1147.157  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       553.919 ±    1192.353    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.016 ±       0.096  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.016 ±       0.100    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    683628.095 ±    5872.365   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       543.414 ±      39.322  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1250.956 ±      93.995    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.407 ±    1111.963  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1157.102 ±    2559.594    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.029 ±       0.165    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1880822.227 ±  102084.655   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       373.343 ±      31.108  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       312.429 ±      29.770    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.749 ±    1216.680  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       284.768 ±    1020.054    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.003 ±       0.030    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    101045.451 ±    3396.596   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3381.840 ±     181.767  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52673.713 ±    1523.519    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3242.793 ±    1160.908  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     50495.145 ±   17369.390    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.322 ±       1.239    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    364596.594 ±    6106.291   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1261.375 ±      32.357  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5444.944 ±     161.747    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1207.606 ±    1154.803  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5213.602 ±    4995.544    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.704 ±       5.123  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.037 ±      22.136    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1579297.590 ±  106980.770   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       753.977 ±      71.841  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       751.268 ±      26.202    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       799.897 ±    1148.964  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       796.112 ±    1123.256    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.016 ±       0.063  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.015 ±       0.062    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1029216.845 ±   27114.846   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       747.769 ±      29.899  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1143.326 ±      28.110    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       668.574 ±       1.561  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1022.288 ±      28.569    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.013 ±       0.109    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2762396.249 ±   53030.743   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1316.539 ±      58.741  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       750.011 ±      20.064    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1210.182 ±    1156.431  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       688.851 ±     651.088    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.608 ±       5.145  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.345 ±       2.920    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3247475.755 ±    8555.225   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    486843.059 ±   25633.756   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       575.044 ±      44.246  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1858.699 ±     119.963    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       534.887 ±    1151.386  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1734.649 ±    3735.239    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.027 ±       0.232    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    161644.847 ±    4163.136   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2045.606 ±     102.532  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19911.121 ±     486.980    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1876.712 ±    1153.394  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     18258.867 ±   11009.478    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.775 ±       6.006  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.589 ±      58.919    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    530506.710 ±    7993.894   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       436.119 ±      34.229  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1293.674 ±     110.425    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       368.857 ±    1319.182  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1095.940 ±    3916.410    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.050 ±       0.261    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1274851.121 ±   16831.967   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       255.565 ±      29.762  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       315.525 ±      40.577    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       306.971 ±    1079.045  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       379.832 ±    1335.166    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.010 ±       0.054    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     87000.943 ±    3096.436   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3491.779 ±     109.484  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63160.332 ±     928.996    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3357.751 ±      75.120  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     60740.366 ±    2983.239    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.075 ±       0.644    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    309038.370 ±    5113.915   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1745.864 ±      60.163  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8890.989 ±     286.935    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1608.661 ±    1414.984  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8192.826 ±    7217.513    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.716 ±       6.122  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.653 ±      31.222    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1916171.179 ±   95808.575   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1012.356 ±      54.450  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       831.533 ±      31.835    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.356 ±    1410.830  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       879.791 ±    1166.247    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.010 ±       0.036    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2840474.745 ±  161305.411   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       786.146 ±      47.616  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       435.606 ±      26.558    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       805.728 ±    1155.776  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       447.431 ±     658.886    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.005 ±       0.025    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3078952.438 ±   18575.764   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.011 ±       0.095  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.006 ±       0.049    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     49636.705 ±    1337.669   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2248.549 ±      88.698  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71278.900 ±    1905.753    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2275.613 ±    1415.876  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     72132.307 ±   44679.727    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.845 ±       6.965  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        26.806 ±     220.854    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        17.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    245265.370 ±    5577.571   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2698.089 ±     104.041  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17313.438 ±     298.903    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2684.915 ±      27.711  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     17229.606 ±     349.840    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.107 ±       0.670    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        20.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    385552.811 ±   12626.301   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1992.929 ±      75.572  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8134.204 ±     274.289    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2009.312 ±      31.396  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      8201.525 ±     364.811    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.017 ±       0.146    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        20.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2254762.027 ±  170699.793   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       802.111 ±      36.180  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       559.913 ±      29.037    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.196 ±    1154.365  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       564.453 ±     837.791    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.009 ±       0.051    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     89037.050 ±    4182.046   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3520.691 ±     171.930  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62229.532 ±     419.656    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3381.718 ±      47.649  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     59780.115 ±    2797.065    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.667 ±       2.931    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        36.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    269767.483 ±    3323.971   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2188.245 ±      45.970  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12765.694 ±     250.638    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2145.227 ±    1161.208  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12515.336 ±    6797.397    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.716 ±       5.987  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.181 ±      34.952    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1482186.865 ±   95754.902   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       891.108 ±      40.945  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       945.995 ±      25.867    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.081 ±    1145.333  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       853.666 ±    1256.678    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.022 ±       0.149    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2835028.400 ±   96760.240   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       991.989 ±      56.497  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       550.674 ±      21.022    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       941.028 ±    1418.733  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       522.069 ±     782.715    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.009 ±       0.037    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3176897.820 ±   33498.581   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    396434.609 ±   16151.401   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2553.483 ±     139.549  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10135.860 ±     289.148    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2407.760 ±    1413.570  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9555.103 ±    5522.955    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.166 ±       0.647    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     26023.014 ±     858.675   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1665.934 ±      42.006  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    100750.069 ±    2873.029    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1611.021 ±    1417.382  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     97391.073 ±   84842.680    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.754 ±       4.168  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        45.566 ±     251.000    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5    100433.969 ±    1988.367   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       974.636 ±      39.237  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15271.784 ±     606.551    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1068.024 ±    1407.727  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16735.193 ±   22059.569    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.069  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.326 ±       1.088    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     68823.911 ±     905.360   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1238.236 ±      30.020  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28314.724 ±     849.220    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1199.505 ±    1148.191  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     27438.582 ±   26382.730    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.190 ±       1.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    135306.767 ±    2010.931   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       936.220 ±      39.649  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10889.705 ±     437.648    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940.724 ±    1417.895  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10942.202 ±   16492.634    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.194 ±       0.781    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     37354.055 ±     900.435   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1870.171 ±      82.797  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78786.521 ±    2684.240    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1870.308 ±    1141.751  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     78770.675 ±   47552.291    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.895 ±       7.486  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.888 ±     316.784    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32465.755 ±     445.420   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       529.851 ±      33.768  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25685.877 ±    1735.199    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       401.428 ±    1411.077  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     19463.480 ±   68417.405    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.404 ±       3.481    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32725.829 ±     175.283   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       410.863 ±      38.530  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19756.509 ±    1928.077    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       369.367 ±    1321.319  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17772.660 ±   63567.030    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.400 ±       3.447    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     34621.129 ±     723.055   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       425.029 ±      28.783  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19318.359 ±    1495.625    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.437 ±    1325.740  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16874.375 ±   60322.117    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34356.004 ±    1867.222   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       386.337 ±      35.197  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17699.782 ±    2293.205    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       338.812 ±    1216.899  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     15592.723 ±   55882.366    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.380 ±       3.271    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15233.006 ±    1141.910   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1122.792 ±      79.653  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    116013.674 ±    6560.998    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1073.999 ±    1415.570  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    111216.381 ±  149251.046    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.679 ±       5.709  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        68.478 ±     575.524    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15830.382 ±     729.566   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1034.230 ±      39.338  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    102823.848 ±    6047.924    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1069.794 ±    1410.632  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    106611.674 ±  143397.753    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.829 ±       4.373    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    108554.879 ±    1324.180   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       291.299 ±      29.476  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4223.367 ±     474.570    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306.995 ±    1079.129  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4458.454 ±   15672.200    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.181 ±       1.559    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13904.465 ±     348.527   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1378.552 ±      47.661  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    156041.191 ±    2665.860    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1337.800 ±       5.233  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    151434.186 ±    3512.929    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.920 ±       7.006  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       104.193 ±     793.247    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        31.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     45318.446 ±     346.757   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1152.248 ±      34.021  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40015.088 ±    1419.081    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.722 ±    1155.654  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41957.210 ±   40339.532    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.745 ±       6.193  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        25.906 ±     215.282    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     64665.448 ±     633.331   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1134.035 ±      33.596  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27600.010 ±     860.384    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.579 ±    1410.588  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26073.006 ±   34544.814    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.762 ±       6.341  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        18.509 ±     153.932    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        25.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    174512.099 ±    1607.334   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       285.171 ±      29.050  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2571.741 ±     284.298    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.993 ±    1079.124  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2773.042 ±    9747.639    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.113 ±       0.648    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    185439.944 ±     466.304   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     57776.714 ±     792.924   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1116.944 ±      26.782  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30421.434 ±    1067.455    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1071.023 ±    1411.565  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29194.994 ±   38749.102    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.770 ±       6.500  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        21.027 ±     177.386    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     95672.856 ±    5985.651   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2124.406 ±     161.400  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     34946.487 ±     809.505    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2007.267 ±      11.683  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     33028.152 ±    2202.847    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.816 ±       6.405  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        13.623 ±     107.028    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    123448.015 ±    4626.500   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1754.527 ±      88.646  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22364.393 ±     801.054    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1737.896 ±    1407.299  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     22136.281 ±   17585.016    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.883 ±       7.200  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        11.342 ±      92.624    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    166009.027 ±    3684.596   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1563.348 ±      70.736  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14819.598 ±     386.093    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1478.170 ±    1160.109  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14009.557 ±   10901.528    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.612 ±       5.225  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         5.787 ±      49.404    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     55946.836 ±    1214.037   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3012.501 ±      85.602  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84730.941 ±    2507.416    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2970.523 ±    1435.088  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     83555.483 ±   40574.182    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.233 ±       1.231    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        22.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    182346.537 ±    7679.567   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1218.763 ±      99.019  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10516.553 ±     463.914    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1208.109 ±    1156.649  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     10403.752 ±    9689.661    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.729 ±       4.914  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         6.253 ±      42.181    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    532645.280 ±    7174.744   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       553.937 ±      30.362  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1636.614 ±     101.321    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       534.312 ±    1150.146  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1580.191 ±    3401.540    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.025 ±       0.212    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    712457.919 ±   30033.104   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       565.650 ±      42.136  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1249.409 ±      49.329    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.652 ±    1155.184  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1180.435 ±    2541.121    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.009 ±       0.079    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    780743.604 ±    6355.815   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.436 ±       3.748  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.880 ±       7.573    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    340533.115 ±   17237.809   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       964.595 ±      25.439  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4458.533 ±     199.697    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       934.279 ±    1406.162  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4330.414 ±    6668.190    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.038 ±       0.325    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     38393.454 ±     621.972   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1963.130 ±      72.617  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80466.032 ±    2217.887    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.642 ±    1159.578  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     76965.656 ±   47597.190    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.762 ±       4.757  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        31.378 ±     196.287    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    291960.894 ±    7797.456   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       312.154 ±      37.963  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1682.650 ±     188.655    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.868 ±    1212.251  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1819.357 ±    6527.454    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.014 ±       0.083  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.075 ±       0.448    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    114151.526 ±     908.041   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1361.614 ±      15.129  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18770.032 ±     261.043    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1332.844 ±       7.229  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18373.473 ±     250.084    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.229 ±       1.440    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    482627.469 ±   22251.827   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       323.731 ±      37.745  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1055.629 ±     118.203    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.834 ±    1217.027  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1105.256 ±    3982.916    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.014 ±       0.118    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     42369.586 ±    1535.397   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2104.679 ±      98.170  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     78178.427 ±    1440.732    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2002.385 ±      14.852  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     74385.043 ±    2764.631    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.920 ±       6.812  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34.189 ±     252.711    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     74755.698 ±    6042.171   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       611.537 ±      59.729  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12875.360 ±     884.723    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535.602 ±    1152.926  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11316.523 ±   24385.280    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.178 ±       0.939    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     87970.081 ±     522.862   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       513.333 ±      35.549  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9183.658 ±     685.198    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.367 ±    1148.114  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9548.016 ±   20552.840    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.015 ±       0.093  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.276 ±       1.666    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     78129.478 ±     950.526   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       479.171 ±      40.221  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9652.370 ±     897.133    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       502.976 ±    1113.577  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10138.371 ±   22447.266    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.084 ±       0.722    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        14.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     86267.502 ±    7085.950   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       502.389 ±      73.844  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9162.024 ±     644.787    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.944 ±    1118.976  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9125.559 ±   20224.860    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.225 ±       0.793    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     86603.148 ±    6148.922   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       434.002 ±      35.775  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7889.642 ±    1018.151    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.534 ±    1326.227  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6811.389 ±   24479.733    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     10007.232 ±     318.855   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1647.183 ±      62.232  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    259032.300 ±    7725.914    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1608.553 ±    1410.395  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    252922.784 ±  220955.707    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.799 ±       5.163  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       126.165 ±     817.395    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5     10144.918 ±     332.996   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1596.321 ±      32.919  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    247636.058 ±    4753.566    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1471.152 ±    1156.605  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    228400.788 ±  184775.697    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.916 ±       7.059  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       143.231 ±    1104.439    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    149778.534 ±    9679.162   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       403.926 ±      44.035  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4245.079 ±     512.741    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.800 ±    1327.342  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3902.613 ±   13909.813    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5926.594 ±     123.769   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1561.415 ±      45.882  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    414568.992 ±    7383.587    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1471.041 ±    1158.018  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    390875.674 ±  316226.672    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.968 ±       7.221  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       256.863 ±    1916.273    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     20284.314 ±    1298.130   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1582.562 ±      87.341  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122786.168 ±    3986.768    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1608.738 ±    1410.143  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    124863.728 ±  110242.219    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.812 ±       4.626  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        63.938 ±     368.605    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23446.185 ±     861.841   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1579.294 ±      24.741  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106011.497 ±    2700.124    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1472.612 ±    1144.670  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     99000.689 ±   81321.090    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.783 ±       5.017  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        52.255 ±     334.740    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    134427.250 ±    1474.156   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       303.042 ±      27.347  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3548.066 ±     358.903    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.654 ±    1079.081  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2403.380 ±   12672.328    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    140480.490 ±     868.277   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.186 ±       1.597  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         2.086 ±      17.933    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23564.793 ±     851.206   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1642.325 ±      48.264  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109686.422 ±    4621.939    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1608.029 ±    1419.430  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    107509.568 ±   97437.703    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.858 ±       4.989  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        57.194 ±     332.550    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    124233.756 ±    2298.141   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1769.083 ±      71.449  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22409.218 ±     643.739    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1743.197 ±    1412.707  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     22082.472 ±   17911.820    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.770 ±       6.365  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.735 ±      80.459    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    563921.557 ±    3374.122   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       602.455 ±      11.625  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1681.259 ±      41.522    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       666.194 ±       1.725  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1859.125 ±      12.421    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.012 ±       0.066  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.034 ±       0.183    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    332244.567 ±    1246.621   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       475.781 ±      33.455  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2253.460 ±     164.191    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       502.402 ±    1111.972  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2380.231 ±    5267.320    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.170    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    769021.308 ±    6540.898   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       517.631 ±      37.615  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1059.177 ±      72.142    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       505.043 ±    1119.193  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1033.205 ±    2290.068    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.017 ±       0.090    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     71800.715 ±    2689.730   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      2966.894 ±     141.834  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65022.394 ±    1127.245    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2812.897 ±    1128.273  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     61674.522 ±   25948.244    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.275 ±       0.967    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        21.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    200657.753 ±    7815.610   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1475.302 ±      54.585  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11570.234 ±     237.062    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1475.636 ±    1155.105  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11576.360 ±    9151.357    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.741 ±       5.760  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.774 ±      44.826    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    654979.487 ±   50194.674   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       366.279 ±      36.318  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       880.117 ±      81.577    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.828 ±    1319.077  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       893.737 ±    3206.046    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.005 ±       0.047  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.014 ±       0.116    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    657160.093 ±   11588.523   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       502.699 ±      38.404  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1203.727 ±      87.789    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       503.011 ±    1113.669  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1204.712 ±    2664.095    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.020 ±       0.171    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1084218.696 ±   18871.953   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       606.496 ±      21.527  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       880.370 ±      26.931    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.279 ±       1.733  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       974.426 ±      19.257    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.052    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1187842.085 ±    8691.071   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         0.269 ±       2.314  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5         0.357 ±       3.074    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34533.512 ±     984.503   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1962.316 ±      33.868  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     89430.444 ±    2899.370    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1874.191 ±    1157.410  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     85451.006 ±   53652.479    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.854 ±       5.155  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        38.728 ±     233.807    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    129478.505 ±    4950.226   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1661.892 ±      37.584  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20201.316 ±     615.300    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1602.586 ±    1419.814  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     19500.834 ±   17719.411    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.050 ±       0.431    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    205363.370 ±    4003.477   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1244.968 ±      38.226  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9540.011 ±     168.808    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1203.471 ±    1151.616  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9220.801 ±    8807.936    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.820 ±       5.805  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.283 ±      44.499    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    244597.978 ±    8404.207   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1311.142 ±      69.000  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8434.752 ±     164.246    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1211.179 ±    1160.029  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      7779.657 ±    7299.694    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.608 ±       4.706  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.917 ±      30.340    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     69296.043 ±    2344.295   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2791.875 ±     106.267  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63398.634 ±    1224.743    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2696.737 ±    1819.958  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     61180.389 ±   39689.868    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.108 ±       0.888  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.450 ±      20.108    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    180533.962 ±   12724.750   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1204.463 ±      46.214  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10501.393 ±     485.865    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1073.753 ±    1415.699  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9388.065 ±   12675.024    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.699 ±       4.911  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6.262 ±      44.289    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    718351.327 ±   27028.887   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       748.457 ±      24.507  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1639.706 ±      46.471    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.878 ±       1.663  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1463.238 ±      53.368    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.009 ±       0.079    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        17.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    710106.472 ±   16607.223   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       559.329 ±      30.269  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1239.637 ±      69.667    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.679 ±    1155.243  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1190.569 ±    2563.028    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.018 ±       0.097    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    778672.095 ±    1511.553   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    362318.157 ±    2825.075   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1021.856 ±      52.137  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4438.082 ±     227.345    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       932.691 ±    1405.603  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4051.785 ±    6118.105    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.010 ±       0.056  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.045 ±       0.244    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     11323.896 ±     326.095   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1441.654 ±      26.969  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    200371.839 ±    5948.850    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1342.110 ±       6.967  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    186536.778 ±    4663.861    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.828 ±       5.415  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       115.067 ±     753.233    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10773.188 ±     542.845   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1254.364 ±      48.841  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    183256.516 ±    6181.503    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1204.674 ±    1153.551  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    176176.186 ±  170921.316    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.887 ±       6.335  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       128.912 ±     921.123    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    274051.481 ±   12142.200   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1844.077 ±     104.238  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10589.385 ±     352.129    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1747.807 ±    1416.224  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     10043.931 ±    8277.565    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.604 ±       4.235  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.487 ±      24.468    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8744.324 ±      61.899   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1589.165 ±      42.302  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    286000.675 ±    7894.215    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1470.362 ±    1155.435  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    264653.855 ±  208973.985    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.945 ±       7.787  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       170.231 ±    1403.472    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     26158.673 ±     586.882   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1377.249 ±      53.541  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82859.915 ±    1957.366    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.559 ±       4.802  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     80715.954 ±    1932.145    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.744 ±       5.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        45.012 ±     306.158    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     32227.922 ±    2342.987   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1341.332 ±      85.714  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65494.450 ±     671.821    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1333.770 ±      10.003  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     65142.807 ±    5093.974    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.023 ±       2.818    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    631032.784 ±    7236.246   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1168.697 ±      47.609  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2914.699 ±      98.470    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1075.754 ±    1418.790  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2681.574 ±    3521.690    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.675 ±       5.632  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.676 ±      13.981    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    777887.924 ±    5762.631   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.034 ±       0.286  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.068 ±       0.581    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     29886.168 ±    1771.369   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1356.288 ±      71.566  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71425.715 ±    1152.607    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1341.065 ±       5.888  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70635.543 ±    4214.252    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.804 ±       6.650  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        41.984 ±     347.403    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     32826.802 ±    1280.468   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1739.944 ±      81.686  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83412.081 ±    2014.481    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1742.133 ±    1413.128  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     83533.095 ±   68017.627    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.808 ±       6.161  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        38.364 ±     291.974    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     35496.092 ±    2412.944   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1565.760 ±     106.369  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69422.877 ±    1559.275    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1471.139 ±    1146.636  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     65210.274 ±   50011.106    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.862 ±       7.201  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        39.411 ±     329.480    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    475597.320 ±   15388.539   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1276.363 ±      74.997  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4223.431 ±     150.727    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1211.027 ±    1160.035  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4002.438 ±    3773.625    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.600 ±       4.939  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.975 ±      16.261    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     19192.956 ±     457.966   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1967.164 ±      69.893  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    161303.385 ±    2945.042    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2002.031 ±      13.254  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    164170.435 ±    5006.686    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.924 ±       7.869  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        76.257 ±     649.221    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        15.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        33.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     56443.131 ±    1489.935   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1734.895 ±      34.432  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48372.535 ±    1392.988    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1608.664 ±    1414.612  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     44851.671 ±   39421.043    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.720 ±       6.023  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        20.159 ±     168.586    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    159869.842 ±    3042.668   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1940.437 ±      70.604  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19102.442 ±     656.992    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.236 ±    1149.445  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18445.173 ±   11418.019    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.767 ±       5.202  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.594 ±      51.647    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1187984.767 ±   23314.988   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1312.994 ±      38.693  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1739.452 ±      26.778    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344.558 ±       4.495  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1781.313 ±      30.952    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.663 ±       5.622  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.880 ±       7.459    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1379609.894 ±    8260.508   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     67683.193 ±    4651.128   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1718.224 ±      63.253  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39953.076 ±    1477.089    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1608.340 ±    1414.662  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     37506.929 ±   35321.932    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.791 ±       6.370  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        18.928 ±     152.668    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     17647.218 ±     398.279   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1568.257 ±      47.217  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    139855.251 ±    3631.104    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1605.827 ±    1415.047  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    143232.942 ±  126801.866    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.114 ±       3.917    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        17.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     17933.808 ±     670.216   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1447.686 ±      67.221  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    127041.690 ±    4518.469    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1336.520 ±       5.399  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    117293.120 ±    4234.783    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.896 ±       6.114  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        78.836 ±     537.523    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    684534.304 ±   20440.329   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1839.577 ±      30.515  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4229.452 ±     143.270    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1749.034 ±    1423.526  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4023.295 ±    3318.133    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.048 ±       0.225    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     13024.334 ±     300.307   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1811.107 ±      60.263  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    218825.280 ±    3353.321    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1736.864 ±    1406.858  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    209809.893 ±  168922.159    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.921 ±       7.195  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       110.558 ±     863.608    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     43893.721 ±    1168.140   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1720.058 ±      55.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61667.085 ±    1551.956    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1608.515 ±    1414.396  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     57632.609 ±   49877.423    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.758 ±       6.302  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        27.147 ±     225.744    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     57781.348 ±    4263.128   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1781.611 ±     145.303  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48522.360 ±    1623.162    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1741.376 ±    1410.524  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     47425.115 ±   38267.952    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.775 ±       6.007  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        21.471 ±     166.919    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1303504.995 ±   29044.568   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1224.588 ±      43.360  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1478.399 ±      47.048    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.410 ±    1157.109  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1461.992 ±    1406.134    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.629 ±       4.469  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.757 ±       5.372    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1556324.991 ±    6181.202   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.011 ±       0.096  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.012 ±       0.097    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3833.488 ±      74.806   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       525.302 ±      44.746  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    215640.247 ±   18098.321    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       401.332 ±    1410.739  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    165054.849 ±  580199.657    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.115 ±      44.039    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    125611.787 ±    4759.654   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1999.183 ±      87.462  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     25048.956 ±     354.923    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2011.414 ±      13.989  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     25204.671 ±    1120.684    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.766 ±       4.751  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.721 ±      60.538    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    376362.917 ±   22715.468   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       778.296 ±      44.858  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3254.611 ±     181.759    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       799.853 ±    1145.571  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3350.246 ±    4893.337    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.010 ±       0.044  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.040 ±       0.184    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    258452.659 ±    2025.018   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       568.412 ±      33.648  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3461.079 ±     214.902    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533.638 ±    1148.697  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3249.801 ±    6995.484    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.127 ±       0.689    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    514795.031 ±   11158.232   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       668.354 ±      14.870  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2043.255 ±      62.778    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.380 ±       2.156  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2052.507 ±      43.356    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.025 ±       0.218    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     74787.659 ±    1938.185   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3158.146 ±      93.850  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66450.527 ±    1061.995    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3083.227 ±    1399.083  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     64873.223 ±   29356.485    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.351 ±       2.205    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        31.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    131242.792 ±    2410.143   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1157.017 ±      34.944  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13873.461 ±     449.458    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1207.525 ±    1155.196  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     14487.769 ±   13964.576    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.716 ±       6.035  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.563 ±      72.116    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    207399.504 ±   10410.013   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       167.989 ±      22.777  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1275.179 ±     223.903    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.697 ±    1079.308  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1571.720 ±    8287.980    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.377 ±       3.219  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.922 ±      24.970    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    425617.947 ±    8053.365   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       428.832 ±      38.764  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1585.770 ±     151.417    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       369.599 ±    1322.311  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1368.786 ±    4894.971    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.061 ±       0.529    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    468221.048 ±    5739.642   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       376.710 ±      35.620  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1266.144 ±     123.107    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.784 ±    1216.736  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1139.574 ±    4093.275    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    500078.101 ±     767.550   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     28540.243 ±    1085.087   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1559.078 ±      97.611  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     85957.581 ±    3453.751    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1474.117 ±    1158.591  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     81271.828 ±   63643.932    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.841 ±       7.017  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        46.306 ±     386.371    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8362.623 ±     284.429   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1214.174 ±      63.641  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    228411.195 ±    5142.995    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207.690 ±    1153.654  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    226920.335 ±  213330.622    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.760 ±       5.625  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       143.976 ±    1065.596    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8235.804 ±     133.709   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1102.832 ±      18.809  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    210716.379 ±    4846.296    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1070.187 ±    1411.599  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    204532.689 ±  270389.709    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.796 ±       6.717  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       151.574 ±    1279.416    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    192303.073 ±    2276.191   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1684.698 ±      59.758  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     13787.424 ±     640.132    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1613.184 ±    1413.963  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     13209.382 ±   11743.027    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.670 ±       4.844  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5.481 ±      39.575    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7714.768 ±     311.062   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1265.780 ±      59.765  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    258205.460 ±    8806.288    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1202.400 ±    1149.261  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    245478.808 ±  237071.707    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.899 ±       6.708  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       185.999 ±    1389.242    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     20798.229 ±     279.299   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1181.339 ±      33.016  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89394.595 ±    3523.615    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207.908 ±    1154.696  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     91459.113 ±   88096.399    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.750 ±       6.320  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        56.724 ±     478.242    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     23984.041 ±     307.310   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1058.161 ±      37.962  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69436.808 ±    2099.918    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       937.233 ±    1412.009  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     61507.790 ±   92737.450    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.215 ±       1.850    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    374387.176 ±    8848.358   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       872.177 ±      35.053  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3666.306 ±     100.799    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806.322 ±    1157.971  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3387.317 ±    4824.029    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.088 ±       0.338    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    433173.054 ±    1705.736   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     25006.154 ±    1197.085   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1207.516 ±      76.658  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     75995.641 ±    2796.232    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1205.604 ±    1152.565  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     76013.668 ±   74259.491    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.808 ±       6.910  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        50.283 ±     430.121    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13408.343 ±     489.110   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1316.723 ±      44.654  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    154535.790 ±    3205.202    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1341.614 ±       6.141  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    157465.202 ±    5478.184    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.795 ±       6.623  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        94.120 ±     784.054    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13636.987 ±     550.007   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1202.167 ±      82.732  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    138723.789 ±    4761.087    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.083 ±    1149.965  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    138817.267 ±  132464.296    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.845 ±       7.143  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        99.075 ±     837.656    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    293899.988 ±    3114.534   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1755.664 ±      91.391  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9401.402 ±     452.204    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1746.289 ±    1415.681  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      9350.093 ±    7555.688    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.641 ±       5.082  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.434 ±      27.214    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12518.572 ±     671.751   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1531.889 ±      95.561  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    192575.588 ±    3312.817    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1472.029 ±    1154.633  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    184972.462 ±  142133.920    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.327 ±       1.728  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        40.885 ±     215.732    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     33059.386 ±    1031.815   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1431.660 ±      57.054  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68142.364 ±    1098.479    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1341.891 ±       5.017  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     63873.785 ±    2102.205    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.750 ±       4.884  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        35.519 ±     231.354    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     78946.597 ±    1887.223   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1992.899 ±      58.606  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39724.971 ±     573.188    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2008.946 ±       8.787  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     40046.342 ±    1097.394    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.779 ±       4.964  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.631 ±     100.026    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    624477.539 ±   13024.295   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       878.997 ±      31.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2215.020 ±      71.184    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.295 ±    1156.645  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2032.036 ±    2918.522    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    739353.851 ±    1068.962   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     75397.961 ±    1558.167   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2192.357 ±      60.524  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45761.115 ±     754.613    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2004.833 ±      12.604  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     41847.791 ±     750.937    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.799 ±       6.838  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        16.670 ±     142.594    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     16823.644 ±     692.530   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       891.232 ±      82.693  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     83362.877 ±    6240.898    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       805.303 ±    1154.474  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     75309.449 ±  107533.484    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.777 ±       6.693    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        20.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17270.799 ±    1033.778   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       756.702 ±      38.939  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     68953.673 ±    1041.471    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       667.856 ±       1.653  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     60867.630 ±    3682.363    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.769 ±       4.052    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    122000.996 ±    2510.407   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       312.593 ±      34.165  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4032.090 ±     429.894    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204.685 ±    1079.244  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2639.930 ±   13919.604    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     14291.334 ±     311.460   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1091.071 ±      93.864  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    120144.249 ±    9130.721    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1070.254 ±    1412.495  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    117706.698 ±  153687.864    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.829 ±       7.089  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        90.580 ±     774.961    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     47588.525 ±     642.758   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1466.602 ±      45.527  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48500.154 ±    1309.652    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1474.533 ±    1153.683  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     48778.655 ±   38626.486    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.758 ±       5.454  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        25.069 ±     180.326    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     76475.397 ±    1181.286   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1631.189 ±      35.151  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33568.519 ±     730.715    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1607.875 ±    1411.021  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     33083.746 ±   28923.837    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.750 ±       5.070  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        15.435 ±     104.287    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    297343.195 ±   16886.796   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       586.304 ±      55.854  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3102.770 ±     194.284    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       536.577 ±    1155.022  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2832.876 ±    6100.660    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.005 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.026 ±       0.227    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    364286.127 ±     983.528   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     66422.529 ±    1623.246   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1531.800 ±      79.310  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36294.258 ±    1231.152    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1474.336 ±    1148.482  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     34926.118 ±   26962.201    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.820 ±       6.482  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        19.343 ±     152.821    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    143157.883 ±    7020.944   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1877.182 ±     103.516  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20634.230 ±     733.179    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.839 ±    1151.462  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     20655.080 ±   12969.944    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.750 ±       4.563  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.326 ±      50.920    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    861543.636 ±   10354.437   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       487.070 ±      28.807  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       889.737 ±      62.877    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.390 ±    1403.912  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       731.148 ±    2570.090    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.008 ±       0.066    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    395562.181 ±    3812.053   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       405.026 ±      24.116  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1611.373 ±     107.578    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.294 ±    1057.391  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1876.587 ±    4209.901    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.050 ±       0.286    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1131078.619 ±   12791.207   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       400.730 ±      33.847  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       557.624 ±      52.641    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370.670 ±    1326.791  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       516.778 ±    1849.592    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.591 ±       5.090  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.823 ±       7.087    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     82164.746 ±    1245.207   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3323.095 ±      33.149  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63653.382 ±    1136.311    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3221.048 ±    1135.305  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     61706.695 ±   22138.344    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.160 ±       0.841    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    273422.146 ±   16243.548   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1663.669 ±     106.107  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9575.319 ±     207.953    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1742.250 ±    1413.562  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     10039.997 ±    8382.895    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.737 ±       5.053  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.222 ±      28.940    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1235153.767 ±   40030.621   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       435.717 ±      32.145  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       555.224 ±      58.506    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       502.214 ±    1111.344  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       641.820 ±    1421.114    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.007 ±       0.042  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.008 ±       0.054    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1551020.507 ±   39924.299   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       932.567 ±      44.351  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       946.222 ±      45.518    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       936.970 ±    1412.563  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       951.377 ±    1442.922    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.017 ±       0.106    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1921044.867 ±   23826.389   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       676.226 ±      14.837  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       554.003 ±      10.146    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.036 ±       2.057  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       549.755 ±       6.426    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.007 ±       0.059    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2057499.322 ±     651.099   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     43297.354 ±    1387.217   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2129.892 ±     109.078  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     77406.408 ±    2034.496    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2008.081 ±      15.070  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     72986.173 ±    2865.066    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.825 ±       6.877  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        30.402 ±     253.726    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     15313.553 ±     727.495   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1891.787 ±      80.541  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    194433.628 ±    5211.887    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1743.387 ±    1411.239  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    179231.966 ±  146006.223    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.749 ±       6.274  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        77.330 ±     647.564    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     97423.005 ±    6187.870   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1309.714 ±      81.714  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21154.846 ±     356.173    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.104 ±       5.115  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21617.927 ±    1393.119    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.837 ±       6.849  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.678 ±     112.049    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    256073.017 ±   27944.283   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       862.402 ±      57.527  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5301.198 ±     277.917    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       940.756 ±    1417.250  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5812.990 ±    9139.718    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.101 ±       0.405    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     13592.696 ±     366.687   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2069.069 ±      74.650  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    239546.974 ±    5038.888    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2004.702 ±      14.764  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    232106.540 ±    7607.667    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.899 ±       5.521  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       104.954 ±     646.696    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     33089.599 ±    2006.360   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2772.027 ±     121.595  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    131840.348 ±    3525.911    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2685.940 ±      30.884  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    127767.032 ±    9123.301    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.054 ±       0.338  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         2.568 ±      15.942    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    106126.755 ±    2075.498   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1504.695 ±      39.786  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22312.987 ±     213.010    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1471.195 ±    1150.612  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21825.396 ±   17324.754    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.775 ±       6.491  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.452 ±      95.947    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    178687.755 ±    4047.987   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       585.506 ±      31.021  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5156.827 ±     312.091    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.691 ±    1155.269  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4731.118 ±   10184.812    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.037 ±       0.316    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    194523.941 ±     148.062   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     49613.326 ±     697.556   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3513.913 ±      45.850  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111466.995 ±     290.287    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3366.899 ±      66.012  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    106805.487 ±    3234.655    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.264 ±       1.392    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     25897.949 ±    1751.381   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1396.336 ±      91.903  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     84860.814 ±    3272.168    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1337.424 ±       7.684  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     81295.707 ±    5260.506    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.506 ±       4.360    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     27604.082 ±     149.017   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1183.729 ±      22.956  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     67484.331 ±    1499.095    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1205.040 ±    1152.132  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     68713.943 ±   65875.100    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.845 ±       7.143  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        48.148 ±     406.912    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        30.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    660418.539 ±   10302.168   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1771.834 ±      53.315  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4222.213 ±      82.278    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1612.980 ±    1417.289  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3844.487 ±    3394.495    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.633 ±       5.404  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.508 ±      12.875    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        21.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     23484.355 ±     862.447   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1731.307 ±      56.160  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    116010.174 ±    2625.565    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1740.128 ±    1404.676  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    116686.423 ±   95890.858    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.108 ±       0.755  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         7.237 ±      50.434    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     73294.903 ±    3189.888   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1948.543 ±     108.234  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41839.472 ±     903.077    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1875.738 ±    1157.617  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     40225.533 ±   23555.145    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.747 ±       4.866  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        15.901 ±     103.400    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    178298.676 ±    3395.485   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1997.276 ±      81.152  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17629.412 ±     560.587    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.452 ±    1153.312  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     16538.423 ±   10222.466    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.758 ±       6.436  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.730 ±      57.159    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1518261.313 ±   10090.519   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1294.507 ±      24.160  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1341.860 ±      25.184    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344.440 ±       4.785  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1393.622 ±      12.711    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.620 ±       5.208  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.643 ±       5.401    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1770234.637 ±    2054.112   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    153244.319 ±    5186.910   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1991.819 ±      37.399  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20457.515 ±     533.113    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2005.044 ±       9.703  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20593.789 ±     701.048    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.824 ±       5.874  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         8.425 ±      60.051    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     42560.967 ±    1982.475   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1571.449 ±      49.881  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     58110.261 ±    2149.764    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1605.213 ±    1408.013  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     59424.561 ±   53552.423    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.874 ±       7.170  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.723 ±     259.827    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    791801.863 ±   60908.054   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1593.600 ±     142.233  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3167.122 ±     150.800    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1613.733 ±    1415.412  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3205.552 ±    2761.533    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.579 ±       4.284  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.182 ±       8.786    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     31610.069 ±     832.464   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2319.928 ±      85.304  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    115491.480 ±    3715.105    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2283.583 ±    1408.528  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    113712.348 ±   71066.627    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.302 ±       2.511  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        14.955 ±     124.296    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    383269.846 ±   10479.964   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1096.446 ±      76.186  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4502.314 ±     275.517    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.925 ±    1411.795  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4400.261 ±    5829.733    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.670 ±       5.593  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.777 ±      23.180    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1964524.415 ±   61618.092   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1179.273 ±      61.347  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       944.727 ±      50.658    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1075.583 ±    1418.231  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       861.792 ±    1137.916    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.670 ±       5.548  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.542 ±       4.491    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2235138.635 ±    2977.326   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    255563.347 ±   14017.874   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1707.156 ±      99.076  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10513.170 ±     250.303    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1603.859 ±    1410.947  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9874.435 ±    8614.977    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.808 ±       6.777  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         5.031 ±      42.222    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     70941.159 ±     579.297   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1567.986 ±      76.126  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34784.486 ±    1706.927    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1474.908 ±    1149.996  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     32723.259 ±   25622.096    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.829 ±       6.305  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        18.338 ±     139.465    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     86370.137 ±    3697.229   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1129.160 ±      87.109  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20572.860 ±     908.722    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1068.010 ±    1406.355  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19443.238 ±   25418.959    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.879 ±       7.521  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        16.099 ±     137.792    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5    101273.343 ±    1392.106   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1246.041 ±      34.085  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19359.411 ±     568.560    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1208.796 ±    1155.116  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18787.664 ±   18036.882    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.641 ±       4.657  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         9.945 ±      72.248    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     46887.574 ±    1497.911   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2178.839 ±      38.966  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73131.725 ±    1385.089    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2002.267 ±      15.746  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     67207.193 ±    2361.591    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.949 ±       7.995  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        32.161 ±     270.904    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    115528.863 ±    1155.416   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1109.448 ±      21.962  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15113.875 ±     326.425    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1072.033 ±    1413.317  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14609.346 ±   19317.154    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.708 ±       5.916  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9.641 ±      80.575    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    329224.603 ±   34126.022   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       505.581 ±      83.559  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2415.887 ±     221.852    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.491 ±    1112.182  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2378.459 ±    5277.465    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    676569.320 ±   32893.223   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       862.125 ±      33.919  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2005.541 ±      65.034    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       805.934 ±    1156.000  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1877.081 ±    2731.199    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.020 ±       0.103    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    761327.638 ±   22436.699   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    208048.848 ±    8530.315   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       697.200 ±      37.813  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5273.664 ±     326.763    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       800.985 ±    1149.546  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      6064.125 ±    8800.405    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.189 ±       1.087    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        20.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    125944.235 ±    1942.957   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1777.319 ±      56.024  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22209.605 ±     528.770    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1606.871 ±    1413.132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     20083.059 ±   17729.413    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.808 ±       6.464  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.103 ±      80.865    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    182267.989 ±    9939.509   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1107.697 ±      67.055  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9564.624 ±     402.935    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1070.272 ±    1409.817  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9243.811 ±   12201.663    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.737 ±       6.167  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.295 ±      52.635    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    445853.663 ±    4591.097   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       300.198 ±      38.766  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1059.527 ±     136.070    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       307.019 ±    1079.216  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1083.487 ±    3808.648    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.015 ±       0.126    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     68409.116 ±    1099.989   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2756.618 ±     107.955  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63419.462 ±    1723.571    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2563.659 ±    1173.262  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     58966.784 ±   26491.476    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.046 ±       0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.055 ±       2.413    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        19.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    184634.879 ±   11051.527   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1201.280 ±      48.961  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10239.741 ±     228.931    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1073.536 ±    1414.399  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9178.696 ±   12396.206    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.704 ±       5.006  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         6.115 ±      43.803    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    550326.022 ±    6192.632   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       557.784 ±      31.135  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1595.183 ±     104.680    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       533.621 ±    1148.661  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1527.709 ±    3288.538    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.012 ±       0.103    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1144709.671 ±   49977.508   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       870.186 ±      62.608  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1196.168 ±      42.461    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.018 ±    1155.774  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1105.541 ±    1538.984    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.006 ±       0.049    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1287058.557 ±   24981.868   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    352271.339 ±   33281.423   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       988.576 ±      82.238  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4416.908 ±     196.470    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                          128  thrpt    5         0.003 ±       0.029  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                     128  thrpt    5         0.016 ±       0.135    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace                                       128  thrpt    5         0.010 ±       0.086  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                  128  thrpt    5         0.046 ±       0.400    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1019.722 ±    1292.633  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4563.290 ±    5825.657    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.829 ±       7.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.836 ±      32.632    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        45.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       574.458 ±       7.553   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1225.516 ±      48.811  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3355890.567 ±  135967.759    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.933 ±    1151.767  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3297575.943 ± 3164276.155    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.786 ±       4.866  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2148.669 ±   13285.362    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       580.080 ±      33.044   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1236.167 ±      53.275  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3352502.533 ±  112310.149    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1201.627 ±    1149.413  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3264432.083 ± 3190248.146    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.919 ±       6.232  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      2525.753 ±   17142.360    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     50925.866 ±    2115.437   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       848.842 ±      24.745  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26232.425 ±     682.576    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       804.195 ±    1153.789  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24908.148 ±   36714.000    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.521 ±       3.272    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       581.508 ±      29.643   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1268.486 ±      71.963  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3432071.978 ±  121982.056    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1199.453 ±    1146.549  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3244879.783 ± 3097241.665    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.277 ±       8.895  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3497.893 ±   24372.367    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     15037.899 ±     498.832   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1185.668 ±      25.260  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    124103.394 ±    5892.612    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.439 ±    1408.322  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    112038.926 ±  149991.326    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.157 ±       8.472  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       121.078 ±     887.389    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     17725.414 ±    1724.772   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1076.653 ±      56.049  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     95610.827 ±    6480.987    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1067.107 ±    1406.148  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     94326.304 ±  119363.169    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.070 ±       9.127  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        93.553 ±     797.731    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    220249.926 ±    3803.837   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       798.989 ±      36.989  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5709.063 ±     310.310    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       804.226 ±    1153.818  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5751.429 ±    8341.825    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.119 ±       0.477    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    239722.576 ±    1438.168   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     18188.891 ±    1038.428   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1168.853 ±      54.119  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    101137.610 ±    3516.405    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1068.029 ±    1408.009  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     92580.531 ±  123904.222    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.216 ±       8.687  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       104.393 ±     746.634    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        32.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1493010.626 ±   41593.981   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        63.823 ±      25.078  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        67.317 ±      28.559    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.320 ±     881.002  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       109.251 ±     940.682    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     81165.378 ±    1575.281   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3467.317 ±      64.580  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67229.278 ±    1871.308    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3380.361 ±      51.110  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     65544.174 ±    2252.925    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.046 ±       0.268  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.884 ±       5.167    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        25.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        36.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1872313.104 ±   24680.924   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1010.420 ±      27.017  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       849.322 ±      27.624    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1069.919 ±    1410.511  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       899.626 ±    1189.276    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.004 ±       0.030    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2246613.963 ±   32242.827   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       649.988 ±      32.931  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       455.313 ±      21.188    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.127 ±       0.897  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       470.129 ±       6.217    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.044  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.009 ±       0.031    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2401660.873 ±    1378.196   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.417 ±       0.009  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     52782.621 ±     412.434   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2273.916 ±      62.013  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     67792.179 ±    1734.498    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2136.411 ±    1140.418  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     63695.443 ±   34104.959    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.870 ±       7.449  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        25.915 ±     221.801    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        25.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    876495.471 ±   23159.504   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2842.747 ±     131.498  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5104.392 ±     143.558    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2817.859 ±    1187.877  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      5059.265 ±    2100.648    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.015 ±       0.079    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5187029.068 ±  309065.516   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       323.388 ±      45.569  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        98.093 ±      11.004    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       235.603 ±    1260.021  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        71.114 ±     380.150    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.003 ±       0.028  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.001 ±       0.008    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5   1007558.610 ±   46957.069   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1212.878 ±      79.914  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1894.128 ±      84.674    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1202.166 ±    1150.387  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1879.991 ±    1829.089    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.864 ±       7.374  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.337 ±      11.403    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        31.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   9120566.266 ±   67016.889   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       433.033 ±      35.462  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.721 ±       6.424    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       473.405 ±    1064.632  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        81.733 ±     183.750    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.001 ±       0.006    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        11.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    518997.786 ±    6950.660   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2238.213 ±      79.274  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      6785.979 ±     163.942    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2150.682 ±    1157.773  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6521.811 ±    3555.090    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.275 ±       2.322  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.835 ±       7.054    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        25.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4470.176 ±     160.228   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2245.232 ±     105.420  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    790318.436 ±   11386.347    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2133.943 ±    1136.743  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    751539.034 ±  414279.356    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         1.010 ±       6.791  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       359.137 ±    2420.797    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        29.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6834.260 ±     182.780   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2330.495 ±      94.587  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    536652.991 ±   20333.518    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2284.601 ±    1406.685  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    526420.930 ±  334389.831    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.196 ±       1.220  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        45.447 ±     284.379    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     46347.773 ±     817.992   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       769.041 ±      42.585  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26111.881 ±    1256.766    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       805.988 ±    1156.748  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     27363.414 ±   39206.324    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.423 ±       2.425    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        17.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4793.719 ±      59.240   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5       981.396 ±      42.878  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    322205.787 ±   17902.263    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       936.695 ±    1409.380  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    307826.893 ±  467007.257    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.033 ±       0.122  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        10.931 ±      39.910    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        25.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5273.615 ±     444.068   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       389.990 ±      54.124  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    116335.645 ±    8754.992    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       366.967 ±    1311.299  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    108529.474 ±  387706.216    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         1.234 ±      10.621    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         7.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6576.061 ±      59.151   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       328.914 ±      24.340  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     78713.132 ±    6441.851    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.804 ±    1216.954  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     81206.538 ±  291655.714    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.010 ±       0.090  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         2.493 ±      21.468    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6687.980 ±      67.722   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       283.676 ±      26.648  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     66756.462 ±    6908.963    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.639 ±    1079.002  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     48283.383 ±  254584.374    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      8054.454 ±     345.031   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1713.896 ±      81.913  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    334888.984 ±   11574.114    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1606.430 ±    1411.898  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    314038.125 ±  278984.358    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.839 ±       6.417  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       163.127 ±    1247.534    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        26.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     19066.577 ±     493.814   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       485.139 ±      41.466  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     40046.337 ±    4314.195    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       398.623 ±    1401.218  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     33044.859 ±  116159.821    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.346 ±       2.982    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     15618.124 ±     154.862   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       427.514 ±      42.886  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     43080.630 ±    4676.683    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       366.530 ±    1309.498  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     36995.947 ±  132186.928    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     22942.676 ±    2138.578   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       443.105 ±      58.931  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     30423.800 ±    6848.674    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       370.604 ±    1326.523  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     25653.595 ±   91345.295    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4150.040 ±      87.695   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2687.971 ±      78.473  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5   1019278.642 ±   19695.863    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2556.384 ±    1139.795  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    969576.049 ±  438654.968    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.358 ±       2.495  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       135.809 ±     944.566    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        19.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        30.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10330.867 ±     260.218   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2214.713 ±      52.732  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    337379.611 ±   11683.475    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2141.637 ±    1160.484  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    326362.403 ±  181588.897    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.771 ±       6.030  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       116.358 ±     909.822    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     57272.151 ±     549.584   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       551.332 ±      37.923  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15150.557 ±    1070.510    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       532.117 ±    1145.423  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     14629.232 ±   31491.097    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.006 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.176 ±       0.996    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     45192.369 ±    2201.977   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       669.619 ±      39.704  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23316.622 ±     381.286    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       663.094 ±       6.038  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     23092.999 ±    1175.263    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.291 ±       1.533    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     89787.666 ±    2642.764   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       695.949 ±      30.572  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12197.500 ±     237.646    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       669.136 ±       3.772  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     11728.241 ±     292.788    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.693 ±       5.920  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        11.986 ±     102.417    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    105610.958 ±     972.953   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0.983 ±       8.462  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5        14.707 ±     126.593    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7729.820 ±     144.237   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2331.323 ±      51.999  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    474604.860 ±    6676.299    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2151.993 ±    1158.554  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    438104.486 ±  235915.505    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.167 ±       1.217  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        33.753 ±     246.405    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   9147741.615 ±  374166.663   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4937.138 ±     200.740  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       849.334 ±       7.020    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4878.665 ±    1099.293  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       839.289 ±     186.777    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.037 ±       0.067  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.006 ±       0.012    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        36.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        46.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38164055.529 ±  400599.662   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5         0.009 ±       0.071  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10650536.248 ±   85338.374   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3657.257 ±      37.711  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       540.453 ±       7.223    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3498.220 ±    1192.620  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       516.996 ±     178.995    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.002 ±       0.006    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        26.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        36.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  48916985.649 ±  122147.230   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         0.002 ±       0.018  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31612579.857 ±  178970.157   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       826.604 ±      37.000  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.154 ±       1.959    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.810 ±    1156.806  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.176 ±      57.748    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   9061706.239 ±  200812.454   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3834.498 ±     115.525  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       665.984 ±       9.623    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3775.690 ±    1422.124  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       655.680 ±     241.969    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.001 ±       0.008    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        28.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        38.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  13727014.976 ±  916903.278   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1658.178 ±     120.729  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       190.106 ±       7.083    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.756 ±    1419.789  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       184.525 ±     158.874    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.679 ±       4.717  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.077 ±       0.536    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42234902.353 ± 1023659.158   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       883.361 ±      52.608  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.912 ±       1.932    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       933.443 ±    1406.682  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        34.774 ±      52.348    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.014 ±       0.046  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.001 ±       0.002    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        21.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  12116507.492 ±   97147.518   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2491.495 ±      81.594  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.619 ±       9.136    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2411.806 ±    1415.767  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       313.263 ±     183.670    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.002 ±       0.009    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        18.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  47211069.316 ± 2619454.990   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       984.214 ±      51.482  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.810 ±       1.194    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       940.163 ±    1415.221  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        31.447 ±      48.651    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.002    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        19.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  62638661.399 ±  261305.899   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17949256.692 ±  257875.438   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1690.262 ±      58.175  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148.191 ±       4.644    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1612.824 ±    1418.987  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       141.390 ±     124.127    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.042 ±       0.160  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.004 ±       0.014    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        18.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2730969.110 ±   40294.592   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2202.826 ±      90.068  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1269.229 ±      36.303    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2144.689 ±    1149.152  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1235.456 ±     649.517    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.720 ±       6.112  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.415 ±       3.522    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        25.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    170373.763 ±    3811.910   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3249.086 ±      75.618  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     30011.017 ±     645.483    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3101.693 ±    1413.888  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28649.504 ±   13058.300    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.037 ±       0.280  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.345 ±       2.574    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        35.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     36039.866 ±     586.219   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2589.405 ±      82.475  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    113078.288 ±    3015.002    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2558.919 ±    1159.525  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    111767.553 ±   51302.238    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.117 ±       0.915  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.125 ±      40.258    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    142593.784 ±    2709.107   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1231.804 ±      38.837  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13595.656 ±     478.680    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.231 ±    1151.643  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13284.887 ±   12772.225    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.849 ±       6.354  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         9.341 ±      69.869    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    443467.944 ±   11532.727   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1782.919 ±     102.840  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6327.013 ±     205.089    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1745.088 ±    1413.437  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6187.952 ±    4905.362    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.700 ±       5.577  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.484 ±      19.798    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    484422.610 ±    6187.007   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1391.913 ±      37.766  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4521.938 ±     106.741    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1343.957 ±       4.289  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4366.187 ±      64.687    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.650 ±       4.787  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.111 ±      15.549    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        23.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     75557.008 ±    1010.314   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1563.876 ±      35.928  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     32575.269 ±     593.133    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1469.102 ±    1145.156  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     30596.703 ±   23711.598    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.912 ±       7.407  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        19.001 ±     154.373    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    329210.481 ±    4305.128   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2465.595 ±      87.588  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11787.070 ±     338.703    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2415.194 ±    1419.267  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11548.024 ±    6837.472    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.142 ±       1.131  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.677 ±       5.408    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        18.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    587633.340 ±   33663.088   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1539.098 ±      59.351  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4122.280 ±     182.099    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1602.817 ±    1401.184  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4302.676 ±    3973.066    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.908 ±       7.636  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.412 ±      20.285    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1369364.031 ±   20831.679   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2768.242 ±     100.620  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3180.940 ±      76.508    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2559.128 ±    1141.464  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2939.853 ±    1281.198    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.058 ±       0.215  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.067 ±       0.247    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    110330.163 ±    7745.113   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3543.329 ±     207.363  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     50546.748 ±    1528.252    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3362.335 ±      71.107  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     47976.452 ±    4017.753    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.363 ±       1.945    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        25.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        33.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    344763.394 ±   15517.066   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1187.107 ±      27.325  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5419.506 ±     169.098    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1073.815 ±    1415.497  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      4914.623 ±    6612.086    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.670 ±       4.958  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.082 ±      22.825    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        22.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    835848.659 ±   35562.503   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       622.097 ±      37.966  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1171.167 ±      24.596    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       666.627 ±       2.445  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1255.178 ±      56.040    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.016 ±       0.135    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        17.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2127748.986 ±   16503.957   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1010.744 ±      44.480  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       747.621 ±      36.990    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940.669 ±    1416.930  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       696.100 ±    1052.564    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.015 ±       0.059    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2350274.810 ±    9936.923   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.310 ±       2.665  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.208 ±       1.788    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    481195.952 ±   13610.097   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       714.378 ±      31.018  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2336.091 ±      42.298    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       669.054 ±       2.275  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2188.019 ±      64.847    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.027 ±       0.145    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     59821.471 ±    2273.487   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2101.889 ±      33.605  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55293.873 ±    1268.090    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2009.894 ±      14.668  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     52875.339 ±    1984.842    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.771 ±       6.545  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        20.296 ±     172.448    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     94572.960 ±    3432.450   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1738.278 ±      28.089  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     28927.556 ±     803.502    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1602.315 ±    1409.364  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     26707.350 ±   24411.782    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.924 ±       7.602  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.483 ±     127.428    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    168804.698 ±    7238.402   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2688.612 ±     103.907  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25066.909 ±     301.292    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2689.063 ±      25.836  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     25073.793 ±    1311.229    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.075 ±       0.601  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.697 ±       5.596    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        20.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     33856.824 ±    1362.522   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2267.921 ±     100.598  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105405.613 ±    4231.295    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2151.573 ±    1172.295  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    100074.141 ±   57423.319    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.108 ±       0.888  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.986 ±      40.893    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    160874.385 ±    2168.135   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1076.282 ±      44.525  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10529.142 ±     435.914    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069.241 ±    1410.351  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10461.586 ±   13813.620    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.762 ±       6.515  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.472 ±      63.895    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    461834.840 ±    3731.568   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       527.193 ±      39.552  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1796.612 ±     145.267    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.544 ±    1117.876  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1720.590 ±    3810.989    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.043 ±       0.245    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    510322.319 ±    3092.419   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5.189 ±       0.031  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     75304.349 ±    1295.709   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1349.375 ±      44.135  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     28200.639 ±     644.311    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1329.737 ±      12.798  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     27790.665 ±     324.510    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.027 ±       0.061  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.561 ±       1.281    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2913477.878 ±   49287.872   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3755.573 ±     105.580  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2028.587 ±      38.808    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3639.942 ±    1439.734  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1965.815 ±     760.873    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.033 ±       0.176  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.018 ±       0.095    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        27.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        38.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    803769.085 ±   79116.218   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       468.453 ±      44.546  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       917.360 ±      43.136    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       399.753 ±    1405.187  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       782.816 ±    2752.737    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.009 ±       0.078  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.018 ±       0.154    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    353697.377 ±   17468.161   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       843.491 ±      53.710  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3753.241 ±     158.786    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800.823 ±    1149.384  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3561.569 ±    5072.883    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.037 ±       0.318    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    728913.043 ±   22827.985   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       665.002 ±      15.483  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1435.851 ±      40.487    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672.295 ±       1.669  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1451.632 ±      49.080    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.018 ±       0.155    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3217764.736 ±   50102.178   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      1940.985 ±      65.759  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       949.316 ±      24.696    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      1884.228 ±    1160.843  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       921.179 ±     558.503    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.529 ±       4.331  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.259 ±       2.123    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        14.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   7274878.475 ±  101298.480   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       797.595 ±      36.752  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       172.546 ±       7.777    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       806.893 ±    1155.400  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       174.534 ±     249.474    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.001 ±       0.008    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    227235.352 ±    3976.833   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2011.432 ±      46.596  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13931.408 ±     288.021    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2014.008 ±      15.821  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     13949.490 ±     336.242    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.312 ±       1.840  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2.165 ±      12.747    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        26.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1583824.015 ±   10014.095   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        91.157 ±      21.853  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        90.575 ±      22.002    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.329 ±     881.086  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       101.816 ±     876.665    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.165 ±       1.424  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.165 ±       1.417    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         2.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     76562.976 ±    1281.985   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3377.701 ±      85.298  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69424.828 ±    1185.878    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3243.864 ±    1149.261  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     66683.093 ±   24014.581    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.017 ±       0.105  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.342 ±       2.153    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        33.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1555592.818 ±   64331.661   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       840.671 ±      56.476  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       850.507 ±      36.542    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       935.607 ±    1409.595  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       947.420 ±    1437.626    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.088  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.017 ±       0.089    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1692046.980 ±   80698.286   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       488.899 ±      47.134  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       454.725 ±      34.930    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.689 ±    1118.277  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       468.997 ±    1042.748    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.008 ±       0.066    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1804483.196 ±    2086.453   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.345 ±       0.020  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     51878.837 ±    1374.674   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2238.785 ±      81.929  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67918.591 ±    2364.386    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2137.347 ±    1148.009  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     64846.536 ±   35021.515    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.866 ±       7.234  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        26.552 ±     221.861    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    272216.087 ±   15033.876   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1089.526 ±      80.518  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6297.996 ±     194.990    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.841 ±    1417.399  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6209.337 ±    8063.821    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.546 ±       4.608  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.233 ±      27.321    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     39907.442 ±     631.286   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1981.771 ±      76.543  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     78154.269 ±    2179.032    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2013.448 ±      20.069  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     79405.135 ±     900.826    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.260 ±       2.197  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        10.268 ±      86.659    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        15.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        25.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    112212.970 ±    7132.347   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1129.126 ±      80.454  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15834.536 ±     796.558    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1203.617 ±    1151.917  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     16885.504 ±   16243.342    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.845 ±       7.098  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11.651 ±      97.799    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        31.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    335066.888 ±   20551.162   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       465.902 ±      47.024  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2188.343 ±     178.734    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       504.678 ±    1118.215  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2375.796 ±    5232.919    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.039 ±       0.335    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        12.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    364015.527 ±    4227.188   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.701 ±       0.043  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     60525.870 ±    2370.819   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1244.541 ±      79.725  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     32360.149 ±    1044.303    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1202.904 ±    1151.111  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     31229.370 ±   29273.562    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.870 ±       6.379  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        22.715 ±     166.893    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        29.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73323.007 ±    2726.120   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1718.389 ±      51.996  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     36883.477 ±     641.729    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1743.049 ±    1412.993  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     37393.601 ±   29916.212    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.754 ±       4.864  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.338 ±     105.470    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        27.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    135172.246 ±    6353.109   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       920.221 ±      59.151  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10713.354 ±     367.189    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       799.841 ±    1147.810  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      9310.514 ±   13317.521    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.097 ±       0.512    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    256292.936 ±    4239.609   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1082.295 ±      32.444  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6646.559 ±     290.094    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075.410 ±    1417.660  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6610.745 ±    8787.222    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.579 ±       4.894  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.568 ±      30.178    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     32407.888 ±     361.641   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1640.533 ±      68.537  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     79667.704 ±    3246.035    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1607.908 ±    1416.319  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     78097.482 ±   69095.842    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.312 ±       2.415  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        15.157 ±     117.462    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        21.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    178818.658 ±    5829.575   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1018.998 ±      45.140  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8968.797 ±     445.899    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1068.649 ±    1408.136  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      9414.897 ±   12506.596    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.021 ±       0.098  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.183 ±       0.861    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        27.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    483582.362 ±    3675.915   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1464.327 ±      67.710  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4765.170 ±     235.858    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1478.293 ±    1160.004  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4811.289 ±    3796.015    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.625 ±       5.243  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         2.037 ±      17.101    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    514572.516 ±   26981.187   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       970.288 ±      91.509  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2967.112 ±     156.385    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       940.308 ±    1415.130  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2869.487 ±    4235.949    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.038 ±       0.133    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        21.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     77435.436 ±     544.457   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1383.490 ±      41.518  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     28118.937 ±     729.587    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1335.219 ±       6.644  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     27138.034 ±     199.802    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.866 ±       7.412  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        17.557 ±     150.260    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        31.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     99415.572 ±    1469.820   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1635.264 ±      90.971  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25887.655 ±    1157.492    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1609.420 ±    1415.512  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25469.978 ±   22197.267    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.774 ±       4.817  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12.252 ±      76.261    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    176614.105 ±    3004.902   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       745.977 ±       6.328  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6647.086 ±     109.666    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.409 ±       2.617  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5938.110 ±     114.277    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.111 ±       0.391    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    278203.206 ±    5082.157   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1023.610 ±      53.496  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5789.635 ±     215.877    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1075.611 ±    1417.962  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      6077.517 ±    7940.600    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.024 ±       0.204    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        23.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     72483.728 ±    2003.462   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2735.141 ±     110.361  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     59376.989 ±    1844.495    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2544.783 ±    1164.618  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     55231.484 ±   24818.878    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.179 ±       0.946    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    205977.690 ±    2634.530   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1438.993 ±      31.722  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10995.148 ±     263.198    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.365 ±       4.513  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10249.196 ±     116.386    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.720 ±       5.414  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.500 ±      41.352    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    508666.109 ±    6681.906   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       411.823 ±      39.707  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1274.192 ±     121.281    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       368.659 ±    1318.386  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1140.410 ±    4077.574    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.026 ±       0.136    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    632380.550 ±   24632.594   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       350.350 ±      28.128  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       871.949 ±      85.622    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.782 ±    1216.730  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       846.548 ±    3033.159    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.021 ±       0.178    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    692969.233 ±    8032.690   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.045 ±       0.082  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35738.094 ±     903.173   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1934.286 ±      23.177  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85184.259 ±    2004.104    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1739.784 ±    1418.259  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     76675.134 ±   63660.154    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.799 ±       5.048  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        35.397 ±     223.239    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    862498.930 ±   21417.763   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2321.828 ±      58.384  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4236.322 ±      46.289    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2142.860 ±    1142.556  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3909.760 ±    2080.962    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.799 ±       6.618  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.457 ±      12.057    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        24.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1925952.874 ±   12902.599   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1228.244 ±      54.892  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1003.638 ±      46.686    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1202.649 ±    1150.600  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       982.858 ±     941.980    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.901 ±       7.650  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.736 ±       6.243    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        31.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8555615.892 ±  163369.715   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       269.317 ±      26.339  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.546 ±       5.546    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.963 ±    1079.018  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        56.625 ±     199.047    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.002 ±       0.013    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    343584.669 ±   13437.572   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2274.316 ±     107.924  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10416.059 ±     244.356    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2150.437 ±    1152.865  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      9854.931 ±    5510.762    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.304 ±       2.529  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.404 ±      11.688    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1113180.333 ±    9777.730   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1816.888 ±      66.010  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2568.520 ±      80.798    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1740.166 ±    1412.200  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2459.910 ±    1992.854    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.796 ±       6.671  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.126 ±       9.444    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2773957.875 ±  151567.899   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1215.407 ±      49.076  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       689.550 ±      23.136    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1204.365 ±    1151.420  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       684.086 ±     664.050    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.756 ±       6.397  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.439 ±       3.717    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6353231.211 ±  159458.159   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       729.463 ±      22.345  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       180.687 ±       4.334    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       671.052 ±       1.721  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       166.223 ±       3.890    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.001 ±       0.009    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6809883.099 ±   88773.112   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       429.870 ±      30.075  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        99.354 ±       7.796    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.823 ±    1062.743  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       109.409 ±     245.904    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.002 ±       0.017    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    419777.814 ±    7158.110   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2367.212 ±      41.022  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      8874.183 ±     220.026    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2268.230 ±    1408.089  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8507.026 ±    5403.313    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.962 ±       8.016  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         3.603 ±      30.032    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     79036.900 ±    2279.151   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2212.278 ±      85.712  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44053.217 ±    1784.962    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2144.747 ±    1160.346  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     42715.393 ±   23383.647    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.779 ±       6.169  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        15.461 ±     122.406    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    125084.903 ±    8125.457   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1971.969 ±     159.977  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24809.458 ±     836.553    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1867.084 ±    1143.088  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     23476.821 ±   14014.711    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.924 ±       7.381  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.888 ±      95.051    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    170520.268 ±    9916.063   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2603.064 ±     140.805  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     24025.157 ±     444.198    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2553.725 ±    1154.889  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     23590.478 ±   11312.015    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.133 ±       0.886  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.242 ±       8.267    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     61775.293 ±    2220.064   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3056.313 ±     157.044  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     77850.968 ±    2193.733    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2947.547 ±    1404.352  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     75083.086 ±   35727.640    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.025 ±       0.105  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.641 ±       2.690    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    191305.528 ±    2251.291   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1346.672 ±      63.536  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11075.522 ±     461.897    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1207.063 ±    1154.114  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5      9921.988 ±    9420.994    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.737 ±       6.035  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         6.043 ±      49.478    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        23.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    455190.571 ±    7532.639   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       405.566 ±      24.434  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1402.308 ±      94.851    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       471.090 ±    1056.804  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1631.469 ±    3663.886    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.029 ±       0.249    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    652496.109 ±   15169.249   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       361.823 ±      41.456  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       872.614 ±      92.975    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.719 ±    1216.531  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       816.089 ±    2929.854    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.106    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    714783.781 ±    6451.889   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.267 ±       0.068  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     35533.152 ±     479.514   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1932.625 ±      73.508  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85594.251 ±    2610.397    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1874.994 ±    1149.711  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     83036.414 ±   50766.364    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.829 ±       4.887  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        36.631 ±     215.792    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3411694.972 ±  119444.942   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2881.443 ±      97.176  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1329.253 ±       2.623    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2833.965 ±    1123.230  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1307.480 ±     522.480    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.006 ±       0.033    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   5997061.998 ±  114844.143   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1159.617 ±      35.559  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       304.294 ±       9.224    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1067.714 ±    1408.475  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       280.183 ±     369.688    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.892 ±       7.542  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.234 ±       1.978    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        27.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4085189.343 ±  145711.059   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2261.634 ±      84.388  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       871.279 ±      22.528    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2139.778 ±    1142.575  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       824.786 ±     457.668    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.787 ±       6.731  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.304 ±       2.602    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6964844.300 ±  125972.267   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1348.406 ±      17.266  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       304.700 ±       2.368    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1343.767 ±       3.958  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       303.655 ±       5.747    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.625 ±       4.197  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.141 ±       0.948    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4340834.408 ±   59889.270   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2489.642 ±      73.957  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       902.650 ±      21.087    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2409.820 ±    1401.732  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       873.501 ±     501.659    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.083 ±       0.673  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.030 ±       0.244    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2217991.503 ±  101621.764   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1327.800 ±      25.749  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       942.147 ±      30.669    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.816 ±    1154.124  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       858.182 ±     834.452    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.666 ±       5.424  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.479 ±       3.904    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5924619.688 ±   40515.444   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       592.032 ±      15.338  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       157.249 ±       3.828    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       665.833 ±       1.047  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       176.852 ±       1.248    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.010 ±       0.083  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.003 ±       0.022    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4672579.733 ±  251133.951   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1272.937 ±      92.794  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       428.724 ±       8.931    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1338.881 ±       4.325  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       451.028 ±      23.858    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.770 ±       6.498  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.258 ±       2.176    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        27.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   5978596.869 ±  258897.525   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       596.220 ±      62.619  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       156.931 ±      10.672    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       536.654 ±    1155.190  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       140.710 ±     302.923    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.001 ±       0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6460702.231 ±   12175.410   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4570338.885 ±  236142.893   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1290.388 ±      58.973  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       444.367 ±       7.764    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1339.077 ±       5.954  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       461.191 ±      24.346    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.774 ±       6.444  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.270 ±       2.245    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1536269.773 ±   45321.700   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2176.934 ±      78.952  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2230.129 ±      79.520    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2148.025 ±    1161.301  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2200.361 ±    1182.808    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.645 ±       5.467  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.662 ±       5.605    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2901243.166 ±   56896.048   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       560.861 ±      34.190  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       304.224 ±      20.529    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       532.822 ±    1146.939  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       289.502 ±     623.195    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.016 ±       0.104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.009 ±       0.057    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1716993.446 ±   46178.153   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       944.910 ±      68.791  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       866.069 ±      51.736    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       936.128 ±    1411.100  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       857.757 ±    1289.068    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.010 ±       0.028  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.010 ±       0.026    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2434051.043 ±   20690.048   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       468.304 ±      33.589  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       302.814 ±      24.069    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.050 ±    1328.388  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       240.278 ±     860.116    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±       0.023    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1711945.099 ±   49321.094   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1022.263 ±      38.173  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       939.907 ±      59.659    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.889 ±    1411.626  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       986.196 ±    1318.027    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.019 ±       0.100  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.017 ±       0.092    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1208024.259 ±   74135.787   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5       918.042 ±      71.281  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1195.973 ±      30.796    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5       804.858 ±    1155.403  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1047.221 ±    1476.197    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.011 ±       0.093    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   3108507.612 ±   10655.314   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       833.400 ±      27.619  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       421.929 ±      15.054    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       800.948 ±    1151.571  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       405.585 ±     584.705    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.014 ±       0.074  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.007 ±       0.038    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2957887.548 ±  147981.668   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1299.145 ±      51.167  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       691.267 ±      12.575    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.755 ±    1154.447  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       642.904 ±     631.036    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.712 ±       5.799  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.376 ±       3.062    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3356539.793 ±  123956.835   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       894.623 ±      21.387  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       419.526 ±      23.989    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       805.905 ±    1156.062  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       378.994 ±     563.133    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.002 ±       0.017    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3620263.144 ±    9432.070   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.174 ±       1.499  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.076 ±       0.652    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2857906.877 ±   44417.649   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1418.097 ±      35.078  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       780.861 ±      14.763    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1341.644 ±       5.350  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       738.774 ±      13.324    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.677 ±       4.996  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.373 ±       2.755    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     11818.517 ±     585.154   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1396.598 ±      73.907  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    185976.680 ±    5694.146    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1337.298 ±       5.518  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    178101.407 ±    9032.636    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.827 ±       5.329  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       109.909 ±     709.767    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     21992.590 ±     690.928   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       336.591 ±      29.629  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24087.965 ±    2766.060    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.566 ±    1205.664  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     24181.388 ±   86540.422    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.298 ±       2.565    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22479.977 ±    1136.011   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       253.230 ±      29.340  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17729.144 ±    2487.892    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307.062 ±    1079.367  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21633.932 ±   76058.244    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      7471.233 ±     211.316   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2120.190 ±      87.058  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    446597.179 ±    9419.554    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2118.421 ±    1175.568  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    446043.516 ±  239643.017    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.479 ±       3.555  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       101.834 ±     757.010    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        16.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        30.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     63987.945 ±     902.628   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       826.120 ±      23.745  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20316.368 ±     691.389    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       797.607 ±    1140.254  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     19621.964 ±   28175.910    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.012 ±       0.066  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.307 ±       1.628    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     69972.300 ±     611.491   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       480.785 ±      30.058  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10812.228 ±     724.406    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       500.943 ±    1107.973  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11272.836 ±   24932.318    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.188 ±       1.618    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     76476.434 ±     217.989   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5         7.999 ±       1.941  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       164.593 ±      39.499    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    322973.535 ±    5195.616   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1935.521 ±      27.881  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9430.381 ±     199.259    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1878.175 ±    1158.580  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9154.150 ±    5720.968    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.737 ±       6.079  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.597 ±      29.669    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    505132.623 ±    4912.386   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       549.481 ±      32.038  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1712.003 ±     111.474    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       532.811 ±    1146.919  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1661.623 ±    3576.781    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.013 ±       0.112    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1265375.817 ±    6210.054   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       678.484 ±      40.333  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       843.811 ±      47.336    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       537.212 ±    1156.389  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       667.841 ±    1437.580    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.005 ±       0.045    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        12.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    111307.433 ±    2483.204   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3406.374 ±     138.067  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     48163.631 ±    1018.735    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3224.591 ±    1119.312  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     45578.485 ±   15036.332    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.062 ±       0.272  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.885 ±       3.855    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        34.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    343353.618 ±   10998.214   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1194.399 ±      26.180  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5474.699 ±     154.159    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1074.288 ±    1415.673  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      4934.625 ±    6617.125    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.674 ±       4.954  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.092 ±      22.745    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    753925.876 ±   60790.959   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       590.681 ±      48.493  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1233.069 ±      75.492    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       533.591 ±    1148.596  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1117.240 ±    2407.622    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.009 ±       0.074    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1623892.566 ±    6944.909   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       770.138 ±      14.516  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       746.350 ±      14.698    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.460 ±       1.463  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       647.812 ±       3.372    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.088  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.016 ±       0.085    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1752477.525 ±    2468.271   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    455848.926 ±   16561.150   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       699.868 ±      71.323  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2416.138 ±     187.385    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.568 ±    1150.310  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2767.243 ±    3897.408    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.014 ±       0.123    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 7059 s, completed May 9, 2018 1:52:55 AM
