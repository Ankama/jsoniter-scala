[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 2 projects.
[info] Excluded 2 projects, run ++ 2.12.6 -v for more details.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 31, 2018 10:13:10 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d15(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e5(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:12:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:33:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:42:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:48:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:60:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:6:14: Unused import
[warn] import ujson.BytesRenderer
[warn]              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 64 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51027.240 ops/s
[info] # Warmup Iteration   2: 523317.825 ops/s
[info] # Warmup Iteration   3: 812399.761 ops/s
[info] # Warmup Iteration   4: 743687.463 ops/s
[info] # Warmup Iteration   5: 780613.424 ops/s
[info] Iteration   1: 800922.823 ops/s
[info]                  ·gc.alloc.rate:                   2296.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              4512.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3953.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 794497.858 ops/s
[info]                  ·gc.alloc.rate:                   2290.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              4535.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3973.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 819954.146 ops/s
[info]                  ·gc.alloc.rate:                   2361.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              4532.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5128.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 816328.467 ops/s
[info]                  ·gc.alloc.rate:               2365.787 MB/sec
[info]                  ·gc.alloc.rate.norm:          4560.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3866.758 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 816657.402 ops/s
[info]                  ·gc.alloc.rate:               2394.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          4613.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5165.715 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   809672.139 ±(99.9%) 43293.192 ops/s [Average]
[info]   (min, avg, max) = (794497.858, 809672.139, 819954.146), stdev = 11243.105
[info]   CI (99.9%): [766378.947, 852965.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2341.736 ±(99.9%) 176.355 MB/sec [Average]
[info]   (min, avg, max) = (2290.408, 2341.736, 2394.197), stdev = 45.799
[info]   CI (99.9%): [2165.381, 2518.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4550.911 ±(99.9%) 150.223 B/op [Average]
[info]   (min, avg, max) = (4512.648, 4550.911, 4613.786), stdev = 39.013
[info]   CI (99.9%): [4400.687, 4701.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2275.444 ±(99.9%) 1409.617 MB/sec [Average]
[info]   (min, avg, max) = (2005.996, 2275.444, 2680.606), stdev = 366.073
[info]   CI (99.9%): [865.826, 3685.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4417.462 ±(99.9%) 2570.027 B/op [Average]
[info]   (min, avg, max) = (3866.758, 4417.462, 5165.715), stdev = 667.428
[info]   CI (99.9%): [1847.434, 6987.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.997), stdev = 1.781
[info]   CI (99.9%): [≈ 0, 7.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.595 ±(99.9%) 13.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.595, 7.854), stdev = 3.499
[info]   CI (99.9%): [≈ 0, 15.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 9.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.20% complete, ETA 02:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65510.656 ops/s
[info] # Warmup Iteration   2: 1599271.326 ops/s
[info] # Warmup Iteration   3: 1855375.635 ops/s
[info] # Warmup Iteration   4: 1882580.228 ops/s
[info] # Warmup Iteration   5: 1893166.268 ops/s
[info] Iteration   1: 1933191.748 ops/s
[info]                  ·gc.alloc.rate:                   1332.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              1085.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1086.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1950787.947 ops/s
[info]                  ·gc.alloc.rate:               1351.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          1089.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1076.141 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 1945056.524 ops/s
[info]                  ·gc.alloc.rate:                   1319.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     540.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1941634.552 ops/s
[info]                  ·gc.alloc.rate:                   1341.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1086.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1083.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1943036.659 ops/s
[info]                  ·gc.alloc.rate:                   1357.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              1099.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1081.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1942741.486 ±(99.9%) 24551.808 ops/s [Average]
[info]   (min, avg, max) = (1933191.748, 1942741.486, 1950787.947), stdev = 6376.027
[info]   CI (99.9%): [1918189.678, 1967293.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1340.555 ±(99.9%) 58.597 MB/sec [Average]
[info]   (min, avg, max) = (1319.272, 1340.555, 1357.607), stdev = 15.217
[info]   CI (99.9%): [1281.958, 1399.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1085.742 ±(99.9%) 45.375 B/op [Average]
[info]   (min, avg, max) = (1067.175, 1085.742, 1099.574), stdev = 11.784
[info]   CI (99.9%): [1040.367, 1131.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.298 ±(99.9%) 1148.704 MB/sec [Average]
[info]   (min, avg, max) = (668.660, 1202.298, 1337.644), stdev = 298.315
[info]   CI (99.9%): [53.594, 2351.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   973.909 ±(99.9%) 932.233 B/op [Average]
[info]   (min, avg, max) = (540.888, 973.909, 1086.807), stdev = 242.098
[info]   CI (99.9%): [41.676, 1906.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.847 ±(99.9%) 7.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.847, 4.185), stdev = 1.866
[info]   CI (99.9%): [≈ 0, 8.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.687 ±(99.9%) 5.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.392), stdev = 1.512
[info]   CI (99.9%): [≈ 0, 6.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.40% complete, ETA 02:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1719937.820 ops/s
[info] # Warmup Iteration   2: 5142515.384 ops/s
[info] # Warmup Iteration   3: 5951470.407 ops/s
[info] # Warmup Iteration   4: 5504290.198 ops/s
[info] # Warmup Iteration   5: 5657771.667 ops/s
[info] Iteration   1: 5642920.912 ops/s
[info]                  ·gc.alloc.rate:               385.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          107.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5622226.614 ops/s
[info]                  ·gc.alloc.rate:               396.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143.208 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5939077.402 ops/s
[info]                  ·gc.alloc.rate:      392.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5906419.895 ops/s
[info]                  ·gc.alloc.rate:                   410.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              109.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5937351.693 ops/s
[info]                  ·gc.alloc.rate:      392.390 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5809599.303 ±(99.9%) 624913.626 ops/s [Average]
[info]   (min, avg, max) = (5622226.614, 5809599.303, 5939077.402), stdev = 162288.084
[info]   CI (99.9%): [5184685.677, 6434512.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   395.307 ±(99.9%) 35.272 MB/sec [Average]
[info]   (min, avg, max) = (385.436, 395.307, 410.185), stdev = 9.160
[info]   CI (99.9%): [360.036, 430.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.125 ±(99.9%) 11.898 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.125, 110.847), stdev = 3.090
[info]   CI (99.9%): [95.227, 119.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.900 ±(99.9%) 1217.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.900, 671.235), stdev = 316.159
[info]   CI (99.9%): [≈ 0, 1556.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   92.946 ±(99.9%) 331.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.946, 178.838), stdev = 86.104
[info]   CI (99.9%): [≈ 0, 424.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.60% complete, ETA 02:11:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 594.746 ops/s
[info] # Warmup Iteration   2: 146216.490 ops/s
[info] # Warmup Iteration   3: 293627.190 ops/s
[info] # Warmup Iteration   4: 295976.320 ops/s
[info] # Warmup Iteration   5: 303091.938 ops/s
[info] Iteration   1: 309122.603 ops/s
[info]                  ·gc.alloc.rate:                   2711.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              13804.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13663.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 309973.561 ops/s
[info]                  ·gc.alloc.rate:                   2721.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              13818.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13640.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 312402.405 ops/s
[info]                  ·gc.alloc.rate:               2755.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          13881.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13557.552 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 297761.056 ops/s
[info]                  ·gc.alloc.rate:               2645.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          13979.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14256.735 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 297884.937 ops/s
[info]                  ·gc.alloc.rate:               2647.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          13987.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14282.478 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   305428.912 ±(99.9%) 27135.046 ops/s [Average]
[info]   (min, avg, max) = (297761.056, 305428.912, 312402.405), stdev = 7046.885
[info]   CI (99.9%): [278293.867, 332563.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2696.307 ±(99.9%) 186.739 MB/sec [Average]
[info]   (min, avg, max) = (2645.118, 2696.307, 2755.734), stdev = 48.496
[info]   CI (99.9%): [2509.568, 2883.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13894.115 ±(99.9%) 333.146 B/op [Average]
[info]   (min, avg, max) = (13804.058, 13894.115, 13987.125), stdev = 86.517
[info]   CI (99.9%): [13560.968, 14227.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2692.605 ±(99.9%) 30.691 MB/sec [Average]
[info]   (min, avg, max) = (2683.855, 2692.605, 2703.427), stdev = 7.970
[info]   CI (99.9%): [2661.914, 2723.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13880.239 ±(99.9%) 1377.549 B/op [Average]
[info]   (min, avg, max) = (13557.552, 13880.239, 14282.478), stdev = 357.745
[info]   CI (99.9%): [12502.690, 15257.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.302 ±(99.9%) 2.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.426), stdev = 0.629
[info]   CI (99.9%): [≈ 0, 2.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.536 ±(99.9%) 12.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.536, 7.260), stdev = 3.205
[info]   CI (99.9%): [≈ 0, 13.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.80% complete, ETA 02:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43002.621 ops/s
[info] # Warmup Iteration   2: 813447.967 ops/s
[info] # Warmup Iteration   3: 900640.500 ops/s
[info] # Warmup Iteration   4: 869488.541 ops/s
[info] # Warmup Iteration   5: 894546.031 ops/s
[info] Iteration   1: 894195.290 ops/s
[info]                  ·gc.alloc.rate:                   2378.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              4186.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4719.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.339 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 908776.275 ops/s
[info]                  ·gc.alloc.rate:                   2424.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              4198.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3474.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 924282.158 ops/s
[info]                  ·gc.alloc.rate:                   2460.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              4188.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4557.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 916383.529 ops/s
[info]                  ·gc.alloc.rate:                   2455.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3453.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 918167.877 ops/s
[info]                  ·gc.alloc.rate:                   2487.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              4262.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4606.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   912361.026 ±(99.9%) 44526.909 ops/s [Average]
[info]   (min, avg, max) = (894195.290, 912361.026, 924282.158), stdev = 11563.497
[info]   CI (99.9%): [867834.117, 956887.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2441.126 ±(99.9%) 159.815 MB/sec [Average]
[info]   (min, avg, max) = (2378.625, 2441.126, 2487.443), stdev = 41.504
[info]   CI (99.9%): [2281.310, 2600.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4210.483 ±(99.9%) 121.525 B/op [Average]
[info]   (min, avg, max) = (4186.294, 4210.483, 4262.899), stdev = 31.560
[info]   CI (99.9%): [4088.958, 4332.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2412.744 ±(99.9%) 1420.696 MB/sec [Average]
[info]   (min, avg, max) = (2006.426, 2412.744, 2688.185), stdev = 368.950
[info]   CI (99.9%): [992.048, 3833.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4162.339 ±(99.9%) 2465.568 B/op [Average]
[info]   (min, avg, max) = (3453.173, 4162.339, 4719.148), stdev = 640.300
[info]   CI (99.9%): [1696.771, 6627.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.065 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.787, 3.602), stdev = 1.575
[info]   CI (99.9%): [≈ 0, 6.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.383 ±(99.9%) 10.679 B/op [Average]
[info]   (min, avg, max) = (0.035, 1.383, 6.339), stdev = 2.773
[info]   CI (99.9%): [≈ 0, 12.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.121
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.00% complete, ETA 02:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190301.135 ops/s
[info] # Warmup Iteration   2: 2286453.224 ops/s
[info] # Warmup Iteration   3: 2876903.184 ops/s
[info] # Warmup Iteration   4: 2830361.854 ops/s
[info] # Warmup Iteration   5: 2869141.048 ops/s
[info] Iteration   1: 2853025.965 ops/s
[info]                  ·gc.alloc.rate:               1225.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          676.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 736.732 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2817928.330 ops/s
[info]                  ·gc.alloc.rate:                   1218.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              680.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     746.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2776171.722 ops/s
[info]                  ·gc.alloc.rate:               1179.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          668.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 379.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2736367.904 ops/s
[info]                  ·gc.alloc.rate:               1168.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          671.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 769.744 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 2782723.565 ops/s
[info]                  ·gc.alloc.rate:                   1212.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              685.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2793243.497 ±(99.9%) 170260.217 ops/s [Average]
[info]   (min, avg, max) = (2736367.904, 2793243.497, 2853025.965), stdev = 44216.038
[info]   CI (99.9%): [2622983.280, 2963503.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1200.921 ±(99.9%) 98.728 MB/sec [Average]
[info]   (min, avg, max) = (1168.056, 1200.921, 1225.764), stdev = 25.639
[info]   CI (99.9%): [1102.193, 1299.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   676.560 ±(99.9%) 26.757 B/op [Average]
[info]   (min, avg, max) = (668.438, 676.560, 685.888), stdev = 6.949
[info]   CI (99.9%): [649.803, 703.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.946 ±(99.9%) 1151.861 MB/sec [Average]
[info]   (min, avg, max) = (668.845, 1203.946, 1339.725), stdev = 299.135
[info]   CI (99.9%): [52.086, 2355.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   677.987 ±(99.9%) 645.033 B/op [Average]
[info]   (min, avg, max) = (379.141, 677.987, 769.744), stdev = 167.513
[info]   CI (99.9%): [32.954, 1323.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.786 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.956), stdev = 1.762
[info]   CI (99.9%): [≈ 0, 7.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.454 ±(99.9%) 3.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.454, 2.237), stdev = 0.997
[info]   CI (99.9%): [≈ 0, 4.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.20% complete, ETA 02:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2074998.120 ops/s
[info] # Warmup Iteration   2: 13712512.240 ops/s
[info] # Warmup Iteration   3: 15203782.071 ops/s
[info] # Warmup Iteration   4: 14228634.838 ops/s
[info] # Warmup Iteration   5: 14621452.770 ops/s
[info] Iteration   1: 14819548.744 ops/s
[info]                  ·gc.alloc.rate:               769.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.240 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15149751.804 ops/s
[info]                  ·gc.alloc.rate:               784.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69.752 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15168778.910 ops/s
[info]                  ·gc.alloc.rate:                   791.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14745529.894 ops/s
[info]                  ·gc.alloc.rate:               764.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71.701 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14670960.785 ops/s
[info]                  ·gc.alloc.rate:                   763.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              81.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14910914.027 ±(99.9%) 896495.045 ops/s [Average]
[info]   (min, avg, max) = (14670960.785, 14910914.027, 15168778.910), stdev = 232816.916
[info]   CI (99.9%): [14014418.982, 15807409.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   774.800 ±(99.9%) 49.119 MB/sec [Average]
[info]   (min, avg, max) = (763.097, 774.800, 791.893), stdev = 12.756
[info]   CI (99.9%): [725.681, 823.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81.774 ±(99.9%) 0.965 B/op [Average]
[info]   (min, avg, max) = (81.500, 81.774, 82.159), stdev = 0.251
[info]   CI (99.9%): [80.809, 82.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.499 ±(99.9%) 1.501 MB/sec [Average]
[info]   (min, avg, max) = (670.856, 671.499, 671.815), stdev = 0.390
[info]   CI (99.9%): [669.998, 672.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   70.886 ±(99.9%) 4.283 B/op [Average]
[info]   (min, avg, max) = (69.669, 70.886, 72.066), stdev = 1.112
[info]   CI (99.9%): [66.603, 75.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.41% complete, ETA 02:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1900571.735 ops/s
[info] # Warmup Iteration   2: 15482036.205 ops/s
[info] # Warmup Iteration   3: 17172007.789 ops/s
[info] # Warmup Iteration   4: 17205363.595 ops/s
[info] # Warmup Iteration   5: 17208443.988 ops/s
[info] Iteration   1: 17234070.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17226681.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17200143.954 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17200470.035 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17193740.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   17211021.341 ±(99.9%) 69545.797 ops/s [Average]
[info]   (min, avg, max) = (17193740.623, 17211021.341, 17234070.170), stdev = 18060.823
[info]   CI (99.9%): [17141475.544, 17280567.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.61% complete, ETA 02:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12614.775 ops/s
[info] # Warmup Iteration   2: 123877.194 ops/s
[info] # Warmup Iteration   3: 472879.390 ops/s
[info] # Warmup Iteration   4: 467336.403 ops/s
[info] # Warmup Iteration   5: 466143.388 ops/s
[info] Iteration   1: 477053.448 ops/s
[info]                  ·gc.alloc.rate:                   1422.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              4692.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4395.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 479028.708 ops/s
[info]                  ·gc.alloc.rate:               1424.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          4680.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4381.423 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 483513.802 ops/s
[info]                  ·gc.alloc.rate:                   1432.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              4663.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4345.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 486104.595 ops/s
[info]                  ·gc.alloc.rate:                   1439.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              4659.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4326.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 486178.618 ops/s
[info]                  ·gc.alloc.rate:                   1438.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              4657.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4312.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   482375.834 ±(99.9%) 16015.027 ops/s [Average]
[info]   (min, avg, max) = (477053.448, 482375.834, 486178.618), stdev = 4159.052
[info]   CI (99.9%): [466360.807, 498390.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1431.712 ±(99.9%) 29.765 MB/sec [Average]
[info]   (min, avg, max) = (1422.686, 1431.712, 1439.242), stdev = 7.730
[info]   CI (99.9%): [1401.948, 1461.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4670.672 ±(99.9%) 57.987 B/op [Average]
[info]   (min, avg, max) = (4657.565, 4670.672, 4692.073), stdev = 15.059
[info]   CI (99.9%): [4612.685, 4728.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1334.041 ±(99.9%) 6.409 MB/sec [Average]
[info]   (min, avg, max) = (1332.355, 1334.041, 1336.329), stdev = 1.664
[info]   CI (99.9%): [1327.632, 1340.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4352.182 ±(99.9%) 136.081 B/op [Average]
[info]   (min, avg, max) = (4312.599, 4352.182, 4395.320), stdev = 35.340
[info]   CI (99.9%): [4216.101, 4488.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.939 ±(99.9%) 6.921 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.939, 4.132), stdev = 1.797
[info]   CI (99.9%): [≈ 0, 7.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.040 ±(99.9%) 22.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.040, 13.379), stdev = 5.818
[info]   CI (99.9%): [≈ 0, 25.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1.81% complete, ETA 02:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187440.064 ops/s
[info] # Warmup Iteration   2: 1638280.177 ops/s
[info] # Warmup Iteration   3: 2103375.209 ops/s
[info] # Warmup Iteration   4: 2113658.868 ops/s
[info] # Warmup Iteration   5: 2140337.499 ops/s
[info] Iteration   1: 2139718.024 ops/s
[info]                  ·gc.alloc.rate:                   2978.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              2190.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1968.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2122273.642 ops/s
[info]                  ·gc.alloc.rate:                   2978.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              2207.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2477.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2151264.830 ops/s
[info]                  ·gc.alloc.rate:                   3015.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              2206.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1963.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2134240.248 ops/s
[info]                  ·gc.alloc.rate:                   2992.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              2207.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1985.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 2146636.677 ops/s
[info]                  ·gc.alloc.rate:               3009.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1978.967 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2138826.684 ±(99.9%) 43545.342 ops/s [Average]
[info]   (min, avg, max) = (2122273.642, 2138826.684, 2151264.830), stdev = 11308.587
[info]   CI (99.9%): [2095281.343, 2182372.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2995.021 ±(99.9%) 66.252 MB/sec [Average]
[info]   (min, avg, max) = (2978.339, 2995.021, 3015.763), stdev = 17.205
[info]   CI (99.9%): [2928.770, 3061.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2203.483 ±(99.9%) 27.388 B/op [Average]
[info]   (min, avg, max) = (2190.789, 2203.483, 2207.227), stdev = 7.113
[info]   CI (99.9%): [2176.095, 2230.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2819.081 ±(99.9%) 1128.027 MB/sec [Average]
[info]   (min, avg, max) = (2676.653, 2819.081, 3342.900), stdev = 292.945
[info]   CI (99.9%): [1691.054, 3947.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2074.783 ±(99.9%) 867.260 B/op [Average]
[info]   (min, avg, max) = (1963.867, 2074.783, 2477.400), stdev = 225.225
[info]   CI (99.9%): [1207.522, 2942.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.046), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 12.000), stdev = 2.915
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.01% complete, ETA 02:09:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.701 ops/s
[info] # Warmup Iteration   2: 8420706.953 ops/s
[info] # Warmup Iteration   3: 9640727.042 ops/s
[info] # Warmup Iteration   4: 9925499.633 ops/s
[info] # Warmup Iteration   5: 9666181.813 ops/s
[info] Iteration   1: 10167763.324 ops/s
[info]                  ·gc.alloc.rate:                   1277.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10021836.944 ops/s
[info]                  ·gc.alloc.rate:                   1253.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10070917.358 ops/s
[info]                  ·gc.alloc.rate:               1242.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          194.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104.416 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 10054699.498 ops/s
[info]                  ·gc.alloc.rate:                   1255.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9804229.041 ops/s
[info]                  ·gc.alloc.rate:                   1235.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10023889.233 ±(99.9%) 517032.238 ops/s [Average]
[info]   (min, avg, max) = (9804229.041, 10023889.233, 10167763.324), stdev = 134271.630
[info]   CI (99.9%): [9506856.995, 10540921.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1252.730 ±(99.9%) 61.012 MB/sec [Average]
[info]   (min, avg, max) = (1235.234, 1252.730, 1277.151), stdev = 15.845
[info]   CI (99.9%): [1191.718, 1313.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   196.678 ±(99.9%) 5.977 B/op [Average]
[info]   (min, avg, max) = (194.218, 196.678, 198.267), stdev = 1.552
[info]   CI (99.9%): [190.701, 202.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1201.936 ±(99.9%) 1148.855 MB/sec [Average]
[info]   (min, avg, max) = (668.228, 1201.936, 1336.693), stdev = 298.354
[info]   CI (99.9%): [53.081, 2350.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   188.826 ±(99.9%) 182.038 B/op [Average]
[info]   (min, avg, max) = (104.416, 188.826, 214.444), stdev = 47.275
[info]   CI (99.9%): [6.788, 370.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.872 ±(99.9%) 7.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 4.242), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.140 ±(99.9%) 1.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.681), stdev = 0.302
[info]   CI (99.9%): [≈ 0, 1.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.21% complete, ETA 02:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98733.400 ops/s
[info] # Warmup Iteration   2: 2625494.693 ops/s
[info] # Warmup Iteration   3: 3256753.988 ops/s
[info] # Warmup Iteration   4: 3230975.527 ops/s
[info] # Warmup Iteration   5: 3263824.870 ops/s
[info] Iteration   1: 3250328.873 ops/s
[info]                  ·gc.alloc.rate:                   2006.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              971.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3191310.214 ops/s
[info]                  ·gc.alloc.rate:                   1971.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              971.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     989.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3200477.375 ops/s
[info]                  ·gc.alloc.rate:               2015.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          990.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 984.051 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3158492.219 ops/s
[info]                  ·gc.alloc.rate:               1976.293 MB/sec
[info]                  ·gc.alloc.rate.norm:          984.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 996.422 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3164012.654 ops/s
[info]                  ·gc.alloc.rate:               1993.798 MB/sec
[info]                  ·gc.alloc.rate.norm:          991.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 995.980 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3192924.267 ±(99.9%) 141172.067 ops/s [Average]
[info]   (min, avg, max) = (3158492.219, 3192924.267, 3250328.873), stdev = 36661.938
[info]   CI (99.9%): [3051752.199, 3334096.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1992.605 ±(99.9%) 71.912 MB/sec [Average]
[info]   (min, avg, max) = (1971.668, 1992.605, 2015.063), stdev = 18.675
[info]   CI (99.9%): [1920.692, 2064.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   982.049 ±(99.9%) 38.399 B/op [Average]
[info]   (min, avg, max) = (971.077, 982.049, 991.664), stdev = 9.972
[info]   CI (99.9%): [943.650, 1020.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1869.636 ±(99.9%) 1144.323 MB/sec [Average]
[info]   (min, avg, max) = (1338.048, 1869.636, 2006.521), stdev = 297.177
[info]   CI (99.9%): [725.313, 3013.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   922.659 ±(99.9%) 592.274 B/op [Average]
[info]   (min, avg, max) = (647.665, 922.659, 996.422), stdev = 153.812
[info]   CI (99.9%): [330.385, 1514.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.848 ±(99.9%) 7.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.848, 4.217), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.418 ±(99.9%) 3.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.418, 2.079), stdev = 0.929
[info]   CI (99.9%): [≈ 0, 3.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.41% complete, ETA 02:09:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3314417.024 ops/s
[info] # Warmup Iteration   2: 12244586.058 ops/s
[info] # Warmup Iteration   3: 13748353.421 ops/s
[info] # Warmup Iteration   4: 13875627.685 ops/s
[info] # Warmup Iteration   5: 13497619.925 ops/s
[info] Iteration   1: 13485966.090 ops/s
[info]                  ·gc.alloc.rate:               1765.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          205.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.222 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 13803965.632 ops/s
[info]                  ·gc.alloc.rate:                   1807.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              206.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 13900694.268 ops/s
[info]                  ·gc.alloc.rate:                   1817.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              205.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13740147.435 ops/s
[info]                  ·gc.alloc.rate:               1786.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.971 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 13504865.206 ops/s
[info]                  ·gc.alloc.rate:                   1795.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              209.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13687127.726 ±(99.9%) 709392.928 ops/s [Average]
[info]   (min, avg, max) = (13485966.090, 13687127.726, 13900694.268), stdev = 184227.091
[info]   CI (99.9%): [12977734.798, 14396520.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1794.446 ±(99.9%) 76.958 MB/sec [Average]
[info]   (min, avg, max) = (1765.288, 1794.446, 1817.377), stdev = 19.986
[info]   CI (99.9%): [1717.488, 1871.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.336 ±(99.9%) 6.683 B/op [Average]
[info]   (min, avg, max) = (204.636, 206.336, 209.270), stdev = 1.735
[info]   CI (99.9%): [199.653, 213.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1749.623 ±(99.9%) 1419.449 MB/sec [Average]
[info]   (min, avg, max) = (1344.333, 1749.623, 2022.169), stdev = 368.626
[info]   CI (99.9%): [330.174, 3169.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   201.035 ±(99.9%) 160.042 B/op [Average]
[info]   (min, avg, max) = (153.971, 201.035, 234.989), stdev = 41.562
[info]   CI (99.9%): [40.992, 361.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 4.813 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.810), stdev = 1.250
[info]   CI (99.9%): [≈ 0, 5.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.320), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2.61% complete, ETA 02:08:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14892.408 ops/s
[info] # Warmup Iteration   2: 251146.289 ops/s
[info] # Warmup Iteration   3: 714024.140 ops/s
[info] # Warmup Iteration   4: 1154558.041 ops/s
[info] # Warmup Iteration   5: 1164840.567 ops/s
[info] Iteration   1: 1160822.206 ops/s
[info]                  ·gc.alloc.rate:                   2840.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              3850.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3333.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4519.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1172765.091 ops/s
[info]                  ·gc.alloc.rate:                   2865.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              3845.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3595.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1176444.694 ops/s
[info]                  ·gc.alloc.rate:               2886.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          3860.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3595.756 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1196917.683 ops/s
[info]                  ·gc.alloc.rate:               2948.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          3876.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3544.780 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1179459.543 ops/s
[info]                  ·gc.alloc.rate:                   2908.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              3880.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3606.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1177281.844 ±(99.9%) 50292.199 ops/s [Average]
[info]   (min, avg, max) = (1160822.206, 1177281.844, 1196917.683), stdev = 13060.724
[info]   CI (99.9%): [1126989.645, 1227574.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2889.769 ±(99.9%) 158.086 MB/sec [Average]
[info]   (min, avg, max) = (2840.731, 2889.769, 2948.099), stdev = 41.054
[info]   CI (99.9%): [2731.683, 3047.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3862.525 ±(99.9%) 59.114 B/op [Average]
[info]   (min, avg, max) = (3845.041, 3862.525, 3880.222), stdev = 15.352
[info]   CI (99.9%): [3803.410, 3921.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2820.170 ±(99.9%) 1106.455 MB/sec [Average]
[info]   (min, avg, max) = (2679.403, 2820.170, 3333.951), stdev = 287.343
[info]   CI (99.9%): [1713.715, 3926.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3772.345 ±(99.9%) 1611.208 B/op [Average]
[info]   (min, avg, max) = (3544.780, 3772.345, 4519.623), stdev = 418.426
[info]   CI (99.9%): [2161.137, 5383.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.354), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.475), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2.81% complete, ETA 02:08:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136112.976 ops/s
[info] # Warmup Iteration   2: 2033261.978 ops/s
[info] # Warmup Iteration   3: 2441140.140 ops/s
[info] # Warmup Iteration   4: 2471600.689 ops/s
[info] # Warmup Iteration   5: 2439783.206 ops/s
[info] Iteration   1: 2381608.338 ops/s
[info]                  ·gc.alloc.rate:                   2100.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              1387.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1330.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2467508.733 ops/s
[info]                  ·gc.alloc.rate:                   2183.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              1392.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1708.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2476372.081 ops/s
[info]                  ·gc.alloc.rate:               2166.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          1377.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275.105 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2429243.428 ops/s
[info]                  ·gc.alloc.rate:               2154.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          1395.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1300.951 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2401738.466 ops/s
[info]                  ·gc.alloc.rate:               2131.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          1396.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1317.525 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2431294.209 ±(99.9%) 157476.033 ops/s [Average]
[info]   (min, avg, max) = (2381608.338, 2431294.209, 2476372.081), stdev = 40896.026
[info]   CI (99.9%): [2273818.176, 2588770.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2147.377 ±(99.9%) 125.291 MB/sec [Average]
[info]   (min, avg, max) = (2100.352, 2147.377, 2183.854), stdev = 32.538
[info]   CI (99.9%): [2022.086, 2272.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1389.927 ±(99.9%) 30.800 B/op [Average]
[info]   (min, avg, max) = (1377.054, 1389.927, 1396.462), stdev = 7.999
[info]   CI (99.9%): [1359.127, 1420.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2143.703 ±(99.9%) 1153.025 MB/sec [Average]
[info]   (min, avg, max) = (2006.526, 2143.703, 2679.330), stdev = 299.437
[info]   CI (99.9%): [990.677, 3296.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1386.548 ±(99.9%) 698.344 B/op [Average]
[info]   (min, avg, max) = (1275.105, 1386.548, 1708.864), stdev = 181.358
[info]   CI (99.9%): [688.204, 2084.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.373), stdev = 1.488
[info]   CI (99.9%): [≈ 0, 6.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.472 ±(99.9%) 3.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.472, 2.229), stdev = 0.983
[info]   CI (99.9%): [≈ 0, 4.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.01% complete, ETA 02:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.667 ops/s
[info] # Warmup Iteration   2: 18726147.526 ops/s
[info] # Warmup Iteration   3: 19535637.715 ops/s
[info] # Warmup Iteration   4: 19648336.489 ops/s
[info] # Warmup Iteration   5: 20194934.804 ops/s
[info] Iteration   1: 20265091.012 ops/s
[info]                  ·gc.alloc.rate:      618.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20115815.132 ops/s
[info]                  ·gc.alloc.rate:               628.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 20175733.665 ops/s
[info]                  ·gc.alloc.rate:                   632.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20193073.646 ops/s
[info]                  ·gc.alloc.rate:               640.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 20022864.885 ops/s
[info]                  ·gc.alloc.rate:                   631.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   20154515.668 ±(99.9%) 349717.593 ops/s [Average]
[info]   (min, avg, max) = (20022864.885, 20154515.668, 20265091.012), stdev = 90820.548
[info]   CI (99.9%): [19804798.075, 20504233.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   630.303 ±(99.9%) 31.471 MB/sec [Average]
[info]   (min, avg, max) = (618.119, 630.303, 640.864), stdev = 8.173
[info]   CI (99.9%): [598.832, 661.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.217 ±(99.9%) 2.846 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.217, 49.944), stdev = 0.739
[info]   CI (99.9%): [46.371, 52.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.014 ±(99.9%) 1147.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.014, 666.856), stdev = 297.964
[info]   CI (99.9%): [≈ 0, 1680.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   41.676 ±(99.9%) 89.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.676, 52.411), stdev = 23.299
[info]   CI (99.9%): [≈ 0, 131.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.21% complete, ETA 02:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216690.894 ops/s
[info] # Warmup Iteration   2: 5413401.115 ops/s
[info] # Warmup Iteration   3: 6075929.102 ops/s
[info] # Warmup Iteration   4: 6395306.995 ops/s
[info] # Warmup Iteration   5: 6124548.881 ops/s
[info] Iteration   1: 6066465.354 ops/s
[info]                  ·gc.alloc.rate:                   1721.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              446.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6188042.359 ops/s
[info]                  ·gc.alloc.rate:                   1734.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     340.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6434610.538 ops/s
[info]                  ·gc.alloc.rate:                   1829.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              447.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     490.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6359808.502 ops/s
[info]                  ·gc.alloc.rate:                   1796.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     330.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6479962.475 ops/s
[info]                  ·gc.alloc.rate:               1844.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          447.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 486.016 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6305777.845 ±(99.9%) 669695.432 ops/s [Average]
[info]   (min, avg, max) = (6066465.354, 6305777.845, 6479962.475), stdev = 173917.777
[info]   CI (99.9%): [5636082.413, 6975473.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1785.271 ±(99.9%) 213.602 MB/sec [Average]
[info]   (min, avg, max) = (1721.089, 1785.271, 1844.441), stdev = 55.472
[info]   CI (99.9%): [1571.669, 1998.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   445.514 ±(99.9%) 10.755 B/op [Average]
[info]   (min, avg, max) = (441.087, 445.514, 447.950), stdev = 2.793
[info]   CI (99.9%): [434.760, 456.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.442 ±(99.9%) 1408.147 MB/sec [Average]
[info]   (min, avg, max) = (1333.716, 1736.442, 2005.166), stdev = 365.691
[info]   CI (99.9%): [328.295, 3144.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   433.324 ±(99.9%) 349.125 B/op [Average]
[info]   (min, avg, max) = (330.006, 433.324, 520.162), stdev = 90.667
[info]   CI (99.9%): [84.199, 782.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.797 ±(99.9%) 6.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.862), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 0.982), stdev = 0.436
[info]   CI (99.9%): [≈ 0, 1.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.41% complete, ETA 02:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9668160.848 ops/s
[info] # Warmup Iteration   2: 27980299.138 ops/s
[info] # Warmup Iteration   3: 27003046.835 ops/s
[info] # Warmup Iteration   4: 26774117.771 ops/s
[info] # Warmup Iteration   5: 28164400.847 ops/s
[info] Iteration   1: 26868611.580 ops/s
[info]                  ·gc.alloc.rate:               844.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 27489552.873 ops/s
[info]                  ·gc.alloc.rate:               866.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28280875.934 ops/s
[info]                  ·gc.alloc.rate:               886.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 28275280.925 ops/s
[info]                  ·gc.alloc.rate:                   894.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28246777.193 ops/s
[info]                  ·gc.alloc.rate:                   888.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   27832219.701 ±(99.9%) 2447064.330 ops/s [Average]
[info]   (min, avg, max) = (26868611.580, 27832219.701, 28280875.934), stdev = 635494.835
[info]   CI (99.9%): [25385155.371, 30279284.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   875.835 ±(99.9%) 78.809 MB/sec [Average]
[info]   (min, avg, max) = (844.341, 875.835, 894.194), stdev = 20.466
[info]   CI (99.9%): [797.026, 954.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.521 ±(99.9%) 0.659 B/op [Average]
[info]   (min, avg, max) = (49.308, 49.521, 49.765), stdev = 0.171
[info]   CI (99.9%): [48.862, 50.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.062 ±(99.9%) 1157.934 MB/sec [Average]
[info]   (min, avg, max) = (671.155, 806.062, 1343.991), stdev = 300.712
[info]   CI (99.9%): [≈ 0, 1963.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45.473 ±(99.9%) 63.199 B/op [Average]
[info]   (min, avg, max) = (37.384, 45.473, 74.798), stdev = 16.413
[info]   CI (99.9%): [≈ 0, 108.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3.61% complete, ETA 02:07:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11258404.972 ops/s
[info] # Warmup Iteration   2: 32920342.568 ops/s
[info] # Warmup Iteration   3: 34795775.403 ops/s
[info] # Warmup Iteration   4: 34816360.187 ops/s
[info] # Warmup Iteration   5: 34806233.867 ops/s
[info] Iteration   1: 34705147.216 ops/s
[info]                  ·gc.alloc.rate:      1.421 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34871015.444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34820236.756 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34849291.553 ops/s
[info]                  ·gc.alloc.rate:      0.086 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34805286.473 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34810195.488 ±(99.9%) 246468.543 ops/s [Average]
[info]   (min, avg, max) = (34705147.216, 34810195.488, 34871015.444), stdev = 64007.098
[info]   CI (99.9%): [34563726.945, 35056664.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.301 ±(99.9%) 2.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.301, 1.421), stdev = 0.627
[info]   CI (99.9%): [≈ 0, 2.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.014 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.014, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3.82% complete, ETA 02:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76734.447 ops/s
[info] # Warmup Iteration   2: 1584140.645 ops/s
[info] # Warmup Iteration   3: 1777768.310 ops/s
[info] # Warmup Iteration   4: 1849983.550 ops/s
[info] # Warmup Iteration   5: 1891986.065 ops/s
[info] Iteration   1: 1894756.794 ops/s
[info]                  ·gc.alloc.rate:                   2843.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              2361.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2221.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1907080.746 ops/s
[info]                  ·gc.alloc.rate:                   2849.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              2351.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2214.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1906409.487 ops/s
[info]                  ·gc.alloc.rate:                   2873.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              2372.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2222.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1905068.099 ops/s
[info]                  ·gc.alloc.rate:                   2887.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              2384.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2230.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1898799.370 ops/s
[info]                  ·gc.alloc.rate:                   2903.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              2406.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2804.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1902422.899 ±(99.9%) 20779.624 ops/s [Average]
[info]   (min, avg, max) = (1894756.794, 1902422.899, 1907080.746), stdev = 5396.402
[info]   CI (99.9%): [1881643.275, 1923202.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2871.502 ±(99.9%) 97.920 MB/sec [Average]
[info]   (min, avg, max) = (2843.496, 2871.502, 2903.833), stdev = 25.430
[info]   CI (99.9%): [2773.582, 2969.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2375.339 ±(99.9%) 82.644 B/op [Average]
[info]   (min, avg, max) = (2351.172, 2375.339, 2406.661), stdev = 21.462
[info]   CI (99.9%): [2292.695, 2457.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2826.894 ±(99.9%) 1198.383 MB/sec [Average]
[info]   (min, avg, max) = (2673.954, 2826.894, 3383.327), stdev = 311.216
[info]   CI (99.9%): [1628.510, 4025.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2338.649 ±(99.9%) 1002.067 B/op [Average]
[info]   (min, avg, max) = (2214.905, 2338.649, 2804.060), stdev = 260.234
[info]   CI (99.9%): [1336.583, 3340.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.048, 0.086), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.02% complete, ETA 02:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78971.331 ops/s
[info] # Warmup Iteration   2: 289369.622 ops/s
[info] # Warmup Iteration   3: 300621.278 ops/s
[info] # Warmup Iteration   4: 296611.076 ops/s
[info] # Warmup Iteration   5: 308434.870 ops/s
[info] Iteration   1: 311327.308 ops/s
[info]                  ·gc.alloc.rate:                   1903.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              9619.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6792.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 310695.015 ops/s
[info]                  ·gc.alloc.rate:                   1912.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              9684.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10207.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 312498.571 ops/s
[info]                  ·gc.alloc.rate:               1923.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          9686.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10121.817 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 305649.441 ops/s
[info]                  ·gc.alloc.rate:               1882.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          9691.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10341.663 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 312170.601 ops/s
[info]                  ·gc.alloc.rate:               1908.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          9619.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6753.783 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   310468.187 ±(99.9%) 10725.016 ops/s [Average]
[info]   (min, avg, max) = (305649.441, 310468.187, 312498.571), stdev = 2785.253
[info]   CI (99.9%): [299743.171, 321193.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1905.864 ±(99.9%) 58.434 MB/sec [Average]
[info]   (min, avg, max) = (1882.183, 1905.864, 1923.529), stdev = 15.175
[info]   CI (99.9%): [1847.430, 1964.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9660.461 ±(99.9%) 143.003 B/op [Average]
[info]   (min, avg, max) = (9619.815, 9660.461, 9691.416), stdev = 37.137
[info]   CI (99.9%): [9517.459, 9803.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.442 ±(99.9%) 1411.813 MB/sec [Average]
[info]   (min, avg, max) = (1339.604, 1743.442, 2015.156), stdev = 366.643
[info]   CI (99.9%): [331.629, 3155.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8843.332 ±(99.9%) 7283.665 B/op [Average]
[info]   (min, avg, max) = (6753.783, 8843.332, 10341.663), stdev = 1891.545
[info]   CI (99.9%): [1559.667, 16126.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.643), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 6.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.733 ±(99.9%) 31.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.733, 18.453), stdev = 8.229
[info]   CI (99.9%): [≈ 0, 35.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.22% complete, ETA 02:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121812.965 ops/s
[info] # Warmup Iteration   2: 465382.236 ops/s
[info] # Warmup Iteration   3: 501276.023 ops/s
[info] # Warmup Iteration   4: 498817.845 ops/s
[info] # Warmup Iteration   5: 502199.625 ops/s
[info] Iteration   1: 504595.656 ops/s
[info]                  ·gc.alloc.rate:                   660.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              2058.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2073.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 504816.362 ops/s
[info]                  ·gc.alloc.rate:               661.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          2063.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2072.535 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 503308.219 ops/s
[info]                  ·gc.alloc.rate:                   656.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              2052.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2081.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 501342.287 ops/s
[info]                  ·gc.alloc.rate:               658.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          2067.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2090.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 503539.275 ops/s
[info]                  ·gc.alloc.rate:                   661.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              2066.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2083.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   503520.360 ±(99.9%) 5316.555 ops/s [Average]
[info]   (min, avg, max) = (501342.287, 503520.360, 504816.362), stdev = 1380.693
[info]   CI (99.9%): [498203.804, 508836.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   659.697 ±(99.9%) 8.569 MB/sec [Average]
[info]   (min, avg, max) = (656.331, 659.697, 661.910), stdev = 2.225
[info]   CI (99.9%): [651.128, 668.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2061.881 ±(99.9%) 24.920 B/op [Average]
[info]   (min, avg, max) = (2052.196, 2061.881, 2067.926), stdev = 6.472
[info]   CI (99.9%): [2036.961, 2086.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.549 ±(99.9%) 2.668 MB/sec [Average]
[info]   (min, avg, max) = (664.836, 665.549, 666.419), stdev = 0.693
[info]   CI (99.9%): [662.881, 668.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2080.182 ±(99.9%) 27.972 B/op [Average]
[info]   (min, avg, max) = (2072.535, 2080.182, 2090.001), stdev = 7.264
[info]   CI (99.9%): [2052.210, 2108.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.065), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.42% complete, ETA 02:06:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733771.286 ops/s
[info] # Warmup Iteration   2: 1294310.254 ops/s
[info] # Warmup Iteration   3: 1329767.156 ops/s
[info] # Warmup Iteration   4: 1274566.262 ops/s
[info] # Warmup Iteration   5: 1333303.555 ops/s
[info] Iteration   1: 1295940.167 ops/s
[info]                  ·gc.alloc.rate:               882.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          1071.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 815.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1275005.395 ops/s
[info]                  ·gc.alloc.rate:               886.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          1094.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1658.433 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1277579.300 ops/s
[info]                  ·gc.alloc.rate:                   866.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1067.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     827.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1338169.879 ops/s
[info]                  ·gc.alloc.rate:               917.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          1079.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 790.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1325479.625 ops/s
[info]                  ·gc.alloc.rate:                   922.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              1094.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1302434.873 ±(99.9%) 109259.404 ops/s [Average]
[info]   (min, avg, max) = (1275005.395, 1302434.873, 1338169.879), stdev = 28374.320
[info]   CI (99.9%): [1193175.469, 1411694.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   895.227 ±(99.9%) 91.507 MB/sec [Average]
[info]   (min, avg, max) = (866.934, 895.227, 922.029), stdev = 23.764
[info]   CI (99.9%): [803.720, 986.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1081.644 ±(99.9%) 48.506 B/op [Average]
[info]   (min, avg, max) = (1067.874, 1081.644, 1094.704), stdev = 12.597
[info]   CI (99.9%): [1033.138, 1130.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.889 ±(99.9%) 1418.127 MB/sec [Average]
[info]   (min, avg, max) = (671.499, 940.889, 1344.986), stdev = 368.283
[info]   CI (99.9%): [≈ 0, 2359.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1137.827 ±(99.9%) 1724.624 B/op [Average]
[info]   (min, avg, max) = (790.469, 1137.827, 1658.433), stdev = 447.880
[info]   CI (99.9%): [≈ 0, 2862.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.026), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 02:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13856.642 ops/s
[info] # Warmup Iteration   2: 97640.354 ops/s
[info] # Warmup Iteration   3: 109854.960 ops/s
[info] # Warmup Iteration   4: 112629.368 ops/s
[info] # Warmup Iteration   5: 110882.216 ops/s
[info] Iteration   1: 115312.817 ops/s
[info]                  ·gc.alloc.rate:                   3636.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              49622.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45583.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 115400.782 ops/s
[info]                  ·gc.alloc.rate:                   3665.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              49981.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45688.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 113563.992 ops/s
[info]                  ·gc.alloc.rate:               3638.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          50406.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4035.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55902.406 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 111651.282 ops/s
[info]                  ·gc.alloc.rate:               3553.627 MB/sec
[info]                  ·gc.alloc.rate.norm:          50074.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47599.807 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 113036.792 ops/s
[info]                  ·gc.alloc.rate:                   3595.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              50062.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47151.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   113793.133 ±(99.9%) 6120.604 ops/s [Average]
[info]   (min, avg, max) = (111651.282, 113793.133, 115400.782), stdev = 1589.501
[info]   CI (99.9%): [107672.529, 119913.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3617.835 ±(99.9%) 167.931 MB/sec [Average]
[info]   (min, avg, max) = (3553.627, 3617.835, 3665.174), stdev = 43.611
[info]   CI (99.9%): [3449.904, 3785.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50029.317 ±(99.9%) 1076.971 B/op [Average]
[info]   (min, avg, max) = (49622.768, 50029.317, 50406.422), stdev = 279.686
[info]   CI (99.9%): [48952.346, 51106.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3498.100 ±(99.9%) 1158.371 MB/sec [Average]
[info]   (min, avg, max) = (3340.158, 3498.100, 4035.140), stdev = 300.825
[info]   CI (99.9%): [2339.729, 4656.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48385.232 ±(99.9%) 16536.131 B/op [Average]
[info]   (min, avg, max) = (45583.541, 48385.232, 55902.406), stdev = 4294.381
[info]   CI (99.9%): [31849.101, 64921.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.230 ±(99.9%) 0.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.230, 0.580), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4.82% complete, ETA 02:06:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240013.882 ops/s
[info] # Warmup Iteration   2: 538867.992 ops/s
[info] # Warmup Iteration   3: 541589.247 ops/s
[info] # Warmup Iteration   4: 543893.752 ops/s
[info] # Warmup Iteration   5: 542438.057 ops/s
[info] Iteration   1: 534604.058 ops/s
[info]                  ·gc.alloc.rate:                   1677.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              4936.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3959.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 550750.151 ops/s
[info]                  ·gc.alloc.rate:                   1714.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              4898.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3847.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 550231.492 ops/s
[info]                  ·gc.alloc.rate:                   1723.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              4924.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5756.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 539244.512 ops/s
[info]                  ·gc.alloc.rate:                   1697.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              4954.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3917.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 530995.650 ops/s
[info]                  ·gc.alloc.rate:               1646.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          4880.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3978.191 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   541165.172 ±(99.9%) 34667.896 ops/s [Average]
[info]   (min, avg, max) = (530995.650, 541165.172, 550750.151), stdev = 9003.142
[info]   CI (99.9%): [506497.276, 575833.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1691.767 ±(99.9%) 118.335 MB/sec [Average]
[info]   (min, avg, max) = (1646.648, 1691.767, 1723.082), stdev = 30.731
[info]   CI (99.9%): [1573.431, 1810.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4918.976 ±(99.9%) 114.295 B/op [Average]
[info]   (min, avg, max) = (4880.288, 4918.976, 4954.401), stdev = 29.682
[info]   CI (99.9%): [4804.682, 5033.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1478.017 ±(99.9%) 1153.975 MB/sec [Average]
[info]   (min, avg, max) = (1342.273, 1478.017, 2014.098), stdev = 299.684
[info]   CI (99.9%): [324.043, 2631.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4291.702 ±(99.9%) 3158.756 B/op [Average]
[info]   (min, avg, max) = (3847.325, 4291.702, 5756.379), stdev = 820.319
[info]   CI (99.9%): [1132.945, 7450.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 5.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.956), stdev = 1.315
[info]   CI (99.9%): [≈ 0, 5.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.726 ±(99.9%) 14.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.726, 8.448), stdev = 3.758
[info]   CI (99.9%): [≈ 0, 16.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.02% complete, ETA 02:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95540.172 ops/s
[info] # Warmup Iteration   2: 344954.648 ops/s
[info] # Warmup Iteration   3: 342643.237 ops/s
[info] # Warmup Iteration   4: 349119.090 ops/s
[info] # Warmup Iteration   5: 340259.453 ops/s
[info] Iteration   1: 339054.048 ops/s
[info]                  ·gc.alloc.rate:                   1155.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              5362.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3110.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 338064.886 ops/s
[info]                  ·gc.alloc.rate:                   1164.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              5422.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6242.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 338337.817 ops/s
[info]                  ·gc.alloc.rate:               1163.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          5410.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6242.188 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 353378.652 ops/s
[info]                  ·gc.alloc.rate:                   1212.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              5398.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2989.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 352382.628 ops/s
[info]                  ·gc.alloc.rate:                   1223.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              5465.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5997.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   344243.606 ±(99.9%) 30422.475 ops/s [Average]
[info]   (min, avg, max) = (338064.886, 344243.606, 353378.652), stdev = 7900.620
[info]   CI (99.9%): [313821.132, 374666.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1183.997 ±(99.9%) 121.653 MB/sec [Average]
[info]   (min, avg, max) = (1155.404, 1183.997, 1223.663), stdev = 31.593
[info]   CI (99.9%): [1062.344, 1305.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5411.965 ±(99.9%) 143.825 B/op [Average]
[info]   (min, avg, max) = (5362.521, 5411.965, 5465.189), stdev = 37.351
[info]   CI (99.9%): [5268.141, 5555.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.574 ±(99.9%) 1415.803 MB/sec [Average]
[info]   (min, avg, max) = (670.247, 1073.574, 1342.953), stdev = 367.680
[info]   CI (99.9%): [≈ 0, 2489.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4916.574 ±(99.9%) 6574.920 B/op [Average]
[info]   (min, avg, max) = (2989.040, 4916.574, 6242.890), stdev = 1707.486
[info]   CI (99.9%): [≈ 0, 11491.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.393), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.127 ±(99.9%) 25.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.127, 15.155), stdev = 6.725
[info]   CI (99.9%): [≈ 0, 29.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.22% complete, ETA 02:05:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348522.931 ops/s
[info] # Warmup Iteration   2: 864239.786 ops/s
[info] # Warmup Iteration   3: 882490.477 ops/s
[info] # Warmup Iteration   4: 899211.541 ops/s
[info] # Warmup Iteration   5: 903171.668 ops/s
[info] Iteration   1: 908952.159 ops/s
[info]                  ·gc.alloc.rate:                   676.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1171.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 863453.665 ops/s
[info]                  ·gc.alloc.rate:               637.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          1162.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1211.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 859116.245 ops/s
[info]                  ·gc.alloc.rate:                   644.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1180.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1219.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 858377.940 ops/s
[info]                  ·gc.alloc.rate:               635.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          1164.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1220.743 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 859180.286 ops/s
[info]                  ·gc.alloc.rate:               636.271 MB/sec
[info]                  ·gc.alloc.rate.norm:          1165.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1220.825 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   869816.059 ±(99.9%) 84594.857 ops/s [Average]
[info]   (min, avg, max) = (858377.940, 869816.059, 908952.159), stdev = 21969.016
[info]   CI (99.9%): [785221.202, 954410.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   646.061 ±(99.9%) 66.848 MB/sec [Average]
[info]   (min, avg, max) = (635.352, 646.061, 676.478), stdev = 17.360
[info]   CI (99.9%): [579.213, 712.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168.874 ±(99.9%) 27.361 B/op [Average]
[info]   (min, avg, max) = (1162.596, 1168.874, 1180.233), stdev = 7.106
[info]   CI (99.9%): [1141.513, 1196.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.561 ±(99.9%) 2.783 MB/sec [Average]
[info]   (min, avg, max) = (664.818, 665.561, 666.499), stdev = 0.723
[info]   CI (99.9%): [662.778, 668.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1204.787 ±(99.9%) 116.580 B/op [Average]
[info]   (min, avg, max) = (1151.054, 1204.787, 1220.825), stdev = 30.276
[info]   CI (99.9%): [1088.206, 1321.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.038), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.42% complete, ETA 02:05:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1561528.399 ops/s
[info] # Warmup Iteration   2: 2317240.791 ops/s
[info] # Warmup Iteration   3: 2503288.472 ops/s
[info] # Warmup Iteration   4: 2496259.170 ops/s
[info] # Warmup Iteration   5: 2517109.477 ops/s
[info] Iteration   1: 2539354.029 ops/s
[info]                  ·gc.alloc.rate:                   1208.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2513780.485 ops/s
[info]                  ·gc.alloc.rate:               1189.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 420.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2568516.035 ops/s
[info]                  ·gc.alloc.rate:                   1227.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2475432.055 ops/s
[info]                  ·gc.alloc.rate:                   1185.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     855.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2578314.113 ops/s
[info]                  ·gc.alloc.rate:                   1232.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2535079.343 ±(99.9%) 161279.143 ops/s [Average]
[info]   (min, avg, max) = (2475432.055, 2535079.343, 2578314.113), stdev = 41883.681
[info]   CI (99.9%): [2373800.200, 2696358.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1208.586 ±(99.9%) 82.284 MB/sec [Average]
[info]   (min, avg, max) = (1185.717, 1208.586, 1232.616), stdev = 21.369
[info]   CI (99.9%): [1126.302, 1290.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.230 ±(99.9%) 14.236 B/op [Average]
[info]   (min, avg, max) = (744.443, 750.230, 753.708), stdev = 3.697
[info]   CI (99.9%): [735.994, 764.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.480 ±(99.9%) 1158.783 MB/sec [Average]
[info]   (min, avg, max) = (672.159, 1210.480, 1346.185), stdev = 300.932
[info]   CI (99.9%): [51.697, 2369.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   750.885 ±(99.9%) 712.450 B/op [Average]
[info]   (min, avg, max) = (420.799, 750.885, 855.711), stdev = 185.021
[info]   CI (99.9%): [38.435, 1463.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 4.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.561), stdev = 1.107
[info]   CI (99.9%): [≈ 0, 4.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.376 ±(99.9%) 2.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.628), stdev = 0.704
[info]   CI (99.9%): [≈ 0, 3.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5.62% complete, ETA 02:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1223689.726 ops/s
[info] # Warmup Iteration   2: 2607958.026 ops/s
[info] # Warmup Iteration   3: 2832898.859 ops/s
[info] # Warmup Iteration   4: 2842003.425 ops/s
[info] # Warmup Iteration   5: 2845443.354 ops/s
[info] Iteration   1: 2847160.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2847506.347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2845155.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2847678.297 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2912439.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2859988.068 ±(99.9%) 112972.475 ops/s [Average]
[info]   (min, avg, max) = (2845155.879, 2859988.068, 2912439.428), stdev = 29338.593
[info]   CI (99.9%): [2747015.593, 2972960.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.82% complete, ETA 02:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143065.002 ops/s
[info] # Warmup Iteration   2: 438786.981 ops/s
[info] # Warmup Iteration   3: 478534.775 ops/s
[info] # Warmup Iteration   4: 474112.571 ops/s
[info] # Warmup Iteration   5: 479420.509 ops/s
[info] Iteration   1: 476950.219 ops/s
[info]                  ·gc.alloc.rate:               706.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          2331.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2204.669 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 474461.838 ops/s
[info]                  ·gc.alloc.rate:               706.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          2343.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2218.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 470622.484 ops/s
[info]                  ·gc.alloc.rate:               700.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          2343.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2236.539 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 475000.274 ops/s
[info]                  ·gc.alloc.rate:               704.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          2333.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2216.986 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 475606.883 ops/s
[info]                  ·gc.alloc.rate:               702.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          2324.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2214.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   474528.340 ±(99.9%) 9134.960 ops/s [Average]
[info]   (min, avg, max) = (470622.484, 474528.340, 476950.219), stdev = 2372.320
[info]   CI (99.9%): [465393.380, 483663.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   704.262 ±(99.9%) 9.681 MB/sec [Average]
[info]   (min, avg, max) = (700.947, 704.262, 706.864), stdev = 2.514
[info]   CI (99.9%): [694.580, 713.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2335.254 ±(99.9%) 30.668 B/op [Average]
[info]   (min, avg, max) = (2324.827, 2335.254, 2343.299), stdev = 7.964
[info]   CI (99.9%): [2304.586, 2365.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.952 ±(99.9%) 1.363 MB/sec [Average]
[info]   (min, avg, max) = (668.411, 668.952, 669.336), stdev = 0.354
[info]   CI (99.9%): [667.589, 670.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2218.196 ±(99.9%) 44.601 B/op [Average]
[info]   (min, avg, max) = (2204.669, 2218.196, 2236.539), stdev = 11.583
[info]   CI (99.9%): [2173.595, 2262.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6.02% complete, ETA 02:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87299.610 ops/s
[info] # Warmup Iteration   2: 155378.832 ops/s
[info] # Warmup Iteration   3: 155696.229 ops/s
[info] # Warmup Iteration   4: 160352.171 ops/s
[info] # Warmup Iteration   5: 160207.440 ops/s
[info] Iteration   1: 159806.831 ops/s
[info]                  ·gc.alloc.rate:                   966.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              9516.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13225.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 159768.644 ops/s
[info]                  ·gc.alloc.rate:               952.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          9385.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6620.734 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 159605.700 ops/s
[info]                  ·gc.alloc.rate:                   955.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              9418.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13255.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 160395.111 ops/s
[info]                  ·gc.alloc.rate:               955.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          9370.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6595.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 160126.786 ops/s
[info]                  ·gc.alloc.rate:               953.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          9372.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6612.854 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   159940.614 ±(99.9%) 1218.998 ops/s [Average]
[info]   (min, avg, max) = (159605.700, 159940.614, 160395.111), stdev = 316.570
[info]   CI (99.9%): [158721.616, 161159.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   956.643 ±(99.9%) 21.457 MB/sec [Average]
[info]   (min, avg, max) = (952.813, 956.643, 966.449), stdev = 5.572
[info]   CI (99.9%): [935.186, 978.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9412.760 ±(99.9%) 235.892 B/op [Average]
[info]   (min, avg, max) = (9370.833, 9412.760, 9516.948), stdev = 61.260
[info]   CI (99.9%): [9176.868, 9648.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   940.913 ±(99.9%) 1415.759 MB/sec [Average]
[info]   (min, avg, max) = (672.152, 940.913, 1344.340), stdev = 367.668
[info]   CI (99.9%): [≈ 0, 2356.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9261.868 ±(99.9%) 13985.011 B/op [Average]
[info]   (min, avg, max) = (6595.064, 9261.868, 13255.653), stdev = 3631.863
[info]   CI (99.9%): [≈ 0, 23246.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.164 ±(99.9%) 1.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.616), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.22% complete, ETA 02:04:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4120.257 ops/s
[info] # Warmup Iteration   2: 14913.068 ops/s
[info] # Warmup Iteration   3: 17093.804 ops/s
[info] # Warmup Iteration   4: 17256.035 ops/s
[info] # Warmup Iteration   5: 16920.641 ops/s
[info] Iteration   1: 16662.113 ops/s
[info]                  ·gc.alloc.rate:                   1328.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              125508.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126770.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16998.371 ops/s
[info]                  ·gc.alloc.rate:               1371.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          126991.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124334.150 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 16808.518 ops/s
[info]                  ·gc.alloc.rate:               1367.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          128019.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125801.677 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 17315.671 ops/s
[info]                  ·gc.alloc.rate:                   1401.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              127357.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122179.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 17016.375 ops/s
[info]                  ·gc.alloc.rate:               1376.745 MB/sec
[info]                  ·gc.alloc.rate.norm:          127340.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123948.940 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   16960.210 ±(99.9%) 948.767 ops/s [Average]
[info]   (min, avg, max) = (16662.113, 16960.210, 17315.671), stdev = 246.392
[info]   CI (99.9%): [16011.443, 17908.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1369.202 ±(99.9%) 100.435 MB/sec [Average]
[info]   (min, avg, max) = (1328.892, 1369.202, 1401.280), stdev = 26.083
[info]   CI (99.9%): [1268.767, 1469.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   127043.458 ±(99.9%) 3600.542 B/op [Average]
[info]   (min, avg, max) = (125508.715, 127043.458, 128019.425), stdev = 935.049
[info]   CI (99.9%): [123442.916, 130644.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.668 ±(99.9%) 6.281 MB/sec [Average]
[info]   (min, avg, max) = (1340.077, 1342.668, 1344.311), stdev = 1.631
[info]   CI (99.9%): [1336.387, 1348.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   124606.909 ±(99.9%) 6809.080 B/op [Average]
[info]   (min, avg, max) = (122179.477, 124606.909, 126770.303), stdev = 1768.296
[info]   CI (99.9%): [117797.830, 131415.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.685), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.764 ±(99.9%) 575.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.764, 334.889), stdev = 149.337
[info]   CI (99.9%): [≈ 0, 642.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.43% complete, ETA 02:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9719.075 ops/s
[info] # Warmup Iteration   2: 34779.725 ops/s
[info] # Warmup Iteration   3: 36637.395 ops/s
[info] # Warmup Iteration   4: 37241.267 ops/s
[info] # Warmup Iteration   5: 36783.511 ops/s
[info] Iteration   1: 37906.763 ops/s
[info]                  ·gc.alloc.rate:                   1050.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              43610.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55422.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 37856.332 ops/s
[info]                  ·gc.alloc.rate:                   1049.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              43620.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55551.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.731 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 38083.006 ops/s
[info]                  ·gc.alloc.rate:                   1036.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              42844.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27637.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.860 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37827.737 ops/s
[info]                  ·gc.alloc.rate:                   1066.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              44384.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55662.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 36657.074 ops/s
[info]                  ·gc.alloc.rate:               996.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          42793.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28725.955 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   37666.183 ±(99.9%) 2205.463 ops/s [Average]
[info]   (min, avg, max) = (36657.074, 37666.183, 38083.006), stdev = 572.752
[info]   CI (99.9%): [35460.720, 39871.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1040.058 ±(99.9%) 101.725 MB/sec [Average]
[info]   (min, avg, max) = (996.838, 1040.058, 1066.895), stdev = 26.418
[info]   CI (99.9%): [938.333, 1141.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43450.656 ±(99.9%) 2528.776 B/op [Average]
[info]   (min, avg, max) = (42793.380, 43450.656, 44384.299), stdev = 656.715
[info]   CI (99.9%): [40921.880, 45979.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.444 ±(99.9%) 1407.677 MB/sec [Average]
[info]   (min, avg, max) = (668.820, 1069.444, 1338.009), stdev = 365.569
[info]   CI (99.9%): [≈ 0, 2477.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44600.040 ±(99.9%) 57732.508 B/op [Average]
[info]   (min, avg, max) = (27637.570, 44600.040, 55662.990), stdev = 14992.949
[info]   CI (99.9%): [≈ 0, 102332.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.210 ±(99.9%) 3.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.210, 2.593), stdev = 0.986
[info]   CI (99.9%): [≈ 0, 5.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.63% complete, ETA 02:04:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19217.416 ops/s
[info] # Warmup Iteration   2: 39244.143 ops/s
[info] # Warmup Iteration   3: 41450.493 ops/s
[info] # Warmup Iteration   4: 37996.550 ops/s
[info] # Warmup Iteration   5: 41619.425 ops/s
[info] Iteration   1: 41309.536 ops/s
[info]                  ·gc.alloc.rate:                   618.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              23547.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25517.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39392.403 ops/s
[info]                  ·gc.alloc.rate:      578.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 23115.518 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 40365.310 ops/s
[info]                  ·gc.alloc.rate:               607.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          23688.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26100.777 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 40567.057 ops/s
[info]                  ·gc.alloc.rate:               606.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          23511.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25972.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 41918.545 ops/s
[info]                  ·gc.alloc.rate:               623.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          23411.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25108.405 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   40710.570 ±(99.9%) 3701.093 ops/s [Average]
[info]   (min, avg, max) = (39392.403, 40710.570, 41918.545), stdev = 961.162
[info]   CI (99.9%): [37009.477, 44411.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   606.792 ±(99.9%) 66.869 MB/sec [Average]
[info]   (min, avg, max) = (578.607, 606.792, 623.612), stdev = 17.366
[info]   CI (99.9%): [539.923, 673.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23454.959 ±(99.9%) 824.231 B/op [Average]
[info]   (min, avg, max) = (23115.518, 23454.959, 23688.223), stdev = 214.050
[info]   CI (99.9%): [22630.728, 24279.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   535.512 ±(99.9%) 1152.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.512, 669.802), stdev = 299.361
[info]   CI (99.9%): [≈ 0, 1688.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20539.815 ±(99.9%) 44239.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20539.815, 26100.777), stdev = 11488.802
[info]   CI (99.9%): [≈ 0, 64779.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.562 ±(99.9%) 4.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.810), stdev = 1.257
[info]   CI (99.9%): [≈ 0, 5.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.413 ±(99.9%) 184.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.413, 107.064), stdev = 47.881
[info]   CI (99.9%): [≈ 0, 205.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.83% complete, ETA 02:03:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2186.154 ops/s
[info] # Warmup Iteration   2: 24494.846 ops/s
[info] # Warmup Iteration   3: 28849.010 ops/s
[info] # Warmup Iteration   4: 28858.401 ops/s
[info] # Warmup Iteration   5: 29720.152 ops/s
[info] Iteration   1: 30109.757 ops/s
[info]                  ·gc.alloc.rate:               1512.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          79044.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69866.764 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 29918.930 ops/s
[info]                  ·gc.alloc.rate:                   1498.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              78828.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70345.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 30083.248 ops/s
[info]                  ·gc.alloc.rate:                   1517.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              79392.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70011.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 30067.043 ops/s
[info]                  ·gc.alloc.rate:                   1543.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              80766.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104913.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30140.893 ops/s
[info]                  ·gc.alloc.rate:               1532.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          80013.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69561.895 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30063.974 ±(99.9%) 330.300 ops/s [Average]
[info]   (min, avg, max) = (29918.930, 30063.974, 30140.893), stdev = 85.778
[info]   CI (99.9%): [29733.674, 30394.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1520.940 ±(99.9%) 67.025 MB/sec [Average]
[info]   (min, avg, max) = (1498.734, 1520.940, 1543.354), stdev = 17.406
[info]   CI (99.9%): [1453.915, 1587.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79609.201 ±(99.9%) 3030.717 B/op [Average]
[info]   (min, avg, max) = (78828.972, 79609.201, 80766.637), stdev = 787.067
[info]   CI (99.9%): [76578.484, 82639.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.943 ±(99.9%) 1151.289 MB/sec [Average]
[info]   (min, avg, max) = (1332.296, 1469.943, 2004.770), stdev = 298.986
[info]   CI (99.9%): [318.654, 2621.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76939.880 ±(99.9%) 60224.859 B/op [Average]
[info]   (min, avg, max) = (69561.895, 76939.880, 104913.386), stdev = 15640.205
[info]   CI (99.9%): [16715.022, 137164.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 6.524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.891, 3.893), stdev = 1.694
[info]   CI (99.9%): [≈ 0, 7.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46.615 ±(99.9%) 341.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.615, 203.650), stdev = 88.618
[info]   CI (99.9%): [≈ 0, 387.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.03% complete, ETA 02:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7329.729 ops/s
[info] # Warmup Iteration   2: 22139.994 ops/s
[info] # Warmup Iteration   3: 24541.040 ops/s
[info] # Warmup Iteration   4: 24619.401 ops/s
[info] # Warmup Iteration   5: 24248.051 ops/s
[info] Iteration   1: 24530.356 ops/s
[info]                  ·gc.alloc.rate:               1790.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          114820.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129191.606 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 24851.725 ops/s
[info]                  ·gc.alloc.rate:                   1791.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              113459.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85043.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 24483.478 ops/s
[info]                  ·gc.alloc.rate:                   1790.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              115048.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129182.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24746.097 ops/s
[info]                  ·gc.alloc.rate:               1781.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          113259.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85107.837 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 24433.335 ops/s
[info]                  ·gc.alloc.rate:                   1775.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              114392.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129323.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   24608.998 ±(99.9%) 695.545 ops/s [Average]
[info]   (min, avg, max) = (24433.335, 24608.998, 24851.725), stdev = 180.631
[info]   CI (99.9%): [23913.453, 25304.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1785.824 ±(99.9%) 26.772 MB/sec [Average]
[info]   (min, avg, max) = (1775.933, 1785.824, 1791.651), stdev = 6.953
[info]   CI (99.9%): [1759.052, 1812.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   114196.078 ±(99.9%) 3089.327 B/op [Average]
[info]   (min, avg, max) = (113259.529, 114196.078, 115048.597), stdev = 802.288
[info]   CI (99.9%): [111106.750, 117285.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.702 ±(99.9%) 1413.309 MB/sec [Average]
[info]   (min, avg, max) = (1338.369, 1742.702, 2014.076), stdev = 367.032
[info]   CI (99.9%): [329.393, 3156.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   111569.844 ±(99.9%) 93130.842 B/op [Average]
[info]   (min, avg, max) = (85043.618, 111569.844, 129323.515), stdev = 24185.784
[info]   CI (99.9%): [18439.002, 204700.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.705), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48.537 ±(99.9%) 400.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.537, 234.650), stdev = 104.060
[info]   CI (99.9%): [≈ 0, 449.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.23% complete, ETA 02:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7331.218 ops/s
[info] # Warmup Iteration   2: 22918.238 ops/s
[info] # Warmup Iteration   3: 24924.404 ops/s
[info] # Warmup Iteration   4: 24812.102 ops/s
[info] # Warmup Iteration   5: 24783.857 ops/s
[info] Iteration   1: 24697.143 ops/s
[info]                  ·gc.alloc.rate:               1567.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          99900.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85152.759 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 24902.855 ops/s
[info]                  ·gc.alloc.rate:                   1610.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              101787.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126836.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 24423.054 ops/s
[info]                  ·gc.alloc.rate:                   1555.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              100229.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86150.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24461.507 ops/s
[info]                  ·gc.alloc.rate:               1553.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          99965.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85831.538 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 24896.545 ops/s
[info]                  ·gc.alloc.rate:               1583.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          100086.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84293.654 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   24676.221 ±(99.9%) 883.426 ops/s [Average]
[info]   (min, avg, max) = (24423.054, 24676.221, 24902.855), stdev = 229.423
[info]   CI (99.9%): [23792.794, 25559.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1574.326 ±(99.9%) 90.731 MB/sec [Average]
[info]   (min, avg, max) = (1553.941, 1574.326, 1610.756), stdev = 23.562
[info]   CI (99.9%): [1483.595, 1665.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   100393.846 ±(99.9%) 3038.121 B/op [Average]
[info]   (min, avg, max) = (99900.781, 100393.846, 101787.318), stdev = 788.990
[info]   CI (99.9%): [97355.726, 103431.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.698 ±(99.9%) 1156.908 MB/sec [Average]
[info]   (min, avg, max) = (1333.620, 1469.698, 2007.145), stdev = 300.445
[info]   CI (99.9%): [312.790, 2626.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   93652.965 ±(99.9%) 71481.716 B/op [Average]
[info]   (min, avg, max) = (84293.654, 93652.965, 126836.063), stdev = 18563.575
[info]   CI (99.9%): [22171.249, 165134.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.631 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.372), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   51.208 ±(99.9%) 355.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.208, 213.112), stdev = 92.396
[info]   CI (99.9%): [≈ 0, 406.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 11.000), stdev = 3.768
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.43% complete, ETA 02:03:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11409.494 ops/s
[info] # Warmup Iteration   2: 25121.924 ops/s
[info] # Warmup Iteration   3: 26987.559 ops/s
[info] # Warmup Iteration   4: 27176.620 ops/s
[info] # Warmup Iteration   5: 26451.075 ops/s
[info] Iteration   1: 26360.339 ops/s
[info]                  ·gc.alloc.rate:                   1569.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              93692.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120423.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.243 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 26800.426 ops/s
[info]                  ·gc.alloc.rate:                   1582.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              92939.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79019.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 26372.239 ops/s
[info]                  ·gc.alloc.rate:                   1556.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              92910.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80219.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26725.277 ops/s
[info]                  ·gc.alloc.rate:                   1578.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              92940.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79042.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27083.093 ops/s
[info]                  ·gc.alloc.rate:                   1609.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              93533.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116938.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.210 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   26668.275 ±(99.9%) 1179.406 ops/s [Average]
[info]   (min, avg, max) = (26360.339, 26668.275, 27083.093), stdev = 306.288
[info]   CI (99.9%): [25488.869, 27847.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1579.509 ±(99.9%) 75.259 MB/sec [Average]
[info]   (min, avg, max) = (1556.922, 1579.509, 1609.717), stdev = 19.545
[info]   CI (99.9%): [1504.250, 1654.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93203.234 ±(99.9%) 1458.103 B/op [Average]
[info]   (min, avg, max) = (92910.149, 93203.234, 93692.702), stdev = 378.665
[info]   CI (99.9%): [91745.131, 94661.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.499 ±(99.9%) 1415.284 MB/sec [Average]
[info]   (min, avg, max) = (1342.320, 1612.499, 2017.720), stdev = 367.545
[info]   CI (99.9%): [197.215, 3027.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   95128.707 ±(99.9%) 82946.725 B/op [Average]
[info]   (min, avg, max) = (79019.717, 95128.707, 120423.581), stdev = 21541.001
[info]   CI (99.9%): [12181.982, 178075.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 4.053 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.679, 2.436), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.025 ±(99.9%) 238.188 B/op [Average]
[info]   (min, avg, max) = (1.210, 40.025, 143.028), stdev = 61.857
[info]   CI (99.9%): [≈ 0, 278.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7.63% complete, ETA 02:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11239.052 ops/s
[info] # Warmup Iteration   2: 25883.411 ops/s
[info] # Warmup Iteration   3: 26499.672 ops/s
[info] # Warmup Iteration   4: 27225.955 ops/s
[info] # Warmup Iteration   5: 26833.921 ops/s
[info] Iteration   1: 27626.266 ops/s
[info]                  ·gc.alloc.rate:               1577.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          89863.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76657.505 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 27499.611 ops/s
[info]                  ·gc.alloc.rate:                   1583.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              90626.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115589.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.517 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 27825.722 ops/s
[info]                  ·gc.alloc.rate:                   1585.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              89693.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76103.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27862.730 ops/s
[info]                  ·gc.alloc.rate:                   1588.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              89722.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75889.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27787.012 ops/s
[info]                  ·gc.alloc.rate:                   1584.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              89721.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76019.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27720.268 ±(99.9%) 588.395 ops/s [Average]
[info]   (min, avg, max) = (27499.611, 27720.268, 27862.730), stdev = 152.804
[info]   CI (99.9%): [27131.874, 28308.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1584.000 ±(99.9%) 15.726 MB/sec [Average]
[info]   (min, avg, max) = (1577.560, 1584.000, 1588.615), stdev = 4.084
[info]   CI (99.9%): [1568.274, 1599.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   89925.511 ±(99.9%) 1530.895 B/op [Average]
[info]   (min, avg, max) = (89693.779, 89925.511, 90626.679), stdev = 397.569
[info]   CI (99.9%): [88394.615, 91456.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1479.442 ±(99.9%) 1163.188 MB/sec [Average]
[info]   (min, avg, max) = (1342.339, 1479.442, 2019.806), stdev = 302.076
[info]   CI (99.9%): [316.255, 2642.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   84051.987 ±(99.9%) 67895.712 B/op [Average]
[info]   (min, avg, max) = (75889.978, 84051.987, 115589.254), stdev = 17632.301
[info]   CI (99.9%): [16156.275, 151947.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 3.576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 2.123), stdev = 0.929
[info]   CI (99.9%): [≈ 0, 4.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   38.198 ±(99.9%) 204.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.198, 121.517), stdev = 53.082
[info]   CI (99.9%): [≈ 0, 242.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.83% complete, ETA 02:02:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2646.132 ops/s
[info] # Warmup Iteration   2: 6512.701 ops/s
[info] # Warmup Iteration   3: 7669.733 ops/s
[info] # Warmup Iteration   4: 7821.725 ops/s
[info] # Warmup Iteration   5: 7813.440 ops/s
[info] Iteration   1: 7816.101 ops/s
[info]                  ·gc.alloc.rate:               1173.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          236206.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269721.967 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 7720.724 ops/s
[info]                  ·gc.alloc.rate:               1151.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          234725.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 273210.944 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 7863.921 ops/s
[info]                  ·gc.alloc.rate:                   1152.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              230719.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134104.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7787.251 ops/s
[info]                  ·gc.alloc.rate:               1181.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          238793.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 271095.259 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 7840.128 ops/s
[info]                  ·gc.alloc.rate:                   1171.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              235110.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269263.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 793.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7805.625 ±(99.9%) 213.046 ops/s [Average]
[info]   (min, avg, max) = (7720.724, 7805.625, 7863.921), stdev = 55.327
[info]   CI (99.9%): [7592.579, 8018.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1166.216 ±(99.9%) 51.349 MB/sec [Average]
[info]   (min, avg, max) = (1151.557, 1166.216, 1181.715), stdev = 13.335
[info]   CI (99.9%): [1114.867, 1217.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   235110.882 ±(99.9%) 11258.393 B/op [Average]
[info]   (min, avg, max) = (230719.193, 235110.882, 238793.064), stdev = 2923.769
[info]   CI (99.9%): [223852.488, 246369.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206.722 ±(99.9%) 1155.036 MB/sec [Average]
[info]   (min, avg, max) = (670.140, 1206.722, 1341.569), stdev = 299.959
[info]   CI (99.9%): [51.687, 2361.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   243479.231 ±(99.9%) 235511.112 B/op [Average]
[info]   (min, avg, max) = (134104.685, 243479.231, 273210.944), stdev = 61161.488
[info]   CI (99.9%): [7968.119, 478990.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.955), stdev = 1.764
[info]   CI (99.9%): [≈ 0, 7.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   160.430 ±(99.9%) 1363.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.430, 793.819), stdev = 354.093
[info]   CI (99.9%): [≈ 0, 1523.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.03% complete, ETA 02:02:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4834.004 ops/s
[info] # Warmup Iteration   2: 13688.587 ops/s
[info] # Warmup Iteration   3: 17892.540 ops/s
[info] # Warmup Iteration   4: 18053.916 ops/s
[info] # Warmup Iteration   5: 17747.287 ops/s
[info] Iteration   1: 17863.512 ops/s
[info]                  ·gc.alloc.rate:               1617.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          142478.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118373.414 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17382.496 ops/s
[info]                  ·gc.alloc.rate:                   1638.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              148293.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182552.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 214.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 18093.699 ops/s
[info]                  ·gc.alloc.rate:                   1650.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              143556.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116804.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18022.504 ops/s
[info]                  ·gc.alloc.rate:                   1641.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              143345.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117031.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17772.911 ops/s
[info]                  ·gc.alloc.rate:                   1633.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              144641.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177849.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17827.024 ±(99.9%) 1074.034 ops/s [Average]
[info]   (min, avg, max) = (17382.496, 17827.024, 18093.699), stdev = 278.923
[info]   CI (99.9%): [16752.990, 18901.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1636.232 ±(99.9%) 47.311 MB/sec [Average]
[info]   (min, avg, max) = (1617.326, 1636.232, 1650.600), stdev = 12.287
[info]   CI (99.9%): [1588.920, 1683.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144463.038 ±(99.9%) 8762.070 B/op [Average]
[info]   (min, avg, max) = (142478.730, 144463.038, 148293.388), stdev = 2275.482
[info]   CI (99.9%): [135700.968, 153225.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.410 ±(99.9%) 1413.505 MB/sec [Average]
[info]   (min, avg, max) = (1340.310, 1610.410, 2016.432), stdev = 367.083
[info]   CI (99.9%): [196.905, 3023.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   142522.423 ±(99.9%) 132620.562 B/op [Average]
[info]   (min, avg, max) = (116804.576, 142522.423, 182552.456), stdev = 34441.139
[info]   CI (99.9%): [9901.861, 275142.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 2.373), stdev = 1.061
[info]   CI (99.9%): [≈ 0, 4.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.160 ±(99.9%) 367.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.160, 214.847), stdev = 95.511
[info]   CI (99.9%): [≈ 0, 433.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.23% complete, ETA 02:02:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15591.267 ops/s
[info] # Warmup Iteration   2: 36195.147 ops/s
[info] # Warmup Iteration   3: 42444.368 ops/s
[info] # Warmup Iteration   4: 40861.768 ops/s
[info] # Warmup Iteration   5: 41389.179 ops/s
[info] Iteration   1: 41866.419 ops/s
[info]                  ·gc.alloc.rate:               1198.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          45030.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50081.242 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 41558.223 ops/s
[info]                  ·gc.alloc.rate:                   1178.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              44610.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50451.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.788 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42917.184 ops/s
[info]                  ·gc.alloc.rate:                   1210.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              44401.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48878.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42291.364 ops/s
[info]                  ·gc.alloc.rate:               1178.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          43839.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24826.214 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 41322.416 ops/s
[info]                  ·gc.alloc.rate:               1164.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          44367.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50868.495 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41991.121 ±(99.9%) 2433.729 ops/s [Average]
[info]   (min, avg, max) = (41322.416, 41991.121, 42917.184), stdev = 632.032
[info]   CI (99.9%): [39557.392, 44424.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1186.008 ±(99.9%) 70.266 MB/sec [Average]
[info]   (min, avg, max) = (1164.991, 1186.008, 1210.912), stdev = 18.248
[info]   CI (99.9%): [1115.742, 1256.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44449.923 ±(99.9%) 1661.563 B/op [Average]
[info]   (min, avg, max) = (43839.426, 44449.923, 45030.689), stdev = 431.503
[info]   CI (99.9%): [42788.360, 46111.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.099 ±(99.9%) 1147.229 MB/sec [Average]
[info]   (min, avg, max) = (667.148, 1200.099, 1335.697), stdev = 297.932
[info]   CI (99.9%): [52.870, 2347.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45021.082 ±(99.9%) 43564.802 B/op [Average]
[info]   (min, avg, max) = (24826.214, 45021.082, 50868.495), stdev = 11313.641
[info]   CI (99.9%): [1456.280, 88585.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.310 ±(99.9%) 1.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.310, 0.788), stdev = 0.425
[info]   CI (99.9%): [≈ 0, 1.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.43% complete, ETA 02:01:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29129.634 ops/s
[info] # Warmup Iteration   2: 61272.729 ops/s
[info] # Warmup Iteration   3: 62021.126 ops/s
[info] # Warmup Iteration   4: 59906.550 ops/s
[info] # Warmup Iteration   5: 62110.666 ops/s
[info] Iteration   1: 62473.247 ops/s
[info]                  ·gc.alloc.rate:                   851.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              21460.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33813.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 62004.302 ops/s
[info]                  ·gc.alloc.rate:               818.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          20776.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17043.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 62835.851 ops/s
[info]                  ·gc.alloc.rate:                   828.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              20759.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16834.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 62573.534 ops/s
[info]                  ·gc.alloc.rate:               826.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          20783.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16904.950 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 62823.683 ops/s
[info]                  ·gc.alloc.rate:               838.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          21000.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16845.231 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   62542.123 ±(99.9%) 1306.574 ops/s [Average]
[info]   (min, avg, max) = (62004.302, 62542.123, 62835.851), stdev = 339.313
[info]   CI (99.9%): [61235.549, 63848.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   832.829 ±(99.9%) 49.342 MB/sec [Average]
[info]   (min, avg, max) = (818.571, 832.829, 851.941), stdev = 12.814
[info]   CI (99.9%): [783.487, 882.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20956.159 ±(99.9%) 1151.655 B/op [Average]
[info]   (min, avg, max) = (20759.051, 20956.159, 21460.994), stdev = 299.081
[info]   CI (99.9%): [19804.504, 22107.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.122 ±(99.9%) 1154.181 MB/sec [Average]
[info]   (min, avg, max) = (671.505, 806.122, 1342.307), stdev = 299.737
[info]   CI (99.9%): [≈ 0, 1960.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20288.294 ±(99.9%) 29116.144 B/op [Average]
[info]   (min, avg, max) = (16834.209, 20288.294, 33813.665), stdev = 7561.370
[info]   CI (99.9%): [≈ 0, 49404.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.523 ±(99.9%) 2.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.523, 1.564), stdev = 0.738
[info]   CI (99.9%): [≈ 0, 3.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.63% complete, ETA 02:01:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3806.590 ops/s
[info] # Warmup Iteration   2: 25519.559 ops/s
[info] # Warmup Iteration   3: 32436.365 ops/s
[info] # Warmup Iteration   4: 32702.970 ops/s
[info] # Warmup Iteration   5: 31464.289 ops/s
[info] Iteration   1: 32698.322 ops/s
[info]                  ·gc.alloc.rate:                   2143.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              103156.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96454.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 32227.669 ops/s
[info]                  ·gc.alloc.rate:                   2139.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              104459.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98162.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.747 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 32116.288 ops/s
[info]                  ·gc.alloc.rate:               2103.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          103093.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98629.405 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 32464.059 ops/s
[info]                  ·gc.alloc.rate:               2170.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          105123.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130161.610 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 31743.024 ops/s
[info]                  ·gc.alloc.rate:                   2109.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              104561.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100266.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   32249.872 ±(99.9%) 1391.324 ops/s [Average]
[info]   (min, avg, max) = (31743.024, 32249.872, 32698.322), stdev = 361.322
[info]   CI (99.9%): [30858.549, 33641.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2133.259 ±(99.9%) 104.306 MB/sec [Average]
[info]   (min, avg, max) = (2103.999, 2133.259, 2170.178), stdev = 27.088
[info]   CI (99.9%): [2028.953, 2237.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   104079.193 ±(99.9%) 3492.264 B/op [Average]
[info]   (min, avg, max) = (103093.998, 104079.193, 105123.758), stdev = 906.930
[info]   CI (99.9%): [100586.929, 107571.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2147.439 ±(99.9%) 1161.857 MB/sec [Average]
[info]   (min, avg, max) = (2004.266, 2147.439, 2687.060), stdev = 301.731
[info]   CI (99.9%): [985.582, 3309.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104735.038 ±(99.9%) 54981.877 B/op [Average]
[info]   (min, avg, max) = (96454.501, 104735.038, 130161.610), stdev = 14278.619
[info]   CI (99.9%): [49753.161, 159716.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.200 ±(99.9%) 1.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.937), stdev = 0.412
[info]   CI (99.9%): [≈ 0, 1.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.757 ±(99.9%) 77.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.757, 45.747), stdev = 20.136
[info]   CI (99.9%): [≈ 0, 87.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.84% complete, ETA 02:01:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10780.525 ops/s
[info] # Warmup Iteration   2: 25141.705 ops/s
[info] # Warmup Iteration   3: 27484.229 ops/s
[info] # Warmup Iteration   4: 27039.237 ops/s
[info] # Warmup Iteration   5: 26806.579 ops/s
[info] Iteration   1: 26712.737 ops/s
[info]                  ·gc.alloc.rate:                   1716.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              101093.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118287.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 27397.122 ops/s
[info]                  ·gc.alloc.rate:                   1742.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              100066.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76950.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27545.046 ops/s
[info]                  ·gc.alloc.rate:               1779.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          101682.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114482.836 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 27581.377 ops/s
[info]                  ·gc.alloc.rate:               1754.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          100093.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76171.614 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 27591.964 ops/s
[info]                  ·gc.alloc.rate:               1796.051 MB/sec
[info]                  ·gc.alloc.rate.norm:          102437.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114245.735 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27365.649 ±(99.9%) 1437.205 ops/s [Average]
[info]   (min, avg, max) = (26712.737, 27365.649, 27591.964), stdev = 373.238
[info]   CI (99.9%): [25928.444, 28802.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1757.652 ±(99.9%) 120.960 MB/sec [Average]
[info]   (min, avg, max) = (1716.049, 1757.652, 1796.051), stdev = 31.413
[info]   CI (99.9%): [1636.692, 1878.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101074.832 ±(99.9%) 3949.191 B/op [Average]
[info]   (min, avg, max) = (100066.102, 101074.832, 102437.614), stdev = 1025.592
[info]   CI (99.9%): [97125.640, 105024.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.900 ±(99.9%) 1408.015 MB/sec [Average]
[info]   (min, avg, max) = (1335.023, 1737.900, 2007.909), stdev = 365.657
[info]   CI (99.9%): [329.885, 3145.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100027.743 ±(99.9%) 82725.632 B/op [Average]
[info]   (min, avg, max) = (76171.614, 100027.743, 118287.599), stdev = 21483.584
[info]   CI (99.9%): [17302.110, 182753.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.615 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.851), stdev = 1.718
[info]   CI (99.9%): [≈ 0, 7.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44.734 ±(99.9%) 379.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.734, 221.220), stdev = 98.664
[info]   CI (99.9%): [≈ 0, 424.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.04% complete, ETA 02:01:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14028.152 ops/s
[info] # Warmup Iteration   2: 32936.974 ops/s
[info] # Warmup Iteration   3: 33838.391 ops/s
[info] # Warmup Iteration   4: 32676.050 ops/s
[info] # Warmup Iteration   5: 34804.219 ops/s
[info] Iteration   1: 34570.418 ops/s
[info]                  ·gc.alloc.rate:                   1548.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              70499.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61227.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34729.514 ops/s
[info]                  ·gc.alloc.rate:                   1562.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              70796.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60977.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.943 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 34587.804 ops/s
[info]                  ·gc.alloc.rate:                   1556.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              70839.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91872.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 34659.598 ops/s
[info]                  ·gc.alloc.rate:                   1572.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              71383.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61011.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34736.903 ops/s
[info]                  ·gc.alloc.rate:                   1559.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              70666.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60844.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34656.847 ±(99.9%) 297.858 ops/s [Average]
[info]   (min, avg, max) = (34570.418, 34656.847, 34736.903), stdev = 77.353
[info]   CI (99.9%): [34358.989, 34954.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1559.986 ±(99.9%) 32.904 MB/sec [Average]
[info]   (min, avg, max) = (1548.636, 1559.986, 1572.168), stdev = 8.545
[info]   CI (99.9%): [1527.081, 1592.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   70837.218 ±(99.9%) 1282.308 B/op [Average]
[info]   (min, avg, max) = (70499.562, 70837.218, 71383.857), stdev = 333.011
[info]   CI (99.9%): [69554.910, 72119.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.323 ±(99.9%) 1162.137 MB/sec [Average]
[info]   (min, avg, max) = (1343.058, 1479.323, 2019.202), stdev = 301.803
[info]   CI (99.9%): [317.186, 2641.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   67186.932 ±(99.9%) 53139.974 B/op [Average]
[info]   (min, avg, max) = (60844.752, 67186.932, 91872.401), stdev = 13800.282
[info]   CI (99.9%): [14046.959, 120326.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.620 ±(99.9%) 5.073 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.620, 2.977), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28.224 ±(99.9%) 230.823 B/op [Average]
[info]   (min, avg, max) = (0.943, 28.224, 135.452), stdev = 59.944
[info]   CI (99.9%): [≈ 0, 259.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 02:00:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15279.529 ops/s
[info] # Warmup Iteration   2: 32181.182 ops/s
[info] # Warmup Iteration   3: 34321.564 ops/s
[info] # Warmup Iteration   4: 33967.038 ops/s
[info] # Warmup Iteration   5: 34286.444 ops/s
[info] Iteration   1: 34353.794 ops/s
[info]                  ·gc.alloc.rate:                   1488.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              68185.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61641.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34341.090 ops/s
[info]                  ·gc.alloc.rate:                   1473.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              67531.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61697.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34407.513 ops/s
[info]                  ·gc.alloc.rate:                   1498.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              68549.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61607.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34476.002 ops/s
[info]                  ·gc.alloc.rate:               1490.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          68024.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61348.323 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34386.504 ops/s
[info]                  ·gc.alloc.rate:                   1500.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              68684.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61462.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   34392.981 ±(99.9%) 205.332 ops/s [Average]
[info]   (min, avg, max) = (34341.090, 34392.981, 34476.002), stdev = 53.324
[info]   CI (99.9%): [34187.648, 34598.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1490.409 ±(99.9%) 41.392 MB/sec [Average]
[info]   (min, avg, max) = (1473.631, 1490.409, 1500.767), stdev = 10.749
[info]   CI (99.9%): [1449.017, 1531.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68194.969 ±(99.9%) 1757.999 B/op [Average]
[info]   (min, avg, max) = (67531.593, 68194.969, 68684.016), stdev = 456.547
[info]   CI (99.9%): [66436.970, 69952.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1345.205 ±(99.9%) 6.305 MB/sec [Average]
[info]   (min, avg, max) = (1342.967, 1345.205, 1346.983), stdev = 1.637
[info]   CI (99.9%): [1338.900, 1351.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   61551.297 ±(99.9%) 550.273 B/op [Average]
[info]   (min, avg, max) = (61348.323, 61551.297, 61697.103), stdev = 142.904
[info]   CI (99.9%): [61001.024, 62101.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.081), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 5.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   28.755 ±(99.9%) 241.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.755, 140.917), stdev = 62.702
[info]   CI (99.9%): [≈ 0, 270.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.44% complete, ETA 02:00:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81902.321 ops/s
[info] # Warmup Iteration   2: 298334.617 ops/s
[info] # Warmup Iteration   3: 314382.637 ops/s
[info] # Warmup Iteration   4: 327140.290 ops/s
[info] # Warmup Iteration   5: 328360.560 ops/s
[info] Iteration   1: 326292.377 ops/s
[info]                  ·gc.alloc.rate:                   1843.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              8893.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9715.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 328282.235 ops/s
[info]                  ·gc.alloc.rate:                   1865.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              8941.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9657.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 328684.086 ops/s
[info]                  ·gc.alloc.rate:                   1843.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              8826.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6414.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 327755.626 ops/s
[info]                  ·gc.alloc.rate:                   1862.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              8942.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9637.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 328682.056 ops/s
[info]                  ·gc.alloc.rate:               1882.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          9013.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9618.339 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   327939.276 ±(99.9%) 3836.219 ops/s [Average]
[info]   (min, avg, max) = (326292.377, 327939.276, 328684.086), stdev = 996.254
[info]   CI (99.9%): [324103.057, 331775.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1859.585 ±(99.9%) 63.487 MB/sec [Average]
[info]   (min, avg, max) = (1843.553, 1859.585, 1882.973), stdev = 16.487
[info]   CI (99.9%): [1796.098, 1923.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8923.375 ±(99.9%) 265.055 B/op [Average]
[info]   (min, avg, max) = (8826.908, 8923.375, 9013.268), stdev = 68.834
[info]   CI (99.9%): [8658.320, 9188.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.021 ±(99.9%) 1156.812 MB/sec [Average]
[info]   (min, avg, max) = (1339.643, 1877.021, 2014.524), stdev = 300.420
[info]   CI (99.9%): [720.208, 3033.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9008.590 ±(99.9%) 5586.404 B/op [Average]
[info]   (min, avg, max) = (6414.196, 9008.590, 9715.909), stdev = 1450.771
[info]   CI (99.9%): [3422.186, 14594.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.643), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 6.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.593 ±(99.9%) 29.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.593, 17.464), stdev = 7.755
[info]   CI (99.9%): [≈ 0, 33.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9.64% complete, ETA 02:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.741 ops/s
[info] # Warmup Iteration   2: 1315293.707 ops/s
[info] # Warmup Iteration   3: 1412295.881 ops/s
[info] # Warmup Iteration   4: 1500853.604 ops/s
[info] # Warmup Iteration   5: 1503436.719 ops/s
[info] Iteration   1: 1519792.015 ops/s
[info]                  ·gc.alloc.rate:      479.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1515640.130 ops/s
[info]                  ·gc.alloc.rate:                   494.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              513.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     691.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1514941.940 ops/s
[info]                  ·gc.alloc.rate:               501.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          521.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 692.067 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1503828.618 ops/s
[info]                  ·gc.alloc.rate:                   496.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              519.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     697.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1483224.326 ops/s
[info]                  ·gc.alloc.rate:      467.506 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1507485.406 ±(99.9%) 56968.848 ops/s [Average]
[info]   (min, avg, max) = (1483224.326, 1507485.406, 1519792.015), stdev = 14794.629
[info]   CI (99.9%): [1450516.558, 1564454.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   487.970 ±(99.9%) 55.007 MB/sec [Average]
[info]   (min, avg, max) = (467.506, 487.970, 501.956), stdev = 14.285
[info]   CI (99.9%): [432.963, 542.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   509.330 ±(99.9%) 48.302 B/op [Average]
[info]   (min, avg, max) = (496.000, 509.330, 521.405), stdev = 12.544
[info]   CI (99.9%): [461.028, 557.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.839 ±(99.9%) 1405.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.839, 666.685), stdev = 365.001
[info]   CI (99.9%): [≈ 0, 1805.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   416.264 ±(99.9%) 1463.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 416.264, 697.508), stdev = 380.002
[info]   CI (99.9%): [≈ 0, 1879.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.032), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.033), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.84% complete, ETA 02:00:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206645.301 ops/s
[info] # Warmup Iteration   2: 650200.971 ops/s
[info] # Warmup Iteration   3: 681375.071 ops/s
[info] # Warmup Iteration   4: 675885.223 ops/s
[info] # Warmup Iteration   5: 660107.457 ops/s
[info] Iteration   1: 659704.722 ops/s
[info]                  ·gc.alloc.rate:      509.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 658948.402 ops/s
[info]                  ·gc.alloc.rate:               525.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          1253.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1590.181 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 658459.103 ops/s
[info]                  ·gc.alloc.rate:                   525.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              1256.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 662603.437 ops/s
[info]                  ·gc.alloc.rate:               530.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          1260.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1583.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 683890.317 ops/s
[info]                  ·gc.alloc.rate:      528.432 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   664721.196 ±(99.9%) 41724.178 ops/s [Average]
[info]   (min, avg, max) = (658459.103, 664721.196, 683890.317), stdev = 10835.636
[info]   CI (99.9%): [622997.018, 706445.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   523.942 ±(99.9%) 31.637 MB/sec [Average]
[info]   (min, avg, max) = (509.861, 523.942, 530.861), stdev = 8.216
[info]   CI (99.9%): [492.304, 555.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1240.551 ±(99.9%) 86.846 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1240.551, 1260.846), stdev = 22.554
[info]   CI (99.9%): [1153.705, 1327.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   399.697 ±(99.9%) 1404.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.697, 666.818), stdev = 364.872
[info]   CI (99.9%): [≈ 0, 1804.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   953.056 ±(99.9%) 3350.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 953.056, 1591.340), stdev = 870.022
[info]   CI (99.9%): [≈ 0, 4303.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.04% complete, ETA 01:59:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 786155.484 ops/s
[info] # Warmup Iteration   2: 1833985.470 ops/s
[info] # Warmup Iteration   3: 1852654.613 ops/s
[info] # Warmup Iteration   4: 1888694.583 ops/s
[info] # Warmup Iteration   5: 1873498.121 ops/s
[info] Iteration   1: 1880304.669 ops/s
[info]                  ·gc.alloc.rate:               379.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          317.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 428.231 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1871900.452 ops/s
[info]                  ·gc.alloc.rate:               375.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 430.142 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1885071.950 ops/s
[info]                  ·gc.alloc.rate:      364.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1833655.213 ops/s
[info]                  ·gc.alloc.rate:               388.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          333.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 575.472 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1877689.823 ops/s
[info]                  ·gc.alloc.rate:      362.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1869724.422 ±(99.9%) 79771.058 ops/s [Average]
[info]   (min, avg, max) = (1833655.213, 1869724.422, 1885071.950), stdev = 20716.291
[info]   CI (99.9%): [1789953.363, 1949495.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   374.002 ±(99.9%) 41.119 MB/sec [Average]
[info]   (min, avg, max) = (362.727, 374.002, 388.241), stdev = 10.679
[info]   CI (99.9%): [332.883, 415.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   314.863 ±(99.9%) 46.227 B/op [Average]
[info]   (min, avg, max) = (304.000, 314.863, 333.129), stdev = 12.005
[info]   CI (99.9%): [268.636, 361.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.807 ±(99.9%) 1216.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.807, 670.676), stdev = 316.025
[info]   CI (99.9%): [≈ 0, 1555.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   286.769 ±(99.9%) 1033.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 286.769, 575.472), stdev = 268.509
[info]   CI (99.9%): [≈ 0, 1320.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.24% complete, ETA 01:59:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11766.653 ops/s
[info] # Warmup Iteration   2: 81381.976 ops/s
[info] # Warmup Iteration   3: 98622.091 ops/s
[info] # Warmup Iteration   4: 100410.243 ops/s
[info] # Warmup Iteration   5: 101840.279 ops/s
[info] Iteration   1: 100688.260 ops/s
[info]                  ·gc.alloc.rate:               3341.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          52218.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2668.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41701.888 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 103393.587 ops/s
[info]                  ·gc.alloc.rate:                   3483.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50884.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 103424.405 ops/s
[info]                  ·gc.alloc.rate:               3485.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          53031.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51063.886 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 102725.202 ops/s
[info]                  ·gc.alloc.rate:               3463.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          53060.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51623.098 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 102387.904 ops/s
[info]                  ·gc.alloc.rate:               3453.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          53074.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3380.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51950.103 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   102523.871 ±(99.9%) 4303.366 ops/s [Average]
[info]   (min, avg, max) = (100688.260, 102523.871, 103424.405), stdev = 1117.571
[info]   CI (99.9%): [98220.505, 106827.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3445.386 ±(99.9%) 230.240 MB/sec [Average]
[info]   (min, avg, max) = (3341.054, 3445.386, 3485.152), stdev = 59.793
[info]   CI (99.9%): [3215.146, 3675.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52880.341 ±(99.9%) 1427.139 B/op [Average]
[info]   (min, avg, max) = (52218.637, 52880.341, 53074.694), stdev = 370.623
[info]   CI (99.9%): [51453.202, 54307.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3223.527 ±(99.9%) 1196.693 MB/sec [Average]
[info]   (min, avg, max) = (2668.171, 3223.527, 3380.697), stdev = 310.777
[info]   CI (99.9%): [2026.833, 4420.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49444.611 ±(99.9%) 16747.776 B/op [Average]
[info]   (min, avg, max) = (41701.888, 49444.611, 51950.103), stdev = 4349.344
[info]   CI (99.9%): [32696.835, 66192.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.127 ±(99.9%) 1.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.634), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10.44% complete, ETA 01:59:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186519.788 ops/s
[info] # Warmup Iteration   2: 660588.118 ops/s
[info] # Warmup Iteration   3: 673077.340 ops/s
[info] # Warmup Iteration   4: 660330.797 ops/s
[info] # Warmup Iteration   5: 657222.370 ops/s
[info] Iteration   1: 677279.585 ops/s
[info]                  ·gc.alloc.rate:               1815.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          4218.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4687.044 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 677850.119 ops/s
[info]                  ·gc.alloc.rate:                   1813.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              4210.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3124.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 689673.581 ops/s
[info]                  ·gc.alloc.rate:               1847.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          4216.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4595.257 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 683491.587 ops/s
[info]                  ·gc.alloc.rate:               1833.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          4220.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4630.663 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 684284.632 ops/s
[info]                  ·gc.alloc.rate:                   1831.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              4211.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3085.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   682515.901 ±(99.9%) 19681.772 ops/s [Average]
[info]   (min, avg, max) = (677279.585, 682515.901, 689673.581), stdev = 5111.294
[info]   CI (99.9%): [662834.129, 702197.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1828.283 ±(99.9%) 54.117 MB/sec [Average]
[info]   (min, avg, max) = (1813.572, 1828.283, 1847.841), stdev = 14.054
[info]   CI (99.9%): [1774.167, 1882.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4215.579 ±(99.9%) 17.354 B/op [Average]
[info]   (min, avg, max) = (4210.350, 4215.579, 4220.813), stdev = 4.507
[info]   CI (99.9%): [4198.225, 4232.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.909 ±(99.9%) 1414.070 MB/sec [Average]
[info]   (min, avg, max) = (1341.611, 1745.909, 2017.174), stdev = 367.230
[info]   CI (99.9%): [331.838, 3159.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4024.535 ±(99.9%) 3235.685 B/op [Average]
[info]   (min, avg, max) = (3085.638, 4024.535, 4687.044), stdev = 840.297
[info]   CI (99.9%): [788.850, 7260.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 5.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.310), stdev = 1.478
[info]   CI (99.9%): [≈ 0, 6.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.546 ±(99.9%) 13.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.546, 7.685), stdev = 3.431
[info]   CI (99.9%): [≈ 0, 14.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.64% complete, ETA 01:59:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90794.842 ops/s
[info] # Warmup Iteration   2: 315872.962 ops/s
[info] # Warmup Iteration   3: 324691.660 ops/s
[info] # Warmup Iteration   4: 324905.230 ops/s
[info] # Warmup Iteration   5: 320309.561 ops/s
[info] Iteration   1: 324374.765 ops/s
[info]                  ·gc.alloc.rate:               1126.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          5462.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6499.405 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 324672.145 ops/s
[info]                  ·gc.alloc.rate:               1105.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          5357.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3248.365 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 324243.090 ops/s
[info]                  ·gc.alloc.rate:                   1129.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              5483.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6508.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 325368.973 ops/s
[info]                  ·gc.alloc.rate:                   1119.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              5412.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6489.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 311092.930 ops/s
[info]                  ·gc.alloc.rate:                   1057.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              5349.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3396.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   321950.380 ±(99.9%) 23431.506 ops/s [Average]
[info]   (min, avg, max) = (311092.930, 321950.380, 325368.973), stdev = 6085.088
[info]   CI (99.9%): [298518.875, 345381.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1107.559 ±(99.9%) 113.624 MB/sec [Average]
[info]   (min, avg, max) = (1057.476, 1107.559, 1129.842), stdev = 29.508
[info]   CI (99.9%): [993.935, 1221.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5413.230 ±(99.9%) 232.991 B/op [Average]
[info]   (min, avg, max) = (5349.534, 5413.230, 5483.857), stdev = 60.507
[info]   CI (99.9%): [5180.239, 5646.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1072.820 ±(99.9%) 1412.883 MB/sec [Average]
[info]   (min, avg, max) = (670.262, 1072.820, 1341.670), stdev = 366.921
[info]   CI (99.9%): [≈ 0, 2485.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5228.575 ±(99.9%) 6702.672 B/op [Average]
[info]   (min, avg, max) = (3248.365, 5228.575, 6508.637), stdev = 1740.663
[info]   CI (99.9%): [≈ 0, 11931.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.102), stdev = 1.380
[info]   CI (99.9%): [≈ 0, 5.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.199 ±(99.9%) 26.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.199, 15.692), stdev = 6.984
[info]   CI (99.9%): [≈ 0, 30.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.84% complete, ETA 01:58:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.809 ops/s
[info] # Warmup Iteration   2: 1447973.187 ops/s
[info] # Warmup Iteration   3: 1562376.982 ops/s
[info] # Warmup Iteration   4: 1581251.254 ops/s
[info] # Warmup Iteration   5: 1598007.783 ops/s
[info] Iteration   1: 1568694.854 ops/s
[info]                  ·gc.alloc.rate:                   748.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     667.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1591866.629 ops/s
[info]                  ·gc.alloc.rate:               752.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          743.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 658.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1592493.393 ops/s
[info]                  ·gc.alloc.rate:                   782.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              772.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1316.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1582774.003 ops/s
[info]                  ·gc.alloc.rate:                   757.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              753.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     662.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1552928.604 ops/s
[info]                  ·gc.alloc.rate:               734.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 676.103 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1577751.497 ±(99.9%) 65005.919 ops/s [Average]
[info]   (min, avg, max) = (1552928.604, 1577751.497, 1592493.393), stdev = 16881.831
[info]   CI (99.9%): [1512745.578, 1642757.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   755.075 ±(99.9%) 66.528 MB/sec [Average]
[info]   (min, avg, max) = (734.621, 755.075, 782.021), stdev = 17.277
[info]   CI (99.9%): [688.546, 821.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   753.098 ±(99.9%) 45.266 B/op [Average]
[info]   (min, avg, max) = (743.812, 753.098, 772.816), stdev = 11.755
[info]   CI (99.9%): [707.832, 798.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.607 ±(99.9%) 1147.446 MB/sec [Average]
[info]   (min, avg, max) = (665.485, 799.607, 1332.663), stdev = 297.988
[info]   CI (99.9%): [≈ 0, 1947.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   796.400 ±(99.9%) 1120.860 B/op [Average]
[info]   (min, avg, max) = (658.582, 796.400, 1316.976), stdev = 291.084
[info]   CI (99.9%): [≈ 0, 1917.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.022), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.022), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.04% complete, ETA 01:58:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358734.761 ops/s
[info] # Warmup Iteration   2: 956881.189 ops/s
[info] # Warmup Iteration   3: 984560.964 ops/s
[info] # Warmup Iteration   4: 1007179.655 ops/s
[info] # Warmup Iteration   5: 1001273.788 ops/s
[info] Iteration   1: 1009117.634 ops/s
[info]                  ·gc.alloc.rate:               729.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          1137.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1039.971 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1007219.517 ops/s
[info]                  ·gc.alloc.rate:                   734.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              1147.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1042.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1006863.105 ops/s
[info]                  ·gc.alloc.rate:               729.835 MB/sec
[info]                  ·gc.alloc.rate.norm:          1140.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1043.306 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 969648.837 ops/s
[info]                  ·gc.alloc.rate:               702.597 MB/sec
[info]                  ·gc.alloc.rate.norm:          1140.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1084.934 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1013814.022 ops/s
[info]                  ·gc.alloc.rate:                   732.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              1136.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1037.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1001332.623 ±(99.9%) 69030.130 ops/s [Average]
[info]   (min, avg, max) = (969648.837, 1001332.623, 1013814.022), stdev = 17926.906
[info]   CI (99.9%): [932302.493, 1070362.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   725.757 ±(99.9%) 50.519 MB/sec [Average]
[info]   (min, avg, max) = (702.597, 725.757, 734.650), stdev = 13.120
[info]   CI (99.9%): [675.238, 776.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1140.614 ±(99.9%) 16.910 B/op [Average]
[info]   (min, avg, max) = (1136.786, 1140.614, 1147.838), stdev = 4.391
[info]   CI (99.9%): [1123.704, 1157.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.779 ±(99.9%) 2.787 MB/sec [Average]
[info]   (min, avg, max) = (666.857, 667.779, 668.540), stdev = 0.724
[info]   CI (99.9%): [664.993, 670.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1049.775 ±(99.9%) 76.190 B/op [Average]
[info]   (min, avg, max) = (1037.730, 1049.775, 1084.934), stdev = 19.786
[info]   CI (99.9%): [973.585, 1125.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.033), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.24% complete, ETA 01:58:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1716209.621 ops/s
[info] # Warmup Iteration   2: 2618103.074 ops/s
[info] # Warmup Iteration   3: 2782116.314 ops/s
[info] # Warmup Iteration   4: 2714336.794 ops/s
[info] # Warmup Iteration   5: 2723525.408 ops/s
[info] Iteration   1: 2717025.744 ops/s
[info]                  ·gc.alloc.rate:                   1286.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     779.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2710958.820 ops/s
[info]                  ·gc.alloc.rate:                   1282.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2822642.367 ops/s
[info]                  ·gc.alloc.rate:               1332.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2806489.795 ops/s
[info]                  ·gc.alloc.rate:                   1325.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2813200.609 ops/s
[info]                  ·gc.alloc.rate:                   1341.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2774063.467 ±(99.9%) 212472.085 ops/s [Average]
[info]   (min, avg, max) = (2710958.820, 2774063.467, 2822642.367), stdev = 55178.326
[info]   CI (99.9%): [2561591.382, 2986535.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1313.612 ±(99.9%) 104.803 MB/sec [Average]
[info]   (min, avg, max) = (1282.175, 1313.612, 1341.462), stdev = 27.217
[info]   CI (99.9%): [1208.808, 1418.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   745.215 ±(99.9%) 11.856 B/op [Average]
[info]   (min, avg, max) = (742.717, 745.215, 750.428), stdev = 3.079
[info]   CI (99.9%): [733.359, 757.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.961 ±(99.9%) 1158.520 MB/sec [Average]
[info]   (min, avg, max) = (672.762, 1210.961, 1346.984), stdev = 300.864
[info]   CI (99.9%): [52.441, 2369.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   688.534 ±(99.9%) 676.568 B/op [Average]
[info]   (min, avg, max) = (375.129, 688.534, 781.164), stdev = 175.703
[info]   CI (99.9%): [11.966, 1365.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 2.665), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.350 ±(99.9%) 2.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 1.494), stdev = 0.647
[info]   CI (99.9%): [≈ 0, 2.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11.45% complete, ETA 01:58:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1917030.700 ops/s
[info] # Warmup Iteration   2: 3148372.984 ops/s
[info] # Warmup Iteration   3: 3018840.611 ops/s
[info] # Warmup Iteration   4: 3187156.497 ops/s
[info] # Warmup Iteration   5: 3187957.849 ops/s
[info] Iteration   1: 3186784.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3190592.998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3178953.395 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3197048.839 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3199241.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3190524.198 ±(99.9%) 31427.095 ops/s [Average]
[info]   (min, avg, max) = (3178953.395, 3190524.198, 3199241.651), stdev = 8161.517
[info]   CI (99.9%): [3159097.103, 3221951.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.65% complete, ETA 01:57:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169162.819 ops/s
[info] # Warmup Iteration   2: 521342.923 ops/s
[info] # Warmup Iteration   3: 590200.194 ops/s
[info] # Warmup Iteration   4: 579610.507 ops/s
[info] # Warmup Iteration   5: 586475.340 ops/s
[info] Iteration   1: 574027.640 ops/s
[info]                  ·gc.alloc.rate:                   643.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              1763.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1831.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 591820.166 ops/s
[info]                  ·gc.alloc.rate:               656.791 MB/sec
[info]                  ·gc.alloc.rate.norm:          1746.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1773.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 590209.737 ops/s
[info]                  ·gc.alloc.rate:                   660.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1761.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1778.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 591010.568 ops/s
[info]                  ·gc.alloc.rate:               659.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          1757.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1773.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 590318.637 ops/s
[info]                  ·gc.alloc.rate:               656.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          1750.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1775.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   587477.350 ±(99.9%) 29057.518 ops/s [Average]
[info]   (min, avg, max) = (574027.640, 587477.350, 591820.166), stdev = 7546.145
[info]   CI (99.9%): [558419.832, 616534.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   655.491 ±(99.9%) 27.049 MB/sec [Average]
[info]   (min, avg, max) = (643.334, 655.491, 660.719), stdev = 7.024
[info]   CI (99.9%): [628.442, 682.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1755.990 ±(99.9%) 27.946 B/op [Average]
[info]   (min, avg, max) = (1746.477, 1755.990, 1763.770), stdev = 7.258
[info]   CI (99.9%): [1728.044, 1783.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   666.820 ±(99.9%) 3.133 MB/sec [Average]
[info]   (min, avg, max) = (666.142, 666.820, 668.144), stdev = 0.814
[info]   CI (99.9%): [663.687, 669.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1786.550 ±(99.9%) 97.659 B/op [Average]
[info]   (min, avg, max) = (1773.164, 1786.550, 1831.789), stdev = 25.362
[info]   CI (99.9%): [1688.891, 1884.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.408 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.726), stdev = 1.664
[info]   CI (99.9%): [≈ 0, 7.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.054 ±(99.9%) 17.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.054, 10.216), stdev = 4.563
[info]   CI (99.9%): [≈ 0, 19.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11.85% complete, ETA 01:57:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81261.339 ops/s
[info] # Warmup Iteration   2: 165872.476 ops/s
[info] # Warmup Iteration   3: 166310.906 ops/s
[info] # Warmup Iteration   4: 173382.486 ops/s
[info] # Warmup Iteration   5: 170956.334 ops/s
[info] Iteration   1: 173094.468 ops/s
[info]                  ·gc.alloc.rate:               1027.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          9344.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6107.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 165956.016 ops/s
[info]                  ·gc.alloc.rate:               1004.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          9521.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12747.761 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 172584.226 ops/s
[info]                  ·gc.alloc.rate:                   1016.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              9263.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6135.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 171078.765 ops/s
[info]                  ·gc.alloc.rate:                   1018.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              9371.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12378.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 172435.060 ops/s
[info]                  ·gc.alloc.rate:               1012.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          9239.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6140.734 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   171029.707 ±(99.9%) 11292.228 ops/s [Average]
[info]   (min, avg, max) = (165956.016, 171029.707, 173094.468), stdev = 2932.556
[info]   CI (99.9%): [159737.479, 182321.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1015.872 ±(99.9%) 33.348 MB/sec [Average]
[info]   (min, avg, max) = (1004.086, 1015.872, 1027.784), stdev = 8.660
[info]   CI (99.9%): [982.524, 1049.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9348.250 ±(99.9%) 427.370 B/op [Average]
[info]   (min, avg, max) = (9239.873, 9348.250, 9521.035), stdev = 110.987
[info]   CI (99.9%): [8920.881, 9775.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.542 ±(99.9%) 1418.292 MB/sec [Average]
[info]   (min, avg, max) = (671.807, 941.542, 1345.669), stdev = 368.326
[info]   CI (99.9%): [≈ 0, 2359.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8702.000 ±(99.9%) 13581.575 B/op [Average]
[info]   (min, avg, max) = (6107.957, 8702.000, 12747.761), stdev = 3527.092
[info]   CI (99.9%): [≈ 0, 22283.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.076 ±(99.9%) 0.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.191), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.05% complete, ETA 01:57:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40299.801 ops/s
[info] # Warmup Iteration   2: 140435.589 ops/s
[info] # Warmup Iteration   3: 153142.910 ops/s
[info] # Warmup Iteration   4: 160655.414 ops/s
[info] # Warmup Iteration   5: 160908.345 ops/s
[info] Iteration   1: 160855.547 ops/s
[info]                  ·gc.alloc.rate:                   2028.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              19848.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19728.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 162193.150 ops/s
[info]                  ·gc.alloc.rate:                   2042.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              19822.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19540.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 162095.036 ops/s
[info]                  ·gc.alloc.rate:                   2055.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              19954.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19499.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 162016.447 ops/s
[info]                  ·gc.alloc.rate:               2041.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          19827.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19508.782 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 161178.734 ops/s
[info]                  ·gc.alloc.rate:               2057.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          20092.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19637.424 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   161667.783 ±(99.9%) 2341.478 ops/s [Average]
[info]   (min, avg, max) = (160855.547, 161667.783, 162193.150), stdev = 608.074
[info]   CI (99.9%): [159326.305, 164009.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2045.225 ±(99.9%) 45.244 MB/sec [Average]
[info]   (min, avg, max) = (2028.744, 2045.225, 2057.772), stdev = 11.750
[info]   CI (99.9%): [1999.981, 2090.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19909.201 ±(99.9%) 445.264 B/op [Average]
[info]   (min, avg, max) = (19822.895, 19909.201, 20092.641), stdev = 115.634
[info]   CI (99.9%): [19463.937, 20354.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.706 ±(99.9%) 13.444 MB/sec [Average]
[info]   (min, avg, max) = (2008.457, 2011.706, 2016.528), stdev = 3.491
[info]   CI (99.9%): [1998.261, 2025.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19583.073 ±(99.9%) 377.860 B/op [Average]
[info]   (min, avg, max) = (19499.878, 19583.073, 19728.991), stdev = 98.129
[info]   CI (99.9%): [19205.213, 19960.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.852), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.358 ±(99.9%) 46.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.358, 27.904), stdev = 11.977
[info]   CI (99.9%): [≈ 0, 53.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.25% complete, ETA 01:57:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151552.261 ops/s
[info] # Warmup Iteration   2: 442492.659 ops/s
[info] # Warmup Iteration   3: 443673.146 ops/s
[info] # Warmup Iteration   4: 452839.874 ops/s
[info] # Warmup Iteration   5: 429137.476 ops/s
[info] Iteration   1: 427288.139 ops/s
[info]                  ·gc.alloc.rate:               355.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          1307.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1884.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 451242.821 ops/s
[info]                  ·gc.alloc.rate:                   380.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              1327.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1784.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 454430.494 ops/s
[info]                  ·gc.alloc.rate:      364.999 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 453554.932 ops/s
[info]                  ·gc.alloc.rate:                   379.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1317.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2311.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 454555.523 ops/s
[info]                  ·gc.alloc.rate:      365.082 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   448214.382 ±(99.9%) 45335.126 ops/s [Average]
[info]   (min, avg, max) = (427288.139, 448214.382, 454555.523), stdev = 11773.388
[info]   CI (99.9%): [402879.255, 493549.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   369.114 ±(99.9%) 41.975 MB/sec [Average]
[info]   (min, avg, max) = (355.107, 369.114, 380.709), stdev = 10.901
[info]   CI (99.9%): [327.139, 411.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1296.010 ±(99.9%) 115.778 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1296.010, 1327.496), stdev = 30.067
[info]   CI (99.9%): [1180.232, 1411.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   337.975 ±(99.9%) 1212.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.975, 666.332), stdev = 314.914
[info]   CI (99.9%): [≈ 0, 1550.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1196.062 ±(99.9%) 4272.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1196.062, 2311.523), stdev = 1109.654
[info]   CI (99.9%): [≈ 0, 5468.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.073), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.45% complete, ETA 01:56:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 686963.888 ops/s
[info] # Warmup Iteration   2: 1231281.265 ops/s
[info] # Warmup Iteration   3: 1236758.434 ops/s
[info] # Warmup Iteration   4: 1252483.516 ops/s
[info] # Warmup Iteration   5: 1273793.975 ops/s
[info] Iteration   1: 1269554.821 ops/s
[info]                  ·gc.alloc.rate:                   260.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1274128.747 ops/s
[info]                  ·gc.alloc.rate:      246.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1269226.779 ops/s
[info]                  ·gc.alloc.rate:               254.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 634.363 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1265767.312 ops/s
[info]                  ·gc.alloc.rate:      246.571 MB/sec
[info]                  ·gc.alloc.rate.norm: 306.564 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1238671.150 ops/s
[info]                  ·gc.alloc.rate:                   257.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              326.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1263469.762 ±(99.9%) 54593.490 ops/s [Average]
[info]   (min, avg, max) = (1238671.150, 1263469.762, 1274128.747), stdev = 14177.756
[info]   CI (99.9%): [1208876.272, 1318063.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253.137 ±(99.9%) 25.251 MB/sec [Average]
[info]   (min, avg, max) = (246.130, 253.137, 260.860), stdev = 6.558
[info]   CI (99.9%): [227.885, 278.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   315.355 ±(99.9%) 38.692 B/op [Average]
[info]   (min, avg, max) = (304.000, 315.355, 326.898), stdev = 10.048
[info]   CI (99.9%): [276.663, 354.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.969 ±(99.9%) 1079.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.969, 511.625), stdev = 280.223
[info]   CI (99.9%): [≈ 0, 1386.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   383.711 ±(99.9%) 1349.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 383.711, 650.007), stdev = 350.337
[info]   CI (99.9%): [≈ 0, 1732.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.026), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.65% complete, ETA 01:56:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9131.566 ops/s
[info] # Warmup Iteration   2: 69081.280 ops/s
[info] # Warmup Iteration   3: 80964.842 ops/s
[info] # Warmup Iteration   4: 83507.456 ops/s
[info] # Warmup Iteration   5: 82237.141 ops/s
[info] Iteration   1: 81663.286 ops/s
[info]                  ·gc.alloc.rate:                   3245.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              62548.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64281.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.605 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 81181.065 ops/s
[info]                  ·gc.alloc.rate:                   3268.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              63366.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64799.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 84338.894 ops/s
[info]                  ·gc.alloc.rate:               3391.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          63289.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62607.025 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 84510.400 ops/s
[info]                  ·gc.alloc.rate:               3372.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          62795.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50167.302 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 82509.264 ops/s
[info]                  ·gc.alloc.rate:               3323.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          63379.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3378.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64438.519 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   82840.582 ±(99.9%) 5866.082 ops/s [Average]
[info]   (min, avg, max) = (81181.065, 82840.582, 84510.400), stdev = 1523.403
[info]   CI (99.9%): [76974.500, 88706.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3320.361 ±(99.9%) 243.360 MB/sec [Average]
[info]   (min, avg, max) = (3245.861, 3320.361, 3391.766), stdev = 63.200
[info]   CI (99.9%): [3077.000, 3563.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63075.810 ±(99.9%) 1465.772 B/op [Average]
[info]   (min, avg, max) = (62548.018, 63075.810, 63379.798), stdev = 380.656
[info]   CI (99.9%): [61610.038, 64541.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3221.298 ±(99.9%) 1136.750 MB/sec [Average]
[info]   (min, avg, max) = (2694.009, 3221.298, 3378.544), stdev = 295.210
[info]   CI (99.9%): [2084.548, 4358.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61258.751 ±(99.9%) 24095.150 B/op [Average]
[info]   (min, avg, max) = (50167.302, 61258.751, 64799.060), stdev = 6257.434
[info]   CI (99.9%): [37163.601, 85353.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.402 ±(99.9%) 2.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 1.605), stdev = 0.695
[info]   CI (99.9%): [≈ 0, 3.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12.85% complete, ETA 01:56:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120523.988 ops/s
[info] # Warmup Iteration   2: 282646.524 ops/s
[info] # Warmup Iteration   3: 282373.036 ops/s
[info] # Warmup Iteration   4: 293555.114 ops/s
[info] # Warmup Iteration   5: 292475.272 ops/s
[info] Iteration   1: 291556.394 ops/s
[info]                  ·gc.alloc.rate:               1376.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          7428.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7259.704 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 292154.262 ops/s
[info]                  ·gc.alloc.rate:                   1358.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              7316.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7248.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 290033.584 ops/s
[info]                  ·gc.alloc.rate:                   1361.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              7385.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7302.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 306278.105 ops/s
[info]                  ·gc.alloc.rate:                   1434.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              7373.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6909.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 306223.663 ops/s
[info]                  ·gc.alloc.rate:                   1435.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              7375.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6898.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   297249.202 ±(99.9%) 31782.025 ops/s [Average]
[info]   (min, avg, max) = (290033.584, 297249.202, 306278.105), stdev = 8253.691
[info]   CI (99.9%): [265467.177, 329031.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1393.152 ±(99.9%) 149.454 MB/sec [Average]
[info]   (min, avg, max) = (1358.367, 1393.152, 1435.084), stdev = 38.813
[info]   CI (99.9%): [1243.698, 1542.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7375.833 ±(99.9%) 154.684 B/op [Average]
[info]   (min, avg, max) = (7316.080, 7375.833, 7428.609), stdev = 40.171
[info]   CI (99.9%): [7221.149, 7530.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.723 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (1342.263, 1344.723, 1345.940), stdev = 1.489
[info]   CI (99.9%): [1338.988, 1350.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7123.848 ±(99.9%) 777.105 B/op [Average]
[info]   (min, avg, max) = (6898.797, 7123.848, 7302.988), stdev = 201.812
[info]   CI (99.9%): [6346.743, 7900.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 4.801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 2.873), stdev = 1.247
[info]   CI (99.9%): [≈ 0, 5.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.568 ±(99.9%) 26.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.568, 15.587), stdev = 6.773
[info]   CI (99.9%): [≈ 0, 29.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.05% complete, ETA 01:56:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93395.875 ops/s
[info] # Warmup Iteration   2: 281183.742 ops/s
[info] # Warmup Iteration   3: 302171.365 ops/s
[info] # Warmup Iteration   4: 292902.025 ops/s
[info] # Warmup Iteration   5: 292759.192 ops/s
[info] Iteration   1: 292045.607 ops/s
[info]                  ·gc.alloc.rate:                   1649.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              8890.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10844.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 292473.359 ops/s
[info]                  ·gc.alloc.rate:                   1640.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              8827.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7222.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 293250.876 ops/s
[info]                  ·gc.alloc.rate:                   1675.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              8993.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10796.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 299524.163 ops/s
[info]                  ·gc.alloc.rate:               1688.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          8868.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7028.684 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 295701.987 ops/s
[info]                  ·gc.alloc.rate:                   1682.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10682.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   294599.198 ±(99.9%) 11919.813 ops/s [Average]
[info]   (min, avg, max) = (292045.607, 294599.198, 299524.163), stdev = 3095.538
[info]   CI (99.9%): [282679.385, 306519.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1667.452 ±(99.9%) 80.886 MB/sec [Average]
[info]   (min, avg, max) = (1640.654, 1667.452, 1688.459), stdev = 21.006
[info]   CI (99.9%): [1586.565, 1748.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8906.527 ±(99.9%) 255.192 B/op [Average]
[info]   (min, avg, max) = (8827.954, 8906.527, 8993.680), stdev = 66.273
[info]   CI (99.9%): [8651.334, 9161.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.503 ±(99.9%) 1413.938 MB/sec [Average]
[info]   (min, avg, max) = (1338.175, 1742.503, 2012.485), stdev = 367.195
[info]   CI (99.9%): [328.566, 3156.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9315.076 ±(99.9%) 7703.450 B/op [Average]
[info]   (min, avg, max) = (7028.684, 9315.076, 10844.441), stdev = 2000.562
[info]   CI (99.9%): [1611.626, 17018.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 5.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.081), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.897 ±(99.9%) 27.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.897, 16.579), stdev = 7.179
[info]   CI (99.9%): [≈ 0, 31.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 2.966
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.25% complete, ETA 01:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 741456.650 ops/s
[info] # Warmup Iteration   2: 1806232.615 ops/s
[info] # Warmup Iteration   3: 1752359.879 ops/s
[info] # Warmup Iteration   4: 1847027.248 ops/s
[info] # Warmup Iteration   5: 1763661.186 ops/s
[info] Iteration   1: 1851489.502 ops/s
[info]                  ·gc.alloc.rate:                   993.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              844.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1135.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1927221.314 ops/s
[info]                  ·gc.alloc.rate:               1004.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          820.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 546.150 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1890858.089 ops/s
[info]                  ·gc.alloc.rate:                   1003.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              834.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1915669.047 ops/s
[info]                  ·gc.alloc.rate:               1005.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          825.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.989 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1914349.210 ops/s
[info]                  ·gc.alloc.rate:               1010.303 MB/sec
[info]                  ·gc.alloc.rate.norm:          830.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1101.348 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1899917.432 ±(99.9%) 115987.309 ops/s [Average]
[info]   (min, avg, max) = (1851489.502, 1899917.432, 1927221.314), stdev = 30121.536
[info]   CI (99.9%): [1783930.124, 2015904.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1003.382 ±(99.9%) 24.104 MB/sec [Average]
[info]   (min, avg, max) = (993.257, 1003.382, 1010.303), stdev = 6.260
[info]   CI (99.9%): [979.279, 1027.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   831.210 ±(99.9%) 34.832 B/op [Average]
[info]   (min, avg, max) = (820.488, 831.210, 844.241), stdev = 9.046
[info]   CI (99.9%): [796.378, 866.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.570 ±(99.9%) 1410.872 MB/sec [Average]
[info]   (min, avg, max) = (668.822, 1070.570, 1339.706), stdev = 366.399
[info]   CI (99.9%): [≈ 0, 2481.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   889.459 ±(99.9%) 1200.991 B/op [Average]
[info]   (min, avg, max) = (546.150, 889.459, 1135.937), stdev = 311.894
[info]   CI (99.9%): [≈ 0, 2090.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.45% complete, ETA 01:55:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1639719.066 ops/s
[info] # Warmup Iteration   2: 2752589.559 ops/s
[info] # Warmup Iteration   3: 2819800.478 ops/s
[info] # Warmup Iteration   4: 2782095.651 ops/s
[info] # Warmup Iteration   5: 2750342.706 ops/s
[info] Iteration   1: 2853337.751 ops/s
[info]                  ·gc.alloc.rate:                   793.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2861093.082 ops/s
[info]                  ·gc.alloc.rate:                   812.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              446.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     738.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2876245.209 ops/s
[info]                  ·gc.alloc.rate:               791.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367.775 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2828212.232 ops/s
[info]                  ·gc.alloc.rate:                   778.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     374.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2832284.151 ops/s
[info]                  ·gc.alloc.rate:               778.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2850234.485 ±(99.9%) 77284.142 ops/s [Average]
[info]   (min, avg, max) = (2828212.232, 2850234.485, 2876245.209), stdev = 20070.446
[info]   CI (99.9%): [2772950.343, 2927518.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   790.713 ±(99.9%) 54.498 MB/sec [Average]
[info]   (min, avg, max) = (778.064, 790.713, 812.507), stdev = 14.153
[info]   CI (99.9%): [736.215, 845.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   436.535 ±(99.9%) 23.688 B/op [Average]
[info]   (min, avg, max) = (432.329, 436.535, 446.903), stdev = 6.152
[info]   CI (99.9%): [412.847, 460.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.282 ±(99.9%) 1155.626 MB/sec [Average]
[info]   (min, avg, max) = (671.165, 806.282, 1343.139), stdev = 300.112
[info]   CI (99.9%): [≈ 0, 1961.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   444.881 ±(99.9%) 632.690 B/op [Average]
[info]   (min, avg, max) = (367.775, 444.881, 738.767), stdev = 164.308
[info]   CI (99.9%): [≈ 0, 1077.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1928668.233 ops/s
[info] # Warmup Iteration   2: 2962431.682 ops/s
[info] # Warmup Iteration   3: 3035428.697 ops/s
[info] # Warmup Iteration   4: 3038386.297 ops/s
[info] # Warmup Iteration   5: 3041161.056 ops/s
[info] Iteration   1: 3047217.848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3047664.928 ops/s
[info]                  ·gc.alloc.rate:      1.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.883 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3052817.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3033283.141 ops/s
[info]                  ·gc.alloc.rate:      8.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.250 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3056156.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3047427.995 ±(99.9%) 33646.995 ops/s [Average]
[info]   (min, avg, max) = (3033283.141, 3047427.995, 3056156.566), stdev = 8738.018
[info]   CI (99.9%): [3013781.000, 3081074.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.981 ±(99.9%) 13.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.981, 8.192), stdev = 3.551
[info]   CI (99.9%): [≈ 0, 15.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.027 ±(99.9%) 7.093 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.027, 4.250), stdev = 1.842
[info]   CI (99.9%): [≈ 0, 8.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:54:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11841.297 ops/s
[info] # Warmup Iteration   2: 39624.366 ops/s
[info] # Warmup Iteration   3: 47517.246 ops/s
[info] # Warmup Iteration   4: 48107.901 ops/s
[info] # Warmup Iteration   5: 47543.871 ops/s
[info] Iteration   1: 48117.761 ops/s
[info]                  ·gc.alloc.rate:                   2170.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              71003.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65870.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 46652.802 ops/s
[info]                  ·gc.alloc.rate:                   2108.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              71108.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67704.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 48148.820 ops/s
[info]                  ·gc.alloc.rate:                   2160.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              70628.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65514.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 48489.551 ops/s
[info]                  ·gc.alloc.rate:                   2229.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              72344.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86783.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 47155.367 ops/s
[info]                  ·gc.alloc.rate:                   2144.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              71563.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67064.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   47712.860 ±(99.9%) 2977.581 ops/s [Average]
[info]   (min, avg, max) = (46652.802, 47712.860, 48489.551), stdev = 773.268
[info]   CI (99.9%): [44735.279, 50690.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2162.651 ±(99.9%) 170.102 MB/sec [Average]
[info]   (min, avg, max) = (2108.037, 2162.651, 2229.114), stdev = 44.175
[info]   CI (99.9%): [1992.549, 2332.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71329.912 ±(99.9%) 2533.716 B/op [Average]
[info]   (min, avg, max) = (70628.841, 71329.912, 72344.854), stdev = 657.998
[info]   CI (99.9%): [68796.196, 73863.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2141.798 ±(99.9%) 1145.665 MB/sec [Average]
[info]   (min, avg, max) = (2004.432, 2141.798, 2673.992), stdev = 297.526
[info]   CI (99.9%): [996.133, 3287.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70587.457 ±(99.9%) 35028.557 B/op [Average]
[info]   (min, avg, max) = (65514.227, 70587.457, 86783.177), stdev = 9096.805
[info]   CI (99.9%): [35558.900, 105616.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 6.796 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.862, 4.017), stdev = 1.765
[info]   CI (99.9%): [≈ 0, 7.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.209 ±(99.9%) 222.231 B/op [Average]
[info]   (min, avg, max) = (0.676, 28.209, 131.399), stdev = 57.713
[info]   CI (99.9%): [≈ 0, 250.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.121
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14.06% complete, ETA 01:54:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70509.957 ops/s
[info] # Warmup Iteration   2: 141113.308 ops/s
[info] # Warmup Iteration   3: 146425.400 ops/s
[info] # Warmup Iteration   4: 147122.654 ops/s
[info] # Warmup Iteration   5: 146636.620 ops/s
[info] Iteration   1: 144522.744 ops/s
[info]                  ·gc.alloc.rate:                   1068.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              11630.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14635.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 144631.614 ops/s
[info]                  ·gc.alloc.rate:               1050.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          11426.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7314.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 145569.100 ops/s
[info]                  ·gc.alloc.rate:                   1071.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              11580.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14547.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 146817.656 ops/s
[info]                  ·gc.alloc.rate:               1052.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          11282.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7212.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 145977.490 ops/s
[info]                  ·gc.alloc.rate:                   1060.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              11432.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14513.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   145503.721 ±(99.9%) 3692.425 ops/s [Average]
[info]   (min, avg, max) = (144522.744, 145503.721, 146817.656), stdev = 958.911
[info]   CI (99.9%): [141811.295, 149196.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1060.496 ±(99.9%) 35.509 MB/sec [Average]
[info]   (min, avg, max) = (1050.199, 1060.496, 1071.182), stdev = 9.222
[info]   CI (99.9%): [1024.987, 1096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11470.406 ±(99.9%) 531.489 B/op [Average]
[info]   (min, avg, max) = (11282.493, 11470.406, 11630.027), stdev = 138.026
[info]   CI (99.9%): [10938.917, 12001.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1076.212 ±(99.9%) 1419.011 MB/sec [Average]
[info]   (min, avg, max) = (672.215, 1076.212, 1346.255), stdev = 368.513
[info]   CI (99.9%): [≈ 0, 2495.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11644.616 ±(99.9%) 15403.296 B/op [Average]
[info]   (min, avg, max) = (7212.008, 11644.616, 14635.190), stdev = 4000.187
[info]   CI (99.9%): [≈ 0, 27047.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.558 ±(99.9%) 4.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.748), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6.015 ±(99.9%) 50.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.015, 29.624), stdev = 13.198
[info]   CI (99.9%): [≈ 0, 56.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.26% complete, ETA 01:54:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78117.383 ops/s
[info] # Warmup Iteration   2: 222836.410 ops/s
[info] # Warmup Iteration   3: 240244.648 ops/s
[info] # Warmup Iteration   4: 238404.247 ops/s
[info] # Warmup Iteration   5: 234770.190 ops/s
[info] Iteration   1: 234337.695 ops/s
[info]                  ·gc.alloc.rate:                   2576.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              17301.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18002.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.495 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 234478.039 ops/s
[info]                  ·gc.alloc.rate:                   2578.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              17301.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17973.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.279 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 244616.080 ops/s
[info]                  ·gc.alloc.rate:               2699.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          17368.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17254.126 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 237154.075 ops/s
[info]                  ·gc.alloc.rate:               2593.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          17208.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13379.521 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 234099.815 ops/s
[info]                  ·gc.alloc.rate:               2588.366 MB/sec
[info]                  ·gc.alloc.rate.norm:          17401.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18114.568 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   236937.141 ±(99.9%) 17206.378 ops/s [Average]
[info]   (min, avg, max) = (234099.815, 236937.141, 244616.080), stdev = 4468.442
[info]   CI (99.9%): [219730.763, 254143.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2607.455 ±(99.9%) 200.658 MB/sec [Average]
[info]   (min, avg, max) = (2576.760, 2607.455, 2699.804), stdev = 52.110
[info]   CI (99.9%): [2406.797, 2808.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17316.375 ±(99.9%) 286.443 B/op [Average]
[info]   (min, avg, max) = (17208.771, 17316.375, 17401.968), stdev = 74.388
[info]   CI (99.9%): [17029.932, 17602.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2550.573 ±(99.9%) 1149.336 MB/sec [Average]
[info]   (min, avg, max) = (2016.749, 2550.573, 2694.358), stdev = 298.479
[info]   CI (99.9%): [1401.237, 3699.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16944.807 ±(99.9%) 7785.498 B/op [Average]
[info]   (min, avg, max) = (13379.521, 16944.807, 18114.568), stdev = 2021.869
[info]   CI (99.9%): [9159.309, 24730.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.521), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 0.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.755 ±(99.9%) 5.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.755, 3.495), stdev = 1.537
[info]   CI (99.9%): [≈ 0, 6.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.46% complete, ETA 01:54:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93541.869 ops/s
[info] # Warmup Iteration   2: 310763.835 ops/s
[info] # Warmup Iteration   3: 361175.350 ops/s
[info] # Warmup Iteration   4: 384035.931 ops/s
[info] # Warmup Iteration   5: 379018.836 ops/s
[info] Iteration   1: 373297.741 ops/s
[info]                  ·gc.alloc.rate:                   1905.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              8033.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5647.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 383712.347 ops/s
[info]                  ·gc.alloc.rate:                   1983.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              8135.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8240.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 386059.845 ops/s
[info]                  ·gc.alloc.rate:                   1994.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              8126.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8168.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 367109.188 ops/s
[info]                  ·gc.alloc.rate:               1913.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          8202.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8585.382 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 384986.187 ops/s
[info]                  ·gc.alloc.rate:               2003.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          8190.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8195.659 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   379033.062 ±(99.9%) 32319.256 ops/s [Average]
[info]   (min, avg, max) = (367109.188, 379033.062, 386059.845), stdev = 8393.208
[info]   CI (99.9%): [346713.806, 411352.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1960.022 ±(99.9%) 180.176 MB/sec [Average]
[info]   (min, avg, max) = (1905.447, 1960.022, 2003.496), stdev = 46.791
[info]   CI (99.9%): [1779.846, 2140.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8137.713 ±(99.9%) 258.277 B/op [Average]
[info]   (min, avg, max) = (8033.117, 8137.713, 8202.215), stdev = 67.074
[info]   CI (99.9%): [7879.436, 8395.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872.125 ±(99.9%) 1146.200 MB/sec [Average]
[info]   (min, avg, max) = (1339.664, 1872.125, 2009.164), stdev = 297.665
[info]   CI (99.9%): [725.925, 3018.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7767.517 ±(99.9%) 4608.502 B/op [Average]
[info]   (min, avg, max) = (5647.848, 7767.517, 8585.382), stdev = 1196.813
[info]   CI (99.9%): [3159.014, 12376.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 4.059), stdev = 1.811
[info]   CI (99.9%): [≈ 0, 7.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.364 ±(99.9%) 28.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.364, 16.650), stdev = 7.427
[info]   CI (99.9%): [≈ 0, 31.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.66% complete, ETA 01:53:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 904662.306 ops/s
[info] # Warmup Iteration   2: 2135720.833 ops/s
[info] # Warmup Iteration   3: 2286118.049 ops/s
[info] # Warmup Iteration   4: 2296320.038 ops/s
[info] # Warmup Iteration   5: 2243218.496 ops/s
[info] Iteration   1: 2196393.277 ops/s
[info]                  ·gc.alloc.rate:                   784.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              561.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     480.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2246268.032 ops/s
[info]                  ·gc.alloc.rate:               794.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470.444 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2271779.999 ops/s
[info]                  ·gc.alloc.rate:                   819.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              567.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2281001.342 ops/s
[info]                  ·gc.alloc.rate:                   803.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2286239.204 ops/s
[info]                  ·gc.alloc.rate:               805.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2256336.371 ±(99.9%) 141947.185 ops/s [Average]
[info]   (min, avg, max) = (2196393.277, 2256336.371, 2286239.204), stdev = 36863.233
[info]   CI (99.9%): [2114389.185, 2398283.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   801.239 ±(99.9%) 49.849 MB/sec [Average]
[info]   (min, avg, max) = (784.432, 801.239, 819.062), stdev = 12.946
[info]   CI (99.9%): [751.389, 851.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   558.807 ±(99.9%) 22.078 B/op [Average]
[info]   (min, avg, max) = (554.245, 558.807, 567.392), stdev = 5.734
[info]   CI (99.9%): [536.728, 580.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.007 ±(99.9%) 1156.622 MB/sec [Average]
[info]   (min, avg, max) = (671.006, 806.007, 1343.327), stdev = 300.371
[info]   CI (99.9%): [≈ 0, 1962.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   561.578 ±(99.9%) 794.764 B/op [Average]
[info]   (min, avg, max) = (462.685, 561.578, 930.568), stdev = 206.398
[info]   CI (99.9%): [≈ 0, 1356.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.030), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.86% complete, ETA 01:53:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6551.576 ops/s
[info] # Warmup Iteration   2: 72451.746 ops/s
[info] # Warmup Iteration   3: 86080.014 ops/s
[info] # Warmup Iteration   4: 88244.491 ops/s
[info] # Warmup Iteration   5: 88371.143 ops/s
[info] Iteration   1: 87605.134 ops/s
[info]                  ·gc.alloc.rate:                   3437.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              61735.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60367.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.496 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 89023.171 ops/s
[info]                  ·gc.alloc.rate:                   3520.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              62230.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3370.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59582.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 88004.389 ops/s
[info]                  ·gc.alloc.rate:               3482.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          62274.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60465.444 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 87979.032 ops/s
[info]                  ·gc.alloc.rate:               3482.284 MB/sec
[info]                  ·gc.alloc.rate.norm:          62288.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3388.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60614.395 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 88395.672 ops/s
[info]                  ·gc.alloc.rate:               3497.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          62268.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3394.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60440.485 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   88201.479 ±(99.9%) 2070.812 ops/s [Average]
[info]   (min, avg, max) = (87605.134, 88201.479, 89023.171), stdev = 537.783
[info]   CI (99.9%): [86130.667, 90272.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3484.054 ±(99.9%) 117.050 MB/sec [Average]
[info]   (min, avg, max) = (3437.335, 3484.054, 3520.439), stdev = 30.398
[info]   CI (99.9%): [3367.004, 3601.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62159.559 ±(99.9%) 915.843 B/op [Average]
[info]   (min, avg, max) = (61735.824, 62159.559, 62288.366), stdev = 237.842
[info]   CI (99.9%): [61243.716, 63075.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3379.362 ±(99.9%) 52.508 MB/sec [Average]
[info]   (min, avg, max) = (3361.124, 3379.362, 3394.966), stdev = 13.636
[info]   CI (99.9%): [3326.854, 3431.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60293.940 ±(99.9%) 1570.422 B/op [Average]
[info]   (min, avg, max) = (59582.330, 60293.940, 60614.395), stdev = 407.834
[info]   CI (99.9%): [58723.518, 61864.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.373 ±(99.9%) 2.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.496), stdev = 0.648
[info]   CI (99.9%): [≈ 0, 2.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:53:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141121.620 ops/s
[info] # Warmup Iteration   2: 388302.104 ops/s
[info] # Warmup Iteration   3: 395735.261 ops/s
[info] # Warmup Iteration   4: 387430.723 ops/s
[info] # Warmup Iteration   5: 414506.059 ops/s
[info] Iteration   1: 375526.688 ops/s
[info]                  ·gc.alloc.rate:                   1821.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              7634.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8461.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 418742.238 ops/s
[info]                  ·gc.alloc.rate:                   2023.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              7605.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7583.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.800 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 415996.584 ops/s
[info]                  ·gc.alloc.rate:                   2031.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              7682.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7613.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 419283.975 ops/s
[info]                  ·gc.alloc.rate:                   2046.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              7679.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7553.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 420232.674 ops/s
[info]                  ·gc.alloc.rate:               2058.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          7708.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7546.835 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   409956.432 ±(99.9%) 74360.445 ops/s [Average]
[info]   (min, avg, max) = (375526.688, 409956.432, 420232.674), stdev = 19311.171
[info]   CI (99.9%): [335595.987, 484316.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1996.370 ±(99.9%) 379.115 MB/sec [Average]
[info]   (min, avg, max) = (1821.911, 1996.370, 2058.463), stdev = 98.455
[info]   CI (99.9%): [1617.255, 2375.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7662.225 ±(99.9%) 158.869 B/op [Average]
[info]   (min, avg, max) = (7605.476, 7662.225, 7708.295), stdev = 41.258
[info]   CI (99.9%): [7503.356, 7821.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2015.664 ±(99.9%) 10.817 MB/sec [Average]
[info]   (min, avg, max) = (2012.911, 2015.664, 2019.149), stdev = 2.809
[info]   CI (99.9%): [2004.847, 2026.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7751.862 ±(99.9%) 1530.995 B/op [Average]
[info]   (min, avg, max) = (7546.835, 7751.862, 8461.526), stdev = 397.595
[info]   CI (99.9%): [6220.867, 9282.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 4.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 2.644), stdev = 1.116
[info]   CI (99.9%): [≈ 0, 4.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.764 ±(99.9%) 18.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.764, 11.079), stdev = 4.698
[info]   CI (99.9%): [≈ 0, 20.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.26% complete, ETA 01:53:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58428.982 ops/s
[info] # Warmup Iteration   2: 243251.941 ops/s
[info] # Warmup Iteration   3: 242089.068 ops/s
[info] # Warmup Iteration   4: 261548.018 ops/s
[info] # Warmup Iteration   5: 264670.574 ops/s
[info] Iteration   1: 259897.644 ops/s
[info]                  ·gc.alloc.rate:                   2100.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              12721.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12196.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 256720.871 ops/s
[info]                  ·gc.alloc.rate:                   2088.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              12801.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12315.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 261258.167 ops/s
[info]                  ·gc.alloc.rate:               2110.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          12715.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12086.915 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 261512.140 ops/s
[info]                  ·gc.alloc.rate:               2126.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          12799.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12085.061 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 267066.786 ops/s
[info]                  ·gc.alloc.rate:               2170.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          12790.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11848.993 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   261291.122 ±(99.9%) 14438.272 ops/s [Average]
[info]   (min, avg, max) = (256720.871, 261291.122, 267066.786), stdev = 3749.573
[info]   CI (99.9%): [246852.850, 275729.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2119.518 ±(99.9%) 122.693 MB/sec [Average]
[info]   (min, avg, max) = (2088.311, 2119.518, 2170.632), stdev = 31.863
[info]   CI (99.9%): [1996.825, 2242.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12765.675 ±(99.9%) 166.926 B/op [Average]
[info]   (min, avg, max) = (12715.223, 12765.675, 12801.139), stdev = 43.350
[info]   CI (99.9%): [12598.749, 12932.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2009.771 ±(99.9%) 11.204 MB/sec [Average]
[info]   (min, avg, max) = (2006.570, 2009.771, 2014.197), stdev = 2.910
[info]   CI (99.9%): [1998.567, 2020.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12106.685 ±(99.9%) 664.488 B/op [Average]
[info]   (min, avg, max) = (11848.993, 12106.685, 12315.915), stdev = 172.565
[info]   CI (99.9%): [11442.197, 12771.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 5.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.497), stdev = 1.551
[info]   CI (99.9%): [≈ 0, 6.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.389 ±(99.9%) 36.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.389, 21.178), stdev = 9.391
[info]   CI (99.9%): [≈ 0, 40.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.46% complete, ETA 01:52:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664716.770 ops/s
[info] # Warmup Iteration   2: 1414304.659 ops/s
[info] # Warmup Iteration   3: 1460792.328 ops/s
[info] # Warmup Iteration   4: 1496548.266 ops/s
[info] # Warmup Iteration   5: 1509216.595 ops/s
[info] Iteration   1: 1506472.343 ops/s
[info]                  ·gc.alloc.rate:               903.694 MB/sec
[info]                  ·gc.alloc.rate.norm:          943.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.983 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1498343.985 ops/s
[info]                  ·gc.alloc.rate:                   913.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              959.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1500846.205 ops/s
[info]                  ·gc.alloc.rate:               893.402 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1502747.718 ops/s
[info]                  ·gc.alloc.rate:               893.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 701.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1505209.525 ops/s
[info]                  ·gc.alloc.rate:                   894.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              935.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1502723.955 ±(99.9%) 12616.240 ops/s [Average]
[info]   (min, avg, max) = (1498343.985, 1502723.955, 1506472.343), stdev = 3276.398
[info]   CI (99.9%): [1490107.715, 1515340.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   899.802 ±(99.9%) 34.439 MB/sec [Average]
[info]   (min, avg, max) = (893.402, 899.802, 913.839), stdev = 8.944
[info]   CI (99.9%): [865.363, 934.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   942.289 ±(99.9%) 39.844 B/op [Average]
[info]   (min, avg, max) = (935.174, 942.289, 959.705), stdev = 10.347
[info]   CI (99.9%): [902.445, 982.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.636 ±(99.9%) 1150.603 MB/sec [Average]
[info]   (min, avg, max) = (668.237, 802.636, 1337.159), stdev = 298.808
[info]   CI (99.9%): [≈ 0, 1953.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   840.928 ±(99.9%) 1212.651 B/op [Average]
[info]   (min, avg, max) = (697.983, 840.928, 1404.272), stdev = 314.922
[info]   CI (99.9%): [≈ 0, 2053.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.66% complete, ETA 01:52:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1466756.605 ops/s
[info] # Warmup Iteration   2: 2803031.212 ops/s
[info] # Warmup Iteration   3: 2801867.647 ops/s
[info] # Warmup Iteration   4: 2835266.138 ops/s
[info] # Warmup Iteration   5: 2834322.827 ops/s
[info] Iteration   1: 2808155.922 ops/s
[info]                  ·gc.alloc.rate:               977.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          547.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 376.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2845227.069 ops/s
[info]                  ·gc.alloc.rate:               992.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          548.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.792 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2530856.203 ops/s
[info]                  ·gc.alloc.rate:               921.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          572.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 836.124 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2753959.484 ops/s
[info]                  ·gc.alloc.rate:               960.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384.287 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2828464.484 ops/s
[info]                  ·gc.alloc.rate:                   1004.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     748.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2753332.633 ±(99.9%) 496834.287 ops/s [Average]
[info]   (min, avg, max) = (2530856.203, 2753332.633, 2845227.069), stdev = 129026.286
[info]   CI (99.9%): [2256498.346, 3250166.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   971.203 ±(99.9%) 124.561 MB/sec [Average]
[info]   (min, avg, max) = (921.215, 971.203, 1004.206), stdev = 32.348
[info]   CI (99.9%): [846.642, 1095.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   555.459 ±(99.9%) 41.100 B/op [Average]
[info]   (min, avg, max) = (547.665, 555.459, 572.822), stdev = 10.673
[info]   CI (99.9%): [514.359, 596.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.287 ±(99.9%) 1419.666 MB/sec [Average]
[info]   (min, avg, max) = (671.472, 941.287, 1345.659), stdev = 368.683
[info]   CI (99.9%): [≈ 0, 2360.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   543.449 ±(99.9%) 883.413 B/op [Average]
[info]   (min, avg, max) = (371.792, 543.449, 836.124), stdev = 229.419
[info]   CI (99.9%): [≈ 0, 1426.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.86% complete, ETA 01:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1522487.691 ops/s
[info] # Warmup Iteration   2: 3048811.511 ops/s
[info] # Warmup Iteration   3: 3146042.368 ops/s
[info] # Warmup Iteration   4: 3146765.740 ops/s
[info] # Warmup Iteration   5: 3151731.857 ops/s
[info] Iteration   1: 3146910.335 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3145402.453 ops/s
[info]                  ·gc.alloc.rate:      0.999 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.500 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3099135.240 ops/s
[info]                  ·gc.alloc.rate:      15.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 8.118 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3149968.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3149839.045 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3138251.086 ±(99.9%) 84533.459 ops/s [Average]
[info]   (min, avg, max) = (3099135.240, 3138251.086, 3149968.357), stdev = 21953.071
[info]   CI (99.9%): [3053717.627, 3222784.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.397 ±(99.9%) 27.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 3.397, 15.986), stdev = 7.051
[info]   CI (99.9%): [≈ 0, 30.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.724 ±(99.9%) 13.789 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.724, 8.118), stdev = 3.581
[info]   CI (99.9%): [≈ 0, 15.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.06% complete, ETA 01:52:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54027.498 ops/s
[info] # Warmup Iteration   2: 379489.960 ops/s
[info] # Warmup Iteration   3: 391459.605 ops/s
[info] # Warmup Iteration   4: 392433.510 ops/s
[info] # Warmup Iteration   5: 397034.354 ops/s
[info] Iteration   1: 399191.369 ops/s
[info]                  ·gc.alloc.rate:                   2575.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              10150.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10530.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 383054.815 ops/s
[info]                  ·gc.alloc.rate:                        2476.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                   10172.215 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.012 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.051 B/op
[info]                  ·gc.churn.Metaspace:                   0.036 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2682.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          11015.976 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.203 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             9.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      1.112 B/op
[info]                  ·gc.count:                             6.000 counts
[info]                  ·gc.time:                              35.000 ms
[info] Iteration   3: 401084.723 ops/s
[info]                  ·gc.alloc.rate:               2573.059 MB/sec
[info]                  ·gc.alloc.rate.norm:          10095.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7866.607 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 399369.558 ops/s
[info]                  ·gc.alloc.rate:                   2591.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              10210.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10560.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 398090.628 ops/s
[info]                  ·gc.alloc.rate:                   2584.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              10216.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10631.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   396158.218 ±(99.9%) 28506.245 ops/s [Average]
[info]   (min, avg, max) = (383054.815, 396158.218, 401084.723), stdev = 7402.981
[info]   CI (99.9%): [367651.974, 424664.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2560.041 ±(99.9%) 181.477 MB/sec [Average]
[info]   (min, avg, max) = (2476.742, 2560.041, 2591.074), stdev = 47.129
[info]   CI (99.9%): [2378.563, 2741.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10169.194 ±(99.9%) 189.199 B/op [Average]
[info]   (min, avg, max) = (10095.967, 10169.194, 10216.430), stdev = 49.134
[info]   CI (99.9%): [9979.995, 10358.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.002 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.010 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.007 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.030 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.149), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2545.539 ±(99.9%) 1164.066 MB/sec [Average]
[info]   (min, avg, max) = (2004.885, 2545.539, 2689.380), stdev = 302.304
[info]   CI (99.9%): [1381.474, 3709.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10121.103 ±(99.9%) 4910.578 B/op [Average]
[info]   (min, avg, max) = (7866.607, 10121.103, 11015.976), stdev = 1275.262
[info]   CI (99.9%): [5210.525, 15031.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen":
[info]   0.441 ±(99.9%) 3.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 2.203), stdev = 0.985
[info]   CI (99.9%): [≈ 0, 4.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   1.809 ±(99.9%) 15.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.809, 9.047), stdev = 4.046
[info]   CI (99.9%): [≈ 0, 17.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.354), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.551 ±(99.9%) 2.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.551, 1.395), stdev = 0.652
[info]   CI (99.9%): [≈ 0, 3.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.200, 35.000), stdev = 13.330
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16.27% complete, ETA 01:51:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56324.534 ops/s
[info] # Warmup Iteration   2: 95568.040 ops/s
[info] # Warmup Iteration   3: 92134.164 ops/s
[info] # Warmup Iteration   4: 95829.846 ops/s
[info] # Warmup Iteration   5: 96271.492 ops/s
[info] Iteration   1: 96091.549 ops/s
[info]                  ·gc.alloc.rate:               735.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          12051.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10992.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 96169.082 ops/s
[info]                  ·gc.alloc.rate:               739.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          12100.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10993.751 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 96348.999 ops/s
[info]                  ·gc.alloc.rate:                   740.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              12101.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10972.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 96401.577 ops/s
[info]                  ·gc.alloc.rate:               739.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          12067.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10973.192 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 91181.298 ops/s
[info]                  ·gc.alloc.rate:               698.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          12057.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11601.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   95238.501 ±(99.9%) 8747.092 ops/s [Average]
[info]   (min, avg, max) = (91181.298, 95238.501, 96401.577), stdev = 2271.592
[info]   CI (99.9%): [86491.410, 103985.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   730.817 ±(99.9%) 69.659 MB/sec [Average]
[info]   (min, avg, max) = (698.628, 730.817, 740.916), stdev = 18.090
[info]   CI (99.9%): [661.158, 800.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12075.812 ±(99.9%) 91.526 B/op [Average]
[info]   (min, avg, max) = (12051.433, 12075.812, 12101.499), stdev = 23.769
[info]   CI (99.9%): [11984.286, 12167.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.829 ±(99.9%) 1.591 MB/sec [Average]
[info]   (min, avg, max) = (671.167, 671.829, 672.183), stdev = 0.413
[info]   CI (99.9%): [670.238, 673.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11106.566 ±(99.9%) 1065.056 B/op [Average]
[info]   (min, avg, max) = (10972.647, 11106.566, 11601.022), stdev = 276.592
[info]   CI (99.9%): [10041.511, 12171.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.136 ±(99.9%) 1.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.680), stdev = 0.304
[info]   CI (99.9%): [≈ 0, 1.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:51:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9294.693 ops/s
[info] # Warmup Iteration   2: 22275.964 ops/s
[info] # Warmup Iteration   3: 25387.233 ops/s
[info] # Warmup Iteration   4: 25409.907 ops/s
[info] # Warmup Iteration   5: 25556.669 ops/s
[info] Iteration   1: 25765.593 ops/s
[info]                  ·gc.alloc.rate:               1670.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          102017.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123122.540 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 26075.572 ops/s
[info]                  ·gc.alloc.rate:                   1666.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              100573.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81129.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.530 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25361.539 ops/s
[info]                  ·gc.alloc.rate:                   1636.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              101518.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124954.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25961.268 ops/s
[info]                  ·gc.alloc.rate:               1670.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          101253.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81166.009 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 26262.989 ops/s
[info]                  ·gc.alloc.rate:                   1677.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              100524.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80235.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25885.392 ±(99.9%) 1324.531 ops/s [Average]
[info]   (min, avg, max) = (25361.539, 25885.392, 26262.989), stdev = 343.977
[info]   CI (99.9%): [24560.861, 27209.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1664.229 ±(99.9%) 62.535 MB/sec [Average]
[info]   (min, avg, max) = (1636.021, 1664.229, 1677.543), stdev = 16.240
[info]   CI (99.9%): [1601.694, 1726.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101177.504 ±(99.9%) 2449.871 B/op [Average]
[info]   (min, avg, max) = (100524.789, 101177.504, 102017.481), stdev = 636.224
[info]   CI (99.9%): [98727.633, 103627.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.430 ±(99.9%) 1421.326 MB/sec [Average]
[info]   (min, avg, max) = (1338.966, 1610.430, 2015.837), stdev = 369.114
[info]   CI (99.9%): [189.104, 3031.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   98121.746 ±(99.9%) 91146.496 B/op [Average]
[info]   (min, avg, max) = (80235.943, 98121.746, 124954.480), stdev = 23670.456
[info]   CI (99.9%): [6975.250, 189268.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 4.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 2.561), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 5.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.131 ±(99.9%) 263.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.131, 154.530), stdev = 68.313
[info]   CI (99.9%): [≈ 0, 309.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16.67% complete, ETA 01:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.830 ops/s
[info] # Warmup Iteration   2: 88800.374 ops/s
[info] # Warmup Iteration   3: 98171.822 ops/s
[info] # Warmup Iteration   4: 98774.539 ops/s
[info] # Warmup Iteration   5: 100218.440 ops/s
[info] Iteration   1: 99329.817 ops/s
[info]                  ·gc.alloc.rate:               971.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          15397.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21099.447 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 100193.130 ops/s
[info]                  ·gc.alloc.rate:                   966.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              15172.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10469.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 99933.335 ops/s
[info]                  ·gc.alloc.rate:                   975.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              15367.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21003.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 100312.192 ops/s
[info]                  ·gc.alloc.rate:               959.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          15054.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10467.052 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 99991.903 ops/s
[info]                  ·gc.alloc.rate:                   983.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              15478.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21022.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   99952.075 ±(99.9%) 1462.401 ops/s [Average]
[info]   (min, avg, max) = (99329.817, 99952.075, 100312.192), stdev = 379.781
[info]   CI (99.9%): [98489.674, 101414.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   971.396 ±(99.9%) 35.110 MB/sec [Average]
[info]   (min, avg, max) = (959.549, 971.396, 983.464), stdev = 9.118
[info]   CI (99.9%): [936.286, 1006.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15293.825 ±(99.9%) 674.004 B/op [Average]
[info]   (min, avg, max) = (15054.041, 15293.825, 15478.689), stdev = 175.037
[info]   CI (99.9%): [14619.821, 15967.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1067.032 ±(99.9%) 1406.303 MB/sec [Average]
[info]   (min, avg, max) = (666.757, 1067.032, 1335.685), stdev = 365.212
[info]   CI (99.9%): [≈ 0, 2473.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16812.281 ±(99.9%) 22300.616 B/op [Average]
[info]   (min, avg, max) = (10467.052, 16812.281, 21099.447), stdev = 5791.399
[info]   CI (99.9%): [≈ 0, 39112.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.145 ±(99.9%) 0.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.328), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.87% complete, ETA 01:51:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19141.613 ops/s
[info] # Warmup Iteration   2: 58815.199 ops/s
[info] # Warmup Iteration   3: 65457.332 ops/s
[info] # Warmup Iteration   4: 68497.979 ops/s
[info] # Warmup Iteration   5: 68514.039 ops/s
[info] Iteration   1: 66253.878 ops/s
[info]                  ·gc.alloc.rate:               1176.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          27945.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15887.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 66159.092 ops/s
[info]                  ·gc.alloc.rate:                   1189.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              28282.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31833.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 66093.556 ops/s
[info]                  ·gc.alloc.rate:                   1185.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              28232.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31889.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 68109.008 ops/s
[info]                  ·gc.alloc.rate:                   1219.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              28179.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30960.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 69192.790 ops/s
[info]                  ·gc.alloc.rate:                   1237.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              28152.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15242.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   67161.665 ±(99.9%) 5443.255 ops/s [Average]
[info]   (min, avg, max) = (66093.556, 67161.665, 69192.790), stdev = 1413.596
[info]   CI (99.9%): [61718.410, 72604.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1201.729 ±(99.9%) 99.459 MB/sec [Average]
[info]   (min, avg, max) = (1176.526, 1201.729, 1237.759), stdev = 25.829
[info]   CI (99.9%): [1102.270, 1301.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28158.426 ±(99.9%) 496.400 B/op [Average]
[info]   (min, avg, max) = (27945.699, 28158.426, 28282.300), stdev = 128.913
[info]   CI (99.9%): [27662.026, 28654.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.341 ±(99.9%) 1412.476 MB/sec [Average]
[info]   (min, avg, max) = (668.871, 1071.341, 1339.973), stdev = 366.816
[info]   CI (99.9%): [≈ 0, 2483.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25162.910 ±(99.9%) 33778.524 B/op [Average]
[info]   (min, avg, max) = (15242.868, 25162.910, 31889.666), stdev = 8772.175
[info]   CI (99.9%): [≈ 0, 58941.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 5.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.289), stdev = 1.415
[info]   CI (99.9%): [≈ 0, 6.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.095 ±(99.9%) 125.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.095, 75.998), stdev = 32.701
[info]   CI (99.9%): [≈ 0, 145.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.200, 7.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.07% complete, ETA 01:50:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48801.848 ops/s
[info] # Warmup Iteration   2: 134995.530 ops/s
[info] # Warmup Iteration   3: 135930.340 ops/s
[info] # Warmup Iteration   4: 137013.456 ops/s
[info] # Warmup Iteration   5: 137730.008 ops/s
[info] Iteration   1: 138639.433 ops/s
[info]                  ·gc.alloc.rate:                   969.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              10996.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15201.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 138185.730 ops/s
[info]                  ·gc.alloc.rate:               971.164 MB/sec
[info]                  ·gc.alloc.rate.norm:          11060.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7655.169 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 139069.280 ops/s
[info]                  ·gc.alloc.rate:                   950.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              10760.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7606.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 135489.527 ops/s
[info]                  ·gc.alloc.rate:                   940.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              10922.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15621.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 139771.812 ops/s
[info]                  ·gc.alloc.rate:               953.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          10737.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7575.820 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   138231.156 ±(99.9%) 6315.924 ops/s [Average]
[info]   (min, avg, max) = (135489.527, 138231.156, 139771.812), stdev = 1640.225
[info]   CI (99.9%): [131915.232, 144547.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   957.221 ±(99.9%) 50.653 MB/sec [Average]
[info]   (min, avg, max) = (940.408, 957.221, 971.164), stdev = 13.154
[info]   CI (99.9%): [906.568, 1007.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10895.779 ±(99.9%) 548.565 B/op [Average]
[info]   (min, avg, max) = (10737.971, 10895.779, 11060.361), stdev = 142.461
[info]   CI (99.9%): [10347.213, 11444.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.581 ±(99.9%) 1414.156 MB/sec [Average]
[info]   (min, avg, max) = (672.160, 940.581, 1344.969), stdev = 367.252
[info]   CI (99.9%): [≈ 0, 2354.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10732.056 ±(99.9%) 16459.236 B/op [Average]
[info]   (min, avg, max) = (7575.820, 10732.056, 15621.979), stdev = 4274.411
[info]   CI (99.9%): [≈ 0, 27191.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.238 ±(99.9%) 0.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.238, 0.484), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 2.049
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.27% complete, ETA 01:50:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4134.382 ops/s
[info] # Warmup Iteration   2: 29627.269 ops/s
[info] # Warmup Iteration   3: 36835.799 ops/s
[info] # Warmup Iteration   4: 37463.571 ops/s
[info] # Warmup Iteration   5: 38436.863 ops/s
[info] Iteration   1: 37335.283 ops/s
[info]                  ·gc.alloc.rate:                   1869.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              78800.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84688.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 37375.920 ops/s
[info]                  ·gc.alloc.rate:                   1867.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              78622.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84551.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 37540.565 ops/s
[info]                  ·gc.alloc.rate:               1875.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          78639.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55962.777 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 37580.816 ops/s
[info]                  ·gc.alloc.rate:               1878.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          78648.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83771.149 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 37630.417 ops/s
[info]                  ·gc.alloc.rate:               1894.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          79214.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83731.738 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   37492.600 ±(99.9%) 499.987 ops/s [Average]
[info]   (min, avg, max) = (37335.283, 37492.600, 37630.417), stdev = 129.845
[info]   CI (99.9%): [36992.613, 37992.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1877.134 ±(99.9%) 40.694 MB/sec [Average]
[info]   (min, avg, max) = (1867.443, 1877.134, 1894.184), stdev = 10.568
[info]   CI (99.9%): [1836.440, 1917.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78785.149 ±(99.9%) 964.434 B/op [Average]
[info]   (min, avg, max) = (78622.468, 78785.149, 79214.451), stdev = 250.460
[info]   CI (99.9%): [77820.716, 79749.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1871.113 ±(99.9%) 1154.053 MB/sec [Average]
[info]   (min, avg, max) = (1335.026, 1871.113, 2009.137), stdev = 299.704
[info]   CI (99.9%): [717.061, 3025.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78540.994 ±(99.9%) 48630.438 B/op [Average]
[info]   (min, avg, max) = (55962.777, 78540.994, 84688.033), stdev = 12629.170
[info]   CI (99.9%): [29910.556, 127171.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.392), stdev = 1.955
[info]   CI (99.9%): [≈ 0, 8.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.684 ±(99.9%) 316.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.684, 184.912), stdev = 82.317
[info]   CI (99.9%): [≈ 0, 354.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17.47% complete, ETA 01:50:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26208.544 ops/s
[info] # Warmup Iteration   2: 66719.235 ops/s
[info] # Warmup Iteration   3: 69676.986 ops/s
[info] # Warmup Iteration   4: 70500.713 ops/s
[info] # Warmup Iteration   5: 70415.437 ops/s
[info] Iteration   1: 70361.843 ops/s
[info]                  ·gc.alloc.rate:               1368.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          30617.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30067.016 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 70127.919 ops/s
[info]                  ·gc.alloc.rate:                   1360.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              30525.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30182.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68054.292 ops/s
[info]                  ·gc.alloc.rate:                   1333.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              30839.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31117.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 69241.874 ops/s
[info]                  ·gc.alloc.rate:                   1355.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              30812.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30553.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 68017.665 ops/s
[info]                  ·gc.alloc.rate:                   1345.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              31131.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31056.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.853 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   69160.719 ±(99.9%) 4268.624 ops/s [Average]
[info]   (min, avg, max) = (68017.665, 69160.719, 70361.843), stdev = 1108.548
[info]   CI (99.9%): [64892.095, 73429.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1352.851 ±(99.9%) 52.504 MB/sec [Average]
[info]   (min, avg, max) = (1333.623, 1352.851, 1368.923), stdev = 13.635
[info]   CI (99.9%): [1300.347, 1405.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30785.243 ±(99.9%) 900.855 B/op [Average]
[info]   (min, avg, max) = (30525.888, 30785.243, 31131.283), stdev = 233.949
[info]   CI (99.9%): [29884.388, 31686.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.346 ±(99.9%) 4.635 MB/sec [Average]
[info]   (min, avg, max) = (1342.425, 1344.346, 1345.656), stdev = 1.204
[info]   CI (99.9%): [1339.711, 1348.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   30595.307 ±(99.9%) 1863.512 B/op [Average]
[info]   (min, avg, max) = (30067.016, 30595.307, 31117.300), stdev = 483.948
[info]   CI (99.9%): [28731.796, 32458.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 4.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 2.685), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 5.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   15.932 ±(99.9%) 101.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.932, 62.100), stdev = 26.297
[info]   CI (99.9%): [≈ 0, 117.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.67% complete, ETA 01:49:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12490.835 ops/s
[info] # Warmup Iteration   2: 30505.084 ops/s
[info] # Warmup Iteration   3: 32299.725 ops/s
[info] # Warmup Iteration   4: 31877.031 ops/s
[info] # Warmup Iteration   5: 31577.636 ops/s
[info] Iteration   1: 32206.819 ops/s
[info]                  ·gc.alloc.rate:                   532.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              26025.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24999.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 32313.678 ops/s
[info]                  ·gc.alloc.rate:               541.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          26354.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32588.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 32353.304 ops/s
[info]                  ·gc.alloc.rate:                   531.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              25847.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32548.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32411.113 ops/s
[info]                  ·gc.alloc.rate:                   541.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              26268.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32524.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32462.504 ops/s
[info]                  ·gc.alloc.rate:      517.811 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32349.483 ±(99.9%) 376.407 ops/s [Average]
[info]   (min, avg, max) = (32206.819, 32349.483, 32462.504), stdev = 97.752
[info]   CI (99.9%): [31973.076, 32725.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   532.815 ±(99.9%) 36.803 MB/sec [Average]
[info]   (min, avg, max) = (517.811, 532.815, 541.252), stdev = 9.558
[info]   CI (99.9%): [496.012, 569.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25920.136 ±(99.9%) 1918.222 B/op [Average]
[info]   (min, avg, max) = (25104.013, 25920.136, 26354.994), stdev = 498.156
[info]   CI (99.9%): [24001.914, 27838.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   503.977 ±(99.9%) 1116.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.977, 669.851), stdev = 289.901
[info]   CI (99.9%): [≈ 0, 1620.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24532.127 ±(99.9%) 54288.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24532.127, 32588.552), stdev = 14098.621
[info]   CI (99.9%): [≈ 0, 78820.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.608 ±(99.9%) 2.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 1.017), stdev = 0.555
[info]   CI (99.9%): [≈ 0, 2.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.87% complete, ETA 01:49:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13710.793 ops/s
[info] # Warmup Iteration   2: 30895.395 ops/s
[info] # Warmup Iteration   3: 31873.021 ops/s
[info] # Warmup Iteration   4: 31973.091 ops/s
[info] # Warmup Iteration   5: 32122.766 ops/s
[info] Iteration   1: 31868.825 ops/s
[info]                  ·gc.alloc.rate:               399.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          19711.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25264.514 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 29941.372 ops/s
[info]                  ·gc.alloc.rate:               397.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          20890.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26891.053 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 31063.217 ops/s
[info]                  ·gc.alloc.rate:      379.256 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 31419.302 ops/s
[info]                  ·gc.alloc.rate:               401.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          20089.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33433.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31766.401 ops/s
[info]                  ·gc.alloc.rate:               407.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          20166.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33067.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   31211.823 ±(99.9%) 2994.098 ops/s [Average]
[info]   (min, avg, max) = (29941.372, 31211.823, 31868.825), stdev = 777.558
[info]   CI (99.9%): [28217.725, 34205.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   396.822 ±(99.9%) 40.328 MB/sec [Average]
[info]   (min, avg, max) = (379.256, 396.822, 407.086), stdev = 10.473
[info]   CI (99.9%): [356.494, 437.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20013.180 ±(99.9%) 2387.667 B/op [Average]
[info]   (min, avg, max) = (19208.014, 20013.180, 20890.160), stdev = 620.070
[info]   CI (99.9%): [17625.513, 22400.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.669 ±(99.9%) 1058.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.669, 667.652), stdev = 274.961
[info]   CI (99.9%): [≈ 0, 1530.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23731.177 ±(99.9%) 52965.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23731.177, 33433.245), stdev = 13754.942
[info]   CI (99.9%): [≈ 0, 76696.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.07% complete, ETA 01:49:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21030.888 ops/s
[info] # Warmup Iteration   2: 33814.784 ops/s
[info] # Warmup Iteration   3: 33199.695 ops/s
[info] # Warmup Iteration   4: 33059.869 ops/s
[info] # Warmup Iteration   5: 34418.453 ops/s
[info] Iteration   1: 34337.735 ops/s
[info]                  ·gc.alloc.rate:                   431.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              19776.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23448.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 34450.070 ops/s
[info]                  ·gc.alloc.rate:      422.173 MB/sec
[info]                  ·gc.alloc.rate.norm: 19284.603 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34373.071 ops/s
[info]                  ·gc.alloc.rate:               432.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          19816.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30727.446 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34495.812 ops/s
[info]                  ·gc.alloc.rate:      414.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34392.953 ops/s
[info]                  ·gc.alloc.rate:                   433.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              19828.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30711.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   34409.928 ±(99.9%) 242.359 ops/s [Average]
[info]   (min, avg, max) = (34337.735, 34409.928, 34495.812), stdev = 62.940
[info]   CI (99.9%): [34167.569, 34652.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   426.828 ±(99.9%) 32.365 MB/sec [Average]
[info]   (min, avg, max) = (414.192, 426.828, 433.334), stdev = 8.405
[info]   CI (99.9%): [394.463, 459.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19520.444 ±(99.9%) 1603.601 B/op [Average]
[info]   (min, avg, max) = (18896.017, 19520.444, 19828.783), stdev = 416.450
[info]   CI (99.9%): [17916.843, 21124.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.812 ±(99.9%) 1327.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.812, 671.167), stdev = 344.704
[info]   CI (99.9%): [≈ 0, 1698.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16977.411 ±(99.9%) 60762.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16977.411, 30727.446), stdev = 15779.905
[info]   CI (99.9%): [≈ 0, 77740.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.381 ±(99.9%) 2.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 0.954), stdev = 0.522
[info]   CI (99.9%): [≈ 0, 2.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.27% complete, ETA 01:49:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19666.971 ops/s
[info] # Warmup Iteration   2: 32998.405 ops/s
[info] # Warmup Iteration   3: 34256.708 ops/s
[info] # Warmup Iteration   4: 33453.191 ops/s
[info] # Warmup Iteration   5: 34176.581 ops/s
[info] Iteration   1: 34214.121 ops/s
[info]                  ·gc.alloc.rate:               381.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          17542.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23531.832 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34359.605 ops/s
[info]                  ·gc.alloc.rate:               394.552 MB/sec
[info]                  ·gc.alloc.rate.norm:          18070.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23431.866 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 34467.362 ops/s
[info]                  ·gc.alloc.rate:      374.439 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 33336.430 ops/s
[info]                  ·gc.alloc.rate:                   377.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              17810.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31667.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34390.211 ops/s
[info]                  ·gc.alloc.rate:      373.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   34153.546 ±(99.9%) 1794.064 ops/s [Average]
[info]   (min, avg, max) = (33336.430, 34153.546, 34467.362), stdev = 465.913
[info]   CI (99.9%): [32359.482, 35947.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   380.292 ±(99.9%) 32.916 MB/sec [Average]
[info]   (min, avg, max) = (373.598, 380.292, 394.552), stdev = 8.548
[info]   CI (99.9%): [347.376, 413.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17523.224 ±(99.9%) 1664.935 B/op [Average]
[info]   (min, avg, max) = (17096.013, 17523.224, 18070.861), stdev = 432.378
[info]   CI (99.9%): [15858.289, 19188.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   338.864 ±(99.9%) 1217.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.864, 670.999), stdev = 316.105
[info]   CI (99.9%): [≈ 0, 1556.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   15726.209 ±(99.9%) 56757.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15726.209, 31667.347), stdev = 14739.845
[info]   CI (99.9%): [≈ 0, 72484.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 5.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.948), stdev = 1.318
[info]   CI (99.9%): [≈ 0, 5.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18.47% complete, ETA 01:48:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12592.467 ops/s
[info] # Warmup Iteration   2: 25205.975 ops/s
[info] # Warmup Iteration   3: 26843.697 ops/s
[info] # Warmup Iteration   4: 26763.420 ops/s
[info] # Warmup Iteration   5: 26726.871 ops/s
[info] Iteration   1: 27126.757 ops/s
[info]                  ·gc.alloc.rate:               710.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          41207.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38954.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 26377.721 ops/s
[info]                  ·gc.alloc.rate:               713.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          42562.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40100.560 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 27086.584 ops/s
[info]                  ·gc.alloc.rate:               711.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          41358.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39051.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 27100.573 ops/s
[info]                  ·gc.alloc.rate:                   711.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              41311.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39050.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.418 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27089.753 ops/s
[info]                  ·gc.alloc.rate:               709.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          41234.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39066.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   26956.278 ±(99.9%) 1246.871 ops/s [Average]
[info]   (min, avg, max) = (26377.721, 26956.278, 27126.757), stdev = 323.809
[info]   CI (99.9%): [25709.406, 28203.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   711.374 ±(99.9%) 5.435 MB/sec [Average]
[info]   (min, avg, max) = (709.814, 711.374, 713.419), stdev = 1.412
[info]   CI (99.9%): [705.939, 716.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   41534.863 ±(99.9%) 2224.305 B/op [Average]
[info]   (min, avg, max) = (41207.471, 41534.863, 42562.599), stdev = 577.645
[info]   CI (99.9%): [39310.558, 43759.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   672.160 ±(99.9%) 1.567 MB/sec [Average]
[info]   (min, avg, max) = (671.497, 672.160, 672.501), stdev = 0.407
[info]   CI (99.9%): [670.592, 673.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   39244.640 ±(99.9%) 1850.266 B/op [Average]
[info]   (min, avg, max) = (38954.948, 39244.640, 40100.560), stdev = 480.508
[info]   CI (99.9%): [37394.374, 41094.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.484 ±(99.9%) 4.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 2.418), stdev = 1.081
[info]   CI (99.9%): [≈ 0, 4.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.67% complete, ETA 01:48:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2217.877 ops/s
[info] # Warmup Iteration   2: 11237.882 ops/s
[info] # Warmup Iteration   3: 14472.569 ops/s
[info] # Warmup Iteration   4: 15089.226 ops/s
[info] # Warmup Iteration   5: 14985.337 ops/s
[info] Iteration   1: 15027.707 ops/s
[info]                  ·gc.alloc.rate:               1093.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          114547.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70249.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 14986.976 ops/s
[info]                  ·gc.alloc.rate:                   1110.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              116611.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140952.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14985.620 ops/s
[info]                  ·gc.alloc.rate:               1097.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          115213.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70511.315 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 14956.845 ops/s
[info]                  ·gc.alloc.rate:                   1111.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              116895.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141305.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 15069.450 ops/s
[info]                  ·gc.alloc.rate:                   1104.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              115302.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140315.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15005.319 ±(99.9%) 168.817 ops/s [Average]
[info]   (min, avg, max) = (14956.845, 15005.319, 15069.450), stdev = 43.841
[info]   CI (99.9%): [14836.502, 15174.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1103.373 ±(99.9%) 29.763 MB/sec [Average]
[info]   (min, avg, max) = (1093.867, 1103.373, 1111.007), stdev = 7.729
[info]   CI (99.9%): [1073.610, 1133.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   115714.068 ±(99.9%) 3842.105 B/op [Average]
[info]   (min, avg, max) = (114547.458, 115714.068, 116895.835), stdev = 997.783
[info]   CI (99.9%): [111871.962, 119556.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1074.305 ±(99.9%) 1417.145 MB/sec [Average]
[info]   (min, avg, max) = (670.842, 1074.305, 1343.926), stdev = 368.028
[info]   CI (99.9%): [≈ 0, 2491.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112666.858 ±(99.9%) 148650.029 B/op [Average]
[info]   (min, avg, max) = (70249.220, 112666.858, 141305.429), stdev = 38603.940
[info]   CI (99.9%): [≈ 0, 261316.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 3.144), stdev = 1.401
[info]   CI (99.9%): [≈ 0, 6.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   66.529 ±(99.9%) 563.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.529, 328.267), stdev = 146.320
[info]   CI (99.9%): [≈ 0, 629.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.88% complete, ETA 01:48:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1448.135 ops/s
[info] # Warmup Iteration   2: 12594.770 ops/s
[info] # Warmup Iteration   3: 14713.481 ops/s
[info] # Warmup Iteration   4: 14582.926 ops/s
[info] # Warmup Iteration   5: 15308.072 ops/s
[info] Iteration   1: 15268.720 ops/s
[info]                  ·gc.alloc.rate:               1009.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          104025.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68861.503 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 15389.146 ops/s
[info]                  ·gc.alloc.rate:                   999.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              102237.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68363.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14640.023 ops/s
[info]                  ·gc.alloc.rate:                   977.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              105113.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71855.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14578.443 ops/s
[info]                  ·gc.alloc.rate:               966.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          104365.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144393.129 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 14732.353 ops/s
[info]                  ·gc.alloc.rate:                   949.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              101380.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71508.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   14921.737 ±(99.9%) 1456.067 ops/s [Average]
[info]   (min, avg, max) = (14578.443, 14921.737, 15389.146), stdev = 378.136
[info]   CI (99.9%): [13465.670, 16377.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   980.635 ±(99.9%) 93.870 MB/sec [Average]
[info]   (min, avg, max) = (949.255, 980.635, 1009.339), stdev = 24.378
[info]   CI (99.9%): [886.765, 1074.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   103424.433 ±(99.9%) 5993.397 B/op [Average]
[info]   (min, avg, max) = (101380.028, 103424.433, 105113.559), stdev = 1556.466
[info]   CI (99.9%): [97431.036, 109417.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.476 ±(99.9%) 1151.884 MB/sec [Average]
[info]   (min, avg, max) = (668.148, 802.476, 1337.594), stdev = 299.141
[info]   CI (99.9%): [≈ 0, 1954.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   84996.255 ±(99.9%) 127995.416 B/op [Average]
[info]   (min, avg, max) = (68363.177, 84996.255, 144393.129), stdev = 33240.003
[info]   CI (99.9%): [≈ 0, 212991.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.318 ±(99.9%) 4.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.318, 2.238), stdev = 1.204
[info]   CI (99.9%): [≈ 0, 5.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.08% complete, ETA 01:48:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58695.668 ops/s
[info] # Warmup Iteration   2: 98804.811 ops/s
[info] # Warmup Iteration   3: 104513.917 ops/s
[info] # Warmup Iteration   4: 105991.178 ops/s
[info] # Warmup Iteration   5: 103848.070 ops/s
[info] Iteration   1: 103268.952 ops/s
[info]                  ·gc.alloc.rate:                   286.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              4359.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7797.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 103659.781 ops/s
[info]                  ·gc.alloc.rate:               285.230 MB/sec
[info]                  ·gc.alloc.rate.norm:          4329.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7767.679 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 103846.447 ops/s
[info]                  ·gc.alloc.rate:      270.303 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 103168.969 ops/s
[info]                  ·gc.alloc.rate:               278.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          4247.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7804.718 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 103789.479 ops/s
[info]                  ·gc.alloc.rate:      270.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   103546.726 ±(99.9%) 1189.036 ops/s [Average]
[info]   (min, avg, max) = (103168.969, 103546.726, 103846.447), stdev = 308.789
[info]   CI (99.9%): [102357.689, 104735.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   278.056 ±(99.9%) 29.788 MB/sec [Average]
[info]   (min, avg, max) = (270.149, 278.056, 286.124), stdev = 7.736
[info]   CI (99.9%): [248.268, 307.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4225.779 ±(99.9%) 482.584 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4225.779, 4359.207), stdev = 125.326
[info]   CI (99.9%): [3743.195, 4708.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.026 ±(99.9%) 1079.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.026, 511.780), stdev = 280.275
[info]   CI (99.9%): [≈ 0, 1386.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4673.912 ±(99.9%) 16429.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4673.912, 7804.718), stdev = 4266.700
[info]   CI (99.9%): [≈ 0, 21103.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.317), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.28% complete, ETA 01:47:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1386.068 ops/s
[info] # Warmup Iteration   2: 7887.335 ops/s
[info] # Warmup Iteration   3: 13041.097 ops/s
[info] # Warmup Iteration   4: 13103.683 ops/s
[info] # Warmup Iteration   5: 13116.137 ops/s
[info] Iteration   1: 13132.827 ops/s
[info]                  ·gc.alloc.rate:               1265.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          151626.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80343.464 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 13085.075 ops/s
[info]                  ·gc.alloc.rate:               1283.351 MB/sec
[info]                  ·gc.alloc.rate.norm:          154342.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161316.303 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 13080.035 ops/s
[info]                  ·gc.alloc.rate:                   1269.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              152721.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161418.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 12971.123 ops/s
[info]                  ·gc.alloc.rate:                   1261.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              153096.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162774.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 346.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 12791.537 ops/s
[info]                  ·gc.alloc.rate:                   1273.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              156725.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164887.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.758 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13012.119 ±(99.9%) 526.717 ops/s [Average]
[info]   (min, avg, max) = (12791.537, 13012.119, 13132.827), stdev = 136.787
[info]   CI (99.9%): [12485.403, 13538.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1270.778 ±(99.9%) 32.129 MB/sec [Average]
[info]   (min, avg, max) = (1261.891, 1270.778, 1283.351), stdev = 8.344
[info]   CI (99.9%): [1238.648, 1302.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   153702.514 ±(99.9%) 7503.126 B/op [Average]
[info]   (min, avg, max) = (151626.450, 153702.514, 156725.311), stdev = 1948.538
[info]   CI (99.9%): [146199.388, 161205.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1207.082 ±(99.9%) 1155.098 MB/sec [Average]
[info]   (min, avg, max) = (670.471, 1207.082, 1341.682), stdev = 299.975
[info]   CI (99.9%): [51.984, 2362.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   146147.883 ±(99.9%) 141757.634 B/op [Average]
[info]   (min, avg, max) = (80343.464, 146147.883, 164887.449), stdev = 36814.007
[info]   CI (99.9%): [4390.248, 287905.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.899 ±(99.9%) 4.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.899, 2.852), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 5.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   109.656 ±(99.9%) 607.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.656, 346.016), stdev = 157.730
[info]   CI (99.9%): [≈ 0, 717.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19.48% complete, ETA 01:47:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1992.806 ops/s
[info] # Warmup Iteration   2: 13480.272 ops/s
[info] # Warmup Iteration   3: 14466.365 ops/s
[info] # Warmup Iteration   4: 14810.657 ops/s
[info] # Warmup Iteration   5: 14780.699 ops/s
[info] Iteration   1: 14785.558 ops/s
[info]                  ·gc.alloc.rate:                   1030.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              109650.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71469.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14765.008 ops/s
[info]                  ·gc.alloc.rate:               1047.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          111685.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143284.559 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 14689.282 ops/s
[info]                  ·gc.alloc.rate:                   1020.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              109291.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72007.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.230 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14161.583 ops/s
[info]                  ·gc.alloc.rate:                   1005.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              111574.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148916.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 14259.993 ops/s
[info]                  ·gc.alloc.rate:                   986.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              108888.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74210.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.297 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   14532.285 ±(99.9%) 1146.365 ops/s [Average]
[info]   (min, avg, max) = (14161.583, 14532.285, 14785.558), stdev = 297.707
[info]   CI (99.9%): [13385.920, 15678.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1018.025 ±(99.9%) 90.085 MB/sec [Average]
[info]   (min, avg, max) = (986.713, 1018.025, 1047.864), stdev = 23.395
[info]   CI (99.9%): [927.940, 1108.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   110218.095 ±(99.9%) 5072.744 B/op [Average]
[info]   (min, avg, max) = (108888.398, 110218.095, 111685.178), stdev = 1317.376
[info]   CI (99.9%): [105145.351, 115290.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   940.405 ±(99.9%) 1415.038 MB/sec [Average]
[info]   (min, avg, max) = (671.490, 940.405, 1344.339), stdev = 367.481
[info]   CI (99.9%): [≈ 0, 2355.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   101977.827 ±(99.9%) 155337.308 B/op [Average]
[info]   (min, avg, max) = (71469.647, 101977.827, 148916.531), stdev = 40340.606
[info]   CI (99.9%): [≈ 0, 257315.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.253 ±(99.9%) 6.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.253, 4.431), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 8.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.68% complete, ETA 01:47:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12374.438 ops/s
[info] # Warmup Iteration   2: 43184.495 ops/s
[info] # Warmup Iteration   3: 44733.562 ops/s
[info] # Warmup Iteration   4: 44108.101 ops/s
[info] # Warmup Iteration   5: 44407.178 ops/s
[info] Iteration   1: 44342.642 ops/s
[info]                  ·gc.alloc.rate:               1145.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          40649.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47555.084 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 45377.802 ops/s
[info]                  ·gc.alloc.rate:               1137.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          39448.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23241.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 45010.895 ops/s
[info]                  ·gc.alloc.rate:                   1142.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              39949.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46907.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 45063.159 ops/s
[info]                  ·gc.alloc.rate:               1155.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          40364.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46853.594 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 45044.285 ops/s
[info]                  ·gc.alloc.rate:                   1140.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              39828.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23459.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   44967.756 ±(99.9%) 1460.867 ops/s [Average]
[info]   (min, avg, max) = (44342.642, 44967.756, 45377.802), stdev = 379.382
[info]   CI (99.9%): [43506.889, 46428.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1144.363 ±(99.9%) 27.007 MB/sec [Average]
[info]   (min, avg, max) = (1137.704, 1144.363, 1155.832), stdev = 7.014
[info]   CI (99.9%): [1117.356, 1171.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40048.104 ±(99.9%) 1804.486 B/op [Average]
[info]   (min, avg, max) = (39448.602, 40048.104, 40649.251), stdev = 468.619
[info]   CI (99.9%): [38243.618, 41852.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.035 ±(99.9%) 1413.339 MB/sec [Average]
[info]   (min, avg, max) = (670.277, 1073.035, 1341.657), stdev = 367.040
[info]   CI (99.9%): [≈ 0, 2486.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37603.490 ±(99.9%) 50113.319 B/op [Average]
[info]   (min, avg, max) = (23241.109, 37603.490, 47555.084), stdev = 13014.270
[info]   CI (99.9%): [≈ 0, 87716.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.800 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.373), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.710 ±(99.9%) 202.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.710, 117.823), stdev = 52.612
[info]   CI (99.9%): [≈ 0, 226.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.88% complete, ETA 01:47:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14266.623 ops/s
[info] # Warmup Iteration   2: 58496.864 ops/s
[info] # Warmup Iteration   3: 62932.344 ops/s
[info] # Warmup Iteration   4: 64176.898 ops/s
[info] # Warmup Iteration   5: 63965.318 ops/s
[info] Iteration   1: 64023.405 ops/s
[info]                  ·gc.alloc.rate:                   1131.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              27819.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32866.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 64477.473 ops/s
[info]                  ·gc.alloc.rate:               1116.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          27257.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16324.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 63865.311 ops/s
[info]                  ·gc.alloc.rate:                   1121.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              27624.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32996.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 64152.761 ops/s
[info]                  ·gc.alloc.rate:               1123.346 MB/sec
[info]                  ·gc.alloc.rate.norm:          27552.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16432.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 63645.290 ops/s
[info]                  ·gc.alloc.rate:                   1128.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              27901.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33135.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   64032.848 ±(99.9%) 1203.025 ops/s [Average]
[info]   (min, avg, max) = (63645.290, 64032.848, 64477.473), stdev = 312.422
[info]   CI (99.9%): [62829.823, 65235.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1124.311 ±(99.9%) 22.871 MB/sec [Average]
[info]   (min, avg, max) = (1116.806, 1124.311, 1131.818), stdev = 5.939
[info]   CI (99.9%): [1101.440, 1147.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27631.062 ±(99.9%) 971.796 B/op [Average]
[info]   (min, avg, max) = (27257.017, 27631.062, 27901.756), stdev = 252.372
[info]   CI (99.9%): [26659.266, 28602.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.057 ±(99.9%) 1411.801 MB/sec [Average]
[info]   (min, avg, max) = (668.879, 1071.057, 1340.147), stdev = 366.640
[info]   CI (99.9%): [≈ 0, 2482.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26351.187 ±(99.9%) 35057.059 B/op [Average]
[info]   (min, avg, max) = (16324.804, 26351.187, 33135.555), stdev = 9104.207
[info]   CI (99.9%): [≈ 0, 61408.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.746 ±(99.9%) 6.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.746, 3.667), stdev = 1.633
[info]   CI (99.9%): [≈ 0, 7.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.439 ±(99.9%) 155.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.439, 90.656), stdev = 40.373
[info]   CI (99.9%): [≈ 0, 173.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.08% complete, ETA 01:46:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107496.439 ops/s
[info] # Warmup Iteration   2: 165932.913 ops/s
[info] # Warmup Iteration   3: 173234.879 ops/s
[info] # Warmup Iteration   4: 174064.416 ops/s
[info] # Warmup Iteration   5: 175465.189 ops/s
[info] Iteration   1: 175245.999 ops/s
[info]                  ·gc.alloc.rate:                   293.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              2639.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4594.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 175848.760 ops/s
[info]                  ·gc.alloc.rate:               290.096 MB/sec
[info]                  ·gc.alloc.rate.norm:          2596.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4578.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 175480.230 ops/s
[info]                  ·gc.alloc.rate:      278.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 172704.273 ops/s
[info]                  ·gc.alloc.rate:                   290.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              2647.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4661.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 177202.543 ops/s
[info]                  ·gc.alloc.rate:      281.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   175296.361 ±(99.9%) 6296.109 ops/s [Average]
[info]   (min, avg, max) = (172704.273, 175296.361, 177202.543), stdev = 1635.080
[info]   CI (99.9%): [169000.252, 181592.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   286.793 ±(99.9%) 25.859 MB/sec [Average]
[info]   (min, avg, max) = (278.323, 286.793, 293.910), stdev = 6.715
[info]   CI (99.9%): [260.934, 312.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2575.032 ±(99.9%) 287.817 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2575.032, 2647.607), stdev = 74.745
[info]   CI (99.9%): [2287.215, 2862.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.972 ±(99.9%) 1079.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.972, 511.639), stdev = 280.226
[info]   CI (99.9%): [≈ 0, 1386.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2766.980 ±(99.9%) 9727.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2766.980, 4661.930), stdev = 2526.089
[info]   CI (99.9%): [≈ 0, 12494.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.374), stdev = 0.168
[info]   CI (99.9%): [≈ 0, 0.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.28% complete, ETA 01:46:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101044.224 ops/s
[info] # Warmup Iteration   2: 177094.675 ops/s
[info] # Warmup Iteration   3: 183205.864 ops/s
[info] # Warmup Iteration   4: 184533.043 ops/s
[info] # Warmup Iteration   5: 183981.004 ops/s
[info] Iteration   1: 184530.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 179007.399 ops/s
[info]                  ·gc.alloc.rate:      19.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 175.787 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 184463.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 184484.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 184269.309 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   183351.029 ±(99.9%) 9357.880 ops/s [Average]
[info]   (min, avg, max) = (179007.399, 183351.029, 184530.339), stdev = 2430.212
[info]   CI (99.9%): [173993.149, 192708.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.000 ±(99.9%) 34.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 4.000, 19.997), stdev = 8.943
[info]   CI (99.9%): [≈ 0, 38.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   35.160 ±(99.9%) 302.712 B/op [Average]
[info]   (min, avg, max) = (0.002, 35.160, 175.787), stdev = 78.613
[info]   CI (99.9%): [≈ 0, 337.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.48% complete, ETA 01:46:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22864.222 ops/s
[info] # Warmup Iteration   2: 58023.848 ops/s
[info] # Warmup Iteration   3: 58524.582 ops/s
[info] # Warmup Iteration   4: 59382.726 ops/s
[info] # Warmup Iteration   5: 59661.343 ops/s
[info] Iteration   1: 59545.479 ops/s
[info]                  ·gc.alloc.rate:                   1159.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              30650.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35424.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 58556.936 ops/s
[info]                  ·gc.alloc.rate:               1135.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          30507.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36038.646 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 59525.786 ops/s
[info]                  ·gc.alloc.rate:                   1135.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              30013.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17735.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 59985.622 ops/s
[info]                  ·gc.alloc.rate:                   1148.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              30139.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17600.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 59643.472 ops/s
[info]                  ·gc.alloc.rate:                   1156.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              30514.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35433.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   59451.459 ±(99.9%) 2052.736 ops/s [Average]
[info]   (min, avg, max) = (58556.936, 59451.459, 59985.622), stdev = 533.089
[info]   CI (99.9%): [57398.723, 61504.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1147.098 ±(99.9%) 44.626 MB/sec [Average]
[info]   (min, avg, max) = (1135.143, 1147.098, 1159.777), stdev = 11.589
[info]   CI (99.9%): [1102.472, 1191.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30365.358 ±(99.9%) 1052.288 B/op [Average]
[info]   (min, avg, max) = (30013.661, 30365.358, 30650.934), stdev = 273.276
[info]   CI (99.9%): [29313.070, 31417.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1073.192 ±(99.9%) 1414.306 MB/sec [Average]
[info]   (min, avg, max) = (670.779, 1073.192, 1342.917), stdev = 367.291
[info]   CI (99.9%): [≈ 0, 2487.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28446.537 ±(99.9%) 37901.472 B/op [Average]
[info]   (min, avg, max) = (17600.361, 28446.537, 36038.646), stdev = 9842.892
[info]   CI (99.9%): [≈ 0, 66348.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.809), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.652 ±(99.9%) 171.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.652, 100.514), stdev = 44.648
[info]   CI (99.9%): [≈ 0, 192.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20.68% complete, ETA 01:45:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9773.707 ops/s
[info] # Warmup Iteration   2: 16554.400 ops/s
[info] # Warmup Iteration   3: 16937.112 ops/s
[info] # Warmup Iteration   4: 16938.537 ops/s
[info] # Warmup Iteration   5: 16957.479 ops/s
[info] Iteration   1: 16779.827 ops/s
[info]                  ·gc.alloc.rate:               614.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          57659.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62978.288 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16870.841 ops/s
[info]                  ·gc.alloc.rate:               611.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          57065.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62634.940 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 16939.394 ops/s
[info]                  ·gc.alloc.rate:               609.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          56645.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62410.818 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 16958.179 ops/s
[info]                  ·gc.alloc.rate:                   606.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              56262.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62344.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16966.194 ops/s
[info]                  ·gc.alloc.rate:                   605.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              56142.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62346.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   16902.887 ±(99.9%) 301.782 ops/s [Average]
[info]   (min, avg, max) = (16779.827, 16902.887, 16966.194), stdev = 78.372
[info]   CI (99.9%): [16601.105, 17204.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   609.610 ±(99.9%) 15.067 MB/sec [Average]
[info]   (min, avg, max) = (605.288, 609.610, 614.792), stdev = 3.913
[info]   CI (99.9%): [594.543, 624.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   56755.266 ±(99.9%) 2392.534 B/op [Average]
[info]   (min, avg, max) = (56142.643, 56755.266, 57659.624), stdev = 621.334
[info]   CI (99.9%): [54362.731, 59147.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.791 ±(99.9%) 1.196 MB/sec [Average]
[info]   (min, avg, max) = (671.454, 671.791, 672.169), stdev = 0.311
[info]   CI (99.9%): [670.595, 672.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   62542.945 ±(99.9%) 1043.128 B/op [Average]
[info]   (min, avg, max) = (62344.588, 62542.945, 62978.288), stdev = 270.897
[info]   CI (99.9%): [61499.817, 63586.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.773 ±(99.9%) 4.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 1.932), stdev = 1.058
[info]   CI (99.9%): [≈ 0, 4.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.88% complete, ETA 01:45:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18499.340 ops/s
[info] # Warmup Iteration   2: 86866.167 ops/s
[info] # Warmup Iteration   3: 94555.814 ops/s
[info] # Warmup Iteration   4: 96878.776 ops/s
[info] # Warmup Iteration   5: 96639.186 ops/s
[info] Iteration   1: 95339.881 ops/s
[info]                  ·gc.alloc.rate:                   2104.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              34738.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33208.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 95190.444 ops/s
[info]                  ·gc.alloc.rate:                   2128.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              35172.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33161.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 96759.207 ops/s
[info]                  ·gc.alloc.rate:                   2134.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              34723.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32602.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 97340.035 ops/s
[info]                  ·gc.alloc.rate:                   2173.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              35148.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32418.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 97294.257 ops/s
[info]                  ·gc.alloc.rate:                   2188.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              35371.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43256.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   96384.765 ±(99.9%) 4037.721 ops/s [Average]
[info]   (min, avg, max) = (95190.444, 96384.765, 97340.035), stdev = 1048.583
[info]   CI (99.9%): [92347.044, 100422.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2145.936 ±(99.9%) 132.154 MB/sec [Average]
[info]   (min, avg, max) = (2104.544, 2145.936, 2188.137), stdev = 34.320
[info]   CI (99.9%): [2013.783, 2278.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35030.796 ±(99.9%) 1106.793 B/op [Average]
[info]   (min, avg, max) = (34723.135, 35030.796, 35371.498), stdev = 287.431
[info]   CI (99.9%): [33924.003, 36137.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2140.776 ±(99.9%) 1151.968 MB/sec [Average]
[info]   (min, avg, max) = (2004.572, 2140.776, 2675.908), stdev = 299.162
[info]   CI (99.9%): [988.808, 3292.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34929.541 ±(99.9%) 17972.961 B/op [Average]
[info]   (min, avg, max) = (32418.638, 34929.541, 43256.382), stdev = 4667.521
[info]   CI (99.9%): [16956.581, 52902.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.335 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.808, 3.747), stdev = 1.645
[info]   CI (99.9%): [≈ 0, 7.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.320 ±(99.9%) 104.587 B/op [Average]
[info]   (min, avg, max) = (0.336, 13.320, 61.853), stdev = 27.161
[info]   CI (99.9%): [≈ 0, 117.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.08% complete, ETA 01:45:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26491.053 ops/s
[info] # Warmup Iteration   2: 142349.427 ops/s
[info] # Warmup Iteration   3: 149037.075 ops/s
[info] # Warmup Iteration   4: 150786.295 ops/s
[info] # Warmup Iteration   5: 150737.166 ops/s
[info] Iteration   1: 151168.167 ops/s
[info]                  ·gc.alloc.rate:               922.351 MB/sec
[info]                  ·gc.alloc.rate.norm:          9601.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6938.999 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 151460.511 ops/s
[info]                  ·gc.alloc.rate:               916.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          9519.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6925.623 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 150898.803 ops/s
[info]                  ·gc.alloc.rate:                   926.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              9659.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13916.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 151894.259 ops/s
[info]                  ·gc.alloc.rate:                   926.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              9600.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6919.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 150306.419 ops/s
[info]                  ·gc.alloc.rate:               905.822 MB/sec
[info]                  ·gc.alloc.rate.norm:          9483.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6992.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   151145.632 ±(99.9%) 2298.565 ops/s [Average]
[info]   (min, avg, max) = (150306.419, 151145.632, 151894.259), stdev = 596.930
[info]   CI (99.9%): [148847.067, 153444.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   919.598 ±(99.9%) 33.799 MB/sec [Average]
[info]   (min, avg, max) = (905.822, 919.598, 926.863), stdev = 8.777
[info]   CI (99.9%): [885.800, 953.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9572.923 ±(99.9%) 271.806 B/op [Average]
[info]   (min, avg, max) = (9483.594, 9572.923, 9659.789), stdev = 70.587
[info]   CI (99.9%): [9301.117, 9844.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.819 ±(99.9%) 1149.509 MB/sec [Average]
[info]   (min, avg, max) = (666.576, 800.819, 1334.833), stdev = 298.524
[info]   CI (99.9%): [≈ 0, 1950.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8338.717 ±(99.9%) 12007.588 B/op [Average]
[info]   (min, avg, max) = (6919.642, 8338.717, 13916.722), stdev = 3118.332
[info]   CI (99.9%): [≈ 0, 20346.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 0.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.434), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 0.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.29% complete, ETA 01:45:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76582.560 ops/s
[info] # Warmup Iteration   2: 161284.399 ops/s
[info] # Warmup Iteration   3: 163690.178 ops/s
[info] # Warmup Iteration   4: 162797.422 ops/s
[info] # Warmup Iteration   5: 163557.762 ops/s
[info] Iteration   1: 166072.983 ops/s
[info]                  ·gc.alloc.rate:                   1552.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              14715.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12738.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 159453.308 ops/s
[info]                  ·gc.alloc.rate:                   1479.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              14606.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13267.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 166025.604 ops/s
[info]                  ·gc.alloc.rate:                   1579.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              14967.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19120.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 166753.151 ops/s
[info]                  ·gc.alloc.rate:                   1559.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              14714.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12661.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 164634.009 ops/s
[info]                  ·gc.alloc.rate:               1540.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          14721.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12811.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   164587.811 ±(99.9%) 11443.434 ops/s [Average]
[info]   (min, avg, max) = (159453.308, 164587.811, 166753.151), stdev = 2971.824
[info]   CI (99.9%): [153144.376, 176031.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1542.208 ±(99.9%) 144.632 MB/sec [Average]
[info]   (min, avg, max) = (1479.932, 1542.208, 1579.095), stdev = 37.561
[info]   CI (99.9%): [1397.576, 1686.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14744.940 ±(99.9%) 514.274 B/op [Average]
[info]   (min, avg, max) = (14606.147, 14744.940, 14967.864), stdev = 133.555
[info]   CI (99.9%): [14230.666, 15259.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.540 ±(99.9%) 1161.554 MB/sec [Average]
[info]   (min, avg, max) = (1340.287, 1477.540, 2017.142), stdev = 301.652
[info]   CI (99.9%): [315.986, 2639.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14120.063 ±(99.9%) 10800.928 B/op [Average]
[info]   (min, avg, max) = (12661.775, 14120.063, 19120.011), stdev = 2804.967
[info]   CI (99.9%): [3319.135, 24920.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.668 ±(99.9%) 5.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.303), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.329 ±(99.9%) 53.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.329, 31.306), stdev = 13.963
[info]   CI (99.9%): [≈ 0, 60.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.49% complete, ETA 01:44:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3243.726 ops/s
[info] # Warmup Iteration   2: 36921.236 ops/s
[info] # Warmup Iteration   3: 50112.680 ops/s
[info] # Warmup Iteration   4: 50142.802 ops/s
[info] # Warmup Iteration   5: 49647.044 ops/s
[info] Iteration   1: 50317.276 ops/s
[info]                  ·gc.alloc.rate:                   2704.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              84592.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83860.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.835 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 49076.009 ops/s
[info]                  ·gc.alloc.rate:                   2615.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              83863.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86241.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.335 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 51010.960 ops/s
[info]                  ·gc.alloc.rate:               2756.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          85046.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83195.524 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 50727.907 ops/s
[info]                  ·gc.alloc.rate:                   2715.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              84239.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62889.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 50555.455 ops/s
[info]                  ·gc.alloc.rate:               2733.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          85084.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84274.273 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   50337.521 ±(99.9%) 2884.926 ops/s [Average]
[info]   (min, avg, max) = (49076.009, 50337.521, 51010.960), stdev = 749.206
[info]   CI (99.9%): [47452.595, 53222.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2705.098 ±(99.9%) 207.776 MB/sec [Average]
[info]   (min, avg, max) = (2615.206, 2705.098, 2756.703), stdev = 53.959
[info]   CI (99.9%): [2497.322, 2912.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84565.509 ±(99.9%) 2019.014 B/op [Average]
[info]   (min, avg, max) = (83863.949, 84565.509, 85084.250), stdev = 524.332
[info]   CI (99.9%): [82546.495, 86584.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2560.400 ±(99.9%) 1148.499 MB/sec [Average]
[info]   (min, avg, max) = (2027.126, 2560.400, 2707.327), stdev = 298.261
[info]   CI (99.9%): [1411.902, 3708.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80092.273 ±(99.9%) 37287.501 B/op [Average]
[info]   (min, avg, max) = (62889.346, 80092.273, 86241.979), stdev = 9683.446
[info]   CI (99.9%): [42804.773, 117379.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 1.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.666), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.563 ±(99.9%) 35.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.563, 20.835), stdev = 9.113
[info]   CI (99.9%): [≈ 0, 39.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 9.000), stdev = 1.342
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21.69% complete, ETA 01:44:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24823.666 ops/s
[info] # Warmup Iteration   2: 101025.388 ops/s
[info] # Warmup Iteration   3: 106026.605 ops/s
[info] # Warmup Iteration   4: 109934.675 ops/s
[info] # Warmup Iteration   5: 111363.979 ops/s
[info] Iteration   1: 111802.260 ops/s
[info]                  ·gc.alloc.rate:                   2128.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              29964.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28404.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 112147.350 ops/s
[info]                  ·gc.alloc.rate:                   2160.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              30318.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28233.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 110667.388 ops/s
[info]                  ·gc.alloc.rate:               2120.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          30147.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28591.585 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 112281.772 ops/s
[info]                  ·gc.alloc.rate:                   2164.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              30330.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28189.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 112257.425 ops/s
[info]                  ·gc.alloc.rate:                   2163.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              30331.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28233.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   111831.239 ±(99.9%) 2611.584 ops/s [Average]
[info]   (min, avg, max) = (110667.388, 111831.239, 112281.772), stdev = 678.220
[info]   CI (99.9%): [109219.655, 114442.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2147.577 ±(99.9%) 82.079 MB/sec [Average]
[info]   (min, avg, max) = (2120.163, 2147.577, 2164.165), stdev = 21.316
[info]   CI (99.9%): [2065.499, 2229.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30218.570 ±(99.9%) 623.232 B/op [Average]
[info]   (min, avg, max) = (29964.769, 30218.570, 30331.695), stdev = 161.851
[info]   CI (99.9%): [29595.339, 30841.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2013.302 ±(99.9%) 11.213 MB/sec [Average]
[info]   (min, avg, max) = (2010.746, 2013.302, 2018.009), stdev = 2.912
[info]   CI (99.9%): [2002.089, 2024.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28330.345 ±(99.9%) 645.882 B/op [Average]
[info]   (min, avg, max) = (28189.234, 28330.345, 28591.585), stdev = 167.733
[info]   CI (99.9%): [27684.463, 28976.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 5.813 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.435), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 6.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10.371 ±(99.9%) 81.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.371, 48.353), stdev = 21.251
[info]   CI (99.9%): [≈ 0, 92.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.89% complete, ETA 01:44:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70910.971 ops/s
[info] # Warmup Iteration   2: 163281.109 ops/s
[info] # Warmup Iteration   3: 175113.573 ops/s
[info] # Warmup Iteration   4: 176019.967 ops/s
[info] # Warmup Iteration   5: 172495.285 ops/s
[info] Iteration   1: 175512.244 ops/s
[info]                  ·gc.alloc.rate:                   1175.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              10535.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11958.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 173440.237 ops/s
[info]                  ·gc.alloc.rate:                   1155.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              10479.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12101.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 173327.070 ops/s
[info]                  ·gc.alloc.rate:               1149.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          10437.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6057.584 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 173036.600 ops/s
[info]                  ·gc.alloc.rate:               1162.701 MB/sec
[info]                  ·gc.alloc.rate.norm:          10574.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12141.948 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 177089.294 ops/s
[info]                  ·gc.alloc.rate:               1188.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          10564.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11878.301 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   174481.089 ±(99.9%) 6770.921 ops/s [Average]
[info]   (min, avg, max) = (173036.600, 174481.089, 177089.294), stdev = 1758.387
[info]   CI (99.9%): [167710.167, 181252.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1166.257 ±(99.9%) 60.793 MB/sec [Average]
[info]   (min, avg, max) = (1149.701, 1166.257, 1188.757), stdev = 15.788
[info]   CI (99.9%): [1105.464, 1227.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10518.363 ±(99.9%) 224.477 B/op [Average]
[info]   (min, avg, max) = (10437.588, 10518.363, 10574.627), stdev = 58.296
[info]   CI (99.9%): [10293.887, 10742.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1201.275 ±(99.9%) 1149.552 MB/sec [Average]
[info]   (min, avg, max) = (667.244, 1201.275, 1336.593), stdev = 298.535
[info]   CI (99.9%): [51.723, 2350.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10827.397 ±(99.9%) 10275.563 B/op [Average]
[info]   (min, avg, max) = (6057.584, 10827.397, 12141.948), stdev = 2668.531
[info]   CI (99.9%): [551.834, 21102.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.373), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.09% complete, ETA 01:44:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233089.501 ops/s
[info] # Warmup Iteration   2: 503076.554 ops/s
[info] # Warmup Iteration   3: 513251.850 ops/s
[info] # Warmup Iteration   4: 517722.642 ops/s
[info] # Warmup Iteration   5: 535652.394 ops/s
[info] Iteration   1: 536959.039 ops/s
[info]                  ·gc.alloc.rate:      543.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 538394.401 ops/s
[info]                  ·gc.alloc.rate:               568.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          1660.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1948.270 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 534617.245 ops/s
[info]                  ·gc.alloc.rate:                   555.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              1635.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1961.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 533304.771 ops/s
[info]                  ·gc.alloc.rate:               563.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          1662.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1968.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 533684.637 ops/s
[info]                  ·gc.alloc.rate:               565.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          1667.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1967.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   535392.019 ±(99.9%) 8467.451 ops/s [Average]
[info]   (min, avg, max) = (533304.771, 535392.019, 538394.401), stdev = 2198.970
[info]   CI (99.9%): [526924.568, 543859.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   559.154 ±(99.9%) 38.632 MB/sec [Average]
[info]   (min, avg, max) = (543.222, 559.154, 568.061), stdev = 10.033
[info]   CI (99.9%): [520.522, 597.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1643.595 ±(99.9%) 120.675 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1643.595, 1667.624), stdev = 31.339
[info]   CI (99.9%): [1522.920, 1764.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.478 ±(99.9%) 1148.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.478, 667.191), stdev = 298.223
[info]   CI (99.9%): [≈ 0, 1681.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1569.273 ±(99.9%) 3378.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1569.273, 1968.735), stdev = 877.288
[info]   CI (99.9%): [≈ 0, 4947.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.123), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.29% complete, ETA 01:43:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 426970.415 ops/s
[info] # Warmup Iteration   2: 692561.120 ops/s
[info] # Warmup Iteration   3: 705005.658 ops/s
[info] # Warmup Iteration   4: 702478.499 ops/s
[info] # Warmup Iteration   5: 703962.371 ops/s
[info] Iteration   1: 706247.279 ops/s
[info]                  ·gc.alloc.rate:                   558.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              1244.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 705902.249 ops/s
[info]                  ·gc.alloc.rate:      541.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 705727.778 ops/s
[info]                  ·gc.alloc.rate:               555.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          1238.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1495.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 721568.456 ops/s
[info]                  ·gc.alloc.rate:                   578.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              1260.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1463.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 723425.077 ops/s
[info]                  ·gc.alloc.rate:               573.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1460.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   712574.168 ±(99.9%) 34978.206 ops/s [Average]
[info]   (min, avg, max) = (705727.778, 712574.168, 723425.077), stdev = 9083.729
[info]   CI (99.9%): [677595.962, 747552.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   561.505 ±(99.9%) 56.230 MB/sec [Average]
[info]   (min, avg, max) = (541.861, 561.505, 578.033), stdev = 14.603
[info]   CI (99.9%): [505.274, 617.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1239.934 ±(99.9%) 75.519 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1239.934, 1260.701), stdev = 19.612
[info]   CI (99.9%): [1164.415, 1315.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.675 ±(99.9%) 1155.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.675, 671.161), stdev = 300.011
[info]   CI (99.9%): [≈ 0, 1691.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1182.612 ±(99.9%) 2546.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1182.612, 1495.154), stdev = 661.304
[info]   CI (99.9%): [≈ 0, 3729.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.49% complete, ETA 01:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483982.296 ops/s
[info] # Warmup Iteration   2: 751717.947 ops/s
[info] # Warmup Iteration   3: 755621.210 ops/s
[info] # Warmup Iteration   4: 777657.759 ops/s
[info] # Warmup Iteration   5: 775758.497 ops/s
[info] Iteration   1: 777610.026 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 777470.062 ops/s
[info]                  ·gc.alloc.rate:      0.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.091 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 777471.496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 775492.245 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 776331.404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   776875.047 ±(99.9%) 3580.103 ops/s [Average]
[info]   (min, avg, max) = (775492.245, 776875.047, 777610.026), stdev = 929.742
[info]   CI (99.9%): [773294.943, 780455.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.019 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.019, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.69% complete, ETA 01:43:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100221.712 ops/s
[info] # Warmup Iteration   2: 305394.742 ops/s
[info] # Warmup Iteration   3: 315044.007 ops/s
[info] # Warmup Iteration   4: 318979.776 ops/s
[info] # Warmup Iteration   5: 317300.934 ops/s
[info] Iteration   1: 315941.855 ops/s
[info]                  ·gc.alloc.rate:               901.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          4490.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3321.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 320464.385 ops/s
[info]                  ·gc.alloc.rate:               906.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          4451.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3274.817 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 319158.760 ops/s
[info]                  ·gc.alloc.rate:                   914.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              4508.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6583.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 319809.260 ops/s
[info]                  ·gc.alloc.rate:               899.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          4424.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3288.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 319723.924 ops/s
[info]                  ·gc.alloc.rate:               905.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          4454.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3289.015 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   319019.637 ±(99.9%) 6860.990 ops/s [Average]
[info]   (min, avg, max) = (315941.855, 319019.637, 320464.385), stdev = 1781.777
[info]   CI (99.9%): [312158.647, 325880.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   905.342 ±(99.9%) 22.430 MB/sec [Average]
[info]   (min, avg, max) = (899.238, 905.342, 914.417), stdev = 5.825
[info]   CI (99.9%): [882.911, 927.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4465.878 ±(99.9%) 128.445 B/op [Average]
[info]   (min, avg, max) = (4424.797, 4465.878, 4508.589), stdev = 33.357
[info]   CI (99.9%): [4337.432, 4594.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   801.097 ±(99.9%) 1149.646 MB/sec [Average]
[info]   (min, avg, max) = (666.892, 801.097, 1335.175), stdev = 298.559
[info]   CI (99.9%): [≈ 0, 1950.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3951.374 ±(99.9%) 5665.519 B/op [Average]
[info]   (min, avg, max) = (3274.817, 3951.374, 6583.165), stdev = 1471.317
[info]   CI (99.9%): [≈ 0, 9616.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22.89% complete, ETA 01:43:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27402.889 ops/s
[info] # Warmup Iteration   2: 41181.071 ops/s
[info] # Warmup Iteration   3: 42766.475 ops/s
[info] # Warmup Iteration   4: 42907.641 ops/s
[info] # Warmup Iteration   5: 42948.553 ops/s
[info] Iteration   1: 42673.311 ops/s
[info]                  ·gc.alloc.rate:               478.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          17634.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24690.586 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 43089.624 ops/s
[info]                  ·gc.alloc.rate:      454.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 16616.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42979.332 ops/s
[info]                  ·gc.alloc.rate:                   478.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              17526.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24513.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43036.260 ops/s
[info]                  ·gc.alloc.rate:                   468.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              17134.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24457.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43172.229 ops/s
[info]                  ·gc.alloc.rate:      455.828 MB/sec
[info]                  ·gc.alloc.rate.norm: 16616.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   42990.151 ±(99.9%) 734.854 ops/s [Average]
[info]   (min, avg, max) = (42673.311, 42990.151, 43172.229), stdev = 190.839
[info]   CI (99.9%): [42255.298, 43725.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   467.239 ±(99.9%) 44.467 MB/sec [Average]
[info]   (min, avg, max) = (454.942, 467.239, 478.663), stdev = 11.548
[info]   CI (99.9%): [422.772, 511.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17105.478 ±(99.9%) 1863.356 B/op [Average]
[info]   (min, avg, max) = (16616.010, 17105.478, 17634.241), stdev = 483.908
[info]   CI (99.9%): [15242.123, 18968.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   401.571 ±(99.9%) 1411.578 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.571, 669.521), stdev = 366.582
[info]   CI (99.9%): [≈ 0, 1813.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14732.342 ±(99.9%) 51787.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14732.342, 24690.586), stdev = 13449.001
[info]   CI (99.9%): [≈ 0, 66519.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.143), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   23.172 ±(99.9%) 197.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.172, 115.098), stdev = 51.390
[info]   CI (99.9%): [≈ 0, 221.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:42:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9763.854 ops/s
[info] # Warmup Iteration   2: 34957.044 ops/s
[info] # Warmup Iteration   3: 36346.190 ops/s
[info] # Warmup Iteration   4: 36230.451 ops/s
[info] # Warmup Iteration   5: 37717.706 ops/s
[info] Iteration   1: 37643.766 ops/s
[info]                  ·gc.alloc.rate:                   1927.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              80590.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84299.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 37775.260 ops/s
[info]                  ·gc.alloc.rate:                   1907.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              79483.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55950.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 36985.190 ops/s
[info]                  ·gc.alloc.rate:                   1894.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              80606.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85574.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37001.770 ops/s
[info]                  ·gc.alloc.rate:                   1884.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              80155.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85421.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 37001.052 ops/s
[info]                  ·gc.alloc.rate:               1907.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          81122.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85476.042 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37281.407 ±(99.9%) 1515.677 ops/s [Average]
[info]   (min, avg, max) = (36985.190, 37281.407, 37775.260), stdev = 393.616
[info]   CI (99.9%): [35765.731, 38797.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1904.433 ±(99.9%) 62.572 MB/sec [Average]
[info]   (min, avg, max) = (1884.722, 1904.433, 1927.781), stdev = 16.250
[info]   CI (99.9%): [1841.860, 1967.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80391.758 ±(99.9%) 2358.002 B/op [Average]
[info]   (min, avg, max) = (79483.539, 80391.758, 81122.213), stdev = 612.366
[info]   CI (99.9%): [78033.756, 82749.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.788 ±(99.9%) 1151.182 MB/sec [Average]
[info]   (min, avg, max) = (1343.023, 1877.788, 2016.500), stdev = 298.958
[info]   CI (99.9%): [726.606, 3028.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79344.422 ±(99.9%) 50396.361 B/op [Average]
[info]   (min, avg, max) = (55950.697, 79344.422, 85574.323), stdev = 13087.775
[info]   CI (99.9%): [28948.061, 129740.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 4.675 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 2.894), stdev = 1.214
[info]   CI (99.9%): [≈ 0, 5.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32.232 ±(99.9%) 195.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.232, 120.970), stdev = 50.728
[info]   CI (99.9%): [≈ 0, 227.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:42:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.656 ops/s
[info] # Warmup Iteration   2: 266507.713 ops/s
[info] # Warmup Iteration   3: 290202.568 ops/s
[info] # Warmup Iteration   4: 284845.263 ops/s
[info] # Warmup Iteration   5: 294646.872 ops/s
[info] Iteration   1: 296598.381 ops/s
[info]                  ·gc.alloc.rate:      307.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.767 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 296405.537 ops/s
[info]                  ·gc.alloc.rate:      307.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 295818.143 ops/s
[info]                  ·gc.alloc.rate:               328.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          1749.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3543.971 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 297226.022 ops/s
[info]                  ·gc.alloc.rate:      308.313 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 295691.972 ops/s
[info]                  ·gc.alloc.rate:                   320.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              1707.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3545.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   296348.011 ±(99.9%) 2395.495 ops/s [Average]
[info]   (min, avg, max) = (295691.972, 296348.011, 297226.022), stdev = 622.102
[info]   CI (99.9%): [293952.516, 298743.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   314.653 ±(99.9%) 37.620 MB/sec [Average]
[info]   (min, avg, max) = (307.443, 314.653, 328.893), stdev = 9.770
[info]   CI (99.9%): [277.032, 352.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1670.793 ±(99.9%) 210.910 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1670.793, 1749.356), stdev = 54.773
[info]   CI (99.9%): [1459.883, 1881.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   266.492 ±(99.9%) 1405.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.492, 666.295), stdev = 364.909
[info]   CI (99.9%): [≈ 0, 1671.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1417.890 ±(99.9%) 7476.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1417.890, 3545.481), stdev = 1941.526
[info]   CI (99.9%): [≈ 0, 8894.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.853 ±(99.9%) 7.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 4.263), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   4.537 ±(99.9%) 39.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.537, 22.687), stdev = 10.146
[info]   CI (99.9%): [≈ 0, 43.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.49% complete, ETA 01:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40151.613 ops/s
[info] # Warmup Iteration   2: 90641.243 ops/s
[info] # Warmup Iteration   3: 107706.776 ops/s
[info] # Warmup Iteration   4: 110300.373 ops/s
[info] # Warmup Iteration   5: 110525.824 ops/s
[info] Iteration   1: 112338.438 ops/s
[info]                  ·gc.alloc.rate:               1342.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          18800.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18739.070 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 115352.310 ops/s
[info]                  ·gc.alloc.rate:                   1381.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              18852.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18258.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 115796.839 ops/s
[info]                  ·gc.alloc.rate:                   1373.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              18660.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18197.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 111204.946 ops/s
[info]                  ·gc.alloc.rate:                   1331.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              18845.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18968.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 111196.065 ops/s
[info]                  ·gc.alloc.rate:                   1332.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              18858.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18912.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   113177.720 ±(99.9%) 8634.337 ops/s [Average]
[info]   (min, avg, max) = (111196.065, 113177.720, 115796.839), stdev = 2242.310
[info]   CI (99.9%): [104543.383, 121812.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1352.312 ±(99.9%) 91.139 MB/sec [Average]
[info]   (min, avg, max) = (1331.725, 1352.312, 1381.857), stdev = 23.669
[info]   CI (99.9%): [1261.173, 1443.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18803.376 ±(99.9%) 319.714 B/op [Average]
[info]   (min, avg, max) = (18660.604, 18803.376, 18858.095), stdev = 83.029
[info]   CI (99.9%): [18483.662, 19123.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.422 ±(99.9%) 5.973 MB/sec [Average]
[info]   (min, avg, max) = (1336.366, 1338.422, 1340.414), stdev = 1.551
[info]   CI (99.9%): [1332.449, 1344.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18615.212 ±(99.9%) 1402.541 B/op [Average]
[info]   (min, avg, max) = (18197.529, 18615.212, 18968.513), stdev = 364.235
[info]   CI (99.9%): [17212.672, 20017.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 3.831), stdev = 1.678
[info]   CI (99.9%): [≈ 0, 7.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.837 ±(99.9%) 91.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.837, 54.209), stdev = 23.746
[info]   CI (99.9%): [≈ 0, 103.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.69% complete, ETA 01:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291950.296 ops/s
[info] # Warmup Iteration   2: 440927.787 ops/s
[info] # Warmup Iteration   3: 448574.421 ops/s
[info] # Warmup Iteration   4: 483152.096 ops/s
[info] # Warmup Iteration   5: 481930.734 ops/s
[info] Iteration   1: 481929.859 ops/s
[info]                  ·gc.alloc.rate:      313.588 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 484414.448 ops/s
[info]                  ·gc.alloc.rate:               331.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          1076.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1662.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 483856.777 ops/s
[info]                  ·gc.alloc.rate:                   332.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1080.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1664.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 484311.381 ops/s
[info]                  ·gc.alloc.rate:      315.136 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 482692.196 ops/s
[info]                  ·gc.alloc.rate:               331.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          1082.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2187.117 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   483440.932 ±(99.9%) 4183.884 ops/s [Average]
[info]   (min, avg, max) = (481929.859, 483440.932, 484414.448), stdev = 1086.541
[info]   CI (99.9%): [479257.048, 487624.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   324.862 ±(99.9%) 36.984 MB/sec [Average]
[info]   (min, avg, max) = (313.588, 324.862, 332.269), stdev = 9.605
[info]   CI (99.9%): [287.877, 361.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1057.504 ±(99.9%) 117.996 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1057.504, 1082.012), stdev = 30.643
[info]   CI (99.9%): [939.508, 1175.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.805 ±(99.9%) 1216.953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.805, 670.796), stdev = 316.039
[info]   CI (99.9%): [≈ 0, 1555.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1102.643 ±(99.9%) 3962.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1102.643, 2187.117), stdev = 1029.058
[info]   CI (99.9%): [≈ 0, 5065.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.90% complete, ETA 01:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4002.128 ops/s
[info] # Warmup Iteration   2: 29305.158 ops/s
[info] # Warmup Iteration   3: 40863.419 ops/s
[info] # Warmup Iteration   4: 40873.932 ops/s
[info] # Warmup Iteration   5: 41575.346 ops/s
[info] Iteration   1: 41509.117 ops/s
[info]                  ·gc.alloc.rate:                   2050.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              77754.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76171.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 41655.296 ops/s
[info]                  ·gc.alloc.rate:                   2056.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              77706.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75804.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 41914.214 ops/s
[info]                  ·gc.alloc.rate:                   2079.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              78083.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75114.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.345 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41697.500 ops/s
[info]                  ·gc.alloc.rate:                   2057.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              77659.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75499.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 41799.912 ops/s
[info]                  ·gc.alloc.rate:               2089.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          78662.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75423.140 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   41715.208 ±(99.9%) 587.632 ops/s [Average]
[info]   (min, avg, max) = (41509.117, 41715.208, 41914.214), stdev = 152.606
[info]   CI (99.9%): [41127.575, 42302.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2066.950 ±(99.9%) 64.152 MB/sec [Average]
[info]   (min, avg, max) = (2050.932, 2066.950, 2089.437), stdev = 16.660
[info]   CI (99.9%): [2002.798, 2131.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77973.205 ±(99.9%) 1616.339 B/op [Average]
[info]   (min, avg, max) = (77659.690, 77973.205, 78662.569), stdev = 419.758
[info]   CI (99.9%): [76356.866, 79589.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.064 ±(99.9%) 14.547 MB/sec [Average]
[info]   (min, avg, max) = (2000.542, 2004.064, 2009.188), stdev = 3.778
[info]   CI (99.9%): [1989.517, 2018.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75602.743 ±(99.9%) 1547.250 B/op [Average]
[info]   (min, avg, max) = (75114.471, 75602.743, 76171.907), stdev = 401.816
[info]   CI (99.9%): [74055.493, 77149.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 6.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 3.685), stdev = 1.585
[info]   CI (99.9%): [≈ 0, 7.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.543 ±(99.9%) 231.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.543, 139.697), stdev = 60.101
[info]   CI (99.9%): [≈ 0, 265.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24.10% complete, ETA 01:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39628.938 ops/s
[info] # Warmup Iteration   2: 77885.575 ops/s
[info] # Warmup Iteration   3: 82511.250 ops/s
[info] # Warmup Iteration   4: 84678.648 ops/s
[info] # Warmup Iteration   5: 86506.015 ops/s
[info] Iteration   1: 84957.669 ops/s
[info]                  ·gc.alloc.rate:                   1587.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              29406.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37376.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 86658.921 ops/s
[info]                  ·gc.alloc.rate:                   1615.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              29332.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24436.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 87127.565 ops/s
[info]                  ·gc.alloc.rate:                   1623.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              29320.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24282.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 86813.023 ops/s
[info]                  ·gc.alloc.rate:                   1657.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              30055.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36495.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 86916.929 ops/s
[info]                  ·gc.alloc.rate:               1617.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          29293.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24268.795 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   86494.821 ±(99.9%) 3373.194 ops/s [Average]
[info]   (min, avg, max) = (84957.669, 86494.821, 87127.565), stdev = 876.008
[info]   CI (99.9%): [83121.627, 89868.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1620.359 ±(99.9%) 96.915 MB/sec [Average]
[info]   (min, avg, max) = (1587.548, 1620.359, 1657.990), stdev = 25.168
[info]   CI (99.9%): [1523.444, 1717.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   29481.829 ±(99.9%) 1245.909 B/op [Average]
[info]   (min, avg, max) = (29293.313, 29481.829, 30055.752), stdev = 323.559
[info]   CI (99.9%): [28235.920, 30727.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1612.248 ±(99.9%) 1417.556 MB/sec [Average]
[info]   (min, avg, max) = (1340.285, 1612.248, 2017.810), stdev = 368.135
[info]   CI (99.9%): [194.692, 3029.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29371.849 ±(99.9%) 26616.500 B/op [Average]
[info]   (min, avg, max) = (24268.795, 29371.849, 37376.428), stdev = 6912.220
[info]   CI (99.9%): [2755.349, 55988.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 4.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 2.623), stdev = 1.110
[info]   CI (99.9%): [≈ 0, 4.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   12.841 ±(99.9%) 77.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.841, 47.633), stdev = 20.157
[info]   CI (99.9%): [≈ 0, 90.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.30% complete, ETA 01:41:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18216.240 ops/s
[info] # Warmup Iteration   2: 69844.071 ops/s
[info] # Warmup Iteration   3: 73029.919 ops/s
[info] # Warmup Iteration   4: 75377.024 ops/s
[info] # Warmup Iteration   5: 75410.999 ops/s
[info] Iteration   1: 75419.349 ops/s
[info]                  ·gc.alloc.rate:      610.556 MB/sec
[info]                  ·gc.alloc.rate.norm: 12740.179 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 75429.756 ops/s
[info]                  ·gc.alloc.rate:      600.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 12517.600 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75301.314 ops/s
[info]                  ·gc.alloc.rate:               620.642 MB/sec
[info]                  ·gc.alloc.rate.norm:          12970.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13963.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 75189.436 ops/s
[info]                  ·gc.alloc.rate:                   619.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              12952.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13985.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 75540.168 ops/s
[info]                  ·gc.alloc.rate:               616.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          12846.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13892.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   75376.005 ±(99.9%) 516.991 ops/s [Average]
[info]   (min, avg, max) = (75189.436, 75376.005, 75540.168), stdev = 134.261
[info]   CI (99.9%): [74859.014, 75892.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   613.376 ±(99.9%) 32.299 MB/sec [Average]
[info]   (min, avg, max) = (600.024, 613.376, 620.642), stdev = 8.388
[info]   CI (99.9%): [581.077, 645.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12805.623 ±(99.9%) 714.972 B/op [Average]
[info]   (min, avg, max) = (12517.600, 12805.623, 12970.773), stdev = 185.676
[info]   CI (99.9%): [12090.651, 13520.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   400.675 ±(99.9%) 1408.430 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 400.675, 668.333), stdev = 365.765
[info]   CI (99.9%): [≈ 0, 1809.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8368.394 ±(99.9%) 29416.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8368.394, 13985.289), stdev = 7639.340
[info]   CI (99.9%): [≈ 0, 37784.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.436), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.50% complete, ETA 01:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.833 ops/s
[info] # Warmup Iteration   2: 79543.714 ops/s
[info] # Warmup Iteration   3: 87139.340 ops/s
[info] # Warmup Iteration   4: 84969.693 ops/s
[info] # Warmup Iteration   5: 88354.540 ops/s
[info] Iteration   1: 88614.651 ops/s
[info]                  ·gc.alloc.rate:      328.990 MB/sec
[info]                  ·gc.alloc.rate.norm: 5842.189 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 88407.797 ops/s
[info]                  ·gc.alloc.rate:               339.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          6040.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9107.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 88884.618 ops/s
[info]                  ·gc.alloc.rate:      329.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 5826.277 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 88489.533 ops/s
[info]                  ·gc.alloc.rate:                   345.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              6138.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11836.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88609.975 ops/s
[info]                  ·gc.alloc.rate:      327.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 5824.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   88601.315 ±(99.9%) 695.406 ops/s [Average]
[info]   (min, avg, max) = (88407.797, 88601.315, 88884.618), stdev = 180.595
[info]   CI (99.9%): [87905.909, 89296.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   334.144 ±(99.9%) 29.942 MB/sec [Average]
[info]   (min, avg, max) = (327.941, 334.144, 345.233), stdev = 7.776
[info]   CI (99.9%): [304.202, 364.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   5934.407 ±(99.9%) 563.007 B/op [Average]
[info]   (min, avg, max) = (5824.005, 5934.407, 6138.994), stdev = 146.211
[info]   CI (99.9%): [5371.400, 6497.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.490 ±(99.9%) 1259.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.490, 665.621), stdev = 327.011
[info]   CI (99.9%): [≈ 0, 1494.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   4188.788 ±(99.9%) 22396.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4188.788, 11836.201), stdev = 5816.288
[info]   CI (99.9%): [≈ 0, 26585.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.290), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.302
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.70% complete, ETA 01:40:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34552.934 ops/s
[info] # Warmup Iteration   2: 74234.835 ops/s
[info] # Warmup Iteration   3: 76894.599 ops/s
[info] # Warmup Iteration   4: 77548.414 ops/s
[info] # Warmup Iteration   5: 77428.283 ops/s
[info] Iteration   1: 77275.351 ops/s
[info]                  ·gc.alloc.rate:               467.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          9519.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10418.878 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 77470.795 ops/s
[info]                  ·gc.alloc.rate:                   473.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              9626.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13559.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 77752.792 ops/s
[info]                  ·gc.alloc.rate:      465.886 MB/sec
[info]                  ·gc.alloc.rate.norm: 9427.121 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77445.381 ops/s
[info]                  ·gc.alloc.rate:               470.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          9563.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13563.899 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 77524.363 ops/s
[info]                  ·gc.alloc.rate:               483.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          9804.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13563.427 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   77493.736 ±(99.9%) 663.062 ops/s [Average]
[info]   (min, avg, max) = (77275.351, 77493.736, 77752.792), stdev = 172.195
[info]   CI (99.9%): [76830.675, 78156.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   472.201 ±(99.9%) 26.128 MB/sec [Average]
[info]   (min, avg, max) = (465.886, 472.201, 483.009), stdev = 6.785
[info]   CI (99.9%): [446.073, 498.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9588.402 ±(99.9%) 543.391 B/op [Average]
[info]   (min, avg, max) = (9427.121, 9588.402, 9804.807), stdev = 141.117
[info]   CI (99.9%): [9045.011, 10131.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.982 ±(99.9%) 1113.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.982, 668.168), stdev = 289.183
[info]   CI (99.9%): [≈ 0, 1616.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10221.110 ±(99.9%) 22617.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10221.110, 13563.899), stdev = 5873.656
[info]   CI (99.9%): [≈ 0, 32838.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.423), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.90% complete, ETA 01:40:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48263.729 ops/s
[info] # Warmup Iteration   2: 81375.137 ops/s
[info] # Warmup Iteration   3: 85972.715 ops/s
[info] # Warmup Iteration   4: 86798.133 ops/s
[info] # Warmup Iteration   5: 87338.688 ops/s
[info] Iteration   1: 86735.637 ops/s
[info]                  ·gc.alloc.rate:               502.746 MB/sec
[info]                  ·gc.alloc.rate.norm:          9121.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9282.643 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 84848.755 ops/s
[info]                  ·gc.alloc.rate:               510.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          9475.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12442.596 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 87048.248 ops/s
[info]                  ·gc.alloc.rate:               507.487 MB/sec
[info]                  ·gc.alloc.rate.norm:          9172.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12127.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87494.290 ops/s
[info]                  ·gc.alloc.rate:      494.593 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87176.746 ops/s
[info]                  ·gc.alloc.rate:               515.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          9313.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12121.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   86660.735 ±(99.9%) 4038.650 ops/s [Average]
[info]   (min, avg, max) = (84848.755, 86660.735, 87494.290), stdev = 1048.824
[info]   CI (99.9%): [82622.086, 90699.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   506.319 ±(99.9%) 31.293 MB/sec [Average]
[info]   (min, avg, max) = (494.593, 506.319, 515.903), stdev = 8.127
[info]   CI (99.9%): [475.027, 537.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9195.854 ±(99.9%) 834.828 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9195.854, 9475.474), stdev = 216.802
[info]   CI (99.9%): [8361.026, 10030.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.979 ±(99.9%) 1119.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.979, 671.446), stdev = 290.617
[info]   CI (99.9%): [≈ 0, 1624.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9194.915 ±(99.9%) 20400.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9194.915, 12442.596), stdev = 5297.842
[info]   CI (99.9%): [≈ 0, 29595.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.10% complete, ETA 01:40:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40173.752 ops/s
[info] # Warmup Iteration   2: 82891.326 ops/s
[info] # Warmup Iteration   3: 86202.368 ops/s
[info] # Warmup Iteration   4: 87574.661 ops/s
[info] # Warmup Iteration   5: 87520.336 ops/s
[info] Iteration   1: 86226.478 ops/s
[info]                  ·gc.alloc.rate:               443.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          8092.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9337.427 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 87710.310 ops/s
[info]                  ·gc.alloc.rate:      426.698 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87342.838 ops/s
[info]                  ·gc.alloc.rate:               450.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          8115.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12086.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87759.967 ops/s
[info]                  ·gc.alloc.rate:      426.945 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87523.064 ops/s
[info]                  ·gc.alloc.rate:               451.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          8118.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12061.822 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   87312.531 ±(99.9%) 2422.527 ops/s [Average]
[info]   (min, avg, max) = (86226.478, 87312.531, 87759.967), stdev = 629.122
[info]   CI (99.9%): [84890.005, 89735.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   439.800 ±(99.9%) 47.171 MB/sec [Average]
[info]   (min, avg, max) = (426.698, 439.800, 451.534), stdev = 12.250
[info]   CI (99.9%): [392.629, 486.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7927.784 ±(99.9%) 956.128 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7927.784, 8118.837), stdev = 248.303
[info]   CI (99.9%): [6971.656, 8883.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.652 ±(99.9%) 1326.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.652, 670.826), stdev = 344.544
[info]   CI (99.9%): [≈ 0, 1697.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6697.185 ±(99.9%) 23931.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6697.185, 12086.674), stdev = 6214.929
[info]   CI (99.9%): [≈ 0, 30628.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.30% complete, ETA 01:39:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1493.298 ops/s
[info] # Warmup Iteration   2: 7326.018 ops/s
[info] # Warmup Iteration   3: 10349.883 ops/s
[info] # Warmup Iteration   4: 10278.733 ops/s
[info] # Warmup Iteration   5: 10245.917 ops/s
[info] Iteration   1: 10352.524 ops/s
[info]                  ·gc.alloc.rate:                   1682.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              255707.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204145.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 10336.770 ops/s
[info]                  ·gc.alloc.rate:                   1702.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              259175.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306996.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 465.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 10378.688 ops/s
[info]                  ·gc.alloc.rate:                   1695.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              257003.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203533.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10192.630 ops/s
[info]                  ·gc.alloc.rate:                   1691.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              261220.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309995.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.856 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10295.624 ops/s
[info]                  ·gc.alloc.rate:                   1682.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              257156.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204461.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10311.247 ±(99.9%) 280.448 ops/s [Average]
[info]   (min, avg, max) = (10192.630, 10311.247, 10378.688), stdev = 72.831
[info]   CI (99.9%): [10030.799, 10591.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1690.735 ±(99.9%) 33.373 MB/sec [Average]
[info]   (min, avg, max) = (1682.066, 1690.735, 1702.373), stdev = 8.667
[info]   CI (99.9%): [1657.362, 1724.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258052.631 ±(99.9%) 8324.529 B/op [Average]
[info]   (min, avg, max) = (255707.927, 258052.631, 261220.106), stdev = 2161.854
[info]   CI (99.9%): [249728.102, 266377.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.423 ±(99.9%) 1415.592 MB/sec [Average]
[info]   (min, avg, max) = (1337.618, 1609.423, 2016.485), stdev = 367.625
[info]   CI (99.9%): [193.831, 3025.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   245826.592 ±(99.9%) 220334.524 B/op [Average]
[info]   (min, avg, max) = (203533.440, 245826.592, 309995.887), stdev = 57220.176
[info]   CI (99.9%): [25492.068, 466161.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.024 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.816, 3.060), stdev = 1.305
[info]   CI (99.9%): [≈ 0, 5.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   124.171 ±(99.9%) 764.715 B/op [Average]
[info]   (min, avg, max) = (3.164, 124.171, 465.896), stdev = 198.594
[info]   CI (99.9%): [≈ 0, 888.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.50% complete, ETA 01:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1636.265 ops/s
[info] # Warmup Iteration   2: 9079.343 ops/s
[info] # Warmup Iteration   3: 10159.843 ops/s
[info] # Warmup Iteration   4: 10174.641 ops/s
[info] # Warmup Iteration   5: 10112.961 ops/s
[info] Iteration   1: 10105.844 ops/s
[info]                  ·gc.alloc.rate:               1559.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          242841.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 208283.768 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 10168.350 ops/s
[info]                  ·gc.alloc.rate:                   1553.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              240467.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207199.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10102.458 ops/s
[info]                  ·gc.alloc.rate:                   1567.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              244236.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208677.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 597.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9924.385 ops/s
[info]                  ·gc.alloc.rate:                   1557.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              246911.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317625.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9863.028 ops/s
[info]                  ·gc.alloc.rate:                   1518.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              242374.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212797.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10032.813 ±(99.9%) 506.245 ops/s [Average]
[info]   (min, avg, max) = (9863.028, 10032.813, 10168.350), stdev = 131.470
[info]   CI (99.9%): [9526.567, 10539.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1551.469 ±(99.9%) 72.702 MB/sec [Average]
[info]   (min, avg, max) = (1518.998, 1551.469, 1567.893), stdev = 18.880
[info]   CI (99.9%): [1478.767, 1624.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243366.408 ±(99.9%) 9230.416 B/op [Average]
[info]   (min, avg, max) = (240467.797, 243366.408, 246911.330), stdev = 2397.110
[info]   CI (99.9%): [234135.991, 252596.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1470.556 ±(99.9%) 1146.431 MB/sec [Average]
[info]   (min, avg, max) = (1333.634, 1470.556, 2003.126), stdev = 297.724
[info]   CI (99.9%): [324.126, 2616.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   230916.876 ±(99.9%) 186825.936 B/op [Average]
[info]   (min, avg, max) = (207199.937, 230916.876, 317625.469), stdev = 48518.102
[info]   CI (99.9%): [44090.940, 417742.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.862 ±(99.9%) 6.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 3.833), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   134.574 ±(99.9%) 1001.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.574, 597.008), stdev = 260.142
[info]   CI (99.9%): [≈ 0, 1136.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 10.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.70% complete, ETA 01:39:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84353.064 ops/s
[info] # Warmup Iteration   2: 147399.092 ops/s
[info] # Warmup Iteration   3: 154188.019 ops/s
[info] # Warmup Iteration   4: 154317.947 ops/s
[info] # Warmup Iteration   5: 153761.075 ops/s
[info] Iteration   1: 157030.231 ops/s
[info]                  ·gc.alloc.rate:      408.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 156055.912 ops/s
[info]                  ·gc.alloc.rate:               419.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          4226.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5159.211 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 156086.614 ops/s
[info]                  ·gc.alloc.rate:                   420.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              4238.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6766.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 153701.429 ops/s
[info]                  ·gc.alloc.rate:      400.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 154764.940 ops/s
[info]                  ·gc.alloc.rate:               430.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          4380.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6824.594 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   155527.825 ±(99.9%) 5008.081 ops/s [Average]
[info]   (min, avg, max) = (153701.429, 155527.825, 157030.231), stdev = 1300.583
[info]   CI (99.9%): [150519.744, 160535.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   415.815 ±(99.9%) 45.334 MB/sec [Average]
[info]   (min, avg, max) = (400.053, 415.815, 430.768), stdev = 11.773
[info]   CI (99.9%): [370.481, 461.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4207.518 ±(99.9%) 455.948 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4207.518, 4380.377), stdev = 118.408
[info]   CI (99.9%): [3751.570, 4663.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.782 ±(99.9%) 1327.260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.782, 671.162), stdev = 344.685
[info]   CI (99.9%): [≈ 0, 1698.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3750.122 ±(99.9%) 13431.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3750.122, 6824.594), stdev = 3488.019
[info]   CI (99.9%): [≈ 0, 17181.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.210), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25.90% complete, ETA 01:39:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721.351 ops/s
[info] # Warmup Iteration   2: 4409.782 ops/s
[info] # Warmup Iteration   3: 5588.722 ops/s
[info] # Warmup Iteration   4: 5836.881 ops/s
[info] # Warmup Iteration   5: 5817.330 ops/s
[info] Iteration   1: 5809.091 ops/s
[info]                  ·gc.alloc.rate:               1493.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          404480.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 362427.275 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 5825.821 ops/s
[info]                  ·gc.alloc.rate:                   1489.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              402255.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361550.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 5823.908 ops/s
[info]                  ·gc.alloc.rate:                   1488.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              402264.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     361944.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1057.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 5822.620 ops/s
[info]                  ·gc.alloc.rate:                   1538.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              415683.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542199.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5835.648 ops/s
[info]                  ·gc.alloc.rate:                   1514.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              408297.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359645.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5823.418 ±(99.9%) 36.606 ops/s [Average]
[info]   (min, avg, max) = (5809.091, 5823.418, 5835.648), stdev = 9.507
[info]   CI (99.9%): [5786.811, 5860.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1504.634 ±(99.9%) 82.470 MB/sec [Average]
[info]   (min, avg, max) = (1488.713, 1504.634, 1538.131), stdev = 21.417
[info]   CI (99.9%): [1422.164, 1587.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   406596.245 ±(99.9%) 21744.938 B/op [Average]
[info]   (min, avg, max) = (402255.482, 406596.245, 415683.406), stdev = 5647.091
[info]   CI (99.9%): [384851.306, 428341.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.150 ±(99.9%) 1151.921 MB/sec [Average]
[info]   (min, avg, max) = (1333.610, 1471.150, 2006.271), stdev = 299.150
[info]   CI (99.9%): [319.229, 2623.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   397553.182 ±(99.9%) 311388.177 B/op [Average]
[info]   (min, avg, max) = (359645.220, 397553.182, 542199.298), stdev = 80866.521
[info]   CI (99.9%): [86165.005, 708941.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.958 ±(99.9%) 6.493 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 3.915), stdev = 1.686
[info]   CI (99.9%): [≈ 0, 7.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   258.845 ±(99.9%) 1754.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 258.845, 1057.988), stdev = 455.599
[info]   CI (99.9%): [≈ 0, 2013.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 9.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 943.562 ops/s
[info] # Warmup Iteration   2: 8745.289 ops/s
[info] # Warmup Iteration   3: 9482.507 ops/s
[info] # Warmup Iteration   4: 9757.311 ops/s
[info] # Warmup Iteration   5: 9970.671 ops/s
[info] Iteration   1: 9891.119 ops/s
[info]                  ·gc.alloc.rate:                   1581.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              251658.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320624.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9968.754 ops/s
[info]                  ·gc.alloc.rate:                   1586.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              250421.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212218.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9685.993 ops/s
[info]                  ·gc.alloc.rate:                   1554.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              252597.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218417.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 591.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9646.807 ops/s
[info]                  ·gc.alloc.rate:                   1536.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              250639.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218648.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9595.578 ops/s
[info]                  ·gc.alloc.rate:               1553.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          254772.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 329312.083 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   9757.650 ±(99.9%) 627.039 ops/s [Average]
[info]   (min, avg, max) = (9595.578, 9757.650, 9968.754), stdev = 162.840
[info]   CI (99.9%): [9130.611, 10384.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1562.577 ±(99.9%) 80.631 MB/sec [Average]
[info]   (min, avg, max) = (1536.534, 1562.577, 1586.364), stdev = 20.940
[info]   CI (99.9%): [1481.947, 1643.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   252017.949 ±(99.9%) 6807.720 B/op [Average]
[info]   (min, avg, max) = (250421.395, 252017.949, 254772.742), stdev = 1767.943
[info]   CI (99.9%): [245210.229, 258825.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1610.473 ±(99.9%) 1410.144 MB/sec [Average]
[info]   (min, avg, max) = (1340.411, 1610.473, 2015.186), stdev = 366.210
[info]   CI (99.9%): [200.328, 3020.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   259844.074 ±(99.9%) 229441.899 B/op [Average]
[info]   (min, avg, max) = (212218.069, 259844.074, 329312.083), stdev = 59585.333
[info]   CI (99.9%): [30402.175, 489285.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.643), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 6.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   127.156 ±(99.9%) 1001.759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 127.156, 591.908), stdev = 260.154
[info]   CI (99.9%): [≈ 0, 1128.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.31% complete, ETA 01:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5248.709 ops/s
[info] # Warmup Iteration   2: 18582.638 ops/s
[info] # Warmup Iteration   3: 19782.804 ops/s
[info] # Warmup Iteration   4: 20102.912 ops/s
[info] # Warmup Iteration   5: 20016.363 ops/s
[info] Iteration   1: 19923.892 ops/s
[info]                  ·gc.alloc.rate:                   1548.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              122266.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105967.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 19509.090 ops/s
[info]                  ·gc.alloc.rate:               1530.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          123491.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108221.383 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 19773.276 ops/s
[info]                  ·gc.alloc.rate:                   1526.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              121500.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106882.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 19841.049 ops/s
[info]                  ·gc.alloc.rate:                   1554.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              123290.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159246.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 19794.565 ops/s
[info]                  ·gc.alloc.rate:                   1536.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              122174.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106340.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.655 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   19768.374 ±(99.9%) 600.890 ops/s [Average]
[info]   (min, avg, max) = (19509.090, 19768.374, 19923.892), stdev = 156.049
[info]   CI (99.9%): [19167.484, 20369.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1539.341 ±(99.9%) 44.747 MB/sec [Average]
[info]   (min, avg, max) = (1526.640, 1539.341, 1554.370), stdev = 11.621
[info]   CI (99.9%): [1494.594, 1584.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122544.571 ±(99.9%) 3197.214 B/op [Average]
[info]   (min, avg, max) = (121500.033, 122544.571, 123491.336), stdev = 830.306
[info]   CI (99.9%): [119347.357, 125741.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.306 ±(99.9%) 1148.166 MB/sec [Average]
[info]   (min, avg, max) = (1337.616, 1474.306, 2007.686), stdev = 298.175
[info]   CI (99.9%): [326.140, 2622.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   117331.814 ±(99.9%) 90284.699 B/op [Average]
[info]   (min, avg, max) = (105967.789, 117331.814, 159246.602), stdev = 23446.650
[info]   CI (99.9%): [27047.115, 207616.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.747), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 7.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61.954 ±(99.9%) 508.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.954, 298.222), stdev = 132.101
[info]   CI (99.9%): [≈ 0, 570.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.51% complete, ETA 01:38:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8261.846 ops/s
[info] # Warmup Iteration   2: 21814.895 ops/s
[info] # Warmup Iteration   3: 23095.186 ops/s
[info] # Warmup Iteration   4: 23096.558 ops/s
[info] # Warmup Iteration   5: 22781.948 ops/s
[info] Iteration   1: 23072.147 ops/s
[info]                  ·gc.alloc.rate:                   1554.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              106059.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91417.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.420 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22496.101 ops/s
[info]                  ·gc.alloc.rate:                   1532.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              107192.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93757.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23149.615 ops/s
[info]                  ·gc.alloc.rate:                   1588.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              108012.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136715.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 23315.974 ops/s
[info]                  ·gc.alloc.rate:               1586.786 MB/sec
[info]                  ·gc.alloc.rate.norm:          107099.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90285.177 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 23229.619 ops/s
[info]                  ·gc.alloc.rate:               1567.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          106194.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90532.989 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23052.691 ±(99.9%) 1248.029 ops/s [Average]
[info]   (min, avg, max) = (22496.101, 23052.691, 23315.974), stdev = 324.109
[info]   CI (99.9%): [21804.662, 24300.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1566.156 ±(99.9%) 90.206 MB/sec [Average]
[info]   (min, avg, max) = (1532.622, 1566.156, 1588.912), stdev = 23.426
[info]   CI (99.9%): [1475.951, 1656.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106911.558 ±(99.9%) 3084.367 B/op [Average]
[info]   (min, avg, max) = (106059.499, 106911.558, 108012.272), stdev = 801.000
[info]   CI (99.9%): [103827.191, 109995.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1473.195 ±(99.9%) 1158.015 MB/sec [Average]
[info]   (min, avg, max) = (1336.330, 1473.195, 2011.153), stdev = 300.733
[info]   CI (99.9%): [315.180, 2631.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100541.812 ±(99.9%) 78045.585 B/op [Average]
[info]   (min, avg, max) = (90285.177, 100541.812, 136715.653), stdev = 20268.190
[info]   CI (99.9%): [22496.227, 178587.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.801 ±(99.9%) 6.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.801, 3.962), stdev = 1.767
[info]   CI (99.9%): [≈ 0, 7.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   54.442 ±(99.9%) 462.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.442, 269.336), stdev = 120.131
[info]   CI (99.9%): [≈ 0, 517.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.71% complete, ETA 01:37:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84234.079 ops/s
[info] # Warmup Iteration   2: 123993.487 ops/s
[info] # Warmup Iteration   3: 133868.138 ops/s
[info] # Warmup Iteration   4: 134277.005 ops/s
[info] # Warmup Iteration   5: 134594.215 ops/s
[info] Iteration   1: 134422.077 ops/s
[info]                  ·gc.alloc.rate:      297.363 MB/sec
[info]                  ·gc.alloc.rate.norm: 3481.483 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 133823.524 ops/s
[info]                  ·gc.alloc.rate:               309.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          3636.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6016.394 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 134328.801 ops/s
[info]                  ·gc.alloc.rate:      297.045 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 134111.355 ops/s
[info]                  ·gc.alloc.rate:                   312.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              3665.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6003.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 134926.551 ops/s
[info]                  ·gc.alloc.rate:      298.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   134322.461 ±(99.9%) 1574.052 ops/s [Average]
[info]   (min, avg, max) = (133823.524, 134322.461, 134926.551), stdev = 408.776
[info]   CI (99.9%): [132748.409, 135896.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   302.875 ±(99.9%) 28.243 MB/sec [Average]
[info]   (min, avg, max) = (297.045, 302.875, 312.369), stdev = 7.335
[info]   CI (99.9%): [274.633, 331.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3548.702 ±(99.9%) 361.804 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3548.702, 3665.532), stdev = 93.959
[info]   CI (99.9%): [3186.899, 3910.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.641 ±(99.9%) 1079.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.641, 511.605), stdev = 280.216
[info]   CI (99.9%): [≈ 0, 1283.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2403.965 ±(99.9%) 12675.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2403.965, 6016.394), stdev = 3291.768
[info]   CI (99.9%): [≈ 0, 15079.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.098 ±(99.9%) 0.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.489), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26.91% complete, ETA 01:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105513.078 ops/s
[info] # Warmup Iteration   2: 130344.448 ops/s
[info] # Warmup Iteration   3: 139769.442 ops/s
[info] # Warmup Iteration   4: 140194.083 ops/s
[info] # Warmup Iteration   5: 140038.782 ops/s
[info] Iteration   1: 140202.632 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 139501.430 ops/s
[info]                  ·gc.alloc.rate:      0.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.580 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 140083.219 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 139526.014 ops/s
[info]                  ·gc.alloc.rate:      0.148 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.669 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 139667.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   139796.181 ±(99.9%) 1253.668 ops/s [Average]
[info]   (min, avg, max) = (139501.430, 139796.181, 140202.632), stdev = 325.574
[info]   CI (99.9%): [138542.513, 141049.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.129 ±(99.9%) 0.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.129, 0.495), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.452 ±(99.9%) 9.309 B/op [Average]
[info]   (min, avg, max) = (0.003, 1.452, 5.580), stdev = 2.418
[info]   CI (99.9%): [≈ 0, 10.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.11% complete, ETA 01:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10003.031 ops/s
[info] # Warmup Iteration   2: 22283.396 ops/s
[info] # Warmup Iteration   3: 22453.855 ops/s
[info] # Warmup Iteration   4: 23381.442 ops/s
[info] # Warmup Iteration   5: 23288.344 ops/s
[info] Iteration   1: 23231.472 ops/s
[info]                  ·gc.alloc.rate:                   1604.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              108677.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90867.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.306 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 23449.031 ops/s
[info]                  ·gc.alloc.rate:                   1624.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              109038.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90067.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 22938.925 ops/s
[info]                  ·gc.alloc.rate:                   1603.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              109979.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137910.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23502.996 ops/s
[info]                  ·gc.alloc.rate:                   1640.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              109812.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89477.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23482.854 ops/s
[info]                  ·gc.alloc.rate:               1626.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          108970.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89553.962 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23321.056 ±(99.9%) 922.765 ops/s [Average]
[info]   (min, avg, max) = (22938.925, 23321.056, 23502.996), stdev = 239.639
[info]   CI (99.9%): [22398.290, 24243.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1619.684 ±(99.9%) 60.669 MB/sec [Average]
[info]   (min, avg, max) = (1603.067, 1619.684, 1640.091), stdev = 15.755
[info]   CI (99.9%): [1559.015, 1680.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109295.779 ±(99.9%) 2185.588 B/op [Average]
[info]   (min, avg, max) = (108677.419, 109295.779, 109979.765), stdev = 567.590
[info]   CI (99.9%): [107110.190, 111481.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1473.296 ±(99.9%) 1155.741 MB/sec [Average]
[info]   (min, avg, max) = (1336.302, 1473.296, 2010.184), stdev = 300.142
[info]   CI (99.9%): [317.555, 2629.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99575.465 ±(99.9%) 82546.408 B/op [Average]
[info]   (min, avg, max) = (89477.772, 99575.465, 137910.390), stdev = 21437.040
[info]   CI (99.9%): [17029.056, 182121.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 5.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 3.109), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 5.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56.035 ±(99.9%) 344.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.035, 208.630), stdev = 89.451
[info]   CI (99.9%): [≈ 0, 400.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27.31% complete, ETA 01:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5259.931 ops/s
[info] # Warmup Iteration   2: 9481.912 ops/s
[info] # Warmup Iteration   3: 9501.068 ops/s
[info] # Warmup Iteration   4: 9695.137 ops/s
[info] # Warmup Iteration   5: 9772.787 ops/s
[info] Iteration   1: 9769.422 ops/s
[info]                  ·gc.alloc.rate:               859.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          138520.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108269.871 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 9734.800 ops/s
[info]                  ·gc.alloc.rate:               851.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          137586.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108647.893 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9740.785 ops/s
[info]                  ·gc.alloc.rate:                   865.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              139708.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216536.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9752.948 ops/s
[info]                  ·gc.alloc.rate:               856.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          138201.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108554.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 9747.644 ops/s
[info]                  ·gc.alloc.rate:               860.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          138846.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108621.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   9749.120 ±(99.9%) 51.068 ops/s [Average]
[info]   (min, avg, max) = (9734.800, 9749.120, 9769.422), stdev = 13.262
[info]   CI (99.9%): [9698.052, 9800.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   858.727 ±(99.9%) 20.839 MB/sec [Average]
[info]   (min, avg, max) = (851.158, 858.727, 865.919), stdev = 5.412
[info]   CI (99.9%): [837.888, 879.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   138572.579 ±(99.9%) 3030.655 B/op [Average]
[info]   (min, avg, max) = (137586.669, 138572.579, 139708.476), stdev = 787.051
[info]   CI (99.9%): [135541.924, 141603.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806.406 ±(99.9%) 1153.123 MB/sec [Average]
[info]   (min, avg, max) = (672.133, 806.406, 1342.100), stdev = 299.462
[info]   CI (99.9%): [≈ 0, 1959.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   130126.130 ±(99.9%) 186005.204 B/op [Average]
[info]   (min, avg, max) = (108269.871, 130126.130, 216536.253), stdev = 48304.961
[info]   CI (99.9%): [≈ 0, 316131.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.341 ±(99.9%) 11.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.341, 6.703), stdev = 2.998
[info]   CI (99.9%): [≈ 0, 12.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.51% complete, ETA 01:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30492.804 ops/s
[info] # Warmup Iteration   2: 112519.259 ops/s
[info] # Warmup Iteration   3: 118597.958 ops/s
[info] # Warmup Iteration   4: 125364.992 ops/s
[info] # Warmup Iteration   5: 124628.989 ops/s
[info] Iteration   1: 124137.279 ops/s
[info]                  ·gc.alloc.rate:               1755.904 MB/sec
[info]                  ·gc.alloc.rate.norm:          22259.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17030.482 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 124335.323 ops/s
[info]                  ·gc.alloc.rate:                   1772.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              22435.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25518.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 124240.482 ops/s
[info]                  ·gc.alloc.rate:                   1795.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              22746.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25474.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 125080.498 ops/s
[info]                  ·gc.alloc.rate:               1768.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          22249.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16846.951 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 122880.665 ops/s
[info]                  ·gc.alloc.rate:               1765.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          22605.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25721.092 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   124134.849 ±(99.9%) 3055.494 ops/s [Average]
[info]   (min, avg, max) = (122880.665, 124134.849, 125080.498), stdev = 793.502
[info]   CI (99.9%): [121079.355, 127190.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1771.576 ±(99.9%) 57.318 MB/sec [Average]
[info]   (min, avg, max) = (1755.904, 1771.576, 1795.819), stdev = 14.885
[info]   CI (99.9%): [1714.259, 1828.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22459.366 ±(99.9%) 835.485 B/op [Average]
[info]   (min, avg, max) = (22249.519, 22459.366, 22746.593), stdev = 216.973
[info]   CI (99.9%): [21623.881, 23294.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.642 ±(99.9%) 1414.655 MB/sec [Average]
[info]   (min, avg, max) = (1339.012, 1743.642, 2016.207), stdev = 367.381
[info]   CI (99.9%): [328.987, 3158.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22118.297 ±(99.9%) 18212.190 B/op [Average]
[info]   (min, avg, max) = (16846.951, 22118.297, 25721.092), stdev = 4729.648
[info]   CI (99.9%): [3906.106, 40330.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.497), stdev = 1.538
[info]   CI (99.9%): [≈ 0, 6.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.539 ±(99.9%) 74.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.539, 44.266), stdev = 19.470
[info]   CI (99.9%): [≈ 0, 84.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.776 ops/s
[info] # Warmup Iteration   2: 520932.213 ops/s
[info] # Warmup Iteration   3: 560145.210 ops/s
[info] # Warmup Iteration   4: 563141.372 ops/s
[info] # Warmup Iteration   5: 564973.617 ops/s
[info] Iteration   1: 562935.596 ops/s
[info]                  ·gc.alloc.rate:               605.921 MB/sec
[info]                  ·gc.alloc.rate.norm:          1693.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1860.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 559639.798 ops/s
[info]                  ·gc.alloc.rate:               599.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          1686.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1871.423 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 561151.976 ops/s
[info]                  ·gc.alloc.rate:                   601.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1685.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1868.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 563205.558 ops/s
[info]                  ·gc.alloc.rate:               610.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          1705.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1861.412 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 559040.626 ops/s
[info]                  ·gc.alloc.rate:                   596.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1876.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   561194.711 ±(99.9%) 7238.250 ops/s [Average]
[info]   (min, avg, max) = (559040.626, 561194.711, 563205.558), stdev = 1879.751
[info]   CI (99.9%): [553956.460, 568432.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   602.764 ±(99.9%) 20.413 MB/sec [Average]
[info]   (min, avg, max) = (596.817, 602.764, 610.218), stdev = 5.301
[info]   CI (99.9%): [582.351, 623.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1690.245 ±(99.9%) 37.113 B/op [Average]
[info]   (min, avg, max) = (1680.040, 1690.245, 1705.071), stdev = 9.638
[info]   CI (99.9%): [1653.132, 1727.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.980 ±(99.9%) 1.699 MB/sec [Average]
[info]   (min, avg, max) = (665.509, 665.980, 666.512), stdev = 0.441
[info]   CI (99.9%): [664.281, 667.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1867.554 ±(99.9%) 25.716 B/op [Average]
[info]   (min, avg, max) = (1860.485, 1867.554, 1876.231), stdev = 6.678
[info]   CI (99.9%): [1841.837, 1893.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.91% complete, ETA 01:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107175.221 ops/s
[info] # Warmup Iteration   2: 319390.843 ops/s
[info] # Warmup Iteration   3: 324794.879 ops/s
[info] # Warmup Iteration   4: 329915.522 ops/s
[info] # Warmup Iteration   5: 321641.651 ops/s
[info] Iteration   1: 323572.582 ops/s
[info]                  ·gc.alloc.rate:               476.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          2315.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2488.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 332657.674 ops/s
[info]                  ·gc.alloc.rate:               489.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          2317.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3150.121 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 334051.390 ops/s
[info]                  ·gc.alloc.rate:      472.113 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 332481.812 ops/s
[info]                  ·gc.alloc.rate:                   486.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              2303.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3151.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 329244.064 ops/s
[info]                  ·gc.alloc.rate:               478.749 MB/sec
[info]                  ·gc.alloc.rate.norm:          2288.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3187.548 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   330401.505 ±(99.9%) 16190.286 ops/s [Average]
[info]   (min, avg, max) = (323572.582, 330401.505, 334051.390), stdev = 4204.566
[info]   CI (99.9%): [314211.219, 346591.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   480.699 ±(99.9%) 28.515 MB/sec [Average]
[info]   (min, avg, max) = (472.113, 480.699, 489.985), stdev = 7.405
[info]   CI (99.9%): [452.185, 509.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2289.732 ±(99.9%) 148.511 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2289.732, 2317.935), stdev = 38.568
[info]   CI (99.9%): [2141.221, 2438.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.062 ±(99.9%) 1111.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.062, 666.864), stdev = 288.527
[info]   CI (99.9%): [≈ 0, 1613.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2395.563 ±(99.9%) 5278.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2395.563, 3187.548), stdev = 1370.734
[info]   CI (99.9%): [≈ 0, 7673.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.11% complete, ETA 01:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314158.281 ops/s
[info] # Warmup Iteration   2: 719841.272 ops/s
[info] # Warmup Iteration   3: 749504.443 ops/s
[info] # Warmup Iteration   4: 757623.062 ops/s
[info] # Warmup Iteration   5: 756571.683 ops/s
[info] Iteration   1: 755428.861 ops/s
[info]                  ·gc.alloc.rate:               516.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          1074.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1065.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 753254.626 ops/s
[info]                  ·gc.alloc.rate:               514.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          1073.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1400.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 757200.197 ops/s
[info]                  ·gc.alloc.rate:               506.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          1051.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1393.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 755602.895 ops/s
[info]                  ·gc.alloc.rate:      491.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 740371.724 ops/s
[info]                  ·gc.alloc.rate:                   506.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1075.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1426.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   752371.660 ±(99.9%) 26390.274 ops/s [Average]
[info]   (min, avg, max) = (740371.724, 752371.660, 757200.197), stdev = 6853.470
[info]   CI (99.9%): [725981.387, 778761.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   506.823 ±(99.9%) 36.995 MB/sec [Average]
[info]   (min, avg, max) = (491.670, 506.823, 516.080), stdev = 9.607
[info]   CI (99.9%): [469.828, 543.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1060.142 ±(99.9%) 86.854 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1060.142, 1075.938), stdev = 22.556
[info]   CI (99.9%): [973.288, 1146.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.784 ±(99.9%) 1118.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.784, 671.167), stdev = 290.467
[info]   CI (99.9%): [≈ 0, 1623.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1057.368 ±(99.9%) 2346.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1057.368, 1426.699), stdev = 609.398
[info]   CI (99.9%): [≈ 0, 3403.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.31% complete, ETA 01:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6131.692 ops/s
[info] # Warmup Iteration   2: 59010.854 ops/s
[info] # Warmup Iteration   3: 73279.508 ops/s
[info] # Warmup Iteration   4: 75901.946 ops/s
[info] # Warmup Iteration   5: 75268.909 ops/s
[info] Iteration   1: 74563.334 ops/s
[info]                  ·gc.alloc.rate:                   3051.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              64401.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56322.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.712 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 75258.227 ops/s
[info]                  ·gc.alloc.rate:                   3119.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              65227.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69810.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 76779.817 ops/s
[info]                  ·gc.alloc.rate:               3167.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          64916.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54902.913 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 76707.318 ops/s
[info]                  ·gc.alloc.rate:               3192.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          65483.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68928.797 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 75316.112 ops/s
[info]                  ·gc.alloc.rate:               3110.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          64988.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56364.127 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   75724.961 ±(99.9%) 3759.125 ops/s [Average]
[info]   (min, avg, max) = (74563.334, 75724.961, 76779.817), stdev = 976.233
[info]   CI (99.9%): [71965.836, 79484.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3128.244 ±(99.9%) 210.806 MB/sec [Average]
[info]   (min, avg, max) = (3051.479, 3128.244, 3192.859), stdev = 54.746
[info]   CI (99.9%): [2917.439, 3339.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65003.412 ±(99.9%) 1553.325 B/op [Average]
[info]   (min, avg, max) = (64401.489, 65003.412, 65483.743), stdev = 403.394
[info]   CI (99.9%): [63450.086, 66556.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.861 ±(99.9%) 1409.872 MB/sec [Average]
[info]   (min, avg, max) = (2668.684, 2948.861, 3360.833), stdev = 366.139
[info]   CI (99.9%): [1538.989, 4358.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61265.848 ±(99.9%) 28601.672 B/op [Average]
[info]   (min, avg, max) = (54902.913, 61265.848, 69810.806), stdev = 7427.763
[info]   CI (99.9%): [32664.176, 89867.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.271), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.316 ±(99.9%) 9.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.316, 5.712), stdev = 2.486
[info]   CI (99.9%): [≈ 0, 10.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28.51% complete, ETA 01:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81704.650 ops/s
[info] # Warmup Iteration   2: 223229.724 ops/s
[info] # Warmup Iteration   3: 229338.185 ops/s
[info] # Warmup Iteration   4: 226539.320 ops/s
[info] # Warmup Iteration   5: 224374.899 ops/s
[info] Iteration   1: 234379.848 ops/s
[info]                  ·gc.alloc.rate:               1340.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          9003.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9021.750 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 227999.481 ops/s
[info]                  ·gc.alloc.rate:                   1306.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              9018.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9278.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 222862.748 ops/s
[info]                  ·gc.alloc.rate:                   1289.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              9106.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9497.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 224621.888 ops/s
[info]                  ·gc.alloc.rate:                   1313.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              9203.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9427.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 229284.513 ops/s
[info]                  ·gc.alloc.rate:                   1303.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              8946.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9217.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   227829.696 ±(99.9%) 17221.725 ops/s [Average]
[info]   (min, avg, max) = (222862.748, 227829.696, 234379.848), stdev = 4472.427
[info]   CI (99.9%): [210607.971, 245051.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1310.917 ±(99.9%) 72.959 MB/sec [Average]
[info]   (min, avg, max) = (1289.631, 1310.917, 1340.966), stdev = 18.947
[info]   CI (99.9%): [1237.958, 1383.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9055.855 ±(99.9%) 387.350 B/op [Average]
[info]   (min, avg, max) = (8946.709, 9055.855, 9203.623), stdev = 100.594
[info]   CI (99.9%): [8668.505, 9443.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.374 ±(99.9%) 4.216 MB/sec [Average]
[info]   (min, avg, max) = (1342.866, 1344.374, 1345.616), stdev = 1.095
[info]   CI (99.9%): [1340.158, 1348.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9288.801 ±(99.9%) 719.059 B/op [Average]
[info]   (min, avg, max) = (9021.750, 9288.801, 9497.997), stdev = 186.737
[info]   CI (99.9%): [8569.741, 10007.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.039), stdev = 1.348
[info]   CI (99.9%): [≈ 0, 5.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4.403 ±(99.9%) 36.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.403, 21.294), stdev = 9.443
[info]   CI (99.9%): [≈ 0, 40.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:35:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75354.737 ops/s
[info] # Warmup Iteration   2: 183080.330 ops/s
[info] # Warmup Iteration   3: 200586.499 ops/s
[info] # Warmup Iteration   4: 201007.462 ops/s
[info] # Warmup Iteration   5: 201360.031 ops/s
[info] Iteration   1: 200039.325 ops/s
[info]                  ·gc.alloc.rate:               1463.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          11512.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10547.183 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 195654.332 ops/s
[info]                  ·gc.alloc.rate:                   1433.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              11527.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16184.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 200519.274 ops/s
[info]                  ·gc.alloc.rate:                   1463.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              11485.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10540.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 201455.129 ops/s
[info]                  ·gc.alloc.rate:                   1483.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              11592.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10470.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 201679.024 ops/s
[info]                  ·gc.alloc.rate:               1486.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          11595.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10438.403 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   199869.417 ±(99.9%) 9433.544 ops/s [Average]
[info]   (min, avg, max) = (195654.332, 199869.417, 201679.024), stdev = 2449.861
[info]   CI (99.9%): [190435.873, 209302.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1466.006 ±(99.9%) 82.078 MB/sec [Average]
[info]   (min, avg, max) = (1433.131, 1466.006, 1486.021), stdev = 21.315
[info]   CI (99.9%): [1383.928, 1548.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11542.708 ±(99.9%) 188.714 B/op [Average]
[info]   (min, avg, max) = (11485.798, 11542.708, 11595.578), stdev = 49.008
[info]   CI (99.9%): [11353.995, 11731.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.789 ±(99.9%) 1156.730 MB/sec [Average]
[info]   (min, avg, max) = (1337.724, 1474.789, 2012.149), stdev = 300.399
[info]   CI (99.9%): [318.059, 2631.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11636.202 ±(99.9%) 9793.213 B/op [Average]
[info]   (min, avg, max) = (10438.403, 11636.202, 16184.986), stdev = 2543.266
[info]   CI (99.9%): [1842.989, 21429.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 6.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.497), stdev = 1.559
[info]   CI (99.9%): [≈ 0, 6.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.556 ±(99.9%) 47.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.556, 27.448), stdev = 12.239
[info]   CI (99.9%): [≈ 0, 52.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 10.000), stdev = 3.114
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.92% complete, ETA 01:35:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.811 ops/s
[info] # Warmup Iteration   2: 605125.804 ops/s
[info] # Warmup Iteration   3: 637344.560 ops/s
[info] # Warmup Iteration   4: 656541.427 ops/s
[info] # Warmup Iteration   5: 653647.533 ops/s
[info] Iteration   1: 647614.223 ops/s
[info]                  ·gc.alloc.rate:                   365.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              887.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1243.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 650486.558 ops/s
[info]                  ·gc.alloc.rate:      354.010 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.436 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 655368.557 ops/s
[info]                  ·gc.alloc.rate:               375.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          901.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1598.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 659008.676 ops/s
[info]                  ·gc.alloc.rate:      358.439 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 652921.405 ops/s
[info]                  ·gc.alloc.rate:                   380.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              917.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1604.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   653079.884 ±(99.9%) 16896.004 ops/s [Average]
[info]   (min, avg, max) = (647614.223, 653079.884, 659008.676), stdev = 4387.839
[info]   CI (99.9%): [636183.879, 669975.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   366.759 ±(99.9%) 43.188 MB/sec [Average]
[info]   (min, avg, max) = (354.010, 366.759, 380.691), stdev = 11.216
[info]   CI (99.9%): [323.572, 409.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   883.789 ±(99.9%) 105.245 B/op [Average]
[info]   (min, avg, max) = (856.001, 883.789, 917.568), stdev = 27.332
[info]   CI (99.9%): [778.544, 989.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.683 ±(99.9%) 1318.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.683, 665.867), stdev = 342.395
[info]   CI (99.9%): [≈ 0, 1687.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   889.427 ±(99.9%) 3176.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 889.427, 1604.918), stdev = 825.030
[info]   CI (99.9%): [≈ 0, 4066.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.026), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.063), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.12% complete, ETA 01:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291792.700 ops/s
[info] # Warmup Iteration   2: 630494.234 ops/s
[info] # Warmup Iteration   3: 627738.567 ops/s
[info] # Warmup Iteration   4: 655883.237 ops/s
[info] # Warmup Iteration   5: 657830.179 ops/s
[info] Iteration   1: 654369.017 ops/s
[info]                  ·gc.alloc.rate:                   497.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1196.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1230.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 657089.380 ops/s
[info]                  ·gc.alloc.rate:               502.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          1203.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1597.048 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 659530.469 ops/s
[info]                  ·gc.alloc.rate:                   506.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1209.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 659021.754 ops/s
[info]                  ·gc.alloc.rate:      489.117 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 654757.183 ops/s
[info]                  ·gc.alloc.rate:               512.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          1231.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1605.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   656953.561 ±(99.9%) 9120.474 ops/s [Average]
[info]   (min, avg, max) = (654369.017, 656953.561, 659530.469), stdev = 2368.558
[info]   CI (99.9%): [647833.087, 666074.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   501.668 ±(99.9%) 34.336 MB/sec [Average]
[info]   (min, avg, max) = (489.117, 501.668, 512.393), stdev = 8.917
[info]   CI (99.9%): [467.332, 536.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1201.706 ±(99.9%) 88.476 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1201.706, 1231.514), stdev = 22.977
[info]   CI (99.9%): [1113.231, 1290.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.656 ±(99.9%) 1112.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.656, 667.851), stdev = 288.961
[info]   CI (99.9%): [≈ 0, 1615.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1204.748 ±(99.9%) 2664.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1204.748, 1605.151), stdev = 692.026
[info]   CI (99.9%): [≈ 0, 3869.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.32% complete, ETA 01:34:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617793.645 ops/s
[info] # Warmup Iteration   2: 1026808.142 ops/s
[info] # Warmup Iteration   3: 1040588.951 ops/s
[info] # Warmup Iteration   4: 1086987.676 ops/s
[info] # Warmup Iteration   5: 1069710.264 ops/s
[info] Iteration   1: 1058248.116 ops/s
[info]                  ·gc.alloc.rate:               597.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          887.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 997.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1054434.757 ops/s
[info]                  ·gc.alloc.rate:               586.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          875.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1001.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1117481.432 ops/s
[info]                  ·gc.alloc.rate:                   630.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              888.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1066648.309 ops/s
[info]                  ·gc.alloc.rate:               599.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          883.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 990.715 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1117266.273 ops/s
[info]                  ·gc.alloc.rate:      607.715 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1082815.778 ±(99.9%) 122662.557 ops/s [Average]
[info]   (min, avg, max) = (1054434.757, 1082815.778, 1117481.432), stdev = 31855.077
[info]   CI (99.9%): [960153.220, 1205478.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   604.395 ±(99.9%) 63.985 MB/sec [Average]
[info]   (min, avg, max) = (586.876, 604.395, 630.990), stdev = 16.617
[info]   CI (99.9%): [540.410, 668.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   878.458 ±(99.9%) 52.234 B/op [Average]
[info]   (min, avg, max) = (856.000, 878.458, 888.609), stdev = 13.565
[info]   CI (99.9%): [826.223, 930.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.986 ±(99.9%) 1155.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.986, 671.627), stdev = 300.184
[info]   CI (99.9%): [≈ 0, 1692.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   787.034 ±(99.9%) 1696.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 787.034, 1001.190), stdev = 440.532
[info]   CI (99.9%): [≈ 0, 2483.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.52% complete, ETA 01:34:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517219.108 ops/s
[info] # Warmup Iteration   2: 1127317.379 ops/s
[info] # Warmup Iteration   3: 1190463.023 ops/s
[info] # Warmup Iteration   4: 1193253.145 ops/s
[info] # Warmup Iteration   5: 1191226.075 ops/s
[info] Iteration   1: 1191603.141 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1194192.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1192781.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1192470.351 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1192561.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1192721.925 ±(99.9%) 3605.186 ops/s [Average]
[info]   (min, avg, max) = (1191603.141, 1192721.925, 1194192.339), stdev = 936.255
[info]   CI (99.9%): [1189116.739, 1196327.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.72% complete, ETA 01:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10103.455 ops/s
[info] # Warmup Iteration   2: 31208.573 ops/s
[info] # Warmup Iteration   3: 34531.906 ops/s
[info] # Warmup Iteration   4: 33954.338 ops/s
[info] # Warmup Iteration   5: 34018.988 ops/s
[info] Iteration   1: 33502.207 ops/s
[info]                  ·gc.alloc.rate:                   1903.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              89391.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94562.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 33791.484 ops/s
[info]                  ·gc.alloc.rate:                   1918.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              89339.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93630.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33625.417 ops/s
[info]                  ·gc.alloc.rate:               1907.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          89245.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62541.060 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34835.031 ops/s
[info]                  ·gc.alloc.rate:                   1975.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              89241.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90556.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 34858.780 ops/s
[info]                  ·gc.alloc.rate:                   2002.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              90390.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90548.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34122.584 ±(99.9%) 2576.794 ops/s [Average]
[info]   (min, avg, max) = (33502.207, 34122.584, 34858.780), stdev = 669.185
[info]   CI (99.9%): [31545.790, 36699.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1941.365 ±(99.9%) 172.154 MB/sec [Average]
[info]   (min, avg, max) = (1903.616, 1941.365, 2002.262), stdev = 44.708
[info]   CI (99.9%): [1769.211, 2113.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89521.804 ±(99.9%) 1886.603 B/op [Average]
[info]   (min, avg, max) = (89241.987, 89521.804, 90390.824), stdev = 489.945
[info]   CI (99.9%): [87635.202, 91408.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.200 ±(99.9%) 1157.487 MB/sec [Average]
[info]   (min, avg, max) = (1336.518, 1874.200, 2013.735), stdev = 300.596
[info]   CI (99.9%): [716.713, 3031.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86367.841 ±(99.9%) 51756.335 B/op [Average]
[info]   (min, avg, max) = (62541.060, 86367.841, 94562.718), stdev = 13440.956
[info]   CI (99.9%): [34611.506, 138124.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 5.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.103), stdev = 1.331
[info]   CI (99.9%): [≈ 0, 5.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39.000 ±(99.9%) 240.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.000, 145.701), stdev = 62.498
[info]   CI (99.9%): [≈ 0, 279.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29.92% complete, ETA 01:33:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53751.716 ops/s
[info] # Warmup Iteration   2: 115130.286 ops/s
[info] # Warmup Iteration   3: 121948.242 ops/s
[info] # Warmup Iteration   4: 123047.790 ops/s
[info] # Warmup Iteration   5: 123289.840 ops/s
[info] Iteration   1: 122998.576 ops/s
[info]                  ·gc.alloc.rate:                   1353.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              17311.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17205.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 123177.941 ops/s
[info]                  ·gc.alloc.rate:               1363.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          17416.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17187.887 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 122807.698 ops/s
[info]                  ·gc.alloc.rate:                   1347.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              17265.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17243.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 123197.760 ops/s
[info]                  ·gc.alloc.rate:                   1364.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              17427.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17172.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 122886.640 ops/s
[info]                  ·gc.alloc.rate:                   1370.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              17552.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17189.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   123013.723 ±(99.9%) 666.013 ops/s [Average]
[info]   (min, avg, max) = (122807.698, 123013.723, 123197.760), stdev = 172.962
[info]   CI (99.9%): [122347.710, 123679.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1359.712 ±(99.9%) 35.957 MB/sec [Average]
[info]   (min, avg, max) = (1347.363, 1359.712, 1370.571), stdev = 9.338
[info]   CI (99.9%): [1323.756, 1395.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17394.675 ±(99.9%) 430.641 B/op [Average]
[info]   (min, avg, max) = (17265.509, 17394.675, 17552.131), stdev = 111.836
[info]   CI (99.9%): [16964.034, 17825.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.466 ±(99.9%) 5.170 MB/sec [Average]
[info]   (min, avg, max) = (1342.254, 1344.466, 1345.657), stdev = 1.343
[info]   CI (99.9%): [1339.296, 1349.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17199.686 ±(99.9%) 104.788 B/op [Average]
[info]   (min, avg, max) = (17172.193, 17199.686, 17243.648), stdev = 27.213
[info]   CI (99.9%): [17094.898, 17304.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 4.944 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 2.956), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8.587 ±(99.9%) 63.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.587, 37.881), stdev = 16.452
[info]   CI (99.9%): [≈ 0, 71.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:33:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24925.508 ops/s
[info] # Warmup Iteration   2: 116651.246 ops/s
[info] # Warmup Iteration   3: 120786.656 ops/s
[info] # Warmup Iteration   4: 128829.402 ops/s
[info] # Warmup Iteration   5: 128771.476 ops/s
[info] Iteration   1: 128621.379 ops/s
[info]                  ·gc.alloc.rate:                   1807.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              22110.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24616.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 129511.452 ops/s
[info]                  ·gc.alloc.rate:                   1829.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              22229.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16312.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 127513.744 ops/s
[info]                  ·gc.alloc.rate:                   1802.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              22245.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24780.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 128997.512 ops/s
[info]                  ·gc.alloc.rate:                   1821.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              22226.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24479.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 129254.962 ops/s
[info]                  ·gc.alloc.rate:                   1826.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              22236.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16286.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   128779.810 ±(99.9%) 3005.284 ops/s [Average]
[info]   (min, avg, max) = (127513.744, 128779.810, 129511.452), stdev = 780.463
[info]   CI (99.9%): [125774.526, 131785.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1817.650 ±(99.9%) 45.112 MB/sec [Average]
[info]   (min, avg, max) = (1802.973, 1817.650, 1829.454), stdev = 11.715
[info]   CI (99.9%): [1772.538, 1862.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22209.584 ±(99.9%) 216.217 B/op [Average]
[info]   (min, avg, max) = (22110.042, 22209.584, 22245.758), stdev = 56.151
[info]   CI (99.9%): [21993.367, 22425.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1741.542 ±(99.9%) 1411.286 MB/sec [Average]
[info]   (min, avg, max) = (1337.652, 1741.542, 2012.559), stdev = 366.506
[info]   CI (99.9%): [330.256, 3152.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21295.232 ±(99.9%) 17566.059 B/op [Average]
[info]   (min, avg, max) = (16286.543, 21295.232, 24780.712), stdev = 4561.850
[info]   CI (99.9%): [3729.173, 38861.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.783, 3.644), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 6.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.521 ±(99.9%) 74.903 B/op [Average]
[info]   (min, avg, max) = (0.253, 9.521, 44.272), stdev = 19.452
[info]   CI (99.9%): [≈ 0, 84.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.32% complete, ETA 01:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58842.200 ops/s
[info] # Warmup Iteration   2: 185166.508 ops/s
[info] # Warmup Iteration   3: 198478.334 ops/s
[info] # Warmup Iteration   4: 204560.942 ops/s
[info] # Warmup Iteration   5: 205033.392 ops/s
[info] Iteration   1: 205489.323 ops/s
[info]                  ·gc.alloc.rate:                   1253.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              9602.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10234.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 206311.188 ops/s
[info]                  ·gc.alloc.rate:               1238.980 MB/sec
[info]                  ·gc.alloc.rate.norm:          9448.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5101.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 205046.845 ops/s
[info]                  ·gc.alloc.rate:                   1244.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              9552.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10269.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 205074.268 ops/s
[info]                  ·gc.alloc.rate:                   1256.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              9643.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10275.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 205863.005 ops/s
[info]                  ·gc.alloc.rate:                   1260.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              9639.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10228.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   205556.926 ±(99.9%) 2073.910 ops/s [Average]
[info]   (min, avg, max) = (205046.845, 205556.926, 206311.188), stdev = 538.588
[info]   CI (99.9%): [203483.016, 207630.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1251.102 ±(99.9%) 34.436 MB/sec [Average]
[info]   (min, avg, max) = (1238.980, 1251.102, 1260.922), stdev = 8.943
[info]   CI (99.9%): [1216.666, 1285.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9577.421 ±(99.9%) 311.355 B/op [Average]
[info]   (min, avg, max) = (9448.415, 9577.421, 9643.708), stdev = 80.858
[info]   CI (99.9%): [9266.066, 9888.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.149 ±(99.9%) 1151.962 MB/sec [Average]
[info]   (min, avg, max) = (668.997, 1204.149, 1339.017), stdev = 299.161
[info]   CI (99.9%): [52.187, 2356.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9221.848 ±(99.9%) 8869.193 B/op [Average]
[info]   (min, avg, max) = (5101.744, 9221.848, 10275.546), stdev = 2303.301
[info]   CI (99.9%): [352.655, 18091.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.913 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.539), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.291 ±(99.9%) 45.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.291, 27.159), stdev = 11.785
[info]   CI (99.9%): [≈ 0, 51.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.52% complete, ETA 01:32:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129086.133 ops/s
[info] # Warmup Iteration   2: 245433.979 ops/s
[info] # Warmup Iteration   3: 257354.140 ops/s
[info] # Warmup Iteration   4: 256489.994 ops/s
[info] # Warmup Iteration   5: 256769.611 ops/s
[info] Iteration   1: 256272.408 ops/s
[info]                  ·gc.alloc.rate:                   1376.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              8450.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8253.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 257573.672 ops/s
[info]                  ·gc.alloc.rate:                   1379.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              8430.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8218.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 257315.320 ops/s
[info]                  ·gc.alloc.rate:                   1379.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              8438.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8230.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 256155.821 ops/s
[info]                  ·gc.alloc.rate:                   1385.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              8511.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8259.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 256892.455 ops/s
[info]                  ·gc.alloc.rate:               1377.100 MB/sec
[info]                  ·gc.alloc.rate.norm:          8436.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8223.437 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   256841.935 ±(99.9%) 2402.566 ops/s [Average]
[info]   (min, avg, max) = (256155.821, 256841.935, 257573.672), stdev = 623.939
[info]   CI (99.9%): [254439.369, 259244.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1379.708 ±(99.9%) 14.005 MB/sec [Average]
[info]   (min, avg, max) = (1376.134, 1379.708, 1385.474), stdev = 3.637
[info]   CI (99.9%): [1365.703, 1393.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8453.484 ±(99.9%) 127.838 B/op [Average]
[info]   (min, avg, max) = (8430.696, 8453.484, 8511.462), stdev = 33.199
[info]   CI (99.9%): [8325.646, 8581.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.393 ±(99.9%) 5.023 MB/sec [Average]
[info]   (min, avg, max) = (1342.382, 1344.393, 1345.831), stdev = 1.304
[info]   CI (99.9%): [1339.370, 1349.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8237.095 ±(99.9%) 71.188 B/op [Average]
[info]   (min, avg, max) = (8218.203, 8237.095, 8259.533), stdev = 18.487
[info]   CI (99.9%): [8165.906, 8308.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.620 ±(99.9%) 4.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 2.519), stdev = 1.086
[info]   CI (99.9%): [≈ 0, 4.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.797 ±(99.9%) 25.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.797, 15.407), stdev = 6.640
[info]   CI (99.9%): [≈ 0, 29.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:32:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4027.212 ops/s
[info] # Warmup Iteration   2: 54581.252 ops/s
[info] # Warmup Iteration   3: 69136.537 ops/s
[info] # Warmup Iteration   4: 66085.738 ops/s
[info] # Warmup Iteration   5: 68067.797 ops/s
[info] Iteration   1: 69990.857 ops/s
[info]                  ·gc.alloc.rate:                   2828.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              63604.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60378.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.936 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 70733.024 ops/s
[info]                  ·gc.alloc.rate:                   2832.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              63019.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59863.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.779 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 69879.216 ops/s
[info]                  ·gc.alloc.rate:                   2826.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              63649.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60731.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 70708.849 ops/s
[info]                  ·gc.alloc.rate:               2858.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          63630.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60136.367 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 70396.045 ops/s
[info]                  ·gc.alloc.rate:               2847.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          63660.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60523.695 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   70341.598 ±(99.9%) 1525.590 ops/s [Average]
[info]   (min, avg, max) = (69879.216, 70341.598, 70733.024), stdev = 396.191
[info]   CI (99.9%): [68816.008, 71867.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2838.937 ±(99.9%) 53.476 MB/sec [Average]
[info]   (min, avg, max) = (2826.206, 2838.937, 2858.902), stdev = 13.888
[info]   CI (99.9%): [2785.460, 2892.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63513.052 ±(99.9%) 1064.825 B/op [Average]
[info]   (min, avg, max) = (63019.830, 63513.052, 63660.252), stdev = 276.532
[info]   CI (99.9%): [62448.227, 64577.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2696.481 ±(99.9%) 33.207 MB/sec [Average]
[info]   (min, avg, max) = (2685.484, 2696.481, 2707.337), stdev = 8.624
[info]   CI (99.9%): [2663.274, 2729.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60326.651 ±(99.9%) 1300.631 B/op [Average]
[info]   (min, avg, max) = (59863.155, 60326.651, 60731.352), stdev = 337.770
[info]   CI (99.9%): [59026.019, 61627.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.837 ±(99.9%) 4.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 2.779), stdev = 1.153
[info]   CI (99.9%): [≈ 0, 5.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30.92% complete, ETA 01:32:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40718.056 ops/s
[info] # Warmup Iteration   2: 171543.388 ops/s
[info] # Warmup Iteration   3: 170329.066 ops/s
[info] # Warmup Iteration   4: 174478.967 ops/s
[info] # Warmup Iteration   5: 170959.342 ops/s
[info] Iteration   1: 169291.572 ops/s
[info]                  ·gc.alloc.rate:                   1323.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              12305.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12490.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 176825.288 ops/s
[info]                  ·gc.alloc.rate:                   1387.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              12352.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11964.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 177581.317 ops/s
[info]                  ·gc.alloc.rate:                   1394.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              12356.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11919.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 177731.564 ops/s
[info]                  ·gc.alloc.rate:                   1396.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              12362.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11897.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 176568.178 ops/s
[info]                  ·gc.alloc.rate:                   1414.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              12607.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11952.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   175599.584 ±(99.9%) 13709.609 ops/s [Average]
[info]   (min, avg, max) = (169291.572, 175599.584, 177731.564), stdev = 3560.342
[info]   CI (99.9%): [161889.975, 189309.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1383.411 ±(99.9%) 133.884 MB/sec [Average]
[info]   (min, avg, max) = (1323.769, 1383.411, 1414.484), stdev = 34.769
[info]   CI (99.9%): [1249.527, 1517.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   12396.875 ±(99.9%) 461.558 B/op [Average]
[info]   (min, avg, max) = (12305.471, 12396.875, 12607.412), stdev = 119.865
[info]   CI (99.9%): [11935.317, 12858.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1343.599 ±(99.9%) 5.913 MB/sec [Average]
[info]   (min, avg, max) = (1340.996, 1343.599, 1345.001), stdev = 1.535
[info]   CI (99.9%): [1337.686, 1349.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12044.806 ±(99.9%) 964.422 B/op [Average]
[info]   (min, avg, max) = (11897.806, 12044.806, 12490.346), stdev = 250.457
[info]   CI (99.9%): [11080.384, 13009.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 4.899 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.729, 2.977), stdev = 1.272
[info]   CI (99.9%): [≈ 0, 5.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6.459 ±(99.9%) 43.404 B/op [Average]
[info]   (min, avg, max) = (0.185, 6.459, 26.381), stdev = 11.272
[info]   CI (99.9%): [≈ 0, 49.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.12% complete, ETA 01:32:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72256.239 ops/s
[info] # Warmup Iteration   2: 159201.564 ops/s
[info] # Warmup Iteration   3: 176096.024 ops/s
[info] # Warmup Iteration   4: 173243.936 ops/s
[info] # Warmup Iteration   5: 174208.867 ops/s
[info] Iteration   1: 175574.210 ops/s
[info]                  ·gc.alloc.rate:               1176.786 MB/sec
[info]                  ·gc.alloc.rate.norm:          10548.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12017.216 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 177876.647 ops/s
[info]                  ·gc.alloc.rate:                   1185.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              10483.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11867.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 178066.946 ops/s
[info]                  ·gc.alloc.rate:               1194.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          10556.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11860.840 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 178519.928 ops/s
[info]                  ·gc.alloc.rate:               1171.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          10327.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5916.842 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 176241.513 ops/s
[info]                  ·gc.alloc.rate:                   1170.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              10454.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11991.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   177255.849 ±(99.9%) 4907.853 ops/s [Average]
[info]   (min, avg, max) = (175574.210, 177255.849, 178519.928), stdev = 1274.554
[info]   CI (99.9%): [172347.995, 182163.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1179.717 ±(99.9%) 38.765 MB/sec [Average]
[info]   (min, avg, max) = (1170.735, 1179.717, 1194.530), stdev = 10.067
[info]   CI (99.9%): [1140.951, 1218.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10473.873 ±(99.9%) 356.771 B/op [Average]
[info]   (min, avg, max) = (10327.145, 10473.873, 10556.400), stdev = 92.652
[info]   CI (99.9%): [10117.103, 10830.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.698 ±(99.9%) 1154.899 MB/sec [Average]
[info]   (min, avg, max) = (671.180, 1207.698, 1342.939), stdev = 299.923
[info]   CI (99.9%): [52.799, 2362.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10730.919 ±(99.9%) 10366.245 B/op [Average]
[info]   (min, avg, max) = (5916.842, 10730.919, 12017.216), stdev = 2692.081
[info]   CI (99.9%): [364.674, 21097.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.372), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.060 ±(99.9%) 51.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.060, 30.114), stdev = 13.447
[info]   CI (99.9%): [≈ 0, 57.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.33% complete, ETA 01:31:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191619.591 ops/s
[info] # Warmup Iteration   2: 671503.060 ops/s
[info] # Warmup Iteration   3: 685005.900 ops/s
[info] # Warmup Iteration   4: 689059.198 ops/s
[info] # Warmup Iteration   5: 709273.166 ops/s
[info] Iteration   1: 670795.079 ops/s
[info]                  ·gc.alloc.rate:                   703.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1650.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1563.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 672410.296 ops/s
[info]                  ·gc.alloc.rate:               703.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1561.439 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 671408.688 ops/s
[info]                  ·gc.alloc.rate:                   697.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              1634.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1563.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 678947.635 ops/s
[info]                  ·gc.alloc.rate:               703.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          1630.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1548.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 671483.927 ops/s
[info]                  ·gc.alloc.rate:                   695.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1630.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1565.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   673009.125 ±(99.9%) 12974.745 ops/s [Average]
[info]   (min, avg, max) = (670795.079, 673009.125, 678947.635), stdev = 3369.500
[info]   CI (99.9%): [660034.380, 685983.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   700.796 ±(99.9%) 15.002 MB/sec [Average]
[info]   (min, avg, max) = (695.788, 700.796, 703.788), stdev = 3.896
[info]   CI (99.9%): [685.794, 715.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1638.662 ±(99.9%) 36.925 B/op [Average]
[info]   (min, avg, max) = (1630.234, 1638.662, 1650.679), stdev = 9.589
[info]   CI (99.9%): [1601.737, 1675.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.459 ±(99.9%) 2.575 MB/sec [Average]
[info]   (min, avg, max) = (666.654, 667.459, 668.160), stdev = 0.669
[info]   CI (99.9%): [664.885, 670.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1560.721 ±(99.9%) 26.533 B/op [Average]
[info]   (min, avg, max) = (1548.729, 1560.721, 1565.948), stdev = 6.890
[info]   CI (99.9%): [1534.188, 1587.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.049), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:31:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427048.987 ops/s
[info] # Warmup Iteration   2: 691656.013 ops/s
[info] # Warmup Iteration   3: 663649.337 ops/s
[info] # Warmup Iteration   4: 704774.944 ops/s
[info] # Warmup Iteration   5: 707720.515 ops/s
[info] Iteration   1: 709998.369 ops/s
[info]                  ·gc.alloc.rate:               567.912 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1486.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 711858.251 ops/s
[info]                  ·gc.alloc.rate:      546.421 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 713127.402 ops/s
[info]                  ·gc.alloc.rate:               561.574 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1479.628 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 710672.682 ops/s
[info]                  ·gc.alloc.rate:                   568.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              1258.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1486.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 714498.451 ops/s
[info]                  ·gc.alloc.rate:               566.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          1246.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1479.050 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   712031.031 ±(99.9%) 7020.662 ops/s [Average]
[info]   (min, avg, max) = (709998.369, 712031.031, 714498.451), stdev = 1823.244
[info]   CI (99.9%): [705010.369, 719051.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   562.030 ±(99.9%) 35.122 MB/sec [Average]
[info]   (min, avg, max) = (546.421, 562.030, 568.236), stdev = 9.121
[info]   CI (99.9%): [526.908, 597.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1242.229 ±(99.9%) 80.167 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1242.229, 1258.790), stdev = 20.819
[info]   CI (99.9%): [1162.062, 1322.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.789 ±(99.9%) 1155.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.789, 671.502), stdev = 300.074
[info]   CI (99.9%): [≈ 0, 1692.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1186.365 ±(99.9%) 2553.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1186.365, 1486.971), stdev = 663.208
[info]   CI (99.9%): [≈ 0, 3740.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.73% complete, ETA 01:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462045.198 ops/s
[info] # Warmup Iteration   2: 724189.090 ops/s
[info] # Warmup Iteration   3: 762980.760 ops/s
[info] # Warmup Iteration   4: 771323.611 ops/s
[info] # Warmup Iteration   5: 771629.784 ops/s
[info] Iteration   1: 771415.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 772777.577 ops/s
[info]                  ·gc.alloc.rate:      0.040 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.082 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 771216.963 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 771784.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 772387.919 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   771916.609 ±(99.9%) 2525.774 ops/s [Average]
[info]   (min, avg, max) = (771216.963, 771916.609, 772777.577), stdev = 655.936
[info]   CI (99.9%): [769390.835, 774442.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.008 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.017 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.017, 0.082), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.93% complete, ETA 01:31:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104161.076 ops/s
[info] # Warmup Iteration   2: 336494.077 ops/s
[info] # Warmup Iteration   3: 357367.792 ops/s
[info] # Warmup Iteration   4: 357837.673 ops/s
[info] # Warmup Iteration   5: 359545.831 ops/s
[info] Iteration   1: 357812.913 ops/s
[info]                  ·gc.alloc.rate:               1026.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          4513.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5863.172 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 358794.717 ops/s
[info]                  ·gc.alloc.rate:               1009.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          4429.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2926.437 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 356578.550 ops/s
[info]                  ·gc.alloc.rate:                   1011.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              4465.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5892.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 358213.650 ops/s
[info]                  ·gc.alloc.rate:                   1008.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              4428.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2934.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 356471.429 ops/s
[info]                  ·gc.alloc.rate:                   1006.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              4441.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5902.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   357574.252 ±(99.9%) 3928.301 ops/s [Average]
[info]   (min, avg, max) = (356471.429, 357574.252, 358794.717), stdev = 1020.167
[info]   CI (99.9%): [353645.951, 361502.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1012.451 ±(99.9%) 30.995 MB/sec [Average]
[info]   (min, avg, max) = (1006.036, 1012.451, 1026.313), stdev = 8.049
[info]   CI (99.9%): [981.456, 1043.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4455.771 ±(99.9%) 137.209 B/op [Average]
[info]   (min, avg, max) = (4428.576, 4455.771, 4513.672), stdev = 35.633
[info]   CI (99.9%): [4318.562, 4592.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.084 ±(99.9%) 1407.945 MB/sec [Average]
[info]   (min, avg, max) = (667.235, 1068.084, 1336.989), stdev = 365.639
[info]   CI (99.9%): [≈ 0, 2476.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4703.678 ±(99.9%) 6234.082 B/op [Average]
[info]   (min, avg, max) = (2926.437, 4703.678, 5902.425), stdev = 1618.971
[info]   CI (99.9%): [≈ 0, 10937.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.092), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32.13% complete, ETA 01:30:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25862.142 ops/s
[info] # Warmup Iteration   2: 42067.674 ops/s
[info] # Warmup Iteration   3: 42626.908 ops/s
[info] # Warmup Iteration   4: 42980.515 ops/s
[info] # Warmup Iteration   5: 41765.535 ops/s
[info] Iteration   1: 43077.015 ops/s
[info]                  ·gc.alloc.rate:               475.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          17372.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18690.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 43117.925 ops/s
[info]                  ·gc.alloc.rate:                   475.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              17353.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24471.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 43294.265 ops/s
[info]                  ·gc.alloc.rate:      457.225 MB/sec
[info]                  ·gc.alloc.rate.norm: 16619.497 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 43115.396 ops/s
[info]                  ·gc.alloc.rate:               468.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          17103.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24473.987 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 43058.742 ops/s
[info]                  ·gc.alloc.rate:               477.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          17463.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24530.158 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   43132.669 ±(99.9%) 361.179 ops/s [Average]
[info]   (min, avg, max) = (43058.742, 43132.669, 43294.265), stdev = 93.797
[info]   CI (99.9%): [42771.490, 43493.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   470.928 ±(99.9%) 32.368 MB/sec [Average]
[info]   (min, avg, max) = (457.225, 470.928, 477.839), stdev = 8.406
[info]   CI (99.9%): [438.560, 503.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   17182.558 ±(99.9%) 1316.441 B/op [Average]
[info]   (min, avg, max) = (16619.497, 17182.558, 17463.758), stdev = 341.876
[info]   CI (99.9%): [15866.117, 18498.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   504.761 ±(99.9%) 1118.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.761, 671.189), stdev = 290.461
[info]   CI (99.9%): [≈ 0, 1623.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18433.307 ±(99.9%) 40841.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18433.307, 24530.158), stdev = 10606.329
[info]   CI (99.9%): [≈ 0, 59274.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 1.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.760), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:30:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2042.250 ops/s
[info] # Warmup Iteration   2: 9276.027 ops/s
[info] # Warmup Iteration   3: 10700.334 ops/s
[info] # Warmup Iteration   4: 10455.619 ops/s
[info] # Warmup Iteration   5: 10857.713 ops/s
[info] Iteration   1: 10852.807 ops/s
[info]                  ·gc.alloc.rate:                   1375.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              199425.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194742.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10783.805 ops/s
[info]                  ·gc.alloc.rate:                   1360.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              198552.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195970.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10777.782 ops/s
[info]                  ·gc.alloc.rate:                   1367.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              199628.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196273.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10686.144 ops/s
[info]                  ·gc.alloc.rate:                   1356.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              199774.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197981.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10623.135 ops/s
[info]                  ·gc.alloc.rate:                   1335.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              197853.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198544.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10744.735 ±(99.9%) 347.186 ops/s [Average]
[info]   (min, avg, max) = (10623.135, 10744.735, 10852.807), stdev = 90.163
[info]   CI (99.9%): [10397.549, 11091.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1359.063 ±(99.9%) 57.294 MB/sec [Average]
[info]   (min, avg, max) = (1335.668, 1359.063, 1375.291), stdev = 14.879
[info]   CI (99.9%): [1301.769, 1416.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   199047.114 ±(99.9%) 3151.185 B/op [Average]
[info]   (min, avg, max) = (197853.822, 199047.114, 199774.999), stdev = 818.353
[info]   CI (99.9%): [195895.929, 202198.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.966 ±(99.9%) 6.201 MB/sec [Average]
[info]   (min, avg, max) = (1340.331, 1342.966, 1344.343), stdev = 1.610
[info]   CI (99.9%): [1336.765, 1349.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   196702.458 ±(99.9%) 5962.708 B/op [Average]
[info]   (min, avg, max) = (194742.443, 196702.458, 198544.599), stdev = 1548.496
[info]   CI (99.9%): [190739.750, 202665.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.787, 3.643), stdev = 1.599
[info]   CI (99.9%): [≈ 0, 6.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   115.900 ±(99.9%) 906.546 B/op [Average]
[info]   (min, avg, max) = (3.019, 115.900, 536.527), stdev = 235.427
[info]   CI (99.9%): [≈ 0, 1022.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.53% complete, ETA 01:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2127.778 ops/s
[info] # Warmup Iteration   2: 9242.051 ops/s
[info] # Warmup Iteration   3: 10658.271 ops/s
[info] # Warmup Iteration   4: 10985.183 ops/s
[info] # Warmup Iteration   5: 10969.842 ops/s
[info] Iteration   1: 10983.535 ops/s
[info]                  ·gc.alloc.rate:                   1278.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              183153.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191656.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10736.268 ops/s
[info]                  ·gc.alloc.rate:               1274.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          186517.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195325.840 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 10811.172 ops/s
[info]                  ·gc.alloc.rate:                   1243.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              181052.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97449.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10776.960 ops/s
[info]                  ·gc.alloc.rate:                   1255.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              183313.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195610.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 520.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 10641.815 ops/s
[info]                  ·gc.alloc.rate:                   1245.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              184246.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197913.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.906 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10789.950 ±(99.9%) 482.945 ops/s [Average]
[info]   (min, avg, max) = (10641.815, 10789.950, 10983.535), stdev = 125.419
[info]   CI (99.9%): [10307.005, 11272.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1259.553 ±(99.9%) 61.561 MB/sec [Average]
[info]   (min, avg, max) = (1243.777, 1259.553, 1278.326), stdev = 15.987
[info]   CI (99.9%): [1197.993, 1321.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   183656.569 ±(99.9%) 7625.716 B/op [Average]
[info]   (min, avg, max) = (181052.087, 183656.569, 186517.406), stdev = 1980.374
[info]   CI (99.9%): [176030.853, 191282.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.922 ±(99.9%) 1150.512 MB/sec [Average]
[info]   (min, avg, max) = (669.451, 1203.922, 1339.656), stdev = 298.784
[info]   CI (99.9%): [53.410, 2354.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   175591.265 ±(99.9%) 168427.159 B/op [Average]
[info]   (min, avg, max) = (97449.499, 175591.265, 197913.302), stdev = 43739.998
[info]   CI (99.9%): [7164.107, 344018.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 5.909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 3.562), stdev = 1.535
[info]   CI (99.9%): [≈ 0, 6.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   128.602 ±(99.9%) 862.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.602, 520.110), stdev = 224.076
[info]   CI (99.9%): [≈ 0, 991.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.73% complete, ETA 01:29:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122818.087 ops/s
[info] # Warmup Iteration   2: 262292.705 ops/s
[info] # Warmup Iteration   3: 271435.710 ops/s
[info] # Warmup Iteration   4: 274417.541 ops/s
[info] # Warmup Iteration   5: 278231.492 ops/s
[info] Iteration   1: 276963.916 ops/s
[info]                  ·gc.alloc.rate:               1841.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          10464.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7619.909 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 277148.226 ops/s
[info]                  ·gc.alloc.rate:                   1867.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              10601.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11435.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 277573.640 ops/s
[info]                  ·gc.alloc.rate:                   1872.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              10615.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11442.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 275804.948 ops/s
[info]                  ·gc.alloc.rate:                   1847.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7687.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 277460.816 ops/s
[info]                  ·gc.alloc.rate:                   1885.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              10697.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11479.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.236 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   276990.309 ±(99.9%) 2717.617 ops/s [Average]
[info]   (min, avg, max) = (275804.948, 276990.309, 277573.640), stdev = 705.756
[info]   CI (99.9%): [274272.693, 279707.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1863.027 ±(99.9%) 69.630 MB/sec [Average]
[info]   (min, avg, max) = (1841.709, 1863.027, 1885.894), stdev = 18.083
[info]   CI (99.9%): [1793.397, 1932.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.774 ±(99.9%) 332.583 B/op [Average]
[info]   (min, avg, max) = (10464.888, 10584.774, 10697.157), stdev = 86.371
[info]   CI (99.9%): [10252.191, 10917.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1748.884 ±(99.9%) 1422.708 MB/sec [Average]
[info]   (min, avg, max) = (1341.023, 1748.884, 2023.784), stdev = 369.473
[info]   CI (99.9%): [326.177, 3171.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9933.034 ±(99.9%) 8012.206 B/op [Average]
[info]   (min, avg, max) = (7619.909, 9933.034, 11479.297), stdev = 2080.745
[info]   CI (99.9%): [1920.827, 17945.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.213 ±(99.9%) 0.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 0.473), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.93% complete, ETA 01:29:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 920.563 ops/s
[info] # Warmup Iteration   2: 6803.050 ops/s
[info] # Warmup Iteration   3: 8524.113 ops/s
[info] # Warmup Iteration   4: 8254.097 ops/s
[info] # Warmup Iteration   5: 8702.379 ops/s
[info] Iteration   1: 8679.227 ops/s
[info]                  ·gc.alloc.rate:                   1558.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              282655.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242517.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8679.369 ops/s
[info]                  ·gc.alloc.rate:               1555.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          281991.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 242759.475 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 8667.225 ops/s
[info]                  ·gc.alloc.rate:                   1554.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              282141.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364643.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 8695.030 ops/s
[info]                  ·gc.alloc.rate:                   1569.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              284121.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241830.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8741.079 ops/s
[info]                  ·gc.alloc.rate:               1563.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          281543.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240226.207 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8692.386 ±(99.9%) 111.496 ops/s [Average]
[info]   (min, avg, max) = (8667.225, 8692.386, 8741.079), stdev = 28.955
[info]   CI (99.9%): [8580.890, 8803.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1560.443 ±(99.9%) 24.768 MB/sec [Average]
[info]   (min, avg, max) = (1554.367, 1560.443, 1569.858), stdev = 6.432
[info]   CI (99.9%): [1535.675, 1585.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282490.624 ±(99.9%) 3829.079 B/op [Average]
[info]   (min, avg, max) = (281543.328, 282490.624, 284121.539), stdev = 994.400
[info]   CI (99.9%): [278661.545, 286319.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.165 ±(99.9%) 1157.493 MB/sec [Average]
[info]   (min, avg, max) = (1334.296, 1471.165, 2008.881), stdev = 300.597
[info]   CI (99.9%): [313.672, 2628.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   266395.504 ±(99.9%) 211519.855 B/op [Average]
[info]   (min, avg, max) = (240226.207, 266395.504, 364643.211), stdev = 54931.035
[info]   CI (99.9%): [54875.649, 477915.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 6.915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 4.102), stdev = 1.796
[info]   CI (99.9%): [≈ 0, 7.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   163.982 ±(99.9%) 1255.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 163.982, 744.555), stdev = 325.980
[info]   CI (99.9%): [≈ 0, 1419.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 10.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33.13% complete, ETA 01:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 927.652 ops/s
[info] # Warmup Iteration   2: 9656.899 ops/s
[info] # Warmup Iteration   3: 10358.367 ops/s
[info] # Warmup Iteration   4: 10263.656 ops/s
[info] # Warmup Iteration   5: 10530.034 ops/s
[info] Iteration   1: 10211.451 ops/s
[info]                  ·gc.alloc.rate:               1223.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          188602.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103533.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 10391.806 ops/s
[info]                  ·gc.alloc.rate:                   1262.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              191080.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203531.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10187.502 ops/s
[info]                  ·gc.alloc.rate:                   1242.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              191924.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207657.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10156.737 ops/s
[info]                  ·gc.alloc.rate:                   1229.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              190444.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208373.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 545.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10224.370 ops/s
[info]                  ·gc.alloc.rate:                   1247.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              192072.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206803.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   10234.373 ±(99.9%) 353.101 ops/s [Average]
[info]   (min, avg, max) = (10156.737, 10234.373, 10391.806), stdev = 91.699
[info]   CI (99.9%): [9881.272, 10587.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1241.113 ±(99.9%) 58.651 MB/sec [Average]
[info]   (min, avg, max) = (1223.859, 1241.113, 1262.117), stdev = 15.232
[info]   CI (99.9%): [1182.461, 1299.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   190824.866 ±(99.9%) 5416.122 B/op [Average]
[info]   (min, avg, max) = (188602.621, 190824.866, 192072.540), stdev = 1406.550
[info]   CI (99.9%): [185408.744, 196240.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1209.812 ±(99.9%) 1158.033 MB/sec [Average]
[info]   (min, avg, max) = (671.837, 1209.812, 1344.947), stdev = 300.738
[info]   CI (99.9%): [51.778, 2367.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   185979.675 ±(99.9%) 177615.336 B/op [Average]
[info]   (min, avg, max) = (103533.277, 185979.675, 208373.518), stdev = 46126.139
[info]   CI (99.9%): [8364.338, 363595.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 5.936 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.518), stdev = 1.542
[info]   CI (99.9%): [≈ 0, 6.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   118.606 ±(99.9%) 919.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.606, 545.058), stdev = 238.894
[info]   CI (99.9%): [≈ 0, 1038.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.33% complete, ETA 01:29:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8764.809 ops/s
[info] # Warmup Iteration   2: 23952.914 ops/s
[info] # Warmup Iteration   3: 24969.451 ops/s
[info] # Warmup Iteration   4: 24893.106 ops/s
[info] # Warmup Iteration   5: 25642.362 ops/s
[info] Iteration   1: 26093.655 ops/s
[info]                  ·gc.alloc.rate:                   1382.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              83390.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80832.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 26123.624 ops/s
[info]                  ·gc.alloc.rate:                   1364.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              82173.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80820.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 26297.807 ops/s
[info]                  ·gc.alloc.rate:               1384.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          82846.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80322.397 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 25680.342 ops/s
[info]                  ·gc.alloc.rate:                   1365.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              83671.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82298.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25255.876 ops/s
[info]                  ·gc.alloc.rate:                   1331.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              82981.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83517.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   25890.261 ±(99.9%) 1620.512 ops/s [Average]
[info]   (min, avg, max) = (25255.876, 25890.261, 26297.807), stdev = 420.842
[info]   CI (99.9%): [24269.749, 27510.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1365.684 ±(99.9%) 81.535 MB/sec [Average]
[info]   (min, avg, max) = (1331.715, 1365.684, 1384.420), stdev = 21.175
[info]   CI (99.9%): [1284.149, 1447.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83012.477 ±(99.9%) 2203.303 B/op [Average]
[info]   (min, avg, max) = (82173.369, 83012.477, 83671.458), stdev = 572.191
[info]   CI (99.9%): [80809.173, 85215.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.517 ±(99.9%) 4.659 MB/sec [Average]
[info]   (min, avg, max) = (1340.210, 1341.517, 1342.958), stdev = 1.210
[info]   CI (99.9%): [1336.859, 1346.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81558.344 ±(99.9%) 5088.638 B/op [Average]
[info]   (min, avg, max) = (80322.397, 81558.344, 83517.474), stdev = 1321.503
[info]   CI (99.9%): [76469.706, 86646.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.685), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   45.922 ±(99.9%) 387.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.922, 225.801), stdev = 100.557
[info]   CI (99.9%): [≈ 0, 433.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.53% complete, ETA 01:28:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8903.779 ops/s
[info] # Warmup Iteration   2: 28405.188 ops/s
[info] # Warmup Iteration   3: 29329.592 ops/s
[info] # Warmup Iteration   4: 29730.700 ops/s
[info] # Warmup Iteration   5: 29337.794 ops/s
[info] Iteration   1: 29292.068 ops/s
[info]                  ·gc.alloc.rate:                   1217.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              65420.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71868.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 28682.671 ops/s
[info]                  ·gc.alloc.rate:               1174.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          64431.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36732.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28599.204 ops/s
[info]                  ·gc.alloc.rate:                   1196.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              65853.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73717.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 29899.564 ops/s
[info]                  ·gc.alloc.rate:                   1249.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              65765.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70565.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 29916.249 ops/s
[info]                  ·gc.alloc.rate:                   1248.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              65671.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70455.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   29277.951 ±(99.9%) 2442.264 ops/s [Average]
[info]   (min, avg, max) = (28599.204, 29277.951, 29916.249), stdev = 634.248
[info]   CI (99.9%): [26835.688, 31720.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1217.346 ±(99.9%) 125.671 MB/sec [Average]
[info]   (min, avg, max) = (1174.409, 1217.346, 1249.479), stdev = 32.636
[info]   CI (99.9%): [1091.676, 1343.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65428.453 ±(99.9%) 2234.510 B/op [Average]
[info]   (min, avg, max) = (64431.515, 65428.453, 65853.345), stdev = 580.295
[info]   CI (99.9%): [63193.943, 67662.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.386 ±(99.9%) 1153.471 MB/sec [Average]
[info]   (min, avg, max) = (669.533, 1205.386, 1340.671), stdev = 299.553
[info]   CI (99.9%): [51.914, 2358.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   64667.881 ±(99.9%) 60346.089 B/op [Average]
[info]   (min, avg, max) = (36732.507, 64667.881, 73717.404), stdev = 15671.688
[info]   CI (99.9%): [4321.792, 125013.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.797 ±(99.9%) 5.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.254), stdev = 1.400
[info]   CI (99.9%): [≈ 0, 6.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.949 ±(99.9%) 283.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.949, 171.288), stdev = 73.664
[info]   CI (99.9%): [≈ 0, 325.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.73% complete, ETA 01:28:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352332.806 ops/s
[info] # Warmup Iteration   2: 601005.132 ops/s
[info] # Warmup Iteration   3: 625970.003 ops/s
[info] # Warmup Iteration   4: 629079.589 ops/s
[info] # Warmup Iteration   5: 628953.194 ops/s
[info] Iteration   1: 631045.242 ops/s
[info]                  ·gc.alloc.rate:               1154.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          2879.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1676.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 622531.008 ops/s
[info]                  ·gc.alloc.rate:                   1175.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              2971.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3399.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 634310.856 ops/s
[info]                  ·gc.alloc.rate:               1185.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          2941.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3337.745 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 628913.573 ops/s
[info]                  ·gc.alloc.rate:                   1189.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              2975.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3368.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 641046.235 ops/s
[info]                  ·gc.alloc.rate:                   1182.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              2902.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1653.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   631569.383 ±(99.9%) 26282.349 ops/s [Average]
[info]   (min, avg, max) = (622531.008, 631569.383, 641046.235), stdev = 6825.443
[info]   CI (99.9%): [605287.033, 657851.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1177.354 ±(99.9%) 52.953 MB/sec [Average]
[info]   (min, avg, max) = (1154.475, 1177.354, 1189.087), stdev = 13.752
[info]   CI (99.9%): [1124.401, 1230.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2933.917 ±(99.9%) 163.105 B/op [Average]
[info]   (min, avg, max) = (2879.134, 2933.917, 2975.545), stdev = 42.358
[info]   CI (99.9%): [2770.811, 3097.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.400 ±(99.9%) 1418.643 MB/sec [Average]
[info]   (min, avg, max) = (672.148, 1076.400, 1346.269), stdev = 368.417
[info]   CI (99.9%): [≈ 0, 2495.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2687.116 ±(99.9%) 3594.635 B/op [Average]
[info]   (min, avg, max) = (1653.374, 2687.116, 3399.328), stdev = 933.515
[info]   CI (99.9%): [≈ 0, 6281.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 4.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.498), stdev = 1.086
[info]   CI (99.9%): [≈ 0, 4.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.434 ±(99.9%) 10.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.434, 6.251), stdev = 2.718
[info]   CI (99.9%): [≈ 0, 11.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.800, 6.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.94% complete, ETA 01:28:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431265.430 ops/s
[info] # Warmup Iteration   2: 745903.282 ops/s
[info] # Warmup Iteration   3: 773312.994 ops/s
[info] # Warmup Iteration   4: 771541.832 ops/s
[info] # Warmup Iteration   5: 767484.454 ops/s
[info] Iteration   1: 769536.845 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 769050.340 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 767829.538 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 773679.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 772083.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   770435.984 ±(99.9%) 9184.748 ops/s [Average]
[info]   (min, avg, max) = (767829.538, 770435.984, 773679.592), stdev = 2385.250
[info]   CI (99.9%): [761251.235, 779620.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.14% complete, ETA 01:28:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9695.458 ops/s
[info] # Warmup Iteration   2: 26541.970 ops/s
[info] # Warmup Iteration   3: 30362.756 ops/s
[info] # Warmup Iteration   4: 30365.414 ops/s
[info] # Warmup Iteration   5: 29450.906 ops/s
[info] Iteration   1: 30269.797 ops/s
[info]                  ·gc.alloc.rate:                   1381.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              71842.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69685.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 30302.336 ops/s
[info]                  ·gc.alloc.rate:               1378.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          71591.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69644.433 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 30391.582 ops/s
[info]                  ·gc.alloc.rate:                   1369.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              70891.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69470.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 30159.667 ops/s
[info]                  ·gc.alloc.rate:                   1371.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              71542.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69939.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30096.545 ops/s
[info]                  ·gc.alloc.rate:                   1381.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              72222.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69946.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   30243.985 ±(99.9%) 450.311 ops/s [Average]
[info]   (min, avg, max) = (30096.545, 30243.985, 30391.582), stdev = 116.944
[info]   CI (99.9%): [29793.674, 30694.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1376.322 ±(99.9%) 22.761 MB/sec [Average]
[info]   (min, avg, max) = (1369.040, 1376.322, 1381.845), stdev = 5.911
[info]   CI (99.9%): [1353.561, 1399.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71618.135 ±(99.9%) 1875.495 B/op [Average]
[info]   (min, avg, max) = (70891.918, 71618.135, 72222.224), stdev = 487.060
[info]   CI (99.9%): [69742.639, 73493.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1340.191 ±(99.9%) 5.854 MB/sec [Average]
[info]   (min, avg, max) = (1337.639, 1340.191, 1341.589), stdev = 1.520
[info]   CI (99.9%): [1334.338, 1346.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69737.457 ±(99.9%) 787.815 B/op [Average]
[info]   (min, avg, max) = (69470.445, 69737.457, 69946.868), stdev = 204.593
[info]   CI (99.9%): [68949.642, 70525.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 5.271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.208), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 6.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   43.219 ±(99.9%) 272.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.219, 166.115), stdev = 70.876
[info]   CI (99.9%): [≈ 0, 316.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34.34% complete, ETA 01:27:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7358.168 ops/s
[info] # Warmup Iteration   2: 13531.427 ops/s
[info] # Warmup Iteration   3: 13857.224 ops/s
[info] # Warmup Iteration   4: 13807.543 ops/s
[info] # Warmup Iteration   5: 13886.620 ops/s
[info] Iteration   1: 13882.485 ops/s
[info]                  ·gc.alloc.rate:               904.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          102532.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76192.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13725.520 ops/s
[info]                  ·gc.alloc.rate:               919.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          105463.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154139.450 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 13818.043 ops/s
[info]                  ·gc.alloc.rate:               896.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          102116.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76551.131 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 13879.506 ops/s
[info]                  ·gc.alloc.rate:               909.777 MB/sec
[info]                  ·gc.alloc.rate.norm:          103154.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76284.791 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13909.081 ops/s
[info]                  ·gc.alloc.rate:                   925.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              104667.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152251.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   13842.927 ±(99.9%) 283.504 ops/s [Average]
[info]   (min, avg, max) = (13725.520, 13842.927, 13909.081), stdev = 73.625
[info]   CI (99.9%): [13559.423, 14126.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   911.171 ±(99.9%) 44.105 MB/sec [Average]
[info]   (min, avg, max) = (896.666, 911.171, 925.085), stdev = 11.454
[info]   CI (99.9%): [867.066, 955.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   103586.833 ±(99.9%) 5496.589 B/op [Average]
[info]   (min, avg, max) = (102116.616, 103586.833, 105463.856), stdev = 1427.447
[info]   CI (99.9%): [98090.244, 109083.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.425 ±(99.9%) 1418.605 MB/sec [Average]
[info]   (min, avg, max) = (672.156, 941.425, 1345.655), stdev = 368.407
[info]   CI (99.9%): [≈ 0, 2360.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   107083.943 ±(99.9%) 162109.781 B/op [Average]
[info]   (min, avg, max) = (76192.797, 107083.943, 154139.450), stdev = 42099.395
[info]   CI (99.9%): [≈ 0, 269193.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.471 ±(99.9%) 4.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.355), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.54% complete, ETA 01:27:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3990.562 ops/s
[info] # Warmup Iteration   2: 26058.964 ops/s
[info] # Warmup Iteration   3: 32393.772 ops/s
[info] # Warmup Iteration   4: 31717.949 ops/s
[info] # Warmup Iteration   5: 31872.473 ops/s
[info] Iteration   1: 32436.271 ops/s
[info]                  ·gc.alloc.rate:                   1711.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              83026.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97740.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 32397.285 ops/s
[info]                  ·gc.alloc.rate:                   1706.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              82884.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65267.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.748 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 32480.655 ops/s
[info]                  ·gc.alloc.rate:                   1750.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              84818.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97508.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31364.198 ops/s
[info]                  ·gc.alloc.rate:               1664.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          83506.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67184.271 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31418.097 ops/s
[info]                  ·gc.alloc.rate:               1655.429 MB/sec
[info]                  ·gc.alloc.rate.norm:          82915.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66999.956 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   32019.301 ±(99.9%) 2212.185 ops/s [Average]
[info]   (min, avg, max) = (31364.198, 32019.301, 32480.655), stdev = 574.497
[info]   CI (99.9%): [29807.116, 34231.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1697.747 ±(99.9%) 148.847 MB/sec [Average]
[info]   (min, avg, max) = (1655.429, 1697.747, 1750.683), stdev = 38.655
[info]   CI (99.9%): [1548.900, 1846.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83430.113 ±(99.9%) 3139.122 B/op [Average]
[info]   (min, avg, max) = (82884.356, 83430.113, 84818.079), stdev = 815.220
[info]   CI (99.9%): [80290.991, 86569.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.627 ±(99.9%) 1420.475 MB/sec [Average]
[info]   (min, avg, max) = (1337.672, 1609.627, 2014.828), stdev = 368.893
[info]   CI (99.9%): [189.152, 3030.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   78939.963 ±(99.9%) 65741.897 B/op [Average]
[info]   (min, avg, max) = (65267.020, 78939.963, 97740.393), stdev = 17072.962
[info]   CI (99.9%): [13198.066, 144681.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 5.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.248), stdev = 1.409
[info]   CI (99.9%): [≈ 0, 6.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   36.996 ±(99.9%) 263.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.996, 157.748), stdev = 68.428
[info]   CI (99.9%): [≈ 0, 300.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.74% complete, ETA 01:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5632.949 ops/s
[info] # Warmup Iteration   2: 28236.574 ops/s
[info] # Warmup Iteration   3: 32661.833 ops/s
[info] # Warmup Iteration   4: 32956.335 ops/s
[info] # Warmup Iteration   5: 32576.131 ops/s
[info] Iteration   1: 33517.635 ops/s
[info]                  ·gc.alloc.rate:                   1476.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              69319.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62834.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 33802.489 ops/s
[info]                  ·gc.alloc.rate:               1483.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          69039.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62353.211 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 33838.210 ops/s
[info]                  ·gc.alloc.rate:                   1508.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              70132.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62321.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 33850.269 ops/s
[info]                  ·gc.alloc.rate:                   1510.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              70230.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93286.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33992.446 ops/s
[info]                  ·gc.alloc.rate:               1515.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          70166.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61807.939 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   33800.210 ±(99.9%) 669.055 ops/s [Average]
[info]   (min, avg, max) = (33517.635, 33800.210, 33992.446), stdev = 173.751
[info]   CI (99.9%): [33131.155, 34469.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1498.777 ±(99.9%) 68.482 MB/sec [Average]
[info]   (min, avg, max) = (1476.388, 1498.777, 1515.686), stdev = 17.784
[info]   CI (99.9%): [1430.295, 1567.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69777.850 ±(99.9%) 2141.485 B/op [Average]
[info]   (min, avg, max) = (69039.551, 69777.850, 70230.816), stdev = 556.137
[info]   CI (99.9%): [67636.365, 71919.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.912 ±(99.9%) 1151.114 MB/sec [Average]
[info]   (min, avg, max) = (1335.123, 1471.912, 2006.663), stdev = 298.941
[info]   CI (99.9%): [320.798, 2623.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68520.758 ±(99.9%) 53328.672 B/op [Average]
[info]   (min, avg, max) = (61807.939, 68520.758, 93286.594), stdev = 13849.287
[info]   CI (99.9%): [15192.086, 121849.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.871 ±(99.9%) 5.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.871, 3.500), stdev = 1.513
[info]   CI (99.9%): [≈ 0, 6.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.491 ±(99.9%) 270.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.491, 162.761), stdev = 70.345
[info]   CI (99.9%): [≈ 0, 311.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.94% complete, ETA 01:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227788.260 ops/s
[info] # Warmup Iteration   2: 441300.081 ops/s
[info] # Warmup Iteration   3: 464904.471 ops/s
[info] # Warmup Iteration   4: 456575.513 ops/s
[info] # Warmup Iteration   5: 466557.378 ops/s
[info] Iteration   1: 467031.406 ops/s
[info]                  ·gc.alloc.rate:               1246.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          4200.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4530.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 451103.204 ops/s
[info]                  ·gc.alloc.rate:                   1212.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              4228.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4692.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 469565.409 ops/s
[info]                  ·gc.alloc.rate:               1247.261 MB/sec
[info]                  ·gc.alloc.rate.norm:          4180.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2254.940 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 467354.183 ops/s
[info]                  ·gc.alloc.rate:                   1257.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              4232.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4533.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 468390.790 ops/s
[info]                  ·gc.alloc.rate:                   1257.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              4223.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4521.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   464688.998 ±(99.9%) 29492.421 ops/s [Average]
[info]   (min, avg, max) = (451103.204, 464688.998, 469565.409), stdev = 7659.088
[info]   CI (99.9%): [435196.577, 494181.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1244.070 ±(99.9%) 71.521 MB/sec [Average]
[info]   (min, avg, max) = (1212.130, 1244.070, 1257.278), stdev = 18.574
[info]   CI (99.9%): [1172.549, 1315.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4213.133 ±(99.9%) 85.813 B/op [Average]
[info]   (min, avg, max) = (4180.148, 4213.133, 4232.880), stdev = 22.285
[info]   CI (99.9%): [4127.320, 4298.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.906 ±(99.9%) 1158.269 MB/sec [Average]
[info]   (min, avg, max) = (672.823, 1210.906, 1346.545), stdev = 300.799
[info]   CI (99.9%): [52.637, 2369.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4106.405 ±(99.9%) 3994.830 B/op [Average]
[info]   (min, avg, max) = (2254.940, 4106.405, 4692.296), stdev = 1037.445
[info]   CI (99.9%): [111.575, 8101.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 4.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 2.623), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 4.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.061 ±(99.9%) 14.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.061, 8.832), stdev = 3.826
[info]   CI (99.9%): [≈ 0, 16.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.14% complete, ETA 01:26:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 715.640 ops/s
[info] # Warmup Iteration   2: 12736.509 ops/s
[info] # Warmup Iteration   3: 18608.346 ops/s
[info] # Warmup Iteration   4: 18664.322 ops/s
[info] # Warmup Iteration   5: 18636.493 ops/s
[info] Iteration   1: 18595.984 ops/s
[info]                  ·gc.alloc.rate:                   1896.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              160426.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169698.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.762 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 18529.058 ops/s
[info]                  ·gc.alloc.rate:                   1891.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              160667.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113604.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 18242.118 ops/s
[info]                  ·gc.alloc.rate:                   1880.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              162212.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172521.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18894.437 ops/s
[info]                  ·gc.alloc.rate:               1924.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          160281.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166347.277 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 18459.674 ops/s
[info]                  ·gc.alloc.rate:               1882.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          160414.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170418.444 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18544.254 ±(99.9%) 911.178 ops/s [Average]
[info]   (min, avg, max) = (18242.118, 18544.254, 18894.437), stdev = 236.630
[info]   CI (99.9%): [17633.076, 19455.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1894.991 ±(99.9%) 68.142 MB/sec [Average]
[info]   (min, avg, max) = (1880.423, 1894.991, 1924.348), stdev = 17.696
[info]   CI (99.9%): [1826.848, 1963.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160800.542 ±(99.9%) 3086.589 B/op [Average]
[info]   (min, avg, max) = (160281.352, 160800.542, 162212.645), stdev = 801.577
[info]   CI (99.9%): [157713.953, 163887.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1868.011 ±(99.9%) 1141.537 MB/sec [Average]
[info]   (min, avg, max) = (1337.729, 1868.011, 2005.811), stdev = 296.454
[info]   CI (99.9%): [726.474, 3009.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   158517.872 ±(99.9%) 97057.116 B/op [Average]
[info]   (min, avg, max) = (113604.220, 158517.872, 172521.383), stdev = 25205.425
[info]   CI (99.9%): [61460.756, 255574.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.309), stdev = 1.896
[info]   CI (99.9%): [≈ 0, 8.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78.576 ±(99.9%) 620.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.576, 365.975), stdev = 161.014
[info]   CI (99.9%): [≈ 0, 698.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.347
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35.34% complete, ETA 01:26:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4888.943 ops/s
[info] # Warmup Iteration   2: 30861.096 ops/s
[info] # Warmup Iteration   3: 34687.279 ops/s
[info] # Warmup Iteration   4: 35009.729 ops/s
[info] # Warmup Iteration   5: 34984.131 ops/s
[info] Iteration   1: 33248.807 ops/s
[info]                  ·gc.alloc.rate:                   1528.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              72369.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63626.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34031.448 ops/s
[info]                  ·gc.alloc.rate:               1562.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          72240.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62228.201 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 34932.147 ops/s
[info]                  ·gc.alloc.rate:                   1616.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              72803.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90847.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 35173.529 ops/s
[info]                  ·gc.alloc.rate:               1627.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          72797.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59999.531 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34966.732 ops/s
[info]                  ·gc.alloc.rate:               1602.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          72109.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60294.694 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   34470.533 ±(99.9%) 3127.636 ops/s [Average]
[info]   (min, avg, max) = (33248.807, 34470.533, 35173.529), stdev = 812.237
[info]   CI (99.9%): [31342.897, 37598.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1587.313 ±(99.9%) 157.230 MB/sec [Average]
[info]   (min, avg, max) = (1528.945, 1587.313, 1627.024), stdev = 40.832
[info]   CI (99.9%): [1430.083, 1744.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   72464.269 ±(99.9%) 1234.822 B/op [Average]
[info]   (min, avg, max) = (72109.822, 72464.269, 72803.759), stdev = 320.679
[info]   CI (99.9%): [71229.447, 73699.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477.470 ±(99.9%) 1160.949 MB/sec [Average]
[info]   (min, avg, max) = (1339.648, 1477.470, 2016.783), stdev = 301.495
[info]   CI (99.9%): [316.521, 2638.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   67399.339 ±(99.9%) 50794.843 B/op [Average]
[info]   (min, avg, max) = (59999.531, 67399.339, 90847.775), stdev = 13191.259
[info]   CI (99.9%): [16604.497, 118194.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.706), stdev = 1.655
[info]   CI (99.9%): [≈ 0, 7.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   33.586 ±(99.9%) 287.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.586, 166.944), stdev = 74.551
[info]   CI (99.9%): [≈ 0, 320.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.54% complete, ETA 01:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21831.007 ops/s
[info] # Warmup Iteration   2: 52057.883 ops/s
[info] # Warmup Iteration   3: 54624.199 ops/s
[info] # Warmup Iteration   4: 54269.846 ops/s
[info] # Warmup Iteration   5: 54723.861 ops/s
[info] Iteration   1: 55928.802 ops/s
[info]                  ·gc.alloc.rate:               1693.901 MB/sec
[info]                  ·gc.alloc.rate.norm:          47666.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37771.155 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 55212.494 ops/s
[info]                  ·gc.alloc.rate:                   1697.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              48374.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57417.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 56023.378 ops/s
[info]                  ·gc.alloc.rate:                   1722.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              48395.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37649.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56475.139 ops/s
[info]                  ·gc.alloc.rate:                   1760.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              49045.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55948.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 56589.851 ops/s
[info]                  ·gc.alloc.rate:               1738.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          48362.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37217.575 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   56045.933 ±(99.9%) 2099.319 ops/s [Average]
[info]   (min, avg, max) = (55212.494, 56045.933, 56589.851), stdev = 545.186
[info]   CI (99.9%): [53946.614, 58145.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1722.675 ±(99.9%) 107.669 MB/sec [Average]
[info]   (min, avg, max) = (1693.901, 1722.675, 1760.108), stdev = 27.961
[info]   CI (99.9%): [1615.006, 1830.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48369.099 ±(99.9%) 1878.347 B/op [Average]
[info]   (min, avg, max) = (47666.864, 48369.099, 49045.769), stdev = 487.801
[info]   CI (99.9%): [46490.752, 50247.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.696 ±(99.9%) 1415.457 MB/sec [Average]
[info]   (min, avg, max) = (1338.238, 1608.696, 2014.896), stdev = 367.590
[info]   CI (99.9%): [193.239, 3024.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   45200.879 ±(99.9%) 40418.639 B/op [Average]
[info]   (min, avg, max) = (37217.575, 45200.879, 57417.724), stdev = 10496.592
[info]   CI (99.9%): [4782.241, 85619.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.623), stdev = 1.613
[info]   CI (99.9%): [≈ 0, 6.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.999 ±(99.9%) 177.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.999, 103.244), stdev = 45.979
[info]   CI (99.9%): [≈ 0, 198.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.74% complete, ETA 01:25:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60577.542 ops/s
[info] # Warmup Iteration   2: 142470.076 ops/s
[info] # Warmup Iteration   3: 150885.886 ops/s
[info] # Warmup Iteration   4: 146216.831 ops/s
[info] # Warmup Iteration   5: 151385.090 ops/s
[info] Iteration   1: 153105.125 ops/s
[info]                  ·gc.alloc.rate:                   1836.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              18873.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13776.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 153636.051 ops/s
[info]                  ·gc.alloc.rate:                   1867.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              19127.486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20586.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 153175.594 ops/s
[info]                  ·gc.alloc.rate:                   1862.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              19135.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20600.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 153665.405 ops/s
[info]                  ·gc.alloc.rate:               1841.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          18861.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13685.562 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 152585.163 ops/s
[info]                  ·gc.alloc.rate:                   1872.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              19308.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20691.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.718 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   153233.468 ±(99.9%) 1709.923 ops/s [Average]
[info]   (min, avg, max) = (152585.163, 153233.468, 153665.405), stdev = 444.062
[info]   CI (99.9%): [151523.544, 154943.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1855.986 ±(99.9%) 61.777 MB/sec [Average]
[info]   (min, avg, max) = (1836.182, 1855.986, 1872.058), stdev = 16.043
[info]   CI (99.9%): [1794.209, 1917.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19061.225 ±(99.9%) 735.500 B/op [Average]
[info]   (min, avg, max) = (18861.202, 19061.225, 19308.078), stdev = 191.007
[info]   CI (99.9%): [18325.725, 19796.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1739.591 ±(99.9%) 1410.551 MB/sec [Average]
[info]   (min, avg, max) = (1336.324, 1739.591, 2009.993), stdev = 366.316
[info]   CI (99.9%): [329.040, 3150.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17868.381 ±(99.9%) 14543.910 B/op [Average]
[info]   (min, avg, max) = (13685.562, 17868.381, 20691.465), stdev = 3777.007
[info]   CI (99.9%): [3324.470, 32412.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.729), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.068 ±(99.9%) 64.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.068, 38.192), stdev = 16.854
[info]   CI (99.9%): [≈ 0, 72.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.94% complete, ETA 01:25:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 655650.654 ops/s
[info] # Warmup Iteration   2: 1049157.670 ops/s
[info] # Warmup Iteration   3: 1191341.233 ops/s
[info] # Warmup Iteration   4: 1187437.206 ops/s
[info] # Warmup Iteration   5: 1190574.395 ops/s
[info] Iteration   1: 1195953.784 ops/s
[info]                  ·gc.alloc.rate:               1298.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          1708.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 884.919 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1171175.541 ops/s
[info]                  ·gc.alloc.rate:                   1297.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              1742.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1808.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1187535.111 ops/s
[info]                  ·gc.alloc.rate:                   1314.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1742.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1784.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1167679.716 ops/s
[info]                  ·gc.alloc.rate:                   1305.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1759.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1815.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1180697.816 ops/s
[info]                  ·gc.alloc.rate:                   1297.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              1729.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1791.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1180608.394 ±(99.9%) 44723.776 ops/s [Average]
[info]   (min, avg, max) = (1167679.716, 1180608.394, 1195953.784), stdev = 11614.623
[info]   CI (99.9%): [1135884.618, 1225332.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1302.510 ±(99.9%) 29.701 MB/sec [Average]
[info]   (min, avg, max) = (1297.080, 1302.510, 1314.895), stdev = 7.713
[info]   CI (99.9%): [1272.809, 1332.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.278 ±(99.9%) 73.014 B/op [Average]
[info]   (min, avg, max) = (1708.222, 1736.278, 1759.108), stdev = 18.962
[info]   CI (99.9%): [1663.263, 1809.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.219 ±(99.9%) 1159.721 MB/sec [Average]
[info]   (min, avg, max) = (672.462, 1211.219, 1347.057), stdev = 301.176
[info]   CI (99.9%): [51.497, 2370.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1616.896 ±(99.9%) 1576.368 B/op [Average]
[info]   (min, avg, max) = (884.919, 1616.896, 1815.433), stdev = 409.378
[info]   CI (99.9%): [40.528, 3193.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 4.961 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 2.935), stdev = 1.288
[info]   CI (99.9%): [≈ 0, 5.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.852 ±(99.9%) 6.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.852, 3.956), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.14% complete, ETA 01:25:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 863955.444 ops/s
[info] # Warmup Iteration   2: 1325227.584 ops/s
[info] # Warmup Iteration   3: 1359003.928 ops/s
[info] # Warmup Iteration   4: 1358848.959 ops/s
[info] # Warmup Iteration   5: 1362454.427 ops/s
[info] Iteration   1: 1364609.187 ops/s
[info]                  ·gc.alloc.rate:      0.074 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.086 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1366804.558 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1363123.945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1363533.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1362100.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1364034.328 ±(99.9%) 6894.418 ops/s [Average]
[info]   (min, avg, max) = (1362100.864, 1364034.328, 1366804.558), stdev = 1790.458
[info]   CI (99.9%): [1357139.910, 1370928.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.015 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.017 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.35% complete, ETA 01:25:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16789.733 ops/s
[info] # Warmup Iteration   2: 58207.208 ops/s
[info] # Warmup Iteration   3: 65978.868 ops/s
[info] # Warmup Iteration   4: 64790.602 ops/s
[info] # Warmup Iteration   5: 65166.307 ops/s
[info] Iteration   1: 65193.586 ops/s
[info]                  ·gc.alloc.rate:                   1651.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              39865.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48578.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 66039.675 ops/s
[info]                  ·gc.alloc.rate:                   1660.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              39568.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31986.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 68196.978 ops/s
[info]                  ·gc.alloc.rate:                   1741.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              40174.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46393.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 65450.118 ops/s
[info]                  ·gc.alloc.rate:                   1644.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              39526.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32132.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 65227.914 ops/s
[info]                  ·gc.alloc.rate:               1653.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          39889.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32241.128 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   66021.654 ±(99.9%) 4861.097 ops/s [Average]
[info]   (min, avg, max) = (65193.586, 66021.654, 68196.978), stdev = 1262.411
[info]   CI (99.9%): [61160.557, 70882.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1670.175 ±(99.9%) 154.275 MB/sec [Average]
[info]   (min, avg, max) = (1644.296, 1670.175, 1741.092), stdev = 40.065
[info]   CI (99.9%): [1515.899, 1824.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39805.052 ±(99.9%) 1019.714 B/op [Average]
[info]   (min, avg, max) = (39526.933, 39805.052, 40174.740), stdev = 264.817
[info]   CI (99.9%): [38785.338, 40824.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.699 ±(99.9%) 1419.477 MB/sec [Average]
[info]   (min, avg, max) = (1336.439, 1607.699, 2012.411), stdev = 368.634
[info]   CI (99.9%): [188.222, 3027.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   38266.423 ±(99.9%) 32546.204 B/op [Average]
[info]   (min, avg, max) = (31986.687, 38266.423, 48578.388), stdev = 8452.146
[info]   CI (99.9%): [5720.220, 70812.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.227), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 6.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.138 ±(99.9%) 127.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.138, 76.891), stdev = 33.095
[info]   CI (99.9%): [≈ 0, 146.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36.55% complete, ETA 01:24:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15013.055 ops/s
[info] # Warmup Iteration   2: 26284.741 ops/s
[info] # Warmup Iteration   3: 27199.393 ops/s
[info] # Warmup Iteration   4: 27783.739 ops/s
[info] # Warmup Iteration   5: 27626.619 ops/s
[info] Iteration   1: 27756.921 ops/s
[info]                  ·gc.alloc.rate:               649.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          36805.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38070.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 27769.339 ops/s
[info]                  ·gc.alloc.rate:               657.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          37286.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38053.161 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 27749.625 ops/s
[info]                  ·gc.alloc.rate:               656.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          37205.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38118.359 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 27783.791 ops/s
[info]                  ·gc.alloc.rate:               653.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          36996.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38073.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27785.220 ops/s
[info]                  ·gc.alloc.rate:               651.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          36900.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38070.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   27768.979 ±(99.9%) 60.983 ops/s [Average]
[info]   (min, avg, max) = (27749.625, 27768.979, 27785.220), stdev = 15.837
[info]   CI (99.9%): [27707.996, 27829.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   653.605 ±(99.9%) 13.441 MB/sec [Average]
[info]   (min, avg, max) = (649.152, 653.605, 657.954), stdev = 3.491
[info]   CI (99.9%): [640.163, 667.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   37038.948 ±(99.9%) 780.598 B/op [Average]
[info]   (min, avg, max) = (36805.442, 37038.948, 37286.171), stdev = 202.719
[info]   CI (99.9%): [36258.350, 37819.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.926 ±(99.9%) 1.585 MB/sec [Average]
[info]   (min, avg, max) = (671.473, 671.926, 672.326), stdev = 0.412
[info]   CI (99.9%): [670.341, 673.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   38077.189 ±(99.9%) 93.817 B/op [Average]
[info]   (min, avg, max) = (38053.161, 38077.189, 38118.359), stdev = 24.364
[info]   CI (99.9%): [37983.373, 38171.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.75% complete, ETA 01:24:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3470.574 ops/s
[info] # Warmup Iteration   2: 14688.673 ops/s
[info] # Warmup Iteration   3: 17068.277 ops/s
[info] # Warmup Iteration   4: 17237.815 ops/s
[info] # Warmup Iteration   5: 17064.887 ops/s
[info] Iteration   1: 17145.100 ops/s
[info]                  ·gc.alloc.rate:                   1493.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              137036.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123200.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 16878.951 ops/s
[info]                  ·gc.alloc.rate:                   1517.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              141354.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187382.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.873 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 17881.727 ops/s
[info]                  ·gc.alloc.rate:                   1558.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              137172.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118306.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 331.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17899.558 ops/s
[info]                  ·gc.alloc.rate:               1560.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          137193.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117835.954 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 17340.974 ops/s
[info]                  ·gc.alloc.rate:               1525.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          138473.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121505.694 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   17429.262 ±(99.9%) 1740.568 ops/s [Average]
[info]   (min, avg, max) = (16878.951, 17429.262, 17899.558), stdev = 452.020
[info]   CI (99.9%): [15688.694, 19169.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1531.087 ±(99.9%) 110.542 MB/sec [Average]
[info]   (min, avg, max) = (1493.024, 1531.087, 1560.514), stdev = 28.708
[info]   CI (99.9%): [1420.545, 1641.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138246.117 ±(99.9%) 7057.071 B/op [Average]
[info]   (min, avg, max) = (137036.512, 138246.117, 141354.237), stdev = 1832.699
[info]   CI (99.9%): [131189.046, 145303.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475.440 ±(99.9%) 1153.545 MB/sec [Average]
[info]   (min, avg, max) = (1338.937, 1475.440, 2011.318), stdev = 299.572
[info]   CI (99.9%): [321.895, 2628.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   133646.180 ±(99.9%) 115990.482 B/op [Average]
[info]   (min, avg, max) = (117835.954, 133646.180, 187382.923), stdev = 30122.360
[info]   CI (99.9%): [17655.698, 249636.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.768), stdev = 1.678
[info]   CI (99.9%): [≈ 0, 7.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.477 ±(99.9%) 568.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.477, 331.601), stdev = 147.658
[info]   CI (99.9%): [≈ 0, 636.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:24:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1611.220 ops/s
[info] # Warmup Iteration   2: 15389.506 ops/s
[info] # Warmup Iteration   3: 16992.258 ops/s
[info] # Warmup Iteration   4: 17076.245 ops/s
[info] # Warmup Iteration   5: 16276.013 ops/s
[info] Iteration   1: 16397.815 ops/s
[info]                  ·gc.alloc.rate:                   1320.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              126757.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128243.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 16382.080 ops/s
[info]                  ·gc.alloc.rate:                   1309.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              125769.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128504.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 16540.431 ops/s
[info]                  ·gc.alloc.rate:               1344.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          127911.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127340.215 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 17114.199 ops/s
[info]                  ·gc.alloc.rate:                   1377.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              126700.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123124.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16561.314 ops/s
[info]                  ·gc.alloc.rate:               1334.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          126805.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126854.591 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   16599.168 ±(99.9%) 1151.674 ops/s [Average]
[info]   (min, avg, max) = (16382.080, 16599.168, 17114.199), stdev = 299.086
[info]   CI (99.9%): [15447.493, 17750.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1337.489 ±(99.9%) 100.837 MB/sec [Average]
[info]   (min, avg, max) = (1309.619, 1337.489, 1377.910), stdev = 26.187
[info]   CI (99.9%): [1236.653, 1438.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   126788.812 ±(99.9%) 2926.103 B/op [Average]
[info]   (min, avg, max) = (125769.043, 126788.812, 127911.680), stdev = 759.900
[info]   CI (99.9%): [123862.710, 129714.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337.405 ±(99.9%) 6.144 MB/sec [Average]
[info]   (min, avg, max) = (1335.173, 1337.405, 1339.016), stdev = 1.596
[info]   CI (99.9%): [1331.261, 1343.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   126813.227 ±(99.9%) 8346.474 B/op [Average]
[info]   (min, avg, max) = (123124.066, 126813.227, 128504.157), stdev = 2167.553
[info]   CI (99.9%): [118466.753, 135159.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 7.479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 4.353), stdev = 1.942
[info]   CI (99.9%): [≈ 0, 8.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80.855 ±(99.9%) 687.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.855, 400.279), stdev = 178.566
[info]   CI (99.9%): [≈ 0, 768.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.15% complete, ETA 01:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244251.078 ops/s
[info] # Warmup Iteration   2: 664151.903 ops/s
[info] # Warmup Iteration   3: 654437.101 ops/s
[info] # Warmup Iteration   4: 656077.990 ops/s
[info] # Warmup Iteration   5: 666035.875 ops/s
[info] Iteration   1: 650003.313 ops/s
[info]                  ·gc.alloc.rate:               1742.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          4216.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4886.284 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 670079.577 ops/s
[info]                  ·gc.alloc.rate:                   1807.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              4244.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3163.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 684974.810 ops/s
[info]                  ·gc.alloc.rate:                   1849.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4631.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 665990.748 ops/s
[info]                  ·gc.alloc.rate:                   1786.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              4221.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4760.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 670899.169 ops/s
[info]                  ·gc.alloc.rate:               1799.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          4221.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3151.969 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   668389.523 ±(99.9%) 48249.705 ops/s [Average]
[info]   (min, avg, max) = (650003.313, 668389.523, 684974.810), stdev = 12530.295
[info]   CI (99.9%): [620139.818, 716639.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1796.985 ±(99.9%) 148.818 MB/sec [Average]
[info]   (min, avg, max) = (1742.150, 1796.985, 1849.359), stdev = 38.648
[info]   CI (99.9%): [1648.167, 1945.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4230.639 ±(99.9%) 57.600 B/op [Average]
[info]   (min, avg, max) = (4216.725, 4230.639, 4248.945), stdev = 14.959
[info]   CI (99.9%): [4173.039, 4288.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.972 ±(99.9%) 1415.164 MB/sec [Average]
[info]   (min, avg, max) = (1343.673, 1747.972, 2018.780), stdev = 367.514
[info]   CI (99.9%): [332.808, 3163.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4118.725 ±(99.9%) 3395.575 B/op [Average]
[info]   (min, avg, max) = (3151.969, 4118.725, 4886.284), stdev = 881.820
[info]   CI (99.9%): [723.150, 7514.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.550 ±(99.9%) 4.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.550, 2.665), stdev = 1.183
[info]   CI (99.9%): [≈ 0, 5.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.291 ±(99.9%) 10.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.291, 6.258), stdev = 2.778
[info]   CI (99.9%): [≈ 0, 11.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.35% complete, ETA 01:23:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 693.683 ops/s
[info] # Warmup Iteration   2: 10270.662 ops/s
[info] # Warmup Iteration   3: 12012.375 ops/s
[info] # Warmup Iteration   4: 12085.593 ops/s
[info] # Warmup Iteration   5: 12012.458 ops/s
[info] Iteration   1: 12073.212 ops/s
[info]                  ·gc.alloc.rate:               1673.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          218170.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174169.368 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 11769.182 ops/s
[info]                  ·gc.alloc.rate:                   1657.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              221569.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268334.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 560.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 11865.449 ops/s
[info]                  ·gc.alloc.rate:                   1657.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              219772.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177280.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11835.660 ops/s
[info]                  ·gc.alloc.rate:                   1686.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              224291.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265886.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12176.366 ops/s
[info]                  ·gc.alloc.rate:               1710.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          221037.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172194.105 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11943.974 ±(99.9%) 664.610 ops/s [Average]
[info]   (min, avg, max) = (11769.182, 11943.974, 12176.366), stdev = 172.597
[info]   CI (99.9%): [11279.364, 12608.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1677.032 ±(99.9%) 86.270 MB/sec [Average]
[info]   (min, avg, max) = (1657.092, 1677.032, 1710.251), stdev = 22.404
[info]   CI (99.9%): [1590.762, 1763.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   220968.602 ±(99.9%) 8751.859 B/op [Average]
[info]   (min, avg, max) = (218170.954, 220968.602, 224291.281), stdev = 2272.830
[info]   CI (99.9%): [212216.743, 229720.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1602.373 ±(99.9%) 1409.442 MB/sec [Average]
[info]   (min, avg, max) = (1332.328, 1602.373, 2006.839), stdev = 366.028
[info]   CI (99.9%): [192.931, 3011.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   211572.980 ±(99.9%) 195374.933 B/op [Average]
[info]   (min, avg, max) = (172194.105, 211572.980, 268334.625), stdev = 50738.250
[info]   CI (99.9%): [16198.046, 406947.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.926 ±(99.9%) 7.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.926, 4.191), stdev = 1.832
[info]   CI (99.9%): [≈ 0, 7.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   123.679 ±(99.9%) 943.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.679, 560.391), stdev = 244.998
[info]   CI (99.9%): [≈ 0, 1067.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37.55% complete, ETA 01:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3305.471 ops/s
[info] # Warmup Iteration   2: 15027.503 ops/s
[info] # Warmup Iteration   3: 16929.689 ops/s
[info] # Warmup Iteration   4: 17036.747 ops/s
[info] # Warmup Iteration   5: 17318.467 ops/s
[info] Iteration   1: 17697.888 ops/s
[info]                  ·gc.alloc.rate:                   1501.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              133493.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119506.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17131.814 ops/s
[info]                  ·gc.alloc.rate:                   1452.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              133453.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123484.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17819.952 ops/s
[info]                  ·gc.alloc.rate:                   1528.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              134960.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118747.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17882.195 ops/s
[info]                  ·gc.alloc.rate:                   1534.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              135058.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177254.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17916.602 ops/s
[info]                  ·gc.alloc.rate:               1540.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          135282.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117607.151 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   17689.690 ±(99.9%) 1243.001 ops/s [Average]
[info]   (min, avg, max) = (17131.814, 17689.690, 17916.602), stdev = 322.803
[info]   CI (99.9%): [16446.689, 18932.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1511.550 ±(99.9%) 139.012 MB/sec [Average]
[info]   (min, avg, max) = (1452.831, 1511.550, 1540.638), stdev = 36.101
[info]   CI (99.9%): [1372.538, 1650.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   134449.627 ±(99.9%) 3461.777 B/op [Average]
[info]   (min, avg, max) = (133453.311, 134449.627, 135282.910), stdev = 899.013
[info]   CI (99.9%): [130987.850, 137911.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1477.303 ±(99.9%) 1155.721 MB/sec [Average]
[info]   (min, avg, max) = (1339.342, 1477.303, 2014.191), stdev = 300.137
[info]   CI (99.9%): [321.582, 2633.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   131319.857 ±(99.9%) 99243.434 B/op [Average]
[info]   (min, avg, max) = (117607.151, 131319.857, 177254.251), stdev = 25773.205
[info]   CI (99.9%): [32076.423, 230563.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 4.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 2.935), stdev = 1.260
[info]   CI (99.9%): [≈ 0, 5.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   68.359 ±(99.9%) 428.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.359, 259.217), stdev = 111.249
[info]   CI (99.9%): [≈ 0, 496.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.75% complete, ETA 01:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16146.873 ops/s
[info] # Warmup Iteration   2: 42599.587 ops/s
[info] # Warmup Iteration   3: 45019.037 ops/s
[info] # Warmup Iteration   4: 44642.171 ops/s
[info] # Warmup Iteration   5: 44930.294 ops/s
[info] Iteration   1: 44935.651 ops/s
[info]                  ·gc.alloc.rate:                   1758.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              61598.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70535.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.729 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 45074.166 ops/s
[info]                  ·gc.alloc.rate:                   1762.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              61524.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46933.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 43497.763 ops/s
[info]                  ·gc.alloc.rate:                   1715.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              62083.799 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72712.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 44045.454 ops/s
[info]                  ·gc.alloc.rate:               1709.090 MB/sec
[info]                  ·gc.alloc.rate.norm:          61063.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47841.057 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 43493.976 ops/s
[info]                  ·gc.alloc.rate:               1729.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          62571.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72677.164 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44209.402 ±(99.9%) 2932.815 ops/s [Average]
[info]   (min, avg, max) = (43493.976, 44209.402, 45074.166), stdev = 761.643
[info]   CI (99.9%): [41276.587, 47142.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1735.092 ±(99.9%) 93.893 MB/sec [Average]
[info]   (min, avg, max) = (1709.090, 1735.092, 1762.190), stdev = 24.384
[info]   CI (99.9%): [1641.199, 1828.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61768.294 ±(99.9%) 2220.214 B/op [Average]
[info]   (min, avg, max) = (61063.494, 61768.294, 62571.500), stdev = 576.583
[info]   CI (99.9%): [59548.080, 63988.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1743.143 ±(99.9%) 1411.396 MB/sec [Average]
[info]   (min, avg, max) = (1339.010, 1743.143, 2014.123), stdev = 366.535
[info]   CI (99.9%): [331.747, 3154.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   62139.814 ±(99.9%) 51983.569 B/op [Average]
[info]   (min, avg, max) = (46933.114, 62139.814, 72712.002), stdev = 13499.968
[info]   CI (99.9%): [10156.244, 114123.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 5.833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.435), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 6.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25.486 ±(99.9%) 203.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.486, 119.920), stdev = 52.867
[info]   CI (99.9%): [≈ 0, 229.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.95% complete, ETA 01:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9881.323 ops/s
[info] # Warmup Iteration   2: 55485.944 ops/s
[info] # Warmup Iteration   3: 56717.958 ops/s
[info] # Warmup Iteration   4: 55058.067 ops/s
[info] # Warmup Iteration   5: 56964.235 ops/s
[info] Iteration   1: 57222.754 ops/s
[info]                  ·gc.alloc.rate:               1745.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          48017.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54924.014 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 56269.635 ops/s
[info]                  ·gc.alloc.rate:                   1729.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              48347.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55856.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.581 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 57511.666 ops/s
[info]                  ·gc.alloc.rate:               1752.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          47957.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36586.499 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 57288.743 ops/s
[info]                  ·gc.alloc.rate:               1759.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          48328.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55220.476 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 56952.374 ops/s
[info]                  ·gc.alloc.rate:               1736.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          47977.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37092.159 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   57049.034 ±(99.9%) 1845.172 ops/s [Average]
[info]   (min, avg, max) = (56269.635, 57049.034, 57511.666), stdev = 479.185
[info]   CI (99.9%): [55203.862, 58894.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1744.843 ±(99.9%) 45.708 MB/sec [Average]
[info]   (min, avg, max) = (1729.721, 1744.843, 1759.254), stdev = 11.870
[info]   CI (99.9%): [1699.135, 1790.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48125.580 ±(99.9%) 751.469 B/op [Average]
[info]   (min, avg, max) = (47957.825, 48125.580, 48347.198), stdev = 195.154
[info]   CI (99.9%): [47374.111, 48877.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.059 ±(99.9%) 1396.348 MB/sec [Average]
[info]   (min, avg, max) = (1337.036, 1737.059, 2010.127), stdev = 362.627
[info]   CI (99.9%): [340.712, 3133.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47935.877 ±(99.9%) 39033.553 B/op [Average]
[info]   (min, avg, max) = (36586.499, 47935.877, 55856.236), stdev = 10136.890
[info]   CI (99.9%): [8902.324, 86969.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.116 ±(99.9%) 1.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.581), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.15% complete, ETA 01:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 791816.915 ops/s
[info] # Warmup Iteration   2: 1259634.307 ops/s
[info] # Warmup Iteration   3: 1322075.743 ops/s
[info] # Warmup Iteration   4: 1261029.960 ops/s
[info] # Warmup Iteration   5: 1327714.160 ops/s
[info] Iteration   1: 1337686.487 ops/s
[info]                  ·gc.alloc.rate:                   1270.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              1494.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1581.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1357058.707 ops/s
[info]                  ·gc.alloc.rate:               1275.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          1479.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1560.617 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 1359424.925 ops/s
[info]                  ·gc.alloc.rate:                   1277.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              1478.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1558.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1322526.967 ops/s
[info]                  ·gc.alloc.rate:                   1230.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              1463.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.923 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1358135.149 ops/s
[info]                  ·gc.alloc.rate:                   1275.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1478.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1559.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1346966.447 ±(99.9%) 62837.894 ops/s [Average]
[info]   (min, avg, max) = (1322526.967, 1346966.447, 1359424.925), stdev = 16318.802
[info]   CI (99.9%): [1284128.553, 1409804.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1266.010 ±(99.9%) 77.324 MB/sec [Average]
[info]   (min, avg, max) = (1230.356, 1266.010, 1277.283), stdev = 20.081
[info]   CI (99.9%): [1188.686, 1343.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1478.996 ±(99.9%) 42.050 B/op [Average]
[info]   (min, avg, max) = (1463.975, 1478.996, 1494.809), stdev = 10.920
[info]   CI (99.9%): [1436.946, 1521.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.272 ±(99.9%) 1157.449 MB/sec [Average]
[info]   (min, avg, max) = (673.569, 1211.272, 1346.492), stdev = 300.586
[info]   CI (99.9%): [53.823, 2368.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1412.356 ±(99.9%) 1315.504 B/op [Average]
[info]   (min, avg, max) = (801.466, 1412.356, 1581.647), stdev = 341.632
[info]   CI (99.9%): [96.851, 2727.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.575 ±(99.9%) 4.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.457), stdev = 1.061
[info]   CI (99.9%): [≈ 0, 4.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.681 ±(99.9%) 4.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 2.923), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 941780.367 ops/s
[info] # Warmup Iteration   2: 1527225.765 ops/s
[info] # Warmup Iteration   3: 1561133.100 ops/s
[info] # Warmup Iteration   4: 1551094.272 ops/s
[info] # Warmup Iteration   5: 1562802.014 ops/s
[info] Iteration   1: 1561647.088 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1564122.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1561411.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1561092.820 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1561070.309 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1561868.957 ±(99.9%) 4938.143 ops/s [Average]
[info]   (min, avg, max) = (1561070.309, 1561868.957, 1564122.822), stdev = 1282.420
[info]   CI (99.9%): [1556930.815, 1566807.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.55% complete, ETA 01:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1566.360 ops/s
[info] # Warmup Iteration   2: 3507.768 ops/s
[info] # Warmup Iteration   3: 3393.458 ops/s
[info] # Warmup Iteration   4: 3499.197 ops/s
[info] # Warmup Iteration   5: 3500.304 ops/s
[info] Iteration   1: 3495.519 ops/s
[info]                  ·gc.alloc.rate:               482.367 MB/sec
[info]                  ·gc.alloc.rate.norm:          217089.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230284.921 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3528.725 ops/s
[info]                  ·gc.alloc.rate:               489.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          218053.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 298086.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3632.165 ops/s
[info]                  ·gc.alloc.rate:               490.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          212448.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289635.567 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 3633.659 ops/s
[info]                  ·gc.alloc.rate:      490.544 MB/sec
[info]                  ·gc.alloc.rate.norm: 212448.119 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3616.722 ops/s
[info]                  ·gc.alloc.rate:                   491.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              213680.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290981.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3581.358 ±(99.9%) 248.851 ops/s [Average]
[info]   (min, avg, max) = (3495.519, 3581.358, 3633.659), stdev = 64.626
[info]   CI (99.9%): [3332.507, 3830.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   488.674 ±(99.9%) 13.884 MB/sec [Average]
[info]   (min, avg, max) = (482.367, 488.674, 491.084), stdev = 3.606
[info]   CI (99.9%): [474.790, 502.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   214743.966 ±(99.9%) 10211.141 B/op [Average]
[info]   (min, avg, max) = (212448.119, 214743.966, 218053.988), stdev = 2651.801
[info]   CI (99.9%): [204532.826, 224955.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   503.488 ±(99.9%) 1114.923 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.488, 668.737), stdev = 289.542
[info]   CI (99.9%): [≈ 0, 1618.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   221797.693 ±(99.9%) 488874.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 221797.693, 298086.690), stdev = 126959.253
[info]   CI (99.9%): [≈ 0, 710672.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.811 ±(99.9%) 15.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.811, 9.057), stdev = 4.050
[info]   CI (99.9%): [≈ 0, 17.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38.76% complete, ETA 01:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12378.482 ops/s
[info] # Warmup Iteration   2: 28442.305 ops/s
[info] # Warmup Iteration   3: 30076.537 ops/s
[info] # Warmup Iteration   4: 30335.985 ops/s
[info] # Warmup Iteration   5: 30338.015 ops/s
[info] Iteration   1: 30336.571 ops/s
[info]                  ·gc.alloc.rate:                   700.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              36343.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34800.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 30441.703 ops/s
[info]                  ·gc.alloc.rate:               699.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          36171.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34644.885 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 30420.437 ops/s
[info]                  ·gc.alloc.rate:                   707.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              36597.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34668.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30413.004 ops/s
[info]                  ·gc.alloc.rate:                   702.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              36338.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34607.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30396.798 ops/s
[info]                  ·gc.alloc.rate:               702.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          36391.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34627.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   30401.703 ±(99.9%) 153.361 ops/s [Average]
[info]   (min, avg, max) = (30336.571, 30401.703, 30441.703), stdev = 39.827
[info]   CI (99.9%): [30248.341, 30555.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   702.630 ±(99.9%) 11.373 MB/sec [Average]
[info]   (min, avg, max) = (699.915, 702.630, 707.444), stdev = 2.954
[info]   CI (99.9%): [691.257, 714.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   36368.687 ±(99.9%) 587.621 B/op [Average]
[info]   (min, avg, max) = (36171.997, 36368.687, 36597.595), stdev = 152.603
[info]   CI (99.9%): [35781.066, 36956.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   669.808 ±(99.9%) 3.560 MB/sec [Average]
[info]   (min, avg, max) = (668.825, 669.808, 670.848), stdev = 0.925
[info]   CI (99.9%): [666.248, 673.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   34669.835 ±(99.9%) 294.226 B/op [Average]
[info]   (min, avg, max) = (34607.834, 34669.835, 34800.476), stdev = 76.410
[info]   CI (99.9%): [34375.609, 34964.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 5.718 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.331), stdev = 1.485
[info]   CI (99.9%): [≈ 0, 6.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   34.989 ±(99.9%) 296.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.989, 172.793), stdev = 77.036
[info]   CI (99.9%): [≈ 0, 331.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.96% complete, ETA 01:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30277.743 ops/s
[info] # Warmup Iteration   2: 106721.190 ops/s
[info] # Warmup Iteration   3: 115859.617 ops/s
[info] # Warmup Iteration   4: 121372.180 ops/s
[info] # Warmup Iteration   5: 125726.122 ops/s
[info] Iteration   1: 125879.858 ops/s
[info]                  ·gc.alloc.rate:               1971.229 MB/sec
[info]                  ·gc.alloc.rate.norm:          24643.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16697.866 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 125483.162 ops/s
[info]                  ·gc.alloc.rate:                   2005.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              25152.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25164.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 123908.292 ops/s
[info]                  ·gc.alloc.rate:               1967.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          24986.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25546.857 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 125684.740 ops/s
[info]                  ·gc.alloc.rate:               1995.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          24989.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25244.732 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 125764.869 ops/s
[info]                  ·gc.alloc.rate:               2010.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          25160.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25294.359 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   125344.184 ±(99.9%) 3140.696 ops/s [Average]
[info]   (min, avg, max) = (123908.292, 125344.184, 125879.858), stdev = 815.629
[info]   CI (99.9%): [122203.488, 128484.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1990.116 ±(99.9%) 76.185 MB/sec [Average]
[info]   (min, avg, max) = (1967.384, 1990.116, 2010.753), stdev = 19.785
[info]   CI (99.9%): [1913.931, 2066.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24986.591 ±(99.9%) 806.309 B/op [Average]
[info]   (min, avg, max) = (24643.735, 24986.591, 25160.811), stdev = 209.396
[info]   CI (99.9%): [24180.282, 25792.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.223 ±(99.9%) 1168.135 MB/sec [Average]
[info]   (min, avg, max) = (1335.646, 1878.223, 2021.426), stdev = 303.361
[info]   CI (99.9%): [710.088, 3046.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23589.607 ±(99.9%) 14845.212 B/op [Average]
[info]   (min, avg, max) = (16697.866, 23589.607, 25546.857), stdev = 3855.254
[info]   CI (99.9%): [8744.395, 38434.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.261), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.16% complete, ETA 01:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.643 ops/s
[info] # Warmup Iteration   2: 364935.121 ops/s
[info] # Warmup Iteration   3: 377297.843 ops/s
[info] # Warmup Iteration   4: 381408.521 ops/s
[info] # Warmup Iteration   5: 381663.609 ops/s
[info] Iteration   1: 381372.530 ops/s
[info]                  ·gc.alloc.rate:               787.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          3250.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2749.123 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 379161.970 ops/s
[info]                  ·gc.alloc.rate:                   791.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              3283.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5533.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 381939.121 ops/s
[info]                  ·gc.alloc.rate:               785.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          3236.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2747.795 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 374893.730 ops/s
[info]                  ·gc.alloc.rate:               771.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          3237.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2802.019 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 381359.804 ops/s
[info]                  ·gc.alloc.rate:               788.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          3255.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2754.506 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   379745.431 ±(99.9%) 11217.435 ops/s [Average]
[info]   (min, avg, max) = (374893.730, 379745.431, 381939.121), stdev = 2913.132
[info]   CI (99.9%): [368527.996, 390962.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   784.943 ±(99.9%) 30.459 MB/sec [Average]
[info]   (min, avg, max) = (771.248, 784.943, 791.089), stdev = 7.910
[info]   CI (99.9%): [754.484, 815.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3252.807 ±(99.9%) 72.947 B/op [Average]
[info]   (min, avg, max) = (3236.712, 3252.807, 3283.287), stdev = 18.944
[info]   CI (99.9%): [3179.859, 3325.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.267 ±(99.9%) 1147.095 MB/sec [Average]
[info]   (min, avg, max) = (666.257, 800.267, 1333.160), stdev = 297.897
[info]   CI (99.9%): [≈ 0, 1947.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3317.302 ±(99.9%) 4770.389 B/op [Average]
[info]   (min, avg, max) = (2747.795, 3317.302, 5533.069), stdev = 1238.855
[info]   CI (99.9%): [≈ 0, 8087.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.046 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.229), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.36% complete, ETA 01:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97827.695 ops/s
[info] # Warmup Iteration   2: 251635.804 ops/s
[info] # Warmup Iteration   3: 252161.877 ops/s
[info] # Warmup Iteration   4: 256955.411 ops/s
[info] # Warmup Iteration   5: 256389.354 ops/s
[info] Iteration   1: 258043.968 ops/s
[info]                  ·gc.alloc.rate:                   580.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              3538.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4060.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 257951.245 ops/s
[info]                  ·gc.alloc.rate:               585.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          3572.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4062.137 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 257860.013 ops/s
[info]                  ·gc.alloc.rate:      566.336 MB/sec
[info]                  ·gc.alloc.rate.norm: 3456.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 258113.386 ops/s
[info]                  ·gc.alloc.rate:               580.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          3536.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4063.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 247023.293 ops/s
[info]                  ·gc.alloc.rate:               563.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          3591.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4246.080 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   255798.381 ±(99.9%) 18892.622 ops/s [Average]
[info]   (min, avg, max) = (247023.293, 255798.381, 258113.386), stdev = 4906.354
[info]   CI (99.9%): [236905.760, 274691.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   575.211 ±(99.9%) 36.957 MB/sec [Average]
[info]   (min, avg, max) = (563.762, 575.211, 585.719), stdev = 9.598
[info]   CI (99.9%): [538.254, 612.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3539.065 ±(99.9%) 200.063 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3539.065, 3591.645), stdev = 51.956
[info]   CI (99.9%): [3339.002, 3739.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.957 ±(99.9%) 1147.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.957, 666.486), stdev = 297.932
[info]   CI (99.9%): [≈ 0, 1680.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3286.533 ±(99.9%) 7081.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3286.533, 4246.080), stdev = 1838.953
[info]   CI (99.9%): [≈ 0, 10367.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.254), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.56% complete, ETA 01:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294707.298 ops/s
[info] # Warmup Iteration   2: 491885.869 ops/s
[info] # Warmup Iteration   3: 510542.552 ops/s
[info] # Warmup Iteration   4: 517094.610 ops/s
[info] # Warmup Iteration   5: 463499.186 ops/s
[info] Iteration   1: 500696.584 ops/s
[info]                  ·gc.alloc.rate:               655.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          2061.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2108.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 500757.096 ops/s
[info]                  ·gc.alloc.rate:                   655.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              2060.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2108.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 498283.842 ops/s
[info]                  ·gc.alloc.rate:               651.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          2056.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2120.813 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 494166.404 ops/s
[info]                  ·gc.alloc.rate:                   654.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              2085.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2138.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 509337.254 ops/s
[info]                  ·gc.alloc.rate:               670.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          2071.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2075.779 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   500648.236 ±(99.9%) 21363.071 ops/s [Average]
[info]   (min, avg, max) = (494166.404, 500648.236, 509337.254), stdev = 5547.922
[info]   CI (99.9%): [479285.165, 522011.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   657.595 ±(99.9%) 28.711 MB/sec [Average]
[info]   (min, avg, max) = (651.102, 657.595, 670.478), stdev = 7.456
[info]   CI (99.9%): [628.884, 686.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2066.940 ±(99.9%) 45.216 B/op [Average]
[info]   (min, avg, max) = (2056.136, 2066.940, 2085.335), stdev = 11.742
[info]   CI (99.9%): [2021.724, 2112.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.347 ±(99.9%) 1.604 MB/sec [Average]
[info]   (min, avg, max) = (670.850, 671.347, 671.840), stdev = 0.417
[info]   CI (99.9%): [669.743, 672.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2110.343 ±(99.9%) 88.267 B/op [Average]
[info]   (min, avg, max) = (2075.779, 2110.343, 2138.440), stdev = 22.923
[info]   CI (99.9%): [2022.075, 2198.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.066), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5194.926 ops/s
[info] # Warmup Iteration   2: 64148.021 ops/s
[info] # Warmup Iteration   3: 68900.849 ops/s
[info] # Warmup Iteration   4: 71673.035 ops/s
[info] # Warmup Iteration   5: 72021.067 ops/s
[info] Iteration   1: 72947.139 ops/s
[info]                  ·gc.alloc.rate:                   3046.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              65714.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57542.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 72813.836 ops/s
[info]                  ·gc.alloc.rate:                   3055.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              66036.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57691.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 72508.677 ops/s
[info]                  ·gc.alloc.rate:               3083.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          66926.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3347.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72660.343 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 72922.350 ops/s
[info]                  ·gc.alloc.rate:               3075.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          66370.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58007.433 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 72546.056 ops/s
[info]                  ·gc.alloc.rate:               3086.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          66953.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73143.526 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   72747.612 ±(99.9%) 799.518 ops/s [Average]
[info]   (min, avg, max) = (72508.677, 72747.612, 72947.139), stdev = 207.632
[info]   CI (99.9%): [71948.094, 73547.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3069.492 ±(99.9%) 68.525 MB/sec [Average]
[info]   (min, avg, max) = (3046.236, 3069.492, 3086.578), stdev = 17.796
[info]   CI (99.9%): [3000.967, 3138.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66400.370 ±(99.9%) 2096.619 B/op [Average]
[info]   (min, avg, max) = (65714.936, 66400.370, 66953.425), stdev = 544.485
[info]   CI (99.9%): [64303.750, 68496.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.906 ±(99.9%) 1445.445 MB/sec [Average]
[info]   (min, avg, max) = (2667.379, 2948.906, 3371.944), stdev = 375.377
[info]   CI (99.9%): [1503.462, 4394.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63809.053 ±(99.9%) 31976.072 B/op [Average]
[info]   (min, avg, max) = (57542.052, 63809.053, 73143.526), stdev = 8304.084
[info]   CI (99.9%): [31832.981, 95785.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.180 ±(99.9%) 0.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.450), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.96% complete, ETA 01:20:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51665.481 ops/s
[info] # Warmup Iteration   2: 127051.090 ops/s
[info] # Warmup Iteration   3: 128323.029 ops/s
[info] # Warmup Iteration   4: 134977.724 ops/s
[info] # Warmup Iteration   5: 134858.031 ops/s
[info] Iteration   1: 135005.172 ops/s
[info]                  ·gc.alloc.rate:               1171.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          13654.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7815.748 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 134710.785 ops/s
[info]                  ·gc.alloc.rate:                   1183.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              13831.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15669.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 135375.912 ops/s
[info]                  ·gc.alloc.rate:               1206.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          14022.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15604.847 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 135387.719 ops/s
[info]                  ·gc.alloc.rate:               1182.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          13739.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7805.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 135483.523 ops/s
[info]                  ·gc.alloc.rate:                   1183.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              13751.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15599.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   135192.622 ±(99.9%) 1253.066 ops/s [Average]
[info]   (min, avg, max) = (134710.785, 135192.622, 135483.523), stdev = 325.417
[info]   CI (99.9%): [133939.556, 136445.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1185.494 ±(99.9%) 48.950 MB/sec [Average]
[info]   (min, avg, max) = (1171.370, 1185.494, 1206.227), stdev = 12.712
[info]   CI (99.9%): [1136.544, 1234.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13799.980 ±(99.9%) 537.024 B/op [Average]
[info]   (min, avg, max) = (13654.359, 13799.980, 14022.632), stdev = 139.463
[info]   CI (99.9%): [13262.956, 14337.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.718 ±(99.9%) 1415.661 MB/sec [Average]
[info]   (min, avg, max) = (670.491, 1073.718, 1342.985), stdev = 367.643
[info]   CI (99.9%): [≈ 0, 2489.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12499.019 ±(99.9%) 16481.040 B/op [Average]
[info]   (min, avg, max) = (7805.316, 12499.019, 15669.611), stdev = 4280.074
[info]   CI (99.9%): [≈ 0, 28980.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.754 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.352), stdev = 1.494
[info]   CI (99.9%): [≈ 0, 6.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.884 ±(99.9%) 66.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.884, 38.931), stdev = 17.357
[info]   CI (99.9%): [≈ 0, 74.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.16% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.816 ops/s
[info] # Warmup Iteration   2: 194416.288 ops/s
[info] # Warmup Iteration   3: 204698.627 ops/s
[info] # Warmup Iteration   4: 200815.449 ops/s
[info] # Warmup Iteration   5: 209142.158 ops/s
[info] Iteration   1: 207021.212 ops/s
[info]                  ·gc.alloc.rate:                   171.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1303.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3889.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.463 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 209410.317 ops/s
[info]                  ·gc.alloc.rate:      163.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 208978.347 ops/s
[info]                  ·gc.alloc.rate:      163.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207870.345 ops/s
[info]                  ·gc.alloc.rate:               177.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          1344.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3873.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 209016.694 ops/s
[info]                  ·gc.alloc.rate:      163.633 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   208459.383 ±(99.9%) 3801.961 ops/s [Average]
[info]   (min, avg, max) = (207021.212, 208459.383, 209410.317), stdev = 987.357
[info]   CI (99.9%): [204657.422, 212261.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   168.069 ±(99.9%) 24.294 MB/sec [Average]
[info]   (min, avg, max) = (163.633, 168.069, 177.644), stdev = 6.309
[info]   CI (99.9%): [143.775, 192.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1268.746 ±(99.9%) 201.837 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1268.746, 1344.648), stdev = 52.416
[info]   CI (99.9%): [1066.909, 1470.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.688 ±(99.9%) 1079.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.688, 511.728), stdev = 280.281
[info]   CI (99.9%): [≈ 0, 1283.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1552.505 ±(99.9%) 8185.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1552.505, 3889.204), stdev = 2125.863
[info]   CI (99.9%): [≈ 0, 9738.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 3.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.903), stdev = 0.851
[info]   CI (99.9%): [≈ 0, 3.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2.893 ±(99.9%) 24.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.893, 14.463), stdev = 6.468
[info]   CI (99.9%): [≈ 0, 27.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.36% complete, ETA 01:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174731.032 ops/s
[info] # Warmup Iteration   2: 358248.165 ops/s
[info] # Warmup Iteration   3: 387264.417 ops/s
[info] # Warmup Iteration   4: 384397.666 ops/s
[info] # Warmup Iteration   5: 382847.172 ops/s
[info] Iteration   1: 387986.916 ops/s
[info]                  ·gc.alloc.rate:               394.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          1600.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2075.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 390270.697 ops/s
[info]                  ·gc.alloc.rate:               397.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          1601.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2063.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 392780.409 ops/s
[info]                  ·gc.alloc.rate:      385.363 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 374802.120 ops/s
[info]                  ·gc.alloc.rate:                   392.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              1646.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2801.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 390658.729 ops/s
[info]                  ·gc.alloc.rate:               401.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          1617.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2687.762 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   387299.774 ±(99.9%) 27687.833 ops/s [Average]
[info]   (min, avg, max) = (374802.120, 387299.774, 392780.409), stdev = 7190.442
[info]   CI (99.9%): [359611.941, 414987.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   394.126 ±(99.9%) 23.027 MB/sec [Average]
[info]   (min, avg, max) = (385.363, 394.126, 401.459), stdev = 5.980
[info]   CI (99.9%): [371.099, 417.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1601.880 ±(99.9%) 144.254 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1601.880, 1646.893), stdev = 37.462
[info]   CI (99.9%): [1457.626, 1746.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.524 ±(99.9%) 1058.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.524, 667.230), stdev = 274.829
[info]   CI (99.9%): [≈ 0, 1529.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1925.446 ±(99.9%) 4346.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1925.446, 2801.174), stdev = 1128.798
[info]   CI (99.9%): [≈ 0, 6272.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.56% complete, ETA 01:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279145.978 ops/s
[info] # Warmup Iteration   2: 452033.296 ops/s
[info] # Warmup Iteration   3: 454985.233 ops/s
[info] # Warmup Iteration   4: 460225.917 ops/s
[info] # Warmup Iteration   5: 462772.609 ops/s
[info] Iteration   1: 467597.708 ops/s
[info]                  ·gc.alloc.rate:                   379.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              1277.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1721.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 463036.551 ops/s
[info]                  ·gc.alloc.rate:               386.213 MB/sec
[info]                  ·gc.alloc.rate.norm:          1312.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1738.955 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 463540.921 ops/s
[info]                  ·gc.alloc.rate:      363.917 MB/sec
[info]                  ·gc.alloc.rate.norm: 1235.443 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 466675.680 ops/s
[info]                  ·gc.alloc.rate:               386.893 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2262.322 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 468737.942 ops/s
[info]                  ·gc.alloc.rate:      366.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   465917.761 ±(99.9%) 9684.355 ops/s [Average]
[info]   (min, avg, max) = (463036.551, 465917.761, 468737.942), stdev = 2514.996
[info]   CI (99.9%): [456233.406, 475602.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   376.711 ±(99.9%) 41.333 MB/sec [Average]
[info]   (min, avg, max) = (363.917, 376.711, 386.893), stdev = 10.734
[info]   CI (99.9%): [335.378, 418.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1272.334 ±(99.9%) 144.901 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1272.334, 1312.577), stdev = 37.630
[info]   CI (99.9%): [1127.433, 1417.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.882 ±(99.9%) 1217.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.882, 670.975), stdev = 316.114
[info]   CI (99.9%): [≈ 0, 1556.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1144.650 ±(99.9%) 4109.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1144.650, 2262.322), stdev = 1067.255
[info]   CI (99.9%): [≈ 0, 5254.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.76% complete, ETA 01:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239511.281 ops/s
[info] # Warmup Iteration   2: 485189.835 ops/s
[info] # Warmup Iteration   3: 496628.469 ops/s
[info] # Warmup Iteration   4: 496654.503 ops/s
[info] # Warmup Iteration   5: 496355.345 ops/s
[info] Iteration   1: 496254.120 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 496810.555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 496865.526 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 496137.781 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 495825.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   496378.726 ±(99.9%) 1725.208 ops/s [Average]
[info]   (min, avg, max) = (495825.648, 496378.726, 496865.526), stdev = 448.031
[info]   CI (99.9%): [494653.518, 498103.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.96% complete, ETA 01:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5394.589 ops/s
[info] # Warmup Iteration   2: 26651.451 ops/s
[info] # Warmup Iteration   3: 28491.255 ops/s
[info] # Warmup Iteration   4: 28060.270 ops/s
[info] # Warmup Iteration   5: 27710.683 ops/s
[info] Iteration   1: 28198.855 ops/s
[info]                  ·gc.alloc.rate:               1527.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          85233.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74800.032 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 28585.826 ops/s
[info]                  ·gc.alloc.rate:                   1558.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              85829.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73787.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28767.723 ops/s
[info]                  ·gc.alloc.rate:                   1567.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              85730.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73393.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28798.971 ops/s
[info]                  ·gc.alloc.rate:                   1582.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              86454.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109611.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28793.701 ops/s
[info]                  ·gc.alloc.rate:                   1570.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              85807.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72999.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28629.015 ±(99.9%) 985.775 ops/s [Average]
[info]   (min, avg, max) = (28198.855, 28629.015, 28798.971), stdev = 256.003
[info]   CI (99.9%): [27643.240, 29614.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1561.106 ±(99.9%) 79.518 MB/sec [Average]
[info]   (min, avg, max) = (1527.278, 1561.106, 1582.094), stdev = 20.650
[info]   CI (99.9%): [1481.588, 1640.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85811.098 ±(99.9%) 1671.977 B/op [Average]
[info]   (min, avg, max) = (85233.625, 85811.098, 86454.417), stdev = 434.207
[info]   CI (99.9%): [84139.121, 87483.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.753 ±(99.9%) 1147.610 MB/sec [Average]
[info]   (min, avg, max) = (1335.668, 1472.753, 2005.871), stdev = 298.031
[info]   CI (99.9%): [325.143, 2620.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80918.630 ±(99.9%) 61818.312 B/op [Average]
[info]   (min, avg, max) = (72999.822, 80918.630, 109611.941), stdev = 16054.019
[info]   CI (99.9%): [19100.318, 142736.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.080), stdev = 1.811
[info]   CI (99.9%): [≈ 0, 7.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46.011 ±(99.9%) 381.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.011, 223.206), stdev = 99.063
[info]   CI (99.9%): [≈ 0, 427.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.483
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.16% complete, ETA 01:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1473.602 ops/s
[info] # Warmup Iteration   2: 6425.062 ops/s
[info] # Warmup Iteration   3: 8136.677 ops/s
[info] # Warmup Iteration   4: 8267.665 ops/s
[info] # Warmup Iteration   5: 8177.757 ops/s
[info] Iteration   1: 8267.566 ops/s
[info]                  ·gc.alloc.rate:                   1190.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              226505.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255487.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 8288.375 ops/s
[info]                  ·gc.alloc.rate:                   1179.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              223856.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254966.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8177.500 ops/s
[info]                  ·gc.alloc.rate:               1145.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          220479.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129213.277 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8252.843 ops/s
[info]                  ·gc.alloc.rate:                   1179.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              224952.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256332.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8261.711 ops/s
[info]                  ·gc.alloc.rate:                   1169.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              222843.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256053.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 701.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8249.599 ±(99.9%) 163.164 ops/s [Average]
[info]   (min, avg, max) = (8177.500, 8249.599, 8288.375), stdev = 42.373
[info]   CI (99.9%): [8086.436, 8412.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1173.008 ±(99.9%) 65.105 MB/sec [Average]
[info]   (min, avg, max) = (1145.645, 1173.008, 1190.284), stdev = 16.907
[info]   CI (99.9%): [1107.903, 1238.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   223727.734 ±(99.9%) 8731.590 B/op [Average]
[info]   (min, avg, max) = (220479.648, 223727.734, 226505.793), stdev = 2267.566
[info]   CI (99.9%): [214996.143, 232459.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1209.187 ±(99.9%) 1157.606 MB/sec [Average]
[info]   (min, avg, max) = (671.411, 1209.187, 1344.311), stdev = 300.626
[info]   CI (99.9%): [51.581, 2366.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   230410.723 ±(99.9%) 217844.557 B/op [Average]
[info]   (min, avg, max) = (129213.277, 230410.723, 256332.691), stdev = 56573.540
[info]   CI (99.9%): [12566.166, 448255.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.685), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   145.118 ±(99.9%) 1198.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.118, 701.832), stdev = 311.244
[info]   CI (99.9%): [≈ 0, 1343.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.37% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 993.358 ops/s
[info] # Warmup Iteration   2: 6450.870 ops/s
[info] # Warmup Iteration   3: 7846.299 ops/s
[info] # Warmup Iteration   4: 8165.669 ops/s
[info] # Warmup Iteration   5: 8248.969 ops/s
[info] Iteration   1: 8180.379 ops/s
[info]                  ·gc.alloc.rate:                   1082.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              208241.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256825.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8214.947 ops/s
[info]                  ·gc.alloc.rate:                   1082.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              207397.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255859.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8137.917 ops/s
[info]                  ·gc.alloc.rate:               1053.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          203692.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129268.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8131.660 ops/s
[info]                  ·gc.alloc.rate:                   1074.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              208004.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258824.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 8167.951 ops/s
[info]                  ·gc.alloc.rate:               1054.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          203240.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128858.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8166.571 ±(99.9%) 130.194 ops/s [Average]
[info]   (min, avg, max) = (8131.660, 8166.571, 8214.947), stdev = 33.811
[info]   CI (99.9%): [8036.377, 8296.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1069.592 ±(99.9%) 56.033 MB/sec [Average]
[info]   (min, avg, max) = (1053.275, 1069.592, 1082.639), stdev = 14.551
[info]   CI (99.9%): [1013.560, 1125.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   206115.242 ±(99.9%) 9407.197 B/op [Average]
[info]   (min, avg, max) = (203240.275, 206115.242, 208241.600), stdev = 2443.019
[info]   CI (99.9%): [196708.046, 215522.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.036 ±(99.9%) 1407.569 MB/sec [Average]
[info]   (min, avg, max) = (668.437, 1069.036, 1337.346), stdev = 365.541
[info]   CI (99.9%): [≈ 0, 2476.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   205927.077 ±(99.9%) 270218.939 B/op [Average]
[info]   (min, avg, max) = (128858.054, 205927.077, 258824.090), stdev = 70175.000
[info]   CI (99.9%): [≈ 0, 476146.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.605 ±(99.9%) 7.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.605, 4.005), stdev = 1.862
[info]   CI (99.9%): [≈ 0, 8.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79002.048 ops/s
[info] # Warmup Iteration   2: 173049.945 ops/s
[info] # Warmup Iteration   3: 175979.593 ops/s
[info] # Warmup Iteration   4: 178097.959 ops/s
[info] # Warmup Iteration   5: 181648.502 ops/s
[info] Iteration   1: 181595.862 ops/s
[info]                  ·gc.alloc.rate:                   1813.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              15715.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17411.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 182377.769 ops/s
[info]                  ·gc.alloc.rate:                   1819.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              15699.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17366.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 179448.630 ops/s
[info]                  ·gc.alloc.rate:                   1792.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              15712.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11783.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 177090.478 ops/s
[info]                  ·gc.alloc.rate:                   1769.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              15722.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17946.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 181848.632 ops/s
[info]                  ·gc.alloc.rate:                   1815.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              15711.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11668.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   180472.274 ±(99.9%) 8452.167 ops/s [Average]
[info]   (min, avg, max) = (177090.478, 180472.274, 182377.769), stdev = 2195.001
[info]   CI (99.9%): [172020.107, 188924.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1801.994 ±(99.9%) 81.081 MB/sec [Average]
[info]   (min, avg, max) = (1769.513, 1801.994, 1819.455), stdev = 21.056
[info]   CI (99.9%): [1720.913, 1883.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15712.328 ±(99.9%) 32.105 B/op [Average]
[info]   (min, avg, max) = (15699.501, 15712.328, 15722.340), stdev = 8.338
[info]   CI (99.9%): [15680.223, 15744.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746.788 ±(99.9%) 1408.379 MB/sec [Average]
[info]   (min, avg, max) = (1344.009, 1746.788, 2019.872), stdev = 365.752
[info]   CI (99.9%): [338.409, 3155.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15235.398 ±(99.9%) 12366.992 B/op [Average]
[info]   (min, avg, max) = (11668.781, 15235.398, 17946.817), stdev = 3211.669
[info]   CI (99.9%): [2868.406, 27602.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.441 ±(99.9%) 2.238 B/op [Average]
[info]   (min, avg, max) = (0.180, 0.441, 1.480), stdev = 0.581
[info]   CI (99.9%): [≈ 0, 2.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.77% complete, ETA 01:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452.741 ops/s
[info] # Warmup Iteration   2: 5462.906 ops/s
[info] # Warmup Iteration   3: 7176.364 ops/s
[info] # Warmup Iteration   4: 7417.980 ops/s
[info] # Warmup Iteration   5: 7357.368 ops/s
[info] Iteration   1: 7343.677 ops/s
[info]                  ·gc.alloc.rate:               1221.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          261792.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 285482.167 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 7156.250 ops/s
[info]                  ·gc.alloc.rate:                   1181.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              259732.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293273.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7195.655 ops/s
[info]                  ·gc.alloc.rate:               1166.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          255165.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145894.535 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 7153.512 ops/s
[info]                  ·gc.alloc.rate:                   1172.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              257961.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293794.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7335.647 ops/s
[info]                  ·gc.alloc.rate:                   1224.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              262712.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286650.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 920.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7236.948 ±(99.9%) 366.881 ops/s [Average]
[info]   (min, avg, max) = (7153.512, 7236.948, 7343.677), stdev = 95.278
[info]   CI (99.9%): [6870.067, 7603.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1193.394 ±(99.9%) 106.603 MB/sec [Average]
[info]   (min, avg, max) = (1166.818, 1193.394, 1224.634), stdev = 27.685
[info]   CI (99.9%): [1086.791, 1299.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   259472.798 ±(99.9%) 11675.996 B/op [Average]
[info]   (min, avg, max) = (255165.780, 259472.798, 262712.423), stdev = 3032.219
[info]   CI (99.9%): [247796.802, 271148.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.972 ±(99.9%) 1149.120 MB/sec [Average]
[info]   (min, avg, max) = (667.144, 1200.972, 1336.223), stdev = 298.423
[info]   CI (99.9%): [51.852, 2350.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   261019.066 ±(99.9%) 248237.052 B/op [Average]
[info]   (min, avg, max) = (145894.535, 261019.066, 293794.701), stdev = 64466.374
[info]   CI (99.9%): [12782.014, 509256.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.871 ±(99.9%) 7.362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.871, 4.290), stdev = 1.912
[info]   CI (99.9%): [≈ 0, 8.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   186.821 ±(99.9%) 1579.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 186.821, 920.368), stdev = 410.083
[info]   CI (99.9%): [≈ 0, 1765.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41.97% complete, ETA 01:17:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1610.191 ops/s
[info] # Warmup Iteration   2: 6876.189 ops/s
[info] # Warmup Iteration   3: 7672.054 ops/s
[info] # Warmup Iteration   4: 7968.397 ops/s
[info] # Warmup Iteration   5: 7907.963 ops/s
[info] Iteration   1: 7958.875 ops/s
[info]                  ·gc.alloc.rate:               1073.149 MB/sec
[info]                  ·gc.alloc.rate.norm:          212187.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132784.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 7920.681 ops/s
[info]                  ·gc.alloc.rate:                   1083.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              215258.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267107.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7981.020 ops/s
[info]                  ·gc.alloc.rate:                   1072.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              211392.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132533.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7829.557 ops/s
[info]                  ·gc.alloc.rate:               1076.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          216419.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 270211.514 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 7982.994 ops/s
[info]                  ·gc.alloc.rate:                   1070.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              211047.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132500.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   7934.625 ±(99.9%) 245.913 ops/s [Average]
[info]   (min, avg, max) = (7829.557, 7934.625, 7982.994), stdev = 63.863
[info]   CI (99.9%): [7688.712, 8180.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1075.218 ±(99.9%) 19.877 MB/sec [Average]
[info]   (min, avg, max) = (1070.544, 1075.218, 1083.495), stdev = 5.162
[info]   CI (99.9%): [1055.341, 1095.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   213261.067 ±(99.9%) 9335.720 B/op [Average]
[info]   (min, avg, max) = (211047.323, 213261.067, 216419.513), stdev = 2424.457
[info]   CI (99.9%): [203925.348, 222596.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   940.947 ±(99.9%) 1418.340 MB/sec [Average]
[info]   (min, avg, max) = (671.565, 940.947, 1344.473), stdev = 368.338
[info]   CI (99.9%): [≈ 0, 2359.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   187027.395 ±(99.9%) 286979.969 B/op [Average]
[info]   (min, avg, max) = (132500.086, 187027.395, 270211.514), stdev = 74527.787
[info]   CI (99.9%): [≈ 0, 474007.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.290 ±(99.9%) 13.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.290, 8.209), stdev = 3.436
[info]   CI (99.9%): [≈ 0, 16.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.17% complete, ETA 01:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7470.039 ops/s
[info] # Warmup Iteration   2: 18768.732 ops/s
[info] # Warmup Iteration   3: 19898.018 ops/s
[info] # Warmup Iteration   4: 19847.440 ops/s
[info] # Warmup Iteration   5: 20092.880 ops/s
[info] Iteration   1: 20065.542 ops/s
[info]                  ·gc.alloc.rate:               1147.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          89965.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105092.707 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 20117.640 ops/s
[info]                  ·gc.alloc.rate:                   1150.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              89970.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104899.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20044.321 ops/s
[info]                  ·gc.alloc.rate:               1131.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          88815.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52666.768 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 19867.779 ops/s
[info]                  ·gc.alloc.rate:                   1136.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              90019.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106271.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 20255.881 ops/s
[info]                  ·gc.alloc.rate:                   1169.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              90818.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104345.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20070.233 ±(99.9%) 539.069 ops/s [Average]
[info]   (min, avg, max) = (19867.779, 20070.233, 20255.881), stdev = 139.994
[info]   CI (99.9%): [19531.164, 20609.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1146.802 ±(99.9%) 56.192 MB/sec [Average]
[info]   (min, avg, max) = (1131.238, 1146.802, 1169.006), stdev = 14.593
[info]   CI (99.9%): [1090.610, 1202.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89917.643 ±(99.9%) 2751.500 B/op [Average]
[info]   (min, avg, max) = (88815.085, 89917.643, 90818.398), stdev = 714.556
[info]   CI (99.9%): [87166.143, 92669.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.325 ±(99.9%) 1154.884 MB/sec [Average]
[info]   (min, avg, max) = (670.817, 1207.325, 1343.122), stdev = 299.920
[info]   CI (99.9%): [52.442, 2362.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   94655.139 ±(99.9%) 90423.567 B/op [Average]
[info]   (min, avg, max) = (52666.768, 94655.139, 106271.742), stdev = 23482.713
[info]   CI (99.9%): [4231.572, 185078.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.664), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 7.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   57.916 ±(99.9%) 488.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.916, 284.672), stdev = 126.768
[info]   CI (99.9%): [≈ 0, 546.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.37% complete, ETA 01:17:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8587.831 ops/s
[info] # Warmup Iteration   2: 24700.817 ops/s
[info] # Warmup Iteration   3: 26153.040 ops/s
[info] # Warmup Iteration   4: 26129.731 ops/s
[info] # Warmup Iteration   5: 26426.463 ops/s
[info] Iteration   1: 26217.596 ops/s
[info]                  ·gc.alloc.rate:               1166.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          69996.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80290.597 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 25972.081 ops/s
[info]                  ·gc.alloc.rate:               1161.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          70374.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81111.459 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 26248.477 ops/s
[info]                  ·gc.alloc.rate:                   1172.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              70269.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80318.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26398.978 ops/s
[info]                  ·gc.alloc.rate:               1164.563 MB/sec
[info]                  ·gc.alloc.rate.norm:          69422.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39949.534 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 26294.279 ops/s
[info]                  ·gc.alloc.rate:                   1160.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              69454.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80251.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   26226.282 ±(99.9%) 607.724 ops/s [Average]
[info]   (min, avg, max) = (25972.081, 26226.282, 26398.978), stdev = 157.824
[info]   CI (99.9%): [25618.558, 26834.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1164.929 ±(99.9%) 17.538 MB/sec [Average]
[info]   (min, avg, max) = (1160.499, 1164.929, 1172.000), stdev = 4.555
[info]   CI (99.9%): [1147.391, 1182.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69903.411 ±(99.9%) 1719.948 B/op [Average]
[info]   (min, avg, max) = (69422.110, 69903.411, 70374.148), stdev = 446.665
[info]   CI (99.9%): [68183.463, 71623.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.392 ±(99.9%) 1152.142 MB/sec [Average]
[info]   (min, avg, max) = (670.157, 1205.392, 1340.915), stdev = 299.208
[info]   CI (99.9%): [53.250, 2357.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72384.417 ±(99.9%) 69832.120 B/op [Average]
[info]   (min, avg, max) = (39949.534, 72384.417, 81111.459), stdev = 18135.180
[info]   CI (99.9%): [2552.296, 142216.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 6.797 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.957), stdev = 1.765
[info]   CI (99.9%): [≈ 0, 7.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47.867 ±(99.9%) 406.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.867, 236.840), stdev = 105.645
[info]   CI (99.9%): [≈ 0, 454.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.57% complete, ETA 01:16:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171409.449 ops/s
[info] # Warmup Iteration   2: 351663.761 ops/s
[info] # Warmup Iteration   3: 363804.365 ops/s
[info] # Warmup Iteration   4: 377058.887 ops/s
[info] # Warmup Iteration   5: 375394.196 ops/s
[info] Iteration   1: 376328.425 ops/s
[info]                  ·gc.alloc.rate:               876.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          3664.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2808.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 370645.955 ops/s
[info]                  ·gc.alloc.rate:               859.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          3648.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2851.113 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 374915.414 ops/s
[info]                  ·gc.alloc.rate:                   867.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              3641.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2821.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 368886.325 ops/s
[info]                  ·gc.alloc.rate:               867.866 MB/sec
[info]                  ·gc.alloc.rate.norm:          3702.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5736.609 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 375004.077 ops/s
[info]                  ·gc.alloc.rate:                   864.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              3628.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2822.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   373156.039 ±(99.9%) 12343.950 ops/s [Average]
[info]   (min, avg, max) = (368886.325, 373156.039, 376328.425), stdev = 3205.685
[info]   CI (99.9%): [360812.089, 385499.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   867.175 ±(99.9%) 23.857 MB/sec [Average]
[info]   (min, avg, max) = (859.312, 867.175, 876.396), stdev = 6.196
[info]   CI (99.9%): [843.318, 891.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3657.307 ±(99.9%) 109.365 B/op [Average]
[info]   (min, avg, max) = (3628.865, 3657.307, 3702.480), stdev = 28.402
[info]   CI (99.9%): [3547.942, 3766.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.468 ±(99.9%) 1158.519 MB/sec [Average]
[info]   (min, avg, max) = (671.492, 806.468, 1344.668), stdev = 300.864
[info]   CI (99.9%): [≈ 0, 1964.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3407.896 ±(99.9%) 5013.096 B/op [Average]
[info]   (min, avg, max) = (2808.059, 3407.896, 5736.609), stdev = 1301.885
[info]   CI (99.9%): [≈ 0, 8420.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.262), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.77% complete, ETA 01:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230481.907 ops/s
[info] # Warmup Iteration   2: 398127.822 ops/s
[info] # Warmup Iteration   3: 423276.485 ops/s
[info] # Warmup Iteration   4: 424156.566 ops/s
[info] # Warmup Iteration   5: 427281.586 ops/s
[info] Iteration   1: 427407.373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 426879.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 425568.058 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 427209.430 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 427161.617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   426845.279 ±(99.9%) 2843.433 ops/s [Average]
[info]   (min, avg, max) = (425568.058, 426845.279, 427407.373), stdev = 738.430
[info]   CI (99.9%): [424001.846, 429688.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.97% complete, ETA 01:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7484.713 ops/s
[info] # Warmup Iteration   2: 20157.025 ops/s
[info] # Warmup Iteration   3: 24384.612 ops/s
[info] # Warmup Iteration   4: 24414.166 ops/s
[info] # Warmup Iteration   5: 24574.246 ops/s
[info] Iteration   1: 24092.885 ops/s
[info]                  ·gc.alloc.rate:               1201.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          78473.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43726.924 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 24174.380 ops/s
[info]                  ·gc.alloc.rate:                   1208.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              78685.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87207.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23783.885 ops/s
[info]                  ·gc.alloc.rate:               1197.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          79235.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88685.313 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 23537.427 ops/s
[info]                  ·gc.alloc.rate:                   1184.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              79184.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89660.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 24718.031 ops/s
[info]                  ·gc.alloc.rate:                   1229.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              78231.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42711.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.693 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   24061.322 ±(99.9%) 1718.270 ops/s [Average]
[info]   (min, avg, max) = (23537.427, 24061.322, 24718.031), stdev = 446.229
[info]   CI (99.9%): [22343.052, 25779.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1204.207 ±(99.9%) 63.437 MB/sec [Average]
[info]   (min, avg, max) = (1184.352, 1204.207, 1229.089), stdev = 16.474
[info]   CI (99.9%): [1140.770, 1267.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78762.313 ±(99.9%) 1693.768 B/op [Average]
[info]   (min, avg, max) = (78231.426, 78762.313, 79235.762), stdev = 439.866
[info]   CI (99.9%): [77068.545, 80456.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.276 ±(99.9%) 1413.142 MB/sec [Average]
[info]   (min, avg, max) = (669.484, 1072.276, 1341.030), stdev = 366.988
[info]   CI (99.9%): [≈ 0, 2485.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70398.407 ±(99.9%) 95607.664 B/op [Average]
[info]   (min, avg, max) = (42711.594, 70398.407, 89660.330), stdev = 24829.007
[info]   CI (99.9%): [≈ 0, 166006.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.268), stdev = 1.412
[info]   CI (99.9%): [≈ 0, 6.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54.315 ±(99.9%) 363.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.315, 218.528), stdev = 94.443
[info]   CI (99.9%): [≈ 0, 417.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.200, 8.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43.17% complete, ETA 01:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6032.333 ops/s
[info] # Warmup Iteration   2: 10354.487 ops/s
[info] # Warmup Iteration   3: 10973.572 ops/s
[info] # Warmup Iteration   4: 11035.528 ops/s
[info] # Warmup Iteration   5: 11025.764 ops/s
[info] Iteration   1: 10974.376 ops/s
[info]                  ·gc.alloc.rate:               971.609 MB/sec
[info]                  ·gc.alloc.rate.norm:          139320.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 192500.058 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 11062.707 ops/s
[info]                  ·gc.alloc.rate:                   939.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              133581.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95523.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.961 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11036.271 ops/s
[info]                  ·gc.alloc.rate:               935.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          133373.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95756.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 11018.201 ops/s
[info]                  ·gc.alloc.rate:                   947.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              135357.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192016.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11036.059 ops/s
[info]                  ·gc.alloc.rate:               934.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          133266.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95851.892 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   11025.523 ±(99.9%) 125.940 ops/s [Average]
[info]   (min, avg, max) = (10974.376, 11025.523, 11062.707), stdev = 32.706
[info]   CI (99.9%): [10899.583, 11151.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   945.691 ±(99.9%) 59.298 MB/sec [Average]
[info]   (min, avg, max) = (934.596, 945.691, 971.609), stdev = 15.400
[info]   CI (99.9%): [886.393, 1004.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   134979.961 ±(99.9%) 9902.720 B/op [Average]
[info]   (min, avg, max) = (133266.982, 134979.961, 139320.416), stdev = 2571.705
[info]   CI (99.9%): [125077.241, 144882.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   940.456 ±(99.9%) 1416.668 MB/sec [Average]
[info]   (min, avg, max) = (671.559, 940.456, 1344.469), stdev = 367.904
[info]   CI (99.9%): [≈ 0, 2357.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   134329.799 ±(99.9%) 203629.078 B/op [Average]
[info]   (min, avg, max) = (95523.236, 134329.799, 192500.058), stdev = 52881.825
[info]   CI (99.9%): [≈ 0, 337958.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.187 ±(99.9%) 6.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.187, 2.974), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 7.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.37% complete, ETA 01:15:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1680.175 ops/s
[info] # Warmup Iteration   2: 9655.020 ops/s
[info] # Warmup Iteration   3: 12659.174 ops/s
[info] # Warmup Iteration   4: 12674.482 ops/s
[info] # Warmup Iteration   5: 12788.468 ops/s
[info] Iteration   1: 12949.406 ops/s
[info]                  ·gc.alloc.rate:               1273.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          154775.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81525.327 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 12733.225 ops/s
[info]                  ·gc.alloc.rate:                   1275.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              157592.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165815.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 12829.234 ops/s
[info]                  ·gc.alloc.rate:                   1270.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              155856.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164657.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 12591.114 ops/s
[info]                  ·gc.alloc.rate:                   1247.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              155855.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167852.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 12467.686 ops/s
[info]                  ·gc.alloc.rate:                   1272.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              160595.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169255.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   12714.133 ±(99.9%) 732.726 ops/s [Average]
[info]   (min, avg, max) = (12467.686, 12714.133, 12949.406), stdev = 190.287
[info]   CI (99.9%): [11981.407, 13446.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1267.753 ±(99.9%) 44.980 MB/sec [Average]
[info]   (min, avg, max) = (1247.071, 1267.753, 1275.116), stdev = 11.681
[info]   CI (99.9%): [1222.773, 1312.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   156935.097 ±(99.9%) 8786.453 B/op [Average]
[info]   (min, avg, max) = (154775.529, 156935.097, 160595.939), stdev = 2281.814
[info]   CI (99.9%): [148148.644, 165721.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1207.777 ±(99.9%) 1155.760 MB/sec [Average]
[info]   (min, avg, max) = (670.859, 1207.777, 1343.064), stdev = 300.147
[info]   CI (99.9%): [52.017, 2363.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   149821.177 ±(99.9%) 147171.484 B/op [Average]
[info]   (min, avg, max) = (81525.327, 149821.177, 169255.351), stdev = 38219.967
[info]   CI (99.9%): [2649.693, 296992.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 5.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.456), stdev = 1.499
[info]   CI (99.9%): [≈ 0, 6.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   99.483 ±(99.9%) 721.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.483, 431.911), stdev = 187.375
[info]   CI (99.9%): [≈ 0, 820.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.57% complete, ETA 01:15:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1886.191 ops/s
[info] # Warmup Iteration   2: 11338.251 ops/s
[info] # Warmup Iteration   3: 13365.671 ops/s
[info] # Warmup Iteration   4: 13389.271 ops/s
[info] # Warmup Iteration   5: 13365.638 ops/s
[info] Iteration   1: 13245.945 ops/s
[info]                  ·gc.alloc.rate:               1187.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          141100.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158604.144 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13252.300 ops/s
[info]                  ·gc.alloc.rate:                   1167.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              138589.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158651.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13193.175 ops/s
[info]                  ·gc.alloc.rate:               1146.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          136800.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79694.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 13222.933 ops/s
[info]                  ·gc.alloc.rate:               1174.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          139841.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159197.082 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 13401.268 ops/s
[info]                  ·gc.alloc.rate:                   1194.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              140280.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157227.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 503.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13263.124 ±(99.9%) 310.474 ops/s [Average]
[info]   (min, avg, max) = (13193.175, 13263.124, 13401.268), stdev = 80.629
[info]   CI (99.9%): [12952.651, 13573.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1174.318 ±(99.9%) 71.809 MB/sec [Average]
[info]   (min, avg, max) = (1146.910, 1174.318, 1194.621), stdev = 18.649
[info]   CI (99.9%): [1102.509, 1246.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   139322.592 ±(99.9%) 6457.232 B/op [Average]
[info]   (min, avg, max) = (136800.414, 139322.592, 141100.820), stdev = 1676.923
[info]   CI (99.9%): [132865.360, 145779.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.217 ±(99.9%) 1151.807 MB/sec [Average]
[info]   (min, avg, max) = (668.140, 1203.217, 1338.944), stdev = 299.121
[info]   CI (99.9%): [51.410, 2355.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   142674.794 ±(99.9%) 135599.786 B/op [Average]
[info]   (min, avg, max) = (79694.001, 142674.794, 159197.082), stdev = 35214.834
[info]   CI (99.9%): [7075.008, 278274.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 7.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 4.288), stdev = 1.911
[info]   CI (99.9%): [≈ 0, 8.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   102.195 ±(99.9%) 864.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.195, 503.559), stdev = 224.392
[info]   CI (99.9%): [≈ 0, 966.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.78% complete, ETA 01:15:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129213.485 ops/s
[info] # Warmup Iteration   2: 273047.416 ops/s
[info] # Warmup Iteration   3: 287464.798 ops/s
[info] # Warmup Iteration   4: 285384.804 ops/s
[info] # Warmup Iteration   5: 294160.538 ops/s
[info] Iteration   1: 293268.701 ops/s
[info]                  ·gc.alloc.rate:                   1750.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              9394.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10824.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 294481.022 ops/s
[info]                  ·gc.alloc.rate:                   1756.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              9383.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7191.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 284979.063 ops/s
[info]                  ·gc.alloc.rate:                   1714.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              9466.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11120.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 285443.977 ops/s
[info]                  ·gc.alloc.rate:                   1690.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              9320.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7397.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 284909.926 ops/s
[info]                  ·gc.alloc.rate:                   1728.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              9546.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11116.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   288616.538 ±(99.9%) 18574.133 ops/s [Average]
[info]   (min, avg, max) = (284909.926, 288616.538, 294481.022), stdev = 4823.643
[info]   CI (99.9%): [270042.405, 307190.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1728.001 ±(99.9%) 103.822 MB/sec [Average]
[info]   (min, avg, max) = (1690.471, 1728.001, 1756.207), stdev = 26.962
[info]   CI (99.9%): [1624.179, 1831.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9422.272 ±(99.9%) 334.591 B/op [Average]
[info]   (min, avg, max) = (9320.181, 9422.272, 9546.797), stdev = 86.892
[info]   CI (99.9%): [9087.680, 9756.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746.234 ±(99.9%) 1414.606 MB/sec [Average]
[info]   (min, avg, max) = (1341.666, 1746.234, 2017.191), stdev = 367.369
[info]   CI (99.9%): [331.627, 3160.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9530.055 ±(99.9%) 7878.010 B/op [Average]
[info]   (min, avg, max) = (7191.269, 9530.055, 11120.820), stdev = 2045.894
[info]   CI (99.9%): [1652.044, 17408.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.130 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.658, 3.040), stdev = 1.332
[info]   CI (99.9%): [≈ 0, 5.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.524 ±(99.9%) 27.395 B/op [Average]
[info]   (min, avg, max) = (0.112, 3.524, 16.243), stdev = 7.114
[info]   CI (99.9%): [≈ 0, 30.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.98% complete, ETA 01:14:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 905.481 ops/s
[info] # Warmup Iteration   2: 9129.052 ops/s
[info] # Warmup Iteration   3: 12250.288 ops/s
[info] # Warmup Iteration   4: 12604.540 ops/s
[info] # Warmup Iteration   5: 12675.428 ops/s
[info] Iteration   1: 13010.178 ops/s
[info]                  ·gc.alloc.rate:               1607.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          194410.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1992.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240971.838 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 13034.876 ops/s
[info]                  ·gc.alloc.rate:               1594.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          192470.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160768.785 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 13056.408 ops/s
[info]                  ·gc.alloc.rate:                   1612.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              194291.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160979.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12706.997 ops/s
[info]                  ·gc.alloc.rate:                   1582.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              195980.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248759.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12997.933 ops/s
[info]                  ·gc.alloc.rate:               1607.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          194680.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162423.632 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12961.278 ±(99.9%) 554.213 ops/s [Average]
[info]   (min, avg, max) = (12706.997, 12961.278, 13056.408), stdev = 143.927
[info]   CI (99.9%): [12407.066, 13515.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1600.797 ±(99.9%) 46.927 MB/sec [Average]
[info]   (min, avg, max) = (1582.541, 1600.797, 1612.010), stdev = 12.187
[info]   CI (99.9%): [1553.870, 1647.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   194366.624 ±(99.9%) 4835.161 B/op [Average]
[info]   (min, avg, max) = (192470.427, 194366.624, 195980.632), stdev = 1255.676
[info]   CI (99.9%): [189531.463, 199201.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1601.939 ±(99.9%) 1400.954 MB/sec [Average]
[info]   (min, avg, max) = (1331.677, 1601.939, 2008.729), stdev = 363.823
[info]   CI (99.9%): [200.985, 3002.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   194780.674 ±(99.9%) 176391.655 B/op [Average]
[info]   (min, avg, max) = (160768.785, 194780.674, 248759.415), stdev = 45808.353
[info]   CI (99.9%): [18389.019, 371172.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.479), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.360 ±(99.9%) 101.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.360, 59.292), stdev = 26.258
[info]   CI (99.9%): [≈ 0, 113.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44.18% complete, ETA 01:14:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1856.137 ops/s
[info] # Warmup Iteration   2: 10585.797 ops/s
[info] # Warmup Iteration   3: 13346.159 ops/s
[info] # Warmup Iteration   4: 13649.629 ops/s
[info] # Warmup Iteration   5: 13639.132 ops/s
[info] Iteration   1: 13690.262 ops/s
[info]                  ·gc.alloc.rate:               1284.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          147648.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77107.933 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13624.906 ops/s
[info]                  ·gc.alloc.rate:                   1285.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              148498.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155001.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13201.297 ops/s
[info]                  ·gc.alloc.rate:                   1241.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              148032.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160045.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13574.469 ops/s
[info]                  ·gc.alloc.rate:                   1300.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              150783.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155714.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 405.407 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 13718.781 ops/s
[info]                  ·gc.alloc.rate:                   1299.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              149019.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153939.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   13561.943 ±(99.9%) 805.997 ops/s [Average]
[info]   (min, avg, max) = (13201.297, 13561.943, 13718.781), stdev = 209.315
[info]   CI (99.9%): [12755.946, 14367.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1282.407 ±(99.9%) 91.841 MB/sec [Average]
[info]   (min, avg, max) = (1241.829, 1282.407, 1300.685), stdev = 23.851
[info]   CI (99.9%): [1190.567, 1374.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   148796.610 ±(99.9%) 4711.518 B/op [Average]
[info]   (min, avg, max) = (147648.378, 148796.610, 150783.599), stdev = 1223.566
[info]   CI (99.9%): [144085.092, 153508.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1208.176 ±(99.9%) 1156.735 MB/sec [Average]
[info]   (min, avg, max) = (670.804, 1208.176, 1343.224), stdev = 300.400
[info]   CI (99.9%): [51.441, 2364.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   140361.860 ±(99.9%) 136452.156 B/op [Average]
[info]   (min, avg, max) = (77107.933, 140361.860, 160045.811), stdev = 35436.192
[info]   CI (99.9%): [3909.704, 276814.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 5.887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.497), stdev = 1.529
[info]   CI (99.9%): [≈ 0, 6.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   89.241 ±(99.9%) 682.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.241, 405.407), stdev = 177.259
[info]   CI (99.9%): [≈ 0, 771.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.38% complete, ETA 01:14:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9715.400 ops/s
[info] # Warmup Iteration   2: 31545.374 ops/s
[info] # Warmup Iteration   3: 33428.364 ops/s
[info] # Warmup Iteration   4: 32937.123 ops/s
[info] # Warmup Iteration   5: 32382.734 ops/s
[info] Iteration   1: 33764.932 ops/s
[info]                  ·gc.alloc.rate:                   1460.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              68078.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62516.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 32778.890 ops/s
[info]                  ·gc.alloc.rate:                   1404.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              67440.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64442.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 32756.425 ops/s
[info]                  ·gc.alloc.rate:                   1402.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              67394.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64519.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 33358.051 ops/s
[info]                  ·gc.alloc.rate:                   1453.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              68567.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63296.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32898.097 ops/s
[info]                  ·gc.alloc.rate:                   1434.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              68622.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64054.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33111.279 ±(99.9%) 1689.473 ops/s [Average]
[info]   (min, avg, max) = (32756.425, 33111.279, 33764.932), stdev = 438.751
[info]   CI (99.9%): [31421.806, 34800.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1431.248 ±(99.9%) 103.498 MB/sec [Average]
[info]   (min, avg, max) = (1402.842, 1431.248, 1460.834), stdev = 26.878
[info]   CI (99.9%): [1327.750, 1534.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68020.609 ±(99.9%) 2272.840 B/op [Average]
[info]   (min, avg, max) = (67394.624, 68020.609, 68622.727), stdev = 590.249
[info]   CI (99.9%): [65747.769, 70293.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.480 ±(99.9%) 5.842 MB/sec [Average]
[info]   (min, avg, max) = (1338.978, 1341.480, 1343.003), stdev = 1.517
[info]   CI (99.9%): [1335.638, 1347.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63765.981 ±(99.9%) 3273.398 B/op [Average]
[info]   (min, avg, max) = (62516.516, 63765.981, 64519.876), stdev = 850.091
[info]   CI (99.9%): [60492.583, 67039.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.996 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.741, 3.019), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 5.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.493 ±(99.9%) 240.076 B/op [Average]
[info]   (min, avg, max) = (0.970, 35.493, 145.018), stdev = 62.347
[info]   CI (99.9%): [≈ 0, 275.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.58% complete, ETA 01:14:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30786.674 ops/s
[info] # Warmup Iteration   2: 71733.928 ops/s
[info] # Warmup Iteration   3: 79764.780 ops/s
[info] # Warmup Iteration   4: 79579.981 ops/s
[info] # Warmup Iteration   5: 79676.886 ops/s
[info] Iteration   1: 77065.211 ops/s
[info]                  ·gc.alloc.rate:                   1919.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              39210.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27391.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 76327.656 ops/s
[info]                  ·gc.alloc.rate:                   1928.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              39762.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41435.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 77509.905 ops/s
[info]                  ·gc.alloc.rate:                   1953.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              39654.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40740.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 80309.516 ops/s
[info]                  ·gc.alloc.rate:               2021.787 MB/sec
[info]                  ·gc.alloc.rate.norm:          39616.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39319.642 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 80248.626 ops/s
[info]                  ·gc.alloc.rate:                   2034.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              39883.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39406.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   78292.183 ±(99.9%) 7171.428 ops/s [Average]
[info]   (min, avg, max) = (76327.656, 78292.183, 80309.516), stdev = 1862.397
[info]   CI (99.9%): [71120.755, 85463.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1971.535 ±(99.9%) 204.625 MB/sec [Average]
[info]   (min, avg, max) = (1919.938, 1971.535, 2034.219), stdev = 53.140
[info]   CI (99.9%): [1766.910, 2176.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39625.637 ±(99.9%) 979.202 B/op [Average]
[info]   (min, avg, max) = (39210.438, 39625.637, 39883.508), stdev = 254.296
[info]   CI (99.9%): [38646.435, 40604.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1874.813 ±(99.9%) 1148.647 MB/sec [Average]
[info]   (min, avg, max) = (1341.206, 1874.813, 2009.907), stdev = 298.300
[info]   CI (99.9%): [726.166, 3023.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   37658.669 ±(99.9%) 22370.043 B/op [Average]
[info]   (min, avg, max) = (27391.123, 37658.669, 41435.432), stdev = 5809.429
[info]   CI (99.9%): [15288.626, 60028.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 4.860 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 2.935), stdev = 1.262
[info]   CI (99.9%): [≈ 0, 5.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.240 ±(99.9%) 99.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.240, 59.941), stdev = 25.778
[info]   CI (99.9%): [≈ 0, 114.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.78% complete, ETA 01:13:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 385314.050 ops/s
[info] # Warmup Iteration   2: 553516.672 ops/s
[info] # Warmup Iteration   3: 629527.400 ops/s
[info] # Warmup Iteration   4: 627583.804 ops/s
[info] # Warmup Iteration   5: 631333.864 ops/s
[info] Iteration   1: 630545.869 ops/s
[info]                  ·gc.alloc.rate:               888.565 MB/sec
[info]                  ·gc.alloc.rate.norm:          2217.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1676.000 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 611721.198 ops/s
[info]                  ·gc.alloc.rate:               854.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          2197.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1727.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 608895.960 ops/s
[info]                  ·gc.alloc.rate:                   869.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              2247.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3474.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 622942.185 ops/s
[info]                  ·gc.alloc.rate:               880.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          2223.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1698.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 631736.766 ops/s
[info]                  ·gc.alloc.rate:               881.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          2196.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1675.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   621168.395 ±(99.9%) 40506.688 ops/s [Average]
[info]   (min, avg, max) = (608895.960, 621168.395, 631736.766), stdev = 10519.458
[info]   CI (99.9%): [580661.708, 661675.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   874.812 ±(99.9%) 51.207 MB/sec [Average]
[info]   (min, avg, max) = (854.305, 874.812, 888.565), stdev = 13.298
[info]   CI (99.9%): [823.605, 926.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2216.528 ±(99.9%) 81.477 B/op [Average]
[info]   (min, avg, max) = (2196.028, 2216.528, 2247.763), stdev = 21.159
[info]   CI (99.9%): [2135.051, 2298.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.445 ±(99.9%) 1157.847 MB/sec [Average]
[info]   (min, avg, max) = (671.477, 806.445, 1344.333), stdev = 300.689
[info]   CI (99.9%): [≈ 0, 1964.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2050.426 ±(99.9%) 3066.491 B/op [Average]
[info]   (min, avg, max) = (1675.259, 2050.426, 3474.483), stdev = 796.358
[info]   CI (99.9%): [≈ 0, 5116.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.98% complete, ETA 01:13:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467609.894 ops/s
[info] # Warmup Iteration   2: 718742.971 ops/s
[info] # Warmup Iteration   3: 681574.688 ops/s
[info] # Warmup Iteration   4: 735628.175 ops/s
[info] # Warmup Iteration   5: 726377.106 ops/s
[info] Iteration   1: 725361.315 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 726205.826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 724503.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 731746.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 733764.476 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   728316.301 ±(99.9%) 16013.023 ops/s [Average]
[info]   (min, avg, max) = (724503.366, 728316.301, 733764.476), stdev = 4158.531
[info]   CI (99.9%): [712303.277, 744329.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23400.523 ops/s
[info] # Warmup Iteration   2: 67493.413 ops/s
[info] # Warmup Iteration   3: 75187.794 ops/s
[info] # Warmup Iteration   4: 74415.343 ops/s
[info] # Warmup Iteration   5: 72684.176 ops/s
[info] Iteration   1: 73585.407 ops/s
[info]                  ·gc.alloc.rate:                   2111.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              45165.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42941.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 75267.257 ops/s
[info]                  ·gc.alloc.rate:                   2214.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              46296.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55825.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 75952.099 ops/s
[info]                  ·gc.alloc.rate:               2193.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          45443.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41459.086 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 75786.398 ops/s
[info]                  ·gc.alloc.rate:                   2204.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              45768.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41586.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 75708.237 ops/s
[info]                  ·gc.alloc.rate:                   2202.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              45776.536 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41744.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   75259.879 ±(99.9%) 3733.997 ops/s [Average]
[info]   (min, avg, max) = (73585.407, 75259.879, 75952.099), stdev = 969.707
[info]   CI (99.9%): [71525.883, 78993.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2185.239 ±(99.9%) 160.687 MB/sec [Average]
[info]   (min, avg, max) = (2111.852, 2185.239, 2214.748), stdev = 41.730
[info]   CI (99.9%): [2024.553, 2345.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45689.911 ±(99.9%) 1630.184 B/op [Average]
[info]   (min, avg, max) = (45165.443, 45689.911, 46296.073), stdev = 423.354
[info]   CI (99.9%): [44059.727, 47320.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.084 ±(99.9%) 1146.373 MB/sec [Average]
[info]   (min, avg, max) = (2000.969, 2138.084, 2670.613), stdev = 297.710
[info]   CI (99.9%): [991.710, 3284.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   44711.348 ±(99.9%) 24031.530 B/op [Average]
[info]   (min, avg, max) = (41459.086, 44711.348, 55825.254), stdev = 6240.912
[info]   CI (99.9%): [20679.819, 68742.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 6.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 4.080), stdev = 1.816
[info]   CI (99.9%): [≈ 0, 7.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.800 ±(99.9%) 149.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.800, 87.265), stdev = 38.833
[info]   CI (99.9%): [≈ 0, 167.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45.38% complete, ETA 01:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8210.162 ops/s
[info] # Warmup Iteration   2: 20216.509 ops/s
[info] # Warmup Iteration   3: 20307.742 ops/s
[info] # Warmup Iteration   4: 20340.621 ops/s
[info] # Warmup Iteration   5: 20443.720 ops/s
[info] Iteration   1: 20303.389 ops/s
[info]                  ·gc.alloc.rate:               777.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          60286.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51995.077 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 20532.490 ops/s
[info]                  ·gc.alloc.rate:               781.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          59916.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51443.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 20437.067 ops/s
[info]                  ·gc.alloc.rate:                   793.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              61082.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103390.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 20518.156 ops/s
[info]                  ·gc.alloc.rate:                   774.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              59393.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51501.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20512.057 ops/s
[info]                  ·gc.alloc.rate:                   773.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              59378.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51565.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   20460.632 ±(99.9%) 367.316 ops/s [Average]
[info]   (min, avg, max) = (20303.389, 20460.632, 20532.490), stdev = 95.391
[info]   CI (99.9%): [20093.315, 20827.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   780.243 ±(99.9%) 30.617 MB/sec [Average]
[info]   (min, avg, max) = (773.969, 780.243, 793.321), stdev = 7.951
[info]   CI (99.9%): [749.626, 810.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   60011.488 ±(99.9%) 2733.105 B/op [Average]
[info]   (min, avg, max) = (59378.646, 60011.488, 61082.957), stdev = 709.779
[info]   CI (99.9%): [57278.383, 62744.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   805.686 ±(99.9%) 1156.168 MB/sec [Average]
[info]   (min, avg, max) = (670.800, 805.686, 1342.794), stdev = 300.253
[info]   CI (99.9%): [≈ 0, 1961.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   61979.098 ±(99.9%) 89145.062 B/op [Average]
[info]   (min, avg, max) = (51443.335, 61979.098, 103390.486), stdev = 23150.689
[info]   CI (99.9%): [≈ 0, 151124.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.280 ±(99.9%) 5.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.280, 3.206), stdev = 1.340
[info]   CI (99.9%): [≈ 0, 6.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.58% complete, ETA 01:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3559.353 ops/s
[info] # Warmup Iteration   2: 13667.934 ops/s
[info] # Warmup Iteration   3: 15797.774 ops/s
[info] # Warmup Iteration   4: 15885.676 ops/s
[info] # Warmup Iteration   5: 16281.238 ops/s
[info] Iteration   1: 16252.430 ops/s
[info]                  ·gc.alloc.rate:                   878.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              85020.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129846.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 15768.664 ops/s
[info]                  ·gc.alloc.rate:               834.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          83289.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66948.772 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15493.171 ops/s
[info]                  ·gc.alloc.rate:               861.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          87526.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68141.200 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 16430.124 ops/s
[info]                  ·gc.alloc.rate:               865.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          82909.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64248.009 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15906.597 ops/s
[info]                  ·gc.alloc.rate:                   861.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              85184.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132859.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   15970.197 ±(99.9%) 1445.150 ops/s [Average]
[info]   (min, avg, max) = (15493.171, 15970.197, 16430.124), stdev = 375.301
[info]   CI (99.9%): [14525.047, 17415.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   860.233 ±(99.9%) 61.205 MB/sec [Average]
[info]   (min, avg, max) = (834.595, 860.233, 878.150), stdev = 15.895
[info]   CI (99.9%): [799.028, 921.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84786.008 ±(99.9%) 7070.225 B/op [Average]
[info]   (min, avg, max) = (82909.318, 84786.008, 87526.271), stdev = 1836.115
[info]   CI (99.9%): [77715.784, 91856.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   939.327 ±(99.9%) 1415.650 MB/sec [Average]
[info]   (min, avg, max) = (670.810, 939.327, 1342.965), stdev = 367.640
[info]   CI (99.9%): [≈ 0, 2354.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   92408.803 ±(99.9%) 137063.496 B/op [Average]
[info]   (min, avg, max) = (64248.009, 92408.803, 132859.608), stdev = 35594.955
[info]   CI (99.9%): [≈ 0, 229472.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.815 ±(99.9%) 4.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.815, 2.059), stdev = 1.116
[info]   CI (99.9%): [≈ 0, 5.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.78% complete, ETA 01:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5589.816 ops/s
[info] # Warmup Iteration   2: 15641.931 ops/s
[info] # Warmup Iteration   3: 17561.870 ops/s
[info] # Warmup Iteration   4: 17529.445 ops/s
[info] # Warmup Iteration   5: 17541.582 ops/s
[info] Iteration   1: 17579.624 ops/s
[info]                  ·gc.alloc.rate:               765.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          68524.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59751.658 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 17445.448 ops/s
[info]                  ·gc.alloc.rate:               767.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          69223.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60240.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 17482.213 ops/s
[info]                  ·gc.alloc.rate:                   763.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              68750.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60113.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17572.613 ops/s
[info]                  ·gc.alloc.rate:               767.415 MB/sec
[info]                  ·gc.alloc.rate.norm:          68724.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59868.344 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17477.391 ops/s
[info]                  ·gc.alloc.rate:                   777.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              70007.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120410.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17511.458 ±(99.9%) 233.906 ops/s [Average]
[info]   (min, avg, max) = (17445.448, 17511.458, 17579.624), stdev = 60.745
[info]   CI (99.9%): [17277.551, 17745.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   768.369 ±(99.9%) 20.540 MB/sec [Average]
[info]   (min, avg, max) = (763.784, 768.369, 777.527), stdev = 5.334
[info]   CI (99.9%): [747.829, 788.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69046.267 ±(99.9%) 2294.174 B/op [Average]
[info]   (min, avg, max) = (68524.462, 69046.267, 70007.987), stdev = 595.790
[info]   CI (99.9%): [66752.093, 71340.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801.832 ±(99.9%) 1152.659 MB/sec [Average]
[info]   (min, avg, max) = (667.675, 801.832, 1337.311), stdev = 299.342
[info]   CI (99.9%): [≈ 0, 1954.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72076.824 ±(99.9%) 104044.539 B/op [Average]
[info]   (min, avg, max) = (59751.658, 72076.824, 120410.498), stdev = 27020.036
[info]   CI (99.9%): [≈ 0, 176121.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.499 ±(99.9%) 7.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.499, 3.749), stdev = 2.053
[info]   CI (99.9%): [≈ 0, 9.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.98% complete, ETA 01:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57991.720 ops/s
[info] # Warmup Iteration   2: 121428.040 ops/s
[info] # Warmup Iteration   3: 127757.845 ops/s
[info] # Warmup Iteration   4: 130172.707 ops/s
[info] # Warmup Iteration   5: 129968.452 ops/s
[info] Iteration   1: 130076.373 ops/s
[info]                  ·gc.alloc.rate:                   342.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              4140.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6189.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 130010.793 ops/s
[info]                  ·gc.alloc.rate:      336.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 4072.739 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 129906.789 ops/s
[info]                  ·gc.alloc.rate:               343.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          4165.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6197.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 130320.374 ops/s
[info]                  ·gc.alloc.rate:      327.262 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 129857.214 ops/s
[info]                  ·gc.alloc.rate:                   346.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              4198.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8133.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   130034.309 ±(99.9%) 698.920 ops/s [Average]
[info]   (min, avg, max) = (129857.214, 130034.309, 130320.374), stdev = 181.507
[info]   CI (99.9%): [129335.388, 130733.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   339.264 ±(99.9%) 29.424 MB/sec [Average]
[info]   (min, avg, max) = (327.262, 339.264, 346.476), stdev = 7.641
[info]   CI (99.9%): [309.840, 368.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4105.872 ±(99.9%) 376.014 B/op [Average]
[info]   (min, avg, max) = (3952.003, 4105.872, 4198.885), stdev = 97.650
[info]   CI (99.9%): [3729.858, 4481.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.889 ±(99.9%) 1217.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.889, 671.170), stdev = 316.144
[info]   CI (99.9%): [≈ 0, 1556.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4104.309 ±(99.9%) 14746.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4104.309, 8133.784), stdev = 3829.492
[info]   CI (99.9%): [≈ 0, 18850.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.101 ±(99.9%) 0.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.252), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.18% complete, ETA 01:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2156.115 ops/s
[info] # Warmup Iteration   2: 10586.406 ops/s
[info] # Warmup Iteration   3: 14206.495 ops/s
[info] # Warmup Iteration   4: 13895.485 ops/s
[info] # Warmup Iteration   5: 13898.267 ops/s
[info] Iteration   1: 14226.302 ops/s
[info]                  ·gc.alloc.rate:               1088.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          120423.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73913.959 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 14445.429 ops/s
[info]                  ·gc.alloc.rate:               1125.023 MB/sec
[info]                  ·gc.alloc.rate.norm:          122559.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145649.667 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 14447.329 ops/s
[info]                  ·gc.alloc.rate:               1102.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          120077.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72856.076 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 14167.652 ops/s
[info]                  ·gc.alloc.rate:               1112.181 MB/sec
[info]                  ·gc.alloc.rate.norm:          123539.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148654.942 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 14448.958 ops/s
[info]                  ·gc.alloc.rate:                   1121.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              122141.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145873.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14347.134 ±(99.9%) 533.851 ops/s [Average]
[info]   (min, avg, max) = (14167.652, 14347.134, 14448.958), stdev = 138.639
[info]   CI (99.9%): [13813.283, 14880.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1109.921 ±(99.9%) 56.999 MB/sec [Average]
[info]   (min, avg, max) = (1088.638, 1109.921, 1125.023), stdev = 14.802
[info]   CI (99.9%): [1052.922, 1166.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   121748.157 ±(99.9%) 5635.297 B/op [Average]
[info]   (min, avg, max) = (120077.565, 121748.157, 123539.361), stdev = 1463.469
[info]   CI (99.9%): [116112.860, 127383.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.323 ±(99.9%) 1412.441 MB/sec [Average]
[info]   (min, avg, max) = (668.189, 1070.323, 1339.334), stdev = 366.806
[info]   CI (99.9%): [≈ 0, 2482.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117389.604 ±(99.9%) 154756.184 B/op [Average]
[info]   (min, avg, max) = (72856.076, 117389.604, 148654.942), stdev = 40189.690
[info]   CI (99.9%): [≈ 0, 272145.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 6.457 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.749), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 7.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81.673 ±(99.9%) 703.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.673, 408.365), stdev = 182.627
[info]   CI (99.9%): [≈ 0, 784.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46.39% complete, ETA 01:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4422.404 ops/s
[info] # Warmup Iteration   2: 15042.502 ops/s
[info] # Warmup Iteration   3: 15396.186 ops/s
[info] # Warmup Iteration   4: 16008.964 ops/s
[info] # Warmup Iteration   5: 16036.627 ops/s
[info] Iteration   1: 15553.249 ops/s
[info]                  ·gc.alloc.rate:               760.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          76943.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67903.350 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16076.592 ops/s
[info]                  ·gc.alloc.rate:               779.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          76293.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65731.630 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15983.734 ops/s
[info]                  ·gc.alloc.rate:                   778.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              76617.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66114.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16036.177 ops/s
[info]                  ·gc.alloc.rate:               804.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          78954.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131921.843 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 16054.397 ops/s
[info]                  ·gc.alloc.rate:                   779.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              76381.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65886.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   15940.830 ±(99.9%) 844.686 ops/s [Average]
[info]   (min, avg, max) = (15553.249, 15940.830, 16076.592), stdev = 219.362
[info]   CI (99.9%): [15096.144, 16785.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   780.400 ±(99.9%) 60.304 MB/sec [Average]
[info]   (min, avg, max) = (760.661, 780.400, 804.567), stdev = 15.661
[info]   CI (99.9%): [720.095, 840.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   77038.214 ±(99.9%) 4237.857 B/op [Average]
[info]   (min, avg, max) = (76293.516, 77038.214, 78954.793), stdev = 1100.558
[info]   CI (99.9%): [72800.357, 81276.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   806.147 ±(99.9%) 1158.443 MB/sec [Average]
[info]   (min, avg, max) = (671.289, 806.147, 1344.313), stdev = 300.844
[info]   CI (99.9%): [≈ 0, 1964.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   79511.563 ±(99.9%) 112867.201 B/op [Average]
[info]   (min, avg, max) = (65731.630, 79511.563, 131921.843), stdev = 29311.254
[info]   CI (99.9%): [≈ 0, 192378.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.228 ±(99.9%) 7.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.228, 4.099), stdev = 1.832
[info]   CI (99.9%): [≈ 0, 8.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:11:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19205.127 ops/s
[info] # Warmup Iteration   2: 43302.900 ops/s
[info] # Warmup Iteration   3: 47050.439 ops/s
[info] # Warmup Iteration   4: 47560.020 ops/s
[info] # Warmup Iteration   5: 47702.067 ops/s
[info] Iteration   1: 46774.516 ops/s
[info]                  ·gc.alloc.rate:                   1429.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              48103.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45139.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 46499.651 ops/s
[info]                  ·gc.alloc.rate:                   1444.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              48884.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68156.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 46663.693 ops/s
[info]                  ·gc.alloc.rate:                   1448.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              48860.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45292.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 46618.177 ops/s
[info]                  ·gc.alloc.rate:                   1432.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              48375.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45247.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 47543.223 ops/s
[info]                  ·gc.alloc.rate:                   1474.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              48813.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44320.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   46819.852 ±(99.9%) 1602.660 ops/s [Average]
[info]   (min, avg, max) = (46499.651, 46819.852, 47543.223), stdev = 416.206
[info]   CI (99.9%): [45217.192, 48422.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1446.125 ±(99.9%) 68.602 MB/sec [Average]
[info]   (min, avg, max) = (1429.714, 1446.125, 1474.701), stdev = 17.816
[info]   CI (99.9%): [1377.523, 1514.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48607.385 ±(99.9%) 1349.745 B/op [Average]
[info]   (min, avg, max) = (48103.104, 48607.385, 48884.140), stdev = 350.524
[info]   CI (99.9%): [47257.640, 49957.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.564 ±(99.9%) 1158.955 MB/sec [Average]
[info]   (min, avg, max) = (1338.966, 1475.564, 2013.961), stdev = 300.977
[info]   CI (99.9%): [316.609, 2634.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49631.282 ±(99.9%) 39907.111 B/op [Average]
[info]   (min, avg, max) = (44320.935, 49631.282, 68156.989), stdev = 10363.750
[info]   CI (99.9%): [9724.171, 89538.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.184 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.749, 3.622), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 6.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25.273 ±(99.9%) 208.573 B/op [Average]
[info]   (min, avg, max) = (0.689, 25.273, 122.161), stdev = 54.166
[info]   CI (99.9%): [≈ 0, 233.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.79% complete, ETA 01:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28006.465 ops/s
[info] # Warmup Iteration   2: 74835.684 ops/s
[info] # Warmup Iteration   3: 77525.905 ops/s
[info] # Warmup Iteration   4: 77514.533 ops/s
[info] # Warmup Iteration   5: 77248.311 ops/s
[info] Iteration   1: 76043.180 ops/s
[info]                  ·gc.alloc.rate:                   1608.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              33298.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27725.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 77376.921 ops/s
[info]                  ·gc.alloc.rate:                   1636.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              33278.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27266.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 76792.508 ops/s
[info]                  ·gc.alloc.rate:                   1636.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              33537.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41153.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 75614.677 ops/s
[info]                  ·gc.alloc.rate:               1611.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          33533.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27811.554 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 77678.258 ops/s
[info]                  ·gc.alloc.rate:                   1642.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              33276.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27074.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   76701.109 ±(99.9%) 3353.103 ops/s [Average]
[info]   (min, avg, max) = (75614.677, 76701.109, 77678.258), stdev = 870.790
[info]   CI (99.9%): [73348.006, 80054.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1627.103 ±(99.9%) 60.541 MB/sec [Average]
[info]   (min, avg, max) = (1608.977, 1627.103, 1642.456), stdev = 15.722
[info]   CI (99.9%): [1566.562, 1687.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33384.913 ±(99.9%) 529.803 B/op [Average]
[info]   (min, avg, max) = (33276.771, 33384.913, 33537.222), stdev = 137.588
[info]   CI (99.9%): [32855.110, 33914.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.242 ±(99.9%) 1153.695 MB/sec [Average]
[info]   (min, avg, max) = (1336.309, 1472.242, 2008.191), stdev = 299.611
[info]   CI (99.9%): [318.547, 2625.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   30206.288 ±(99.9%) 23593.825 B/op [Average]
[info]   (min, avg, max) = (27074.132, 30206.288, 41153.151), stdev = 6127.241
[info]   CI (99.9%): [6612.464, 53800.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.742 ±(99.9%) 5.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.742, 3.088), stdev = 1.330
[info]   CI (99.9%): [≈ 0, 5.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.117 ±(99.9%) 104.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.117, 62.799), stdev = 27.046
[info]   CI (99.9%): [≈ 0, 119.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.99% complete, ETA 01:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181452.813 ops/s
[info] # Warmup Iteration   2: 307764.506 ops/s
[info] # Warmup Iteration   3: 324189.266 ops/s
[info] # Warmup Iteration   4: 329622.424 ops/s
[info] # Warmup Iteration   5: 325041.560 ops/s
[info] Iteration   1: 327547.250 ops/s
[info]                  ·gc.alloc.rate:               643.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          3093.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3224.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 322478.380 ops/s
[info]                  ·gc.alloc.rate:               655.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          3200.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3275.337 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 327759.278 ops/s
[info]                  ·gc.alloc.rate:               651.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          3129.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3224.124 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 329968.494 ops/s
[info]                  ·gc.alloc.rate:               646.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          3082.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3202.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 318148.709 ops/s
[info]                  ·gc.alloc.rate:               627.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          3101.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3324.890 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   325180.422 ±(99.9%) 18459.412 ops/s [Average]
[info]   (min, avg, max) = (318148.709, 325180.422, 329968.494), stdev = 4793.851
[info]   CI (99.9%): [306721.010, 343639.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   644.961 ±(99.9%) 42.496 MB/sec [Average]
[info]   (min, avg, max) = (627.076, 644.961, 655.793), stdev = 11.036
[info]   CI (99.9%): [602.464, 687.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3121.511 ±(99.9%) 182.697 B/op [Average]
[info]   (min, avg, max) = (3082.054, 3121.511, 3200.324), stdev = 47.446
[info]   CI (99.9%): [2938.813, 3304.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.494 ±(99.9%) 1.567 MB/sec [Average]
[info]   (min, avg, max) = (671.162, 671.494, 672.160), stdev = 0.407
[info]   CI (99.9%): [669.927, 673.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3250.313 ±(99.9%) 190.713 B/op [Average]
[info]   (min, avg, max) = (3202.574, 3250.313, 3324.890), stdev = 49.528
[info]   CI (99.9%): [3059.600, 3441.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.19% complete, ETA 01:10:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228533.079 ops/s
[info] # Warmup Iteration   2: 345781.896 ops/s
[info] # Warmup Iteration   3: 356522.512 ops/s
[info] # Warmup Iteration   4: 356163.093 ops/s
[info] # Warmup Iteration   5: 355921.002 ops/s
[info] Iteration   1: 356565.444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 353307.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 354777.241 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 347919.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 356902.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   353894.543 ±(99.9%) 14017.917 ops/s [Average]
[info]   (min, avg, max) = (347919.262, 353894.543, 356902.767), stdev = 3640.409
[info]   CI (99.9%): [339876.625, 367912.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.39% complete, ETA 01:10:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24726.329 ops/s
[info] # Warmup Iteration   2: 59409.419 ops/s
[info] # Warmup Iteration   3: 67699.401 ops/s
[info] # Warmup Iteration   4: 67836.067 ops/s
[info] # Warmup Iteration   5: 68147.754 ops/s
[info] Iteration   1: 67962.001 ops/s
[info]                  ·gc.alloc.rate:                   1551.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              35917.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31067.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 68073.099 ops/s
[info]                  ·gc.alloc.rate:                   1562.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              36132.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31016.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 66809.414 ops/s
[info]                  ·gc.alloc.rate:                   1562.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              36786.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47405.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 67459.881 ops/s
[info]                  ·gc.alloc.rate:                   1551.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              36206.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31220.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 68123.054 ops/s
[info]                  ·gc.alloc.rate:               1560.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          36044.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30902.028 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   67685.490 ±(99.9%) 2140.980 ops/s [Average]
[info]   (min, avg, max) = (66809.414, 67685.490, 68123.054), stdev = 556.006
[info]   CI (99.9%): [65544.510, 69826.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1557.676 ±(99.9%) 22.027 MB/sec [Average]
[info]   (min, avg, max) = (1551.079, 1557.676, 1562.977), stdev = 5.720
[info]   CI (99.9%): [1535.649, 1579.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36217.576 ±(99.9%) 1293.226 B/op [Average]
[info]   (min, avg, max) = (35917.019, 36217.576, 36786.507), stdev = 335.847
[info]   CI (99.9%): [34924.350, 37510.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.438 ±(99.9%) 1159.331 MB/sec [Average]
[info]   (min, avg, max) = (1337.663, 1474.438, 2013.006), stdev = 301.075
[info]   CI (99.9%): [315.108, 2633.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34322.275 ±(99.9%) 28165.128 B/op [Average]
[info]   (min, avg, max) = (30902.028, 34322.275, 47405.057), stdev = 7314.394
[info]   CI (99.9%): [6157.146, 62487.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.790), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 7.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.624 ±(99.9%) 152.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.624, 89.247), stdev = 39.490
[info]   CI (99.9%): [≈ 0, 170.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47.59% complete, ETA 01:10:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7987.020 ops/s
[info] # Warmup Iteration   2: 14670.690 ops/s
[info] # Warmup Iteration   3: 15248.427 ops/s
[info] # Warmup Iteration   4: 15218.193 ops/s
[info] # Warmup Iteration   5: 15111.542 ops/s
[info] Iteration   1: 15189.301 ops/s
[info]                  ·gc.alloc.rate:               622.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          64453.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69573.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15241.318 ops/s
[info]                  ·gc.alloc.rate:               624.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          64498.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69336.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15062.078 ops/s
[info]                  ·gc.alloc.rate:                   631.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              66022.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70195.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.700 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15220.445 ops/s
[info]                  ·gc.alloc.rate:               628.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          64928.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69461.961 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15220.017 ops/s
[info]                  ·gc.alloc.rate:                   625.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              64627.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69500.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   15186.632 ±(99.9%) 277.468 ops/s [Average]
[info]   (min, avg, max) = (15062.078, 15186.632, 15241.318), stdev = 72.057
[info]   CI (99.9%): [14909.164, 15464.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   626.353 ±(99.9%) 14.494 MB/sec [Average]
[info]   (min, avg, max) = (622.093, 626.353, 631.948), stdev = 3.764
[info]   CI (99.9%): [611.860, 640.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   64906.006 ±(99.9%) 2507.295 B/op [Average]
[info]   (min, avg, max) = (64453.002, 64906.006, 66022.512), stdev = 651.137
[info]   CI (99.9%): [62398.711, 67413.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.794 ±(99.9%) 1.003 MB/sec [Average]
[info]   (min, avg, max) = (671.517, 671.794, 672.153), stdev = 0.260
[info]   CI (99.9%): [670.791, 672.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   69613.641 ±(99.9%) 1294.711 B/op [Average]
[info]   (min, avg, max) = (69336.435, 69613.641, 70195.081), stdev = 336.232
[info]   CI (99.9%): [68318.930, 70908.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.601 ±(99.9%) 14.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.601, 8.700), stdev = 3.886
[info]   CI (99.9%): [≈ 0, 17.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.79% complete, ETA 01:09:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49086.327 ops/s
[info] # Warmup Iteration   2: 127289.027 ops/s
[info] # Warmup Iteration   3: 139917.332 ops/s
[info] # Warmup Iteration   4: 142977.272 ops/s
[info] # Warmup Iteration   5: 145863.388 ops/s
[info] Iteration   1: 145773.911 ops/s
[info]                  ·gc.alloc.rate:                   1904.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              20558.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21769.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 146112.248 ops/s
[info]                  ·gc.alloc.rate:                   1894.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              20399.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14464.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.399 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 143231.675 ops/s
[info]                  ·gc.alloc.rate:                   1898.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              20859.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22082.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 146595.535 ops/s
[info]                  ·gc.alloc.rate:                   1925.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              20675.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21562.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 146829.135 ops/s
[info]                  ·gc.alloc.rate:               1944.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          20833.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21541.290 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   145708.501 ±(99.9%) 5561.684 ops/s [Average]
[info]   (min, avg, max) = (143231.675, 145708.501, 146829.135), stdev = 1444.352
[info]   CI (99.9%): [140146.817, 151270.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1913.557 ±(99.9%) 81.010 MB/sec [Average]
[info]   (min, avg, max) = (1894.150, 1913.557, 1944.283), stdev = 21.038
[info]   CI (99.9%): [1832.548, 1994.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20665.486 ±(99.9%) 741.587 B/op [Average]
[info]   (min, avg, max) = (20399.314, 20665.486, 20859.529), stdev = 192.588
[info]   CI (99.9%): [19923.900, 21407.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.765 ±(99.9%) 1150.968 MB/sec [Average]
[info]   (min, avg, max) = (1343.099, 1877.765, 2016.518), stdev = 298.903
[info]   CI (99.9%): [726.798, 3028.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20284.103 ±(99.9%) 12554.695 B/op [Average]
[info]   (min, avg, max) = (14464.701, 20284.103, 22082.912), stdev = 3260.415
[info]   CI (99.9%): [7729.408, 32838.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.547 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.810), stdev = 1.181
[info]   CI (99.9%): [≈ 0, 5.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.139 ±(99.9%) 49.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.139, 30.340), stdev = 12.744
[info]   CI (99.9%): [≈ 0, 57.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.99% complete, ETA 01:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.654 ops/s
[info] # Warmup Iteration   2: 795376.072 ops/s
[info] # Warmup Iteration   3: 838007.426 ops/s
[info] # Warmup Iteration   4: 851326.020 ops/s
[info] # Warmup Iteration   5: 854413.436 ops/s
[info] Iteration   1: 857987.112 ops/s
[info]                  ·gc.alloc.rate:      487.636 MB/sec
[info]                  ·gc.alloc.rate.norm: 894.404 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 853958.814 ops/s
[info]                  ·gc.alloc.rate:               484.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1226.422 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 855900.199 ops/s
[info]                  ·gc.alloc.rate:                   494.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              909.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 853503.063 ops/s
[info]                  ·gc.alloc.rate:                   493.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              908.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 857797.399 ops/s
[info]                  ·gc.alloc.rate:      475.319 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   855829.317 ±(99.9%) 8041.462 ops/s [Average]
[info]   (min, avg, max) = (853503.063, 855829.317, 857987.112), stdev = 2088.342
[info]   CI (99.9%): [847787.856, 863870.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   487.157 ±(99.9%) 29.849 MB/sec [Average]
[info]   (min, avg, max) = (475.319, 487.157, 494.917), stdev = 7.752
[info]   CI (99.9%): [457.308, 517.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   895.749 ±(99.9%) 59.154 B/op [Average]
[info]   (min, avg, max) = (872.001, 895.749, 909.960), stdev = 15.362
[info]   CI (99.9%): [836.595, 954.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.472 ±(99.9%) 1404.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.472, 666.349), stdev = 364.666
[info]   CI (99.9%): [≈ 0, 1803.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   735.666 ±(99.9%) 2585.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 735.666, 1228.314), stdev = 671.570
[info]   CI (99.9%): [≈ 0, 3321.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.077), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.19% complete, ETA 01:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106318.417 ops/s
[info] # Warmup Iteration   2: 357698.287 ops/s
[info] # Warmup Iteration   3: 399172.165 ops/s
[info] # Warmup Iteration   4: 386467.162 ops/s
[info] # Warmup Iteration   5: 399996.307 ops/s
[info] Iteration   1: 399724.914 ops/s
[info]                  ·gc.alloc.rate:               412.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          1622.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2014.243 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 398778.975 ops/s
[info]                  ·gc.alloc.rate:               410.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          1619.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2019.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 401136.500 ops/s
[info]                  ·gc.alloc.rate:      399.683 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 400649.772 ops/s
[info]                  ·gc.alloc.rate:                   423.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              1665.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2617.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 401116.530 ops/s
[info]                  ·gc.alloc.rate:               419.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2615.023 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   400281.338 ±(99.9%) 3913.329 ops/s [Average]
[info]   (min, avg, max) = (398778.975, 400281.338, 401136.500), stdev = 1016.279
[info]   CI (99.9%): [396368.010, 404194.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   413.219 ±(99.9%) 36.243 MB/sec [Average]
[info]   (min, avg, max) = (399.683, 413.219, 423.996), stdev = 9.412
[info]   CI (99.9%): [376.976, 449.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1624.602 ±(99.9%) 141.987 B/op [Average]
[info]   (min, avg, max) = (1568.001, 1624.602, 1665.463), stdev = 36.874
[info]   CI (99.9%): [1482.615, 1766.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.242 ±(99.9%) 1057.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.242, 666.509), stdev = 274.578
[info]   CI (99.9%): [≈ 0, 1528.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1853.235 ±(99.9%) 4153.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1853.235, 2617.901), stdev = 1078.531
[info]   CI (99.9%): [≈ 0, 6006.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.39% complete, ETA 01:09:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460115.099 ops/s
[info] # Warmup Iteration   2: 1055918.471 ops/s
[info] # Warmup Iteration   3: 1106239.154 ops/s
[info] # Warmup Iteration   4: 1110104.032 ops/s
[info] # Warmup Iteration   5: 1107834.131 ops/s
[info] Iteration   1: 1113232.288 ops/s
[info]                  ·gc.alloc.rate:               394.595 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 723.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1111886.330 ops/s
[info]                  ·gc.alloc.rate:               407.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          577.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 724.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1159898.185 ops/s
[info]                  ·gc.alloc.rate:      400.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1117374.043 ops/s
[info]                  ·gc.alloc.rate:               405.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          570.606 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.380 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1109418.985 ops/s
[info]                  ·gc.alloc.rate:               408.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          579.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 951.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1122361.966 ±(99.9%) 81558.643 ops/s [Average]
[info]   (min, avg, max) = (1109418.985, 1122361.966, 1159898.185), stdev = 21180.521
[info]   CI (99.9%): [1040803.322, 1203920.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   403.487 ±(99.9%) 22.395 MB/sec [Average]
[info]   (min, avg, max) = (394.595, 403.487, 408.675), stdev = 5.816
[info]   CI (99.9%): [381.092, 425.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   565.906 ±(99.9%) 57.441 B/op [Average]
[info]   (min, avg, max) = (544.000, 565.906, 579.737), stdev = 14.917
[info]   CI (99.9%): [508.466, 623.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   472.893 ±(99.9%) 1062.953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.893, 670.702), stdev = 276.045
[info]   CI (99.9%): [≈ 0, 1535.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   668.584 ±(99.9%) 1502.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 668.584, 951.148), stdev = 390.188
[info]   CI (99.9%): [≈ 0, 2171.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.59% complete, ETA 01:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4342.212 ops/s
[info] # Warmup Iteration   2: 69648.140 ops/s
[info] # Warmup Iteration   3: 75726.673 ops/s
[info] # Warmup Iteration   4: 76181.253 ops/s
[info] # Warmup Iteration   5: 76895.855 ops/s
[info] Iteration   1: 78023.243 ops/s
[info]                  ·gc.alloc.rate:                   3142.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              63384.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3334.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67250.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.519 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 78776.663 ops/s
[info]                  ·gc.alloc.rate:                   3172.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              63370.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2670.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53357.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 78918.176 ops/s
[info]                  ·gc.alloc.rate:               3205.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          63915.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3348.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66773.092 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 78877.799 ops/s
[info]                  ·gc.alloc.rate:               3177.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          63397.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53640.904 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 78317.418 ops/s
[info]                  ·gc.alloc.rate:               3183.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          63964.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3372.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67758.013 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   78582.660 ±(99.9%) 1516.753 ops/s [Average]
[info]   (min, avg, max) = (78023.243, 78582.660, 78918.176), stdev = 393.896
[info]   CI (99.9%): [77065.906, 80099.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3176.219 ±(99.9%) 87.031 MB/sec [Average]
[info]   (min, avg, max) = (3142.577, 3176.219, 3205.226), stdev = 22.602
[info]   CI (99.9%): [3089.189, 3263.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63606.462 ±(99.9%) 1173.925 B/op [Average]
[info]   (min, avg, max) = (63370.176, 63606.462, 63964.354), stdev = 304.864
[info]   CI (99.9%): [62432.537, 64780.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3082.921 ±(99.9%) 1418.150 MB/sec [Average]
[info]   (min, avg, max) = (2670.988, 3082.921, 3372.225), stdev = 368.289
[info]   CI (99.9%): [1664.771, 4501.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61755.939 ±(99.9%) 29056.796 B/op [Average]
[info]   (min, avg, max) = (53357.686, 61755.939, 67758.013), stdev = 7545.958
[info]   CI (99.9%): [32699.143, 90812.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.187), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.252 ±(99.9%) 6.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.252, 3.743), stdev = 1.769
[info]   CI (99.9%): [≈ 0, 8.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48.80% complete, ETA 01:08:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139414.561 ops/s
[info] # Warmup Iteration   2: 255405.292 ops/s
[info] # Warmup Iteration   3: 276085.679 ops/s
[info] # Warmup Iteration   4: 286005.889 ops/s
[info] # Warmup Iteration   5: 285566.120 ops/s
[info] Iteration   1: 285907.105 ops/s
[info]                  ·gc.alloc.rate:               1412.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          7775.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7403.551 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 281172.640 ops/s
[info]                  ·gc.alloc.rate:                   1412.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              7905.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7531.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 282252.573 ops/s
[info]                  ·gc.alloc.rate:                   1404.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              7828.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7502.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 285954.077 ops/s
[info]                  ·gc.alloc.rate:                   1436.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              7903.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7398.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 285473.751 ops/s
[info]                  ·gc.alloc.rate:               1419.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          7827.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7400.088 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   284152.029 ±(99.9%) 8729.867 ops/s [Average]
[info]   (min, avg, max) = (281172.640, 284152.029, 285954.077), stdev = 2267.119
[info]   CI (99.9%): [275422.162, 292881.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1417.106 ±(99.9%) 46.263 MB/sec [Average]
[info]   (min, avg, max) = (1404.015, 1417.106, 1436.079), stdev = 12.014
[info]   CI (99.9%): [1370.843, 1463.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7848.366 ±(99.9%) 214.499 B/op [Average]
[info]   (min, avg, max) = (7775.693, 7848.366, 7905.886), stdev = 55.705
[info]   CI (99.9%): [7633.867, 8062.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.630 ±(99.9%) 5.535 MB/sec [Average]
[info]   (min, avg, max) = (1342.329, 1344.630, 1346.015), stdev = 1.437
[info]   CI (99.9%): [1339.095, 1350.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7447.257 ±(99.9%) 249.107 B/op [Average]
[info]   (min, avg, max) = (7398.228, 7447.257, 7531.615), stdev = 64.692
[info]   CI (99.9%): [7198.149, 7696.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 4.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 2.748), stdev = 1.184
[info]   CI (99.9%): [≈ 0, 5.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.913 ±(99.9%) 25.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.913, 15.321), stdev = 6.602
[info]   CI (99.9%): [≈ 0, 29.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.00% complete, ETA 01:08:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96677.888 ops/s
[info] # Warmup Iteration   2: 244800.660 ops/s
[info] # Warmup Iteration   3: 257630.386 ops/s
[info] # Warmup Iteration   4: 268477.477 ops/s
[info] # Warmup Iteration   5: 270981.198 ops/s
[info] Iteration   1: 270141.493 ops/s
[info]                  ·gc.alloc.rate:                   1646.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              9590.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11727.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 269566.462 ops/s
[info]                  ·gc.alloc.rate:                   1628.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              9505.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7842.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 270572.176 ops/s
[info]                  ·gc.alloc.rate:                   1634.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              9506.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7805.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 269422.778 ops/s
[info]                  ·gc.alloc.rate:                   1663.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              9719.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11735.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 270514.644 ops/s
[info]                  ·gc.alloc.rate:               1646.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          9577.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7789.563 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   270043.510 ±(99.9%) 2041.149 ops/s [Average]
[info]   (min, avg, max) = (269422.778, 270043.510, 270572.176), stdev = 530.080
[info]   CI (99.9%): [268002.362, 272084.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1643.836 ±(99.9%) 52.696 MB/sec [Average]
[info]   (min, avg, max) = (1628.173, 1643.836, 1663.953), stdev = 13.685
[info]   CI (99.9%): [1591.140, 1696.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9579.809 ±(99.9%) 337.065 B/op [Average]
[info]   (min, avg, max) = (9505.114, 9579.809, 9719.651), stdev = 87.535
[info]   CI (99.9%): [9242.744, 9916.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.332 ±(99.9%) 1412.368 MB/sec [Average]
[info]   (min, avg, max) = (1338.960, 1609.332, 2013.171), stdev = 366.787
[info]   CI (99.9%): [196.965, 3021.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9380.232 ±(99.9%) 8266.075 B/op [Average]
[info]   (min, avg, max) = (7789.563, 9380.232, 11735.584), stdev = 2146.674
[info]   CI (99.9%): [1114.156, 17646.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.039), stdev = 1.321
[info]   CI (99.9%): [≈ 0, 5.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.058 ±(99.9%) 29.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.058, 17.744), stdev = 7.711
[info]   CI (99.9%): [≈ 0, 33.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 8.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.20% complete, ETA 01:07:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.659 ops/s
[info] # Warmup Iteration   2: 1171115.689 ops/s
[info] # Warmup Iteration   3: 1204949.472 ops/s
[info] # Warmup Iteration   4: 1248581.111 ops/s
[info] # Warmup Iteration   5: 1255189.829 ops/s
[info] Iteration   1: 1246289.854 ops/s
[info]                  ·gc.alloc.rate:                   431.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              545.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1238581.427 ops/s
[info]                  ·gc.alloc.rate:               434.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 844.773 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1224427.383 ops/s
[info]                  ·gc.alloc.rate:      417.284 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.335 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1249836.615 ops/s
[info]                  ·gc.alloc.rate:                   441.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              556.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     837.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1249304.360 ops/s
[info]                  ·gc.alloc.rate:               448.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 837.929 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1241687.928 ±(99.9%) 40985.652 ops/s [Average]
[info]   (min, avg, max) = (1224427.383, 1241687.928, 1249836.615), stdev = 10643.844
[info]   CI (99.9%): [1200702.275, 1282673.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   434.676 ±(99.9%) 44.880 MB/sec [Average]
[info]   (min, avg, max) = (417.284, 434.676, 448.112), stdev = 11.655
[info]   CI (99.9%): [389.796, 479.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   550.835 ±(99.9%) 41.345 B/op [Average]
[info]   (min, avg, max) = (536.335, 550.835, 564.461), stdev = 10.737
[info]   CI (99.9%): [509.490, 592.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501.335 ±(99.9%) 1109.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.335, 665.213), stdev = 288.011
[info]   CI (99.9%): [≈ 0, 1610.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   633.185 ±(99.9%) 1400.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 633.185, 844.773), stdev = 363.792
[info]   CI (99.9%): [≈ 0, 2034.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.40% complete, ETA 01:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309501.553 ops/s
[info] # Warmup Iteration   2: 1458401.292 ops/s
[info] # Warmup Iteration   3: 1530019.050 ops/s
[info] # Warmup Iteration   4: 1550080.638 ops/s
[info] # Warmup Iteration   5: 1547356.928 ops/s
[info] Iteration   1: 1554568.307 ops/s
[info]                  ·gc.alloc.rate:                   931.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1534355.202 ops/s
[info]                  ·gc.alloc.rate:               916.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          939.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 685.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1496141.514 ops/s
[info]                  ·gc.alloc.rate:                   907.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              955.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1407.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1525943.533 ops/s
[info]                  ·gc.alloc.rate:               907.895 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 690.454 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1546531.729 ops/s
[info]                  ·gc.alloc.rate:                   929.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              946.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1531508.057 ±(99.9%) 87116.264 ops/s [Average]
[info]   (min, avg, max) = (1496141.514, 1531508.057, 1554568.307), stdev = 22623.817
[info]   CI (99.9%): [1444391.793, 1618624.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   918.681 ±(99.9%) 43.937 MB/sec [Average]
[info]   (min, avg, max) = (907.895, 918.681, 931.391), stdev = 11.410
[info]   CI (99.9%): [874.744, 962.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   944.066 ±(99.9%) 27.484 B/op [Average]
[info]   (min, avg, max) = (936.325, 944.066, 955.031), stdev = 7.137
[info]   CI (99.9%): [916.582, 971.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.590 ±(99.9%) 1151.838 MB/sec [Average]
[info]   (min, avg, max) = (668.172, 802.590, 1337.687), stdev = 299.129
[info]   CI (99.9%): [≈ 0, 1954.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   828.091 ±(99.9%) 1246.316 B/op [Average]
[info]   (min, avg, max) = (676.419, 828.091, 1407.006), stdev = 323.664
[info]   CI (99.9%): [≈ 0, 2074.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.044), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.60% complete, ETA 01:07:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 818332.797 ops/s
[info] # Warmup Iteration   2: 1801167.856 ops/s
[info] # Warmup Iteration   3: 1862074.755 ops/s
[info] # Warmup Iteration   4: 1856016.670 ops/s
[info] # Warmup Iteration   5: 1875850.401 ops/s
[info] Iteration   1: 1887667.192 ops/s
[info]                  ·gc.alloc.rate:                   661.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     559.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1809698.236 ops/s
[info]                  ·gc.alloc.rate:               642.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          558.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 583.089 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1877601.267 ops/s
[info]                  ·gc.alloc.rate:                   659.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              552.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     562.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1799858.269 ops/s
[info]                  ·gc.alloc.rate:               631.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 586.839 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1802879.317 ops/s
[info]                  ·gc.alloc.rate:               631.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          551.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 586.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1835540.856 ±(99.9%) 166672.146 ops/s [Average]
[info]   (min, avg, max) = (1799858.269, 1835540.856, 1887667.192), stdev = 43284.227
[info]   CI (99.9%): [1668868.710, 2002213.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   645.159 ±(99.9%) 56.202 MB/sec [Average]
[info]   (min, avg, max) = (631.317, 645.159, 661.451), stdev = 14.595
[info]   CI (99.9%): [588.957, 701.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   553.156 ±(99.9%) 12.005 B/op [Average]
[info]   (min, avg, max) = (551.165, 553.156, 558.651), stdev = 3.118
[info]   CI (99.9%): [541.150, 565.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.973 ±(99.9%) 1.635 MB/sec [Average]
[info]   (min, avg, max) = (670.493, 670.973, 671.473), stdev = 0.425
[info]   CI (99.9%): [669.338, 672.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   575.528 ±(99.9%) 52.335 B/op [Average]
[info]   (min, avg, max) = (559.027, 575.528, 586.839), stdev = 13.591
[info]   CI (99.9%): [523.193, 627.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.80% complete, ETA 01:07:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1164748.272 ops/s
[info] # Warmup Iteration   2: 2012807.384 ops/s
[info] # Warmup Iteration   3: 2047820.327 ops/s
[info] # Warmup Iteration   4: 2031664.553 ops/s
[info] # Warmup Iteration   5: 2050137.560 ops/s
[info] Iteration   1: 2049469.705 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2023419.938 ops/s
[info]                  ·gc.alloc.rate:      5.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.160 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2052939.369 ops/s
[info]                  ·gc.alloc.rate:      0.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.060 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2049385.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2047276.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2044498.132 ±(99.9%) 46041.581 ops/s [Average]
[info]   (min, avg, max) = (2023419.938, 2044498.132, 2052939.369), stdev = 11956.852
[info]   CI (99.9%): [1998456.551, 2090539.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.086 ±(99.9%) 9.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.086, 5.348), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.844 ±(99.9%) 7.138 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.844, 4.160), stdev = 1.854
[info]   CI (99.9%): [≈ 0, 7.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.00% complete, ETA 01:06:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11977.981 ops/s
[info] # Warmup Iteration   2: 39507.057 ops/s
[info] # Warmup Iteration   3: 40227.393 ops/s
[info] # Warmup Iteration   4: 40340.547 ops/s
[info] # Warmup Iteration   5: 40883.690 ops/s
[info] Iteration   1: 41363.344 ops/s
[info]                  ·gc.alloc.rate:                   2050.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              77975.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76619.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 41641.179 ops/s
[info]                  ·gc.alloc.rate:                   2074.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              78398.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75854.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42483.806 ops/s
[info]                  ·gc.alloc.rate:                   2100.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              77814.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74254.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42437.104 ops/s
[info]                  ·gc.alloc.rate:                   2113.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              78372.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74360.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42530.791 ops/s
[info]                  ·gc.alloc.rate:               2130.638 MB/sec
[info]                  ·gc.alloc.rate.norm:          78839.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74315.522 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   42091.245 ±(99.9%) 2108.490 ops/s [Average]
[info]   (min, avg, max) = (41363.344, 42091.245, 42530.791), stdev = 547.568
[info]   CI (99.9%): [39982.755, 44199.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2093.952 ±(99.9%) 122.807 MB/sec [Average]
[info]   (min, avg, max) = (2050.019, 2093.952, 2130.638), stdev = 31.893
[info]   CI (99.9%): [1971.145, 2216.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78280.046 ±(99.9%) 1546.661 B/op [Average]
[info]   (min, avg, max) = (77814.133, 78280.046, 78839.386), stdev = 401.663
[info]   CI (99.9%): [76733.385, 79826.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2008.050 ±(99.9%) 14.923 MB/sec [Average]
[info]   (min, avg, max) = (2004.496, 2008.050, 2014.382), stdev = 3.875
[info]   CI (99.9%): [1993.127, 2022.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75081.093 ±(99.9%) 4198.615 B/op [Average]
[info]   (min, avg, max) = (74254.905, 75081.093, 76619.981), stdev = 1090.367
[info]   CI (99.9%): [70882.477, 79279.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.936), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31.970 ±(99.9%) 253.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.970, 149.698), stdev = 65.853
[info]   CI (99.9%): [≈ 0, 285.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50.20% complete, ETA 01:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61680.855 ops/s
[info] # Warmup Iteration   2: 138735.196 ops/s
[info] # Warmup Iteration   3: 142037.366 ops/s
[info] # Warmup Iteration   4: 142708.450 ops/s
[info] # Warmup Iteration   5: 143557.178 ops/s
[info] Iteration   1: 143009.946 ops/s
[info]                  ·gc.alloc.rate:               1124.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          12369.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14786.022 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 141508.571 ops/s
[info]                  ·gc.alloc.rate:                   1109.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              12338.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14953.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 143485.907 ops/s
[info]                  ·gc.alloc.rate:               1121.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          12298.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7375.745 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 141794.747 ops/s
[info]                  ·gc.alloc.rate:                   1134.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              12586.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14935.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 140253.710 ops/s
[info]                  ·gc.alloc.rate:                   1095.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              12290.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7553.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.535 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   142010.576 ±(99.9%) 4931.423 ops/s [Average]
[info]   (min, avg, max) = (140253.710, 142010.576, 143485.907), stdev = 1280.675
[info]   CI (99.9%): [137079.153, 146941.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1116.855 ±(99.9%) 57.293 MB/sec [Average]
[info]   (min, avg, max) = (1095.349, 1116.855, 1134.083), stdev = 14.879
[info]   CI (99.9%): [1059.563, 1174.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12376.559 ±(99.9%) 468.134 B/op [Average]
[info]   (min, avg, max) = (12290.237, 12376.559, 12586.375), stdev = 121.573
[info]   CI (99.9%): [11908.426, 12844.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075.957 ±(99.9%) 1417.031 MB/sec [Average]
[info]   (min, avg, max) = (672.490, 1075.957, 1345.788), stdev = 367.999
[info]   CI (99.9%): [≈ 0, 2492.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11921.000 ±(99.9%) 15668.907 B/op [Average]
[info]   (min, avg, max) = (7375.745, 11921.000, 14953.939), stdev = 4069.165
[info]   CI (99.9%): [≈ 0, 27589.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.810), stdev = 1.248
[info]   CI (99.9%): [≈ 0, 5.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6.492 ±(99.9%) 53.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.492, 31.535), stdev = 14.002
[info]   CI (99.9%): [≈ 0, 60.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.40% complete, ETA 01:06:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5350.703 ops/s
[info] # Warmup Iteration   2: 12757.592 ops/s
[info] # Warmup Iteration   3: 14741.744 ops/s
[info] # Warmup Iteration   4: 14732.149 ops/s
[info] # Warmup Iteration   5: 14768.744 ops/s
[info] Iteration   1: 14594.313 ops/s
[info]                  ·gc.alloc.rate:                   1928.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              207970.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217372.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 14727.111 ops/s
[info]                  ·gc.alloc.rate:                   1949.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              208278.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215196.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.127 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14583.920 ops/s
[info]                  ·gc.alloc.rate:               1957.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          211187.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 216716.249 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 14770.359 ops/s
[info]                  ·gc.alloc.rate:                   1929.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              205534.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142658.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14773.672 ops/s
[info]                  ·gc.alloc.rate:                   1943.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              206967.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214086.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   14689.875 ±(99.9%) 361.452 ops/s [Average]
[info]   (min, avg, max) = (14583.920, 14689.875, 14773.672), stdev = 93.868
[info]   CI (99.9%): [14328.423, 15051.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1941.435 ±(99.9%) 48.103 MB/sec [Average]
[info]   (min, avg, max) = (1928.780, 1941.435, 1957.121), stdev = 12.492
[info]   CI (99.9%): [1893.333, 1989.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207987.335 ±(99.9%) 8026.880 B/op [Average]
[info]   (min, avg, max) = (205534.227, 207987.335, 211187.034), stdev = 2084.555
[info]   CI (99.9%): [199960.454, 216014.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.419 ±(99.9%) 1159.271 MB/sec [Average]
[info]   (min, avg, max) = (1338.896, 1877.419, 2015.982), stdev = 301.059
[info]   CI (99.9%): [718.148, 3036.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   201206.106 ±(99.9%) 126125.101 B/op [Average]
[info]   (min, avg, max) = (142658.573, 201206.106, 217372.815), stdev = 32754.288
[info]   CI (99.9%): [75081.004, 327331.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 2.561), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 5.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   80.579 ±(99.9%) 464.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.579, 276.116), stdev = 120.654
[info]   CI (99.9%): [≈ 0, 545.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.60% complete, ETA 01:06:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30344.554 ops/s
[info] # Warmup Iteration   2: 88994.574 ops/s
[info] # Warmup Iteration   3: 95401.338 ops/s
[info] # Warmup Iteration   4: 95268.806 ops/s
[info] # Warmup Iteration   5: 97196.053 ops/s
[info] Iteration   1: 96948.901 ops/s
[info]                  ·gc.alloc.rate:               1301.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          21122.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21713.768 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 97046.421 ops/s
[info]                  ·gc.alloc.rate:                   1294.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              20995.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21702.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 96002.928 ops/s
[info]                  ·gc.alloc.rate:                   1280.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              20982.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21949.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 96966.910 ops/s
[info]                  ·gc.alloc.rate:                   1305.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              21182.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21753.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 94520.237 ops/s
[info]                  ·gc.alloc.rate:                   1273.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              21207.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22249.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   96297.079 ±(99.9%) 4164.552 ops/s [Average]
[info]   (min, avg, max) = (94520.237, 96297.079, 97046.421), stdev = 1081.521
[info]   CI (99.9%): [92132.527, 100461.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1291.022 ±(99.9%) 52.295 MB/sec [Average]
[info]   (min, avg, max) = (1273.824, 1291.022, 1305.252), stdev = 13.581
[info]   CI (99.9%): [1238.727, 1343.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21098.391 ±(99.9%) 402.057 B/op [Average]
[info]   (min, avg, max) = (20982.788, 21098.391, 21207.756), stdev = 104.413
[info]   CI (99.9%): [20696.334, 21500.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.354 ±(99.9%) 5.752 MB/sec [Average]
[info]   (min, avg, max) = (1336.394, 1338.354, 1340.405), stdev = 1.494
[info]   CI (99.9%): [1332.602, 1344.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21873.635 ±(99.9%) 895.365 B/op [Average]
[info]   (min, avg, max) = (21702.424, 21873.635, 22249.479), stdev = 232.523
[info]   CI (99.9%): [20978.270, 22769.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.768), stdev = 1.649
[info]   CI (99.9%): [≈ 0, 7.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.476 ±(99.9%) 103.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.476, 61.154), stdev = 26.753
[info]   CI (99.9%): [≈ 0, 116.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.80% complete, ETA 01:05:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145265.498 ops/s
[info] # Warmup Iteration   2: 242706.703 ops/s
[info] # Warmup Iteration   3: 259269.402 ops/s
[info] # Warmup Iteration   4: 258980.439 ops/s
[info] # Warmup Iteration   5: 255295.424 ops/s
[info] Iteration   1: 256367.808 ops/s
[info]                  ·gc.alloc.rate:                   857.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              5263.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4124.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 258632.936 ops/s
[info]                  ·gc.alloc.rate:               860.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          5233.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4088.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 259040.362 ops/s
[info]                  ·gc.alloc.rate:                   875.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              5312.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8143.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 259720.565 ops/s
[info]                  ·gc.alloc.rate:               867.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          5257.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4077.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 253911.977 ops/s
[info]                  ·gc.alloc.rate:               841.098 MB/sec
[info]                  ·gc.alloc.rate.norm:          5211.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4170.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   257534.730 ±(99.9%) 9180.558 ops/s [Average]
[info]   (min, avg, max) = (253911.977, 257534.730, 259720.565), stdev = 2384.162
[info]   CI (99.9%): [248354.172, 266715.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   860.387 ±(99.9%) 49.472 MB/sec [Average]
[info]   (min, avg, max) = (841.098, 860.387, 875.467), stdev = 12.848
[info]   CI (99.9%): [810.915, 909.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5255.815 ±(99.9%) 145.208 B/op [Average]
[info]   (min, avg, max) = (5211.804, 5255.815, 5312.443), stdev = 37.710
[info]   CI (99.9%): [5110.607, 5401.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.346 ±(99.9%) 1153.179 MB/sec [Average]
[info]   (min, avg, max) = (671.912, 806.346, 1342.066), stdev = 299.477
[info]   CI (99.9%): [≈ 0, 1959.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4920.703 ±(99.9%) 6939.425 B/op [Average]
[info]   (min, avg, max) = (4077.031, 4920.703, 8143.825), stdev = 1802.147
[info]   CI (99.9%): [≈ 0, 11860.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.102 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.102, 0.256), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.00% complete, ETA 01:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2037.187 ops/s
[info] # Warmup Iteration   2: 10320.229 ops/s
[info] # Warmup Iteration   3: 13132.455 ops/s
[info] # Warmup Iteration   4: 13121.652 ops/s
[info] # Warmup Iteration   5: 13123.275 ops/s
[info] Iteration   1: 12989.733 ops/s
[info]                  ·gc.alloc.rate:                   2090.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              253196.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243462.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 13104.232 ops/s
[info]                  ·gc.alloc.rate:                   2127.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              255539.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321044.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13243.977 ops/s
[info]                  ·gc.alloc.rate:               2114.300 MB/sec
[info]                  ·gc.alloc.rate.norm:          251163.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 237704.667 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 13014.957 ops/s
[info]                  ·gc.alloc.rate:               2104.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          254516.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 241948.099 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13198.306 ops/s
[info]                  ·gc.alloc.rate:               2133.833 MB/sec
[info]                  ·gc.alloc.rate.norm:          254441.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239009.559 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   13110.241 ±(99.9%) 427.396 ops/s [Average]
[info]   (min, avg, max) = (12989.733, 13110.241, 13243.977), stdev = 110.993
[info]   CI (99.9%): [12682.845, 13537.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2114.300 ±(99.9%) 67.201 MB/sec [Average]
[info]   (min, avg, max) = (2090.514, 2114.300, 2133.833), stdev = 17.452
[info]   CI (99.9%): [2047.099, 2181.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   253771.532 ±(99.9%) 6461.355 B/op [Average]
[info]   (min, avg, max) = (251163.556, 253771.532, 255539.693), stdev = 1677.993
[info]   CI (99.9%): [247310.177, 260232.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.986 ±(99.9%) 1152.457 MB/sec [Average]
[info]   (min, avg, max) = (2001.003, 2137.986, 2673.330), stdev = 299.289
[info]   CI (99.9%): [985.530, 3290.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   256633.977 ±(99.9%) 138928.548 B/op [Average]
[info]   (min, avg, max) = (237704.667, 256633.977, 321044.899), stdev = 36079.303
[info]   CI (99.9%): [117705.429, 395562.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 5.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 3.373), stdev = 1.465
[info]   CI (99.9%): [≈ 0, 6.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   108.206 ±(99.9%) 683.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108.206, 408.528), stdev = 177.419
[info]   CI (99.9%): [≈ 0, 791.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.793
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51.20% complete, ETA 01:05:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4715.889 ops/s
[info] # Warmup Iteration   2: 13850.985 ops/s
[info] # Warmup Iteration   3: 15131.977 ops/s
[info] # Warmup Iteration   4: 15238.528 ops/s
[info] # Warmup Iteration   5: 15295.871 ops/s
[info] Iteration   1: 15218.656 ops/s
[info]                  ·gc.alloc.rate:                   1775.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              183512.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208723.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 15308.923 ops/s
[info]                  ·gc.alloc.rate:                   1783.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              183282.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138458.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 312.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14872.893 ops/s
[info]                  ·gc.alloc.rate:                   1747.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              184917.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213084.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14876.845 ops/s
[info]                  ·gc.alloc.rate:               1717.929 MB/sec
[info]                  ·gc.alloc.rate.norm:          181732.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141853.729 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 14911.008 ops/s
[info]                  ·gc.alloc.rate:               1751.882 MB/sec
[info]                  ·gc.alloc.rate.norm:          184899.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212190.047 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   15037.665 ±(99.9%) 806.324 ops/s [Average]
[info]   (min, avg, max) = (14872.893, 15037.665, 15308.923), stdev = 209.400
[info]   CI (99.9%): [14231.341, 15843.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1755.113 ±(99.9%) 98.721 MB/sec [Average]
[info]   (min, avg, max) = (1717.929, 1755.113, 1783.019), stdev = 25.637
[info]   CI (99.9%): [1656.393, 1853.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   183669.062 ±(99.9%) 5091.865 B/op [Average]
[info]   (min, avg, max) = (181732.947, 183669.062, 184917.558), stdev = 1322.341
[info]   CI (99.9%): [178577.197, 188760.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1746.233 ±(99.9%) 1414.134 MB/sec [Average]
[info]   (min, avg, max) = (1340.949, 1746.233, 2018.998), stdev = 367.246
[info]   CI (99.9%): [332.099, 3160.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   182862.082 ±(99.9%) 150318.891 B/op [Average]
[info]   (min, avg, max) = (138458.870, 182862.082, 213084.515), stdev = 39037.339
[info]   CI (99.9%): [32543.191, 333180.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.039), stdev = 1.317
[info]   CI (99.9%): [≈ 0, 5.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   74.369 ±(99.9%) 521.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.369, 312.423), stdev = 135.313
[info]   CI (99.9%): [≈ 0, 595.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.41% complete, ETA 01:05:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10385.009 ops/s
[info] # Warmup Iteration   2: 30527.490 ops/s
[info] # Warmup Iteration   3: 32549.787 ops/s
[info] # Warmup Iteration   4: 31756.951 ops/s
[info] # Warmup Iteration   5: 32682.151 ops/s
[info] Iteration   1: 32378.372 ops/s
[info]                  ·gc.alloc.rate:                   2699.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              131199.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130189.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 32386.948 ops/s
[info]                  ·gc.alloc.rate:                   2684.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              130444.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130153.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 32559.089 ops/s
[info]                  ·gc.alloc.rate:                   2739.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              132414.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129707.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 32902.375 ops/s
[info]                  ·gc.alloc.rate:                   2768.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              132386.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128674.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.996 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 32851.461 ops/s
[info]                  ·gc.alloc.rate:               2764.587 MB/sec
[info]                  ·gc.alloc.rate.norm:          132430.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129221.196 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   32615.649 ±(99.9%) 961.934 ops/s [Average]
[info]   (min, avg, max) = (32378.372, 32615.649, 32902.375), stdev = 249.811
[info]   CI (99.9%): [31653.715, 33577.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2731.377 ±(99.9%) 146.246 MB/sec [Average]
[info]   (min, avg, max) = (2684.578, 2731.377, 2768.626), stdev = 37.980
[info]   CI (99.9%): [2585.131, 2877.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   131775.135 ±(99.9%) 3505.062 B/op [Average]
[info]   (min, avg, max) = (130444.497, 131775.135, 132430.621), stdev = 910.254
[info]   CI (99.9%): [128270.072, 135280.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2685.896 ±(99.9%) 31.840 MB/sec [Average]
[info]   (min, avg, max) = (2678.590, 2685.896, 2697.588), stdev = 8.269
[info]   CI (99.9%): [2654.056, 2717.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   129589.295 ±(99.9%) 2484.660 B/op [Average]
[info]   (min, avg, max) = (128674.390, 129589.295, 130189.715), stdev = 645.258
[info]   CI (99.9%): [127104.636, 132073.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.167), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.832 ±(99.9%) 15.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.832, 8.094), stdev = 3.936
[info]   CI (99.9%): [≈ 0, 18.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.61% complete, ETA 01:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21359.047 ops/s
[info] # Warmup Iteration   2: 99397.507 ops/s
[info] # Warmup Iteration   3: 101557.689 ops/s
[info] # Warmup Iteration   4: 102860.212 ops/s
[info] # Warmup Iteration   5: 104810.928 ops/s
[info] Iteration   1: 101545.566 ops/s
[info]                  ·gc.alloc.rate:                   1433.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              22219.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20730.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.323 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 104741.022 ops/s
[info]                  ·gc.alloc.rate:                   1471.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              22108.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20112.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 106760.796 ops/s
[info]                  ·gc.alloc.rate:                   1502.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              22151.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19747.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 105985.485 ops/s
[info]                  ·gc.alloc.rate:                   1519.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              22561.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29814.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.328 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 106599.482 ops/s
[info]                  ·gc.alloc.rate:               1511.695 MB/sec
[info]                  ·gc.alloc.rate.norm:          22317.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19708.374 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   105126.470 ±(99.9%) 8292.337 ops/s [Average]
[info]   (min, avg, max) = (101545.566, 105126.470, 106760.796), stdev = 2153.493
[info]   CI (99.9%): [96834.133, 113418.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1487.843 ±(99.9%) 135.803 MB/sec [Average]
[info]   (min, avg, max) = (1433.841, 1487.843, 1519.491), stdev = 35.268
[info]   CI (99.9%): [1352.040, 1623.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22271.650 ±(99.9%) 694.038 B/op [Average]
[info]   (min, avg, max) = (22108.821, 22271.650, 22561.667), stdev = 180.239
[info]   CI (99.9%): [21577.612, 22965.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.806 ±(99.9%) 1154.142 MB/sec [Average]
[info]   (min, avg, max) = (1334.981, 1471.806, 2007.965), stdev = 299.727
[info]   CI (99.9%): [317.665, 2625.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22022.889 ±(99.9%) 16846.421 B/op [Average]
[info]   (min, avg, max) = (19708.374, 22022.889, 29814.608), stdev = 4374.962
[info]   CI (99.9%): [5176.468, 38869.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 5.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.518), stdev = 1.538
[info]   CI (99.9%): [≈ 0, 6.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.428 ±(99.9%) 87.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.428, 51.862), stdev = 22.671
[info]   CI (99.9%): [≈ 0, 98.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 7.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.81% complete, ETA 01:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91586.778 ops/s
[info] # Warmup Iteration   2: 163278.524 ops/s
[info] # Warmup Iteration   3: 177949.400 ops/s
[info] # Warmup Iteration   4: 169944.195 ops/s
[info] # Warmup Iteration   5: 175128.931 ops/s
[info] Iteration   1: 178292.049 ops/s
[info]                  ·gc.alloc.rate:               585.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          5165.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5921.434 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 180033.423 ops/s
[info]                  ·gc.alloc.rate:      573.825 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 178383.924 ops/s
[info]                  ·gc.alloc.rate:               595.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          5252.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5918.082 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 169748.921 ops/s
[info]                  ·gc.alloc.rate:               560.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6225.789 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 177829.327 ops/s
[info]                  ·gc.alloc.rate:               593.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          5253.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5942.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   176857.529 ±(99.9%) 15635.550 ops/s [Average]
[info]   (min, avg, max) = (169748.921, 176857.529, 180033.423), stdev = 4060.503
[info]   CI (99.9%): [161221.978, 192493.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   581.834 ±(99.9%) 55.674 MB/sec [Average]
[info]   (min, avg, max) = (560.976, 581.834, 595.463), stdev = 14.458
[info]   CI (99.9%): [526.160, 637.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5177.717 ±(99.9%) 376.133 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5177.717, 5253.637), stdev = 97.681
[info]   CI (99.9%): [4801.584, 5553.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.970 ±(99.9%) 1155.869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.970, 671.522), stdev = 300.176
[info]   CI (99.9%): [≈ 0, 1692.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4801.603 ±(99.9%) 10347.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4801.603, 6225.789), stdev = 2687.302
[info]   CI (99.9%): [≈ 0, 15149.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.01% complete, ETA 01:04:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126346.929 ops/s
[info] # Warmup Iteration   2: 187850.621 ops/s
[info] # Warmup Iteration   3: 193968.718 ops/s
[info] # Warmup Iteration   4: 194615.167 ops/s
[info] # Warmup Iteration   5: 193885.007 ops/s
[info] Iteration   1: 194121.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 193880.438 ops/s
[info]                  ·gc.alloc.rate:      0.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.321 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 193876.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 193889.834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 193825.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   193918.858 ±(99.9%) 447.425 ops/s [Average]
[info]   (min, avg, max) = (193825.999, 193918.858, 194121.923), stdev = 116.195
[info]   CI (99.9%): [193471.433, 194366.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.066 ±(99.9%) 0.548 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.066, 0.321), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.21% complete, ETA 01:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12076.143 ops/s
[info] # Warmup Iteration   2: 43398.424 ops/s
[info] # Warmup Iteration   3: 48595.729 ops/s
[info] # Warmup Iteration   4: 48745.927 ops/s
[info] # Warmup Iteration   5: 49545.212 ops/s
[info] Iteration   1: 48258.959 ops/s
[info]                  ·gc.alloc.rate:                   3417.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              111415.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109078.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.679 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 49378.557 ops/s
[info]                  ·gc.alloc.rate:                   3487.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              111162.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3354.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106912.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 48938.510 ops/s
[info]                  ·gc.alloc.rate:                   3468.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              111547.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3365.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108233.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 48985.640 ops/s
[info]                  ·gc.alloc.rate:                   3473.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              111578.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108517.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.006 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 49518.903 ops/s
[info]                  ·gc.alloc.rate:                   3509.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              111522.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107601.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.662 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   49016.114 ±(99.9%) 1890.737 ops/s [Average]
[info]   (min, avg, max) = (48258.959, 49016.114, 49518.903), stdev = 491.018
[info]   CI (99.9%): [47125.377, 50906.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3471.223 ±(99.9%) 131.266 MB/sec [Average]
[info]   (min, avg, max) = (3417.153, 3471.223, 3509.170), stdev = 34.089
[info]   CI (99.9%): [3339.957, 3602.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111445.291 ±(99.9%) 652.153 B/op [Average]
[info]   (min, avg, max) = (111162.886, 111445.291, 111578.214), stdev = 169.362
[info]   CI (99.9%): [110793.139, 112097.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3365.877 ±(99.9%) 63.387 MB/sec [Average]
[info]   (min, avg, max) = (3345.489, 3365.877, 3385.779), stdev = 16.461
[info]   CI (99.9%): [3302.490, 3429.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108068.766 ±(99.9%) 3223.353 B/op [Average]
[info]   (min, avg, max) = (106912.840, 108068.766, 109078.669), stdev = 837.095
[info]   CI (99.9%): [104845.413, 111292.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.069 ±(99.9%) 2.297 B/op [Average]
[info]   (min, avg, max) = (0.662, 1.069, 2.006), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 3.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52.41% complete, ETA 01:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4569.972 ops/s
[info] # Warmup Iteration   2: 8084.720 ops/s
[info] # Warmup Iteration   3: 8888.935 ops/s
[info] # Warmup Iteration   4: 8949.974 ops/s
[info] # Warmup Iteration   5: 8951.002 ops/s
[info] Iteration   1: 8899.362 ops/s
[info]                  ·gc.alloc.rate:                   974.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              172359.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237466.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8935.545 ops/s
[info]                  ·gc.alloc.rate:               951.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          167538.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118372.475 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8868.438 ops/s
[info]                  ·gc.alloc.rate:                   968.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              171916.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238533.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8949.647 ops/s
[info]                  ·gc.alloc.rate:                   948.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              166818.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118187.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8813.243 ops/s
[info]                  ·gc.alloc.rate:               960.248 MB/sec
[info]                  ·gc.alloc.rate.norm:          171475.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120143.138 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   8893.247 ±(99.9%) 211.116 ops/s [Average]
[info]   (min, avg, max) = (8813.243, 8893.247, 8949.647), stdev = 54.826
[info]   CI (99.9%): [8682.132, 9104.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   960.798 ±(99.9%) 43.017 MB/sec [Average]
[info]   (min, avg, max) = (948.713, 960.798, 974.886), stdev = 11.171
[info]   CI (99.9%): [917.781, 1003.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   170021.878 ±(99.9%) 10113.404 B/op [Average]
[info]   (min, avg, max) = (166818.920, 170021.878, 172359.602), stdev = 2626.419
[info]   CI (99.9%): [159908.474, 180135.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   940.891 ±(99.9%) 1415.903 MB/sec [Average]
[info]   (min, avg, max) = (672.141, 940.891, 1344.244), stdev = 367.705
[info]   CI (99.9%): [≈ 0, 2356.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   166540.551 ±(99.9%) 251211.056 B/op [Average]
[info]   (min, avg, max) = (118187.353, 166540.551, 238533.014), stdev = 65238.714
[info]   CI (99.9%): [≈ 0, 417751.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5.160 ±(99.9%) 23.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.160, 14.775), stdev = 6.181
[info]   CI (99.9%): [≈ 0, 28.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.61% complete, ETA 01:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5285.681 ops/s
[info] # Warmup Iteration   2: 22880.653 ops/s
[info] # Warmup Iteration   3: 26552.536 ops/s
[info] # Warmup Iteration   4: 26514.832 ops/s
[info] # Warmup Iteration   5: 26355.094 ops/s
[info] Iteration   1: 26662.200 ops/s
[info]                  ·gc.alloc.rate:                   1433.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              84591.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79229.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 26752.807 ops/s
[info]                  ·gc.alloc.rate:                   1429.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              84080.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78998.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 26739.281 ops/s
[info]                  ·gc.alloc.rate:                   1426.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              83946.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79076.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26638.083 ops/s
[info]                  ·gc.alloc.rate:                   1432.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              84649.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79303.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26434.529 ops/s
[info]                  ·gc.alloc.rate:                   1420.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              84550.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79713.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26645.380 ±(99.9%) 491.438 ops/s [Average]
[info]   (min, avg, max) = (26434.529, 26645.380, 26752.807), stdev = 127.625
[info]   CI (99.9%): [26153.942, 27136.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1428.485 ±(99.9%) 20.065 MB/sec [Average]
[info]   (min, avg, max) = (1420.658, 1428.485, 1433.214), stdev = 5.211
[info]   CI (99.9%): [1408.420, 1448.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84363.950 ±(99.9%) 1252.252 B/op [Average]
[info]   (min, avg, max) = (83946.658, 84363.950, 84649.780), stdev = 325.206
[info]   CI (99.9%): [83111.699, 85616.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.131 ±(99.9%) 6.201 MB/sec [Average]
[info]   (min, avg, max) = (1339.387, 1342.131, 1343.550), stdev = 1.610
[info]   CI (99.9%): [1335.930, 1348.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79264.336 ±(99.9%) 1073.308 B/op [Average]
[info]   (min, avg, max) = (78998.812, 79264.336, 79713.985), stdev = 278.735
[info]   CI (99.9%): [78191.028, 80337.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 5.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.787, 3.143), stdev = 1.347
[info]   CI (99.9%): [≈ 0, 5.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.347 ±(99.9%) 305.320 B/op [Average]
[info]   (min, avg, max) = (1.225, 46.347, 184.998), stdev = 79.291
[info]   CI (99.9%): [≈ 0, 351.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.81% complete, ETA 01:03:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5797.708 ops/s
[info] # Warmup Iteration   2: 28129.195 ops/s
[info] # Warmup Iteration   3: 30202.424 ops/s
[info] # Warmup Iteration   4: 30159.620 ops/s
[info] # Warmup Iteration   5: 30158.515 ops/s
[info] Iteration   1: 30518.354 ops/s
[info]                  ·gc.alloc.rate:                   1250.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              64469.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68945.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30748.331 ops/s
[info]                  ·gc.alloc.rate:               1239.303 MB/sec
[info]                  ·gc.alloc.rate.norm:          63424.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34249.028 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 29366.022 ops/s
[info]                  ·gc.alloc.rate:                   1207.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              64734.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71741.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 29295.235 ops/s
[info]                  ·gc.alloc.rate:                   1192.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              64063.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71963.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 30437.071 ops/s
[info]                  ·gc.alloc.rate:                   1237.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              63982.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69193.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   30073.002 ±(99.9%) 2648.068 ops/s [Average]
[info]   (min, avg, max) = (29295.235, 30073.002, 30748.331), stdev = 687.695
[info]   CI (99.9%): [27424.934, 32721.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1225.610 ±(99.9%) 93.412 MB/sec [Average]
[info]   (min, avg, max) = (1192.617, 1225.610, 1250.604), stdev = 24.259
[info]   CI (99.9%): [1132.198, 1319.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   64135.080 ±(99.9%) 1929.129 B/op [Average]
[info]   (min, avg, max) = (63424.782, 64135.080, 64734.607), stdev = 500.989
[info]   CI (99.9%): [62205.951, 66064.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.678 ±(99.9%) 1152.626 MB/sec [Average]
[info]   (min, avg, max) = (669.217, 1204.678, 1339.682), stdev = 299.333
[info]   CI (99.9%): [52.052, 2357.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63218.597 ±(99.9%) 62590.636 B/op [Average]
[info]   (min, avg, max) = (34249.028, 63218.597, 71963.905), stdev = 16254.589
[info]   CI (99.9%): [627.961, 125809.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 5.806 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 3.497), stdev = 1.508
[info]   CI (99.9%): [≈ 0, 6.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.546 ±(99.9%) 312.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.546, 187.872), stdev = 81.038
[info]   CI (99.9%): [≈ 0, 357.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.01% complete, ETA 01:02:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297439.196 ops/s
[info] # Warmup Iteration   2: 596604.947 ops/s
[info] # Warmup Iteration   3: 626620.044 ops/s
[info] # Warmup Iteration   4: 612096.450 ops/s
[info] # Warmup Iteration   5: 613952.046 ops/s
[info] Iteration   1: 618181.309 ops/s
[info]                  ·gc.alloc.rate:               1636.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          4167.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3426.591 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 625209.033 ops/s
[info]                  ·gc.alloc.rate:                   1691.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              4258.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5085.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 630100.398 ops/s
[info]                  ·gc.alloc.rate:                   1680.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              4196.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3357.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 630523.561 ops/s
[info]                  ·gc.alloc.rate:               1693.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          4228.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3352.049 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 627709.110 ops/s
[info]                  ·gc.alloc.rate:               1688.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          4232.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5046.321 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   626344.682 ±(99.9%) 19383.743 ops/s [Average]
[info]   (min, avg, max) = (618181.309, 626344.682, 630523.561), stdev = 5033.897
[info]   CI (99.9%): [606960.939, 645728.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1678.230 ±(99.9%) 91.372 MB/sec [Average]
[info]   (min, avg, max) = (1636.862, 1678.230, 1693.950), stdev = 23.729
[info]   CI (99.9%): [1586.857, 1769.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4216.568 ±(99.9%) 136.851 B/op [Average]
[info]   (min, avg, max) = (4167.073, 4216.568, 4258.765), stdev = 35.540
[info]   CI (99.9%): [4079.717, 4353.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.267 ±(99.9%) 1417.545 MB/sec [Average]
[info]   (min, avg, max) = (1342.988, 1613.267, 2020.237), stdev = 368.132
[info]   CI (99.9%): [195.721, 3030.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4053.528 ±(99.9%) 3560.261 B/op [Average]
[info]   (min, avg, max) = (3352.049, 4053.528, 5085.160), stdev = 924.588
[info]   CI (99.9%): [493.268, 7613.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 4.641 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 2.769), stdev = 1.205
[info]   CI (99.9%): [≈ 0, 5.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.602 ±(99.9%) 11.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.602, 6.970), stdev = 3.034
[info]   CI (99.9%): [≈ 0, 13.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.21% complete, ETA 01:02:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1309.456 ops/s
[info] # Warmup Iteration   2: 14278.273 ops/s
[info] # Warmup Iteration   3: 22664.556 ops/s
[info] # Warmup Iteration   4: 22024.284 ops/s
[info] # Warmup Iteration   5: 21960.837 ops/s
[info] Iteration   1: 21819.322 ops/s
[info]                  ·gc.alloc.rate:                   1660.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              119775.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144027.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 22080.350 ops/s
[info]                  ·gc.alloc.rate:                   1646.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              117309.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95096.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22483.681 ops/s
[info]                  ·gc.alloc.rate:               1689.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          118222.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140420.963 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 22162.882 ops/s
[info]                  ·gc.alloc.rate:                   1650.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              117205.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95221.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22049.421 ops/s
[info]                  ·gc.alloc.rate:               1656.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          118246.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95899.963 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   22119.131 ±(99.9%) 925.477 ops/s [Average]
[info]   (min, avg, max) = (21819.322, 22119.131, 22483.681), stdev = 240.343
[info]   CI (99.9%): [21193.654, 23044.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1660.696 ±(99.9%) 64.733 MB/sec [Average]
[info]   (min, avg, max) = (1646.367, 1660.696, 1689.120), stdev = 16.811
[info]   CI (99.9%): [1595.963, 1725.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118151.638 ±(99.9%) 3971.093 B/op [Average]
[info]   (min, avg, max) = (117205.369, 118151.638, 119775.006), stdev = 1031.280
[info]   CI (99.9%): [114180.545, 122122.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1604.488 ±(99.9%) 1395.864 MB/sec [Average]
[info]   (min, avg, max) = (1334.621, 1604.488, 2006.291), stdev = 362.501
[info]   CI (99.9%): [208.625, 3000.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114133.279 ±(99.9%) 98872.197 B/op [Average]
[info]   (min, avg, max) = (95096.338, 114133.279, 144027.245), stdev = 25676.796
[info]   CI (99.9%): [15261.082, 213005.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.893 ±(99.9%) 3.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.893, 1.502), stdev = 0.815
[info]   CI (99.9%): [≈ 0, 4.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 01:02:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5454.912 ops/s
[info] # Warmup Iteration   2: 25149.701 ops/s
[info] # Warmup Iteration   3: 27216.077 ops/s
[info] # Warmup Iteration   4: 27461.990 ops/s
[info] # Warmup Iteration   5: 27087.876 ops/s
[info] Iteration   1: 28192.208 ops/s
[info]                  ·gc.alloc.rate:               1291.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          72080.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75004.532 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 28388.053 ops/s
[info]                  ·gc.alloc.rate:                   1295.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              71799.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74521.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28594.441 ops/s
[info]                  ·gc.alloc.rate:               1301.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          71619.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36992.175 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 27731.022 ops/s
[info]                  ·gc.alloc.rate:                   1277.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              72501.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76326.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 27876.884 ops/s
[info]                  ·gc.alloc.rate:                   1283.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              72440.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75851.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   28156.522 ±(99.9%) 1369.419 ops/s [Average]
[info]   (min, avg, max) = (27731.022, 28156.522, 28594.441), stdev = 355.634
[info]   CI (99.9%): [26787.103, 29525.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1289.729 ±(99.9%) 36.409 MB/sec [Average]
[info]   (min, avg, max) = (1277.587, 1289.729, 1301.350), stdev = 9.455
[info]   CI (99.9%): [1253.320, 1326.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   72088.199 ±(99.9%) 1489.065 B/op [Average]
[info]   (min, avg, max) = (71619.493, 72088.199, 72501.281), stdev = 386.705
[info]   CI (99.9%): [70599.135, 73577.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1209.756 ±(99.9%) 1157.217 MB/sec [Average]
[info]   (min, avg, max) = (672.160, 1209.756, 1344.998), stdev = 300.525
[info]   CI (99.9%): [52.539, 2366.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   67739.283 ±(99.9%) 66241.151 B/op [Average]
[info]   (min, avg, max) = (36992.175, 67739.283, 76326.746), stdev = 17202.617
[info]   CI (99.9%): [1498.132, 133980.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 4.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 2.977), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   42.005 ±(99.9%) 280.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.005, 168.938), stdev = 72.847
[info]   CI (99.9%): [≈ 0, 322.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.61% complete, ETA 01:02:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17541.978 ops/s
[info] # Warmup Iteration   2: 69114.986 ops/s
[info] # Warmup Iteration   3: 74242.000 ops/s
[info] # Warmup Iteration   4: 73469.160 ops/s
[info] # Warmup Iteration   5: 72362.515 ops/s
[info] Iteration   1: 74288.103 ops/s
[info]                  ·gc.alloc.rate:                   1963.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              41594.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42639.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 74938.580 ops/s
[info]                  ·gc.alloc.rate:                   1991.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              41821.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42210.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 75192.896 ops/s
[info]                  ·gc.alloc.rate:                   1997.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              41808.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41993.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 75500.489 ops/s
[info]                  ·gc.alloc.rate:               2021.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          42142.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41823.069 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 74208.773 ops/s
[info]                  ·gc.alloc.rate:               1962.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          41608.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28395.637 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   74825.768 ±(99.9%) 2171.883 ops/s [Average]
[info]   (min, avg, max) = (74208.773, 74825.768, 75500.489), stdev = 564.031
[info]   CI (99.9%): [72653.885, 76997.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1987.384 ±(99.9%) 96.230 MB/sec [Average]
[info]   (min, avg, max) = (1962.105, 1987.384, 2021.849), stdev = 24.991
[info]   CI (99.9%): [1891.154, 2083.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41795.303 ±(99.9%) 853.247 B/op [Average]
[info]   (min, avg, max) = (41594.924, 41795.303, 42142.348), stdev = 221.586
[info]   CI (99.9%): [40942.056, 42648.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1875.039 ±(99.9%) 1153.837 MB/sec [Average]
[info]   (min, avg, max) = (1339.037, 1875.039, 2013.237), stdev = 299.648
[info]   CI (99.9%): [721.202, 3028.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39412.523 ±(99.9%) 23743.873 B/op [Average]
[info]   (min, avg, max) = (28395.637, 39412.523, 42639.899), stdev = 6166.208
[info]   CI (99.9%): [15668.650, 63156.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.750 ±(99.9%) 5.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.750, 3.290), stdev = 1.432
[info]   CI (99.9%): [≈ 0, 6.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.859 ±(99.9%) 116.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.859, 69.679), stdev = 30.340
[info]   CI (99.9%): [≈ 0, 132.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.82% complete, ETA 01:01:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67657.065 ops/s
[info] # Warmup Iteration   2: 168661.225 ops/s
[info] # Warmup Iteration   3: 181246.820 ops/s
[info] # Warmup Iteration   4: 177070.592 ops/s
[info] # Warmup Iteration   5: 181671.369 ops/s
[info] Iteration   1: 176303.992 ops/s
[info]                  ·gc.alloc.rate:                   1976.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              17638.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17957.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 178697.034 ops/s
[info]                  ·gc.alloc.rate:                   1989.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              17518.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17676.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.750 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 181106.026 ops/s
[info]                  ·gc.alloc.rate:                   2000.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              17384.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11612.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 185125.992 ops/s
[info]                  ·gc.alloc.rate:                   2050.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              17469.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22726.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 183299.135 ops/s
[info]                  ·gc.alloc.rate:               2014.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          17293.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11495.976 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   180906.436 ±(99.9%) 13564.086 ops/s [Average]
[info]   (min, avg, max) = (176303.992, 180906.436, 185125.992), stdev = 3522.550
[info]   CI (99.9%): [167342.349, 194470.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2006.317 ±(99.9%) 110.264 MB/sec [Average]
[info]   (min, avg, max) = (1976.146, 2006.317, 2050.977), stdev = 28.635
[info]   CI (99.9%): [1896.053, 2116.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17461.036 ±(99.9%) 505.440 B/op [Average]
[info]   (min, avg, max) = (17293.791, 17461.036, 17638.853), stdev = 131.261
[info]   CI (99.9%): [16955.596, 17966.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872.590 ±(99.9%) 2146.451 MB/sec [Average]
[info]   (min, avg, max) = (1336.371, 1872.590, 2668.199), stdev = 557.426
[info]   CI (99.9%): [≈ 0, 4019.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16293.940 ±(99.9%) 18366.518 B/op [Average]
[info]   (min, avg, max) = (11495.976, 16293.940, 22726.704), stdev = 4769.726
[info]   CI (99.9%): [≈ 0, 34660.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 5.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.477), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.864 ±(99.9%) 52.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.864, 31.032), stdev = 13.557
[info]   CI (99.9%): [≈ 0, 59.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.02% complete, ETA 01:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727873.411 ops/s
[info] # Warmup Iteration   2: 1387941.393 ops/s
[info] # Warmup Iteration   3: 1482789.644 ops/s
[info] # Warmup Iteration   4: 1510763.123 ops/s
[info] # Warmup Iteration   5: 1490127.468 ops/s
[info] Iteration   1: 1481047.614 ops/s
[info]                  ·gc.alloc.rate:               1268.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          1348.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1427.735 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1499788.877 ops/s
[info]                  ·gc.alloc.rate:                   1283.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              1347.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1410.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1476933.011 ops/s
[info]                  ·gc.alloc.rate:                   1259.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              1341.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1433.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1478888.331 ops/s
[info]                  ·gc.alloc.rate:                   1277.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              1359.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1431.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1520013.230 ops/s
[info]                  ·gc.alloc.rate:               1286.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          1331.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 695.205 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1491334.212 ±(99.9%) 71056.538 ops/s [Average]
[info]   (min, avg, max) = (1476933.011, 1491334.212, 1520013.230), stdev = 18453.157
[info]   CI (99.9%): [1420277.674, 1562390.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1275.096 ±(99.9%) 43.407 MB/sec [Average]
[info]   (min, avg, max) = (1259.032, 1275.096, 1286.385), stdev = 11.273
[info]   CI (99.9%): [1231.689, 1318.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1345.549 ±(99.9%) 38.971 B/op [Average]
[info]   (min, avg, max) = (1331.720, 1345.549, 1359.419), stdev = 10.121
[info]   CI (99.9%): [1306.579, 1384.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.081 ±(99.9%) 1159.258 MB/sec [Average]
[info]   (min, avg, max) = (671.538, 1210.081, 1345.674), stdev = 301.056
[info]   CI (99.9%): [50.823, 2369.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1279.737 ±(99.9%) 1258.731 B/op [Average]
[info]   (min, avg, max) = (695.205, 1279.737, 1433.166), stdev = 326.888
[info]   CI (99.9%): [21.006, 2538.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 5.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.144), stdev = 1.397
[info]   CI (99.9%): [≈ 0, 6.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.687 ±(99.9%) 5.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.345), stdev = 1.486
[info]   CI (99.9%): [≈ 0, 6.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.22% complete, ETA 01:01:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1169754.642 ops/s
[info] # Warmup Iteration   2: 1720216.504 ops/s
[info] # Warmup Iteration   3: 1769149.766 ops/s
[info] # Warmup Iteration   4: 1769144.791 ops/s
[info] # Warmup Iteration   5: 1764790.224 ops/s
[info] Iteration   1: 1770062.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1771038.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1751793.851 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1762597.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1763344.390 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1763767.546 ±(99.9%) 29666.130 ops/s [Average]
[info]   (min, avg, max) = (1751793.851, 1763767.546, 1771038.973), stdev = 7704.200
[info]   CI (99.9%): [1734101.416, 1793433.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.42% complete, ETA 01:00:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33074.450 ops/s
[info] # Warmup Iteration   2: 137050.511 ops/s
[info] # Warmup Iteration   3: 146672.771 ops/s
[info] # Warmup Iteration   4: 149694.217 ops/s
[info] # Warmup Iteration   5: 151973.721 ops/s
[info] Iteration   1: 153985.208 ops/s
[info]                  ·gc.alloc.rate:               2002.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          20462.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20404.126 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 150366.830 ops/s
[info]                  ·gc.alloc.rate:                   1955.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              20463.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20915.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 151653.274 ops/s
[info]                  ·gc.alloc.rate:               1958.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          20323.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20791.363 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 150204.107 ops/s
[info]                  ·gc.alloc.rate:               1941.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          20339.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21040.900 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 153628.283 ops/s
[info]                  ·gc.alloc.rate:               2010.480 MB/sec
[info]                  ·gc.alloc.rate.norm:          20589.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20627.244 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   151967.540 ±(99.9%) 6834.157 ops/s [Average]
[info]   (min, avg, max) = (150204.107, 151967.540, 153985.208), stdev = 1774.809
[info]   CI (99.9%): [145133.384, 158801.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1973.673 ±(99.9%) 118.076 MB/sec [Average]
[info]   (min, avg, max) = (1941.352, 1973.673, 2010.480), stdev = 30.664
[info]   CI (99.9%): [1855.597, 2091.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20435.900 ±(99.9%) 417.503 B/op [Average]
[info]   (min, avg, max) = (20323.764, 20435.900, 20589.788), stdev = 108.424
[info]   CI (99.9%): [20018.397, 20853.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.302 ±(99.9%) 27.402 MB/sec [Average]
[info]   (min, avg, max) = (1996.461, 2004.302, 2014.137), stdev = 7.116
[info]   CI (99.9%): [1976.901, 2031.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20755.903 ±(99.9%) 959.527 B/op [Average]
[info]   (min, avg, max) = (20404.126, 20755.903, 21040.900), stdev = 249.186
[info]   CI (99.9%): [19796.376, 21715.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.218), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54.62% complete, ETA 01:00:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14897.365 ops/s
[info] # Warmup Iteration   2: 34022.965 ops/s
[info] # Warmup Iteration   3: 34885.550 ops/s
[info] # Warmup Iteration   4: 35308.788 ops/s
[info] # Warmup Iteration   5: 35399.880 ops/s
[info] Iteration   1: 35370.725 ops/s
[info]                  ·gc.alloc.rate:               749.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          33350.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29846.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 35194.761 ops/s
[info]                  ·gc.alloc.rate:               751.541 MB/sec
[info]                  ·gc.alloc.rate.norm:          33605.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30011.656 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 35239.324 ops/s
[info]                  ·gc.alloc.rate:               748.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          33441.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29973.339 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 35354.592 ops/s
[info]                  ·gc.alloc.rate:               749.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          33368.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29889.842 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 35435.155 ops/s
[info]                  ·gc.alloc.rate:                   749.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              33301.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29821.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.925 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   35318.912 ±(99.9%) 381.280 ops/s [Average]
[info]   (min, avg, max) = (35194.761, 35318.912, 35435.155), stdev = 99.017
[info]   CI (99.9%): [34937.631, 35700.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   749.895 ±(99.9%) 3.860 MB/sec [Average]
[info]   (min, avg, max) = (748.818, 749.895, 751.541), stdev = 1.002
[info]   CI (99.9%): [746.035, 753.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   33413.389 ±(99.9%) 455.473 B/op [Average]
[info]   (min, avg, max) = (33301.784, 33413.389, 33605.068), stdev = 118.285
[info]   CI (99.9%): [32957.915, 33868.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   671.238 ±(99.9%) 1.057 MB/sec [Average]
[info]   (min, avg, max) = (670.846, 671.238, 671.502), stdev = 0.274
[info]   CI (99.9%): [670.181, 672.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29908.611 ±(99.9%) 313.879 B/op [Average]
[info]   (min, avg, max) = (29821.533, 29908.611, 30011.656), stdev = 81.513
[info]   CI (99.9%): [29594.733, 30222.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.185 ±(99.9%) 1.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.925), stdev = 0.413
[info]   CI (99.9%): [≈ 0, 1.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 01:00:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9100.156 ops/s
[info] # Warmup Iteration   2: 37320.846 ops/s
[info] # Warmup Iteration   3: 42293.979 ops/s
[info] # Warmup Iteration   4: 40734.873 ops/s
[info] # Warmup Iteration   5: 42520.403 ops/s
[info] Iteration   1: 41862.986 ops/s
[info]                  ·gc.alloc.rate:               1531.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          57589.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50287.571 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 41267.204 ops/s
[info]                  ·gc.alloc.rate:                   1508.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              57532.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51062.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 41386.000 ops/s
[info]                  ·gc.alloc.rate:                   1523.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              57941.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50965.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41532.419 ops/s
[info]                  ·gc.alloc.rate:                   1529.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              57954.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50636.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42691.482 ops/s
[info]                  ·gc.alloc.rate:                   1598.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              58911.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73793.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   41748.018 ±(99.9%) 2205.367 ops/s [Average]
[info]   (min, avg, max) = (41267.204, 41748.018, 42691.482), stdev = 572.727
[info]   CI (99.9%): [39542.651, 43953.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1538.431 ±(99.9%) 133.174 MB/sec [Average]
[info]   (min, avg, max) = (1508.660, 1538.431, 1598.145), stdev = 34.585
[info]   CI (99.9%): [1405.257, 1671.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57985.827 ±(99.9%) 2128.215 B/op [Average]
[info]   (min, avg, max) = (57532.488, 57985.827, 58911.177), stdev = 552.691
[info]   CI (99.9%): [55857.613, 60114.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.075 ±(99.9%) 1142.584 MB/sec [Average]
[info]   (min, avg, max) = (1336.347, 1471.075, 2001.867), stdev = 296.726
[info]   CI (99.9%): [328.490, 2613.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   55349.076 ±(99.9%) 39719.706 B/op [Average]
[info]   (min, avg, max) = (50287.571, 55349.076, 73793.229), stdev = 10315.082
[info]   CI (99.9%): [15629.369, 95068.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 7.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.122), stdev = 1.834
[info]   CI (99.9%): [≈ 0, 7.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.971 ±(99.9%) 268.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.971, 156.735), stdev = 69.748
[info]   CI (99.9%): [≈ 0, 300.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.02% complete, ETA 01:00:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367400.205 ops/s
[info] # Warmup Iteration   2: 719813.793 ops/s
[info] # Warmup Iteration   3: 763858.900 ops/s
[info] # Warmup Iteration   4: 761361.128 ops/s
[info] # Warmup Iteration   5: 786646.541 ops/s
[info] Iteration   1: 763519.516 ops/s
[info]                  ·gc.alloc.rate:                   1544.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              3183.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2772.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 761608.288 ops/s
[info]                  ·gc.alloc.rate:               1526.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          3154.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2780.554 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 763551.176 ops/s
[info]                  ·gc.alloc.rate:                   1557.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              3210.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4161.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 767091.678 ops/s
[info]                  ·gc.alloc.rate:                   1537.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              3153.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2756.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 764610.415 ops/s
[info]                  ·gc.alloc.rate:                   1533.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              3155.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2764.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   764076.214 ±(99.9%) 7714.425 ops/s [Average]
[info]   (min, avg, max) = (761608.288, 764076.214, 767091.678), stdev = 2003.412
[info]   CI (99.9%): [756361.789, 771790.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1539.853 ±(99.9%) 45.430 MB/sec [Average]
[info]   (min, avg, max) = (1526.677, 1539.853, 1557.516), stdev = 11.798
[info]   CI (99.9%): [1494.423, 1585.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3171.386 ±(99.9%) 96.361 B/op [Average]
[info]   (min, avg, max) = (3153.446, 3171.386, 3210.122), stdev = 25.025
[info]   CI (99.9%): [3075.025, 3267.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.360 ±(99.9%) 1161.955 MB/sec [Average]
[info]   (min, avg, max) = (1343.250, 1479.360, 2019.155), stdev = 301.756
[info]   CI (99.9%): [317.405, 2641.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3047.010 ±(99.9%) 2399.449 B/op [Average]
[info]   (min, avg, max) = (2756.541, 3047.010, 4161.583), stdev = 623.129
[info]   CI (99.9%): [647.561, 5446.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.620 ±(99.9%) 5.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 2.956), stdev = 1.306
[info]   CI (99.9%): [≈ 0, 5.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.279 ±(99.9%) 10.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.279, 6.093), stdev = 2.692
[info]   CI (99.9%): [≈ 0, 11.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.22% complete, ETA 00:59:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2759.732 ops/s
[info] # Warmup Iteration   2: 21235.644 ops/s
[info] # Warmup Iteration   3: 31832.477 ops/s
[info] # Warmup Iteration   4: 31733.212 ops/s
[info] # Warmup Iteration   5: 30986.471 ops/s
[info] Iteration   1: 31492.987 ops/s
[info]                  ·gc.alloc.rate:               2180.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          108976.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100144.151 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 31896.421 ops/s
[info]                  ·gc.alloc.rate:                   2220.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              109554.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99191.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 31945.875 ops/s
[info]                  ·gc.alloc.rate:               2223.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          109536.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99236.185 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 31840.478 ops/s
[info]                  ·gc.alloc.rate:               2242.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          110815.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133121.672 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 31887.684 ops/s
[info]                  ·gc.alloc.rate:               2234.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          110241.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99912.914 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   31812.689 ±(99.9%) 703.087 ops/s [Average]
[info]   (min, avg, max) = (31492.987, 31812.689, 31945.875), stdev = 182.589
[info]   CI (99.9%): [31109.602, 32515.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2220.266 ±(99.9%) 90.983 MB/sec [Average]
[info]   (min, avg, max) = (2180.872, 2220.266, 2242.058), stdev = 23.628
[info]   CI (99.9%): [2129.282, 2311.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109824.954 ±(99.9%) 2742.336 B/op [Average]
[info]   (min, avg, max) = (108976.998, 109824.954, 110815.051), stdev = 712.176
[info]   CI (99.9%): [107082.618, 112567.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.480 ±(99.9%) 1171.135 MB/sec [Average]
[info]   (min, avg, max) = (2004.107, 2149.480, 2693.375), stdev = 304.140
[info]   CI (99.9%): [978.345, 3320.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106321.264 ±(99.9%) 57712.112 B/op [Average]
[info]   (min, avg, max) = (99191.398, 106321.264, 133121.672), stdev = 14987.652
[info]   CI (99.9%): [48609.152, 164033.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.562), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.546 ±(99.9%) 47.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.546, 27.731), stdev = 12.402
[info]   CI (99.9%): [≈ 0, 53.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55.42% complete, ETA 00:59:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7061.979 ops/s
[info] # Warmup Iteration   2: 33835.593 ops/s
[info] # Warmup Iteration   3: 40129.277 ops/s
[info] # Warmup Iteration   4: 39672.843 ops/s
[info] # Warmup Iteration   5: 41452.654 ops/s
[info] Iteration   1: 40661.516 ops/s
[info]                  ·gc.alloc.rate:                   1700.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              65798.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78056.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.611 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 41106.679 ops/s
[info]                  ·gc.alloc.rate:                   1709.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              65461.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51503.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 40757.617 ops/s
[info]                  ·gc.alloc.rate:                   1710.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              66021.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77782.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41445.329 ops/s
[info]                  ·gc.alloc.rate:                   1736.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              65942.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50892.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41428.333 ops/s
[info]                  ·gc.alloc.rate:                   1750.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              66474.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76318.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   41079.895 ±(99.9%) 1407.689 ops/s [Average]
[info]   (min, avg, max) = (40661.516, 41079.895, 41445.329), stdev = 365.572
[info]   CI (99.9%): [39672.205, 42487.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1721.367 ±(99.9%) 80.927 MB/sec [Average]
[info]   (min, avg, max) = (1700.103, 1721.367, 1750.012), stdev = 21.016
[info]   CI (99.9%): [1640.440, 1802.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65939.795 ±(99.9%) 1417.069 B/op [Average]
[info]   (min, avg, max) = (65461.321, 65939.795, 66474.775), stdev = 368.008
[info]   CI (99.9%): [64522.726, 67356.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.269 ±(99.9%) 1414.627 MB/sec [Average]
[info]   (min, avg, max) = (1340.333, 1745.269, 2016.824), stdev = 367.374
[info]   CI (99.9%): [330.642, 3159.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   66910.726 ±(99.9%) 55298.630 B/op [Average]
[info]   (min, avg, max) = (50892.170, 66910.726, 78056.647), stdev = 14360.879
[info]   CI (99.9%): [11612.096, 122209.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.759 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.766, 2.915), stdev = 1.236
[info]   CI (99.9%): [≈ 0, 5.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29.371 ±(99.9%) 182.174 B/op [Average]
[info]   (min, avg, max) = (0.790, 29.371, 111.575), stdev = 47.310
[info]   CI (99.9%): [≈ 0, 211.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.62% complete, ETA 00:59:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152748.229 ops/s
[info] # Warmup Iteration   2: 324076.499 ops/s
[info] # Warmup Iteration   3: 351071.253 ops/s
[info] # Warmup Iteration   4: 351351.565 ops/s
[info] # Warmup Iteration   5: 346446.295 ops/s
[info] Iteration   1: 350831.321 ops/s
[info]                  ·gc.alloc.rate:               1000.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          4488.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2998.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 349537.653 ops/s
[info]                  ·gc.alloc.rate:               1003.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          4519.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6022.541 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 351093.857 ops/s
[info]                  ·gc.alloc.rate:               991.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          4443.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3000.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 351252.493 ops/s
[info]                  ·gc.alloc.rate:                   991.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              4441.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2999.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 349515.168 ops/s
[info]                  ·gc.alloc.rate:                   1000.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              4506.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6034.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   350446.099 ±(99.9%) 3284.446 ops/s [Average]
[info]   (min, avg, max) = (349515.168, 350446.099, 351252.493), stdev = 852.960
[info]   CI (99.9%): [347161.652, 353730.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   997.594 ±(99.9%) 22.586 MB/sec [Average]
[info]   (min, avg, max) = (991.241, 997.594, 1003.876), stdev = 5.865
[info]   CI (99.9%): [975.008, 1020.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4479.929 ±(99.9%) 138.370 B/op [Average]
[info]   (min, avg, max) = (4441.099, 4479.929, 4519.843), stdev = 35.934
[info]   CI (99.9%): [4341.559, 4618.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   937.077 ±(99.9%) 1412.675 MB/sec [Average]
[info]   (min, avg, max) = (668.501, 937.077, 1340.285), stdev = 366.867
[info]   CI (99.9%): [≈ 0, 2349.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4211.298 ±(99.9%) 6388.491 B/op [Average]
[info]   (min, avg, max) = (2998.664, 4211.298, 6034.883), stdev = 1659.071
[info]   CI (99.9%): [≈ 0, 10599.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.056 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.187), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.82% complete, ETA 00:59:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1031002.549 ops/s
[info] # Warmup Iteration   2: 1810009.776 ops/s
[info] # Warmup Iteration   3: 1915646.296 ops/s
[info] # Warmup Iteration   4: 1918362.561 ops/s
[info] # Warmup Iteration   5: 1949042.568 ops/s
[info] Iteration   1: 1959563.689 ops/s
[info]                  ·gc.alloc.rate:               1160.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          932.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 539.794 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1921915.740 ops/s
[info]                  ·gc.alloc.rate:                   1153.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1101.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1878938.255 ops/s
[info]                  ·gc.alloc.rate:               1175.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          984.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1126.790 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1925696.853 ops/s
[info]                  ·gc.alloc.rate:                   1140.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              932.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     549.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1925070.808 ops/s
[info]                  ·gc.alloc.rate:                   1165.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              953.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1100.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1922237.069 ±(99.9%) 110402.859 ops/s [Average]
[info]   (min, avg, max) = (1878938.255, 1922237.069, 1959563.689), stdev = 28671.272
[info]   CI (99.9%): [1811834.210, 2032639.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1159.331 ±(99.9%) 50.371 MB/sec [Average]
[info]   (min, avg, max) = (1140.998, 1159.331, 1175.590), stdev = 13.081
[info]   CI (99.9%): [1108.960, 1209.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   949.345 ±(99.9%) 82.820 B/op [Average]
[info]   (min, avg, max) = (932.296, 949.345, 984.483), stdev = 21.508
[info]   CI (99.9%): [866.525, 1032.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.160 ±(99.9%) 1418.983 MB/sec [Average]
[info]   (min, avg, max) = (672.154, 1076.160, 1345.635), stdev = 368.505
[info]   CI (99.9%): [≈ 0, 2495.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   883.515 ±(99.9%) 1191.354 B/op [Average]
[info]   (min, avg, max) = (539.794, 883.515, 1126.790), stdev = 309.391
[info]   CI (99.9%): [≈ 0, 2074.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.562 ±(99.9%) 4.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.685), stdev = 1.188
[info]   CI (99.9%): [≈ 0, 5.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.460 ±(99.9%) 3.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 2.195), stdev = 0.971
[info]   CI (99.9%): [≈ 0, 4.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.581
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.02% complete, ETA 00:58:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 974185.377 ops/s
[info] # Warmup Iteration   2: 2163896.727 ops/s
[info] # Warmup Iteration   3: 2227098.653 ops/s
[info] # Warmup Iteration   4: 2229853.292 ops/s
[info] # Warmup Iteration   5: 2231879.225 ops/s
[info] Iteration   1: 2215228.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2239826.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2243337.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2243577.079 ops/s
[info]                  ·gc.alloc.rate:      0.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2247027.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2237799.336 ±(99.9%) 49566.818 ops/s [Average]
[info]   (min, avg, max) = (2215228.068, 2237799.336, 2247027.884), stdev = 12872.345
[info]   CI (99.9%): [2188232.519, 2287366.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.007 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.005, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.22% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67771.786 ops/s
[info] # Warmup Iteration   2: 237921.161 ops/s
[info] # Warmup Iteration   3: 242330.792 ops/s
[info] # Warmup Iteration   4: 248704.862 ops/s
[info] # Warmup Iteration   5: 253974.789 ops/s
[info] Iteration   1: 252783.070 ops/s
[info]                  ·gc.alloc.rate:               1677.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          10445.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12417.429 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 253970.641 ops/s
[info]                  ·gc.alloc.rate:                   1682.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              10426.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8247.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 253226.676 ops/s
[info]                  ·gc.alloc.rate:               1689.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          10499.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12426.270 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 250292.387 ops/s
[info]                  ·gc.alloc.rate:               1671.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          10508.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8398.359 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 253865.789 ops/s
[info]                  ·gc.alloc.rate:               1693.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          10499.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12449.221 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   252827.713 ±(99.9%) 5767.273 ops/s [Average]
[info]   (min, avg, max) = (250292.387, 252827.713, 253970.641), stdev = 1497.743
[info]   CI (99.9%): [247060.440, 258594.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1682.995 ±(99.9%) 34.497 MB/sec [Average]
[info]   (min, avg, max) = (1671.325, 1682.995, 1693.625), stdev = 8.959
[info]   CI (99.9%): [1648.498, 1717.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10475.827 ±(99.9%) 143.329 B/op [Average]
[info]   (min, avg, max) = (10426.487, 10475.827, 10508.742), stdev = 37.222
[info]   CI (99.9%): [10332.499, 10619.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1733.817 ±(99.9%) 1407.884 MB/sec [Average]
[info]   (min, avg, max) = (1330.986, 1733.817, 2008.207), stdev = 365.623
[info]   CI (99.9%): [325.933, 3141.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10787.743 ±(99.9%) 8666.831 B/op [Average]
[info]   (min, avg, max) = (8247.436, 10787.743, 12449.221), stdev = 2250.748
[info]   CI (99.9%): [2120.912, 19454.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56.43% complete, ETA 00:58:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31667.015 ops/s
[info] # Warmup Iteration   2: 50854.272 ops/s
[info] # Warmup Iteration   3: 52174.372 ops/s
[info] # Warmup Iteration   4: 52719.930 ops/s
[info] # Warmup Iteration   5: 52537.140 ops/s
[info] Iteration   1: 52816.835 ops/s
[info]                  ·gc.alloc.rate:                   574.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              17112.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19998.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 52544.313 ops/s
[info]                  ·gc.alloc.rate:               563.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          16887.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20101.614 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 52777.111 ops/s
[info]                  ·gc.alloc.rate:      550.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 16408.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 52573.254 ops/s
[info]                  ·gc.alloc.rate:                   572.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              17149.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20100.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 52542.883 ops/s
[info]                  ·gc.alloc.rate:               567.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          16995.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20111.973 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   52650.879 ±(99.9%) 518.483 ops/s [Average]
[info]   (min, avg, max) = (52542.883, 52650.879, 52816.835), stdev = 134.649
[info]   CI (99.9%): [52132.396, 53169.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   565.752 ±(99.9%) 37.042 MB/sec [Average]
[info]   (min, avg, max) = (550.289, 565.752, 574.300), stdev = 9.620
[info]   CI (99.9%): [528.710, 602.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16910.444 ±(99.9%) 1152.110 B/op [Average]
[info]   (min, avg, max) = (16408.008, 16910.444, 17149.664), stdev = 299.199
[info]   CI (99.9%): [15758.335, 18062.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   537.058 ±(99.9%) 1156.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.058, 671.500), stdev = 300.225
[info]   CI (99.9%): [≈ 0, 1693.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16062.439 ±(99.9%) 34576.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16062.439, 20111.973), stdev = 8979.295
[info]   CI (99.9%): [≈ 0, 50638.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.249 ±(99.9%) 1.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 0.623), stdev = 0.341
[info]   CI (99.9%): [≈ 0, 1.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.63% complete, ETA 00:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20982.656 ops/s
[info] # Warmup Iteration   2: 64870.294 ops/s
[info] # Warmup Iteration   3: 68019.497 ops/s
[info] # Warmup Iteration   4: 70626.708 ops/s
[info] # Warmup Iteration   5: 71052.248 ops/s
[info] Iteration   1: 72377.515 ops/s
[info]                  ·gc.alloc.rate:                   1584.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              34455.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29172.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 72832.433 ops/s
[info]                  ·gc.alloc.rate:                   1592.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              34405.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29005.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 72154.358 ops/s
[info]                  ·gc.alloc.rate:                   1616.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              35249.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43892.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 72761.759 ops/s
[info]                  ·gc.alloc.rate:                   1616.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28946.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 72917.680 ops/s
[info]                  ·gc.alloc.rate:                   1607.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              34686.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28856.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72608.749 ±(99.9%) 1260.793 ops/s [Average]
[info]   (min, avg, max) = (72154.358, 72608.749, 72917.680), stdev = 327.424
[info]   CI (99.9%): [71347.956, 73869.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1603.360 ±(99.9%) 55.105 MB/sec [Average]
[info]   (min, avg, max) = (1584.689, 1603.360, 1616.428), stdev = 14.311
[info]   CI (99.9%): [1548.255, 1658.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34751.458 ±(99.9%) 1365.715 B/op [Average]
[info]   (min, avg, max) = (34405.758, 34751.458, 35249.467), stdev = 354.672
[info]   CI (99.9%): [33385.744, 36117.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.391 ±(99.9%) 1158.229 MB/sec [Average]
[info]   (min, avg, max) = (1337.026, 1474.391, 2012.442), stdev = 300.788
[info]   CI (99.9%): [316.161, 2632.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31974.504 ±(99.9%) 25657.698 B/op [Average]
[info]   (min, avg, max) = (28856.328, 31974.504, 43892.257), stdev = 6663.223
[info]   CI (99.9%): [6316.806, 57632.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.829, 3.934), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18.063 ±(99.9%) 145.863 B/op [Average]
[info]   (min, avg, max) = (0.450, 18.063, 85.812), stdev = 37.880
[info]   CI (99.9%): [≈ 0, 163.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.83% complete, ETA 00:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28061.064 ops/s
[info] # Warmup Iteration   2: 74718.229 ops/s
[info] # Warmup Iteration   3: 83649.909 ops/s
[info] # Warmup Iteration   4: 82947.831 ops/s
[info] # Warmup Iteration   5: 83495.740 ops/s
[info] Iteration   1: 85882.230 ops/s
[info]                  ·gc.alloc.rate:                   1134.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              20779.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24475.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 86452.868 ops/s
[info]                  ·gc.alloc.rate:               1118.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          20359.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12162.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 86409.797 ops/s
[info]                  ·gc.alloc.rate:                   1141.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              20788.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24349.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 86076.761 ops/s
[info]                  ·gc.alloc.rate:                   1137.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              20801.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24457.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 86027.170 ops/s
[info]                  ·gc.alloc.rate:                   1109.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              20305.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12246.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.356 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   86169.765 ±(99.9%) 961.549 ops/s [Average]
[info]   (min, avg, max) = (85882.230, 86169.765, 86452.868), stdev = 249.711
[info]   CI (99.9%): [85208.217, 87131.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1128.345 ±(99.9%) 51.969 MB/sec [Average]
[info]   (min, avg, max) = (1109.994, 1128.345, 1141.474), stdev = 13.496
[info]   CI (99.9%): [1076.376, 1180.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20606.882 ±(99.9%) 968.217 B/op [Average]
[info]   (min, avg, max) = (20305.567, 20606.882, 20801.611), stdev = 251.443
[info]   CI (99.9%): [19638.666, 21575.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.621 ±(99.9%) 1408.897 MB/sec [Average]
[info]   (min, avg, max) = (668.166, 1069.621, 1337.722), stdev = 365.886
[info]   CI (99.9%): [≈ 0, 2478.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19538.345 ±(99.9%) 25779.638 B/op [Average]
[info]   (min, avg, max) = (12162.710, 19538.345, 24475.196), stdev = 6694.890
[info]   CI (99.9%): [≈ 0, 45317.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 6.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.518), stdev = 1.562
[info]   CI (99.9%): [≈ 0, 6.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.252 ±(99.9%) 110.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.252, 64.356), stdev = 28.570
[info]   CI (99.9%): [≈ 0, 123.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.03% complete, ETA 00:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44486.729 ops/s
[info] # Warmup Iteration   2: 93183.618 ops/s
[info] # Warmup Iteration   3: 92915.618 ops/s
[info] # Warmup Iteration   4: 94896.218 ops/s
[info] # Warmup Iteration   5: 94064.407 ops/s
[info] Iteration   1: 95563.631 ops/s
[info]                  ·gc.alloc.rate:                   1163.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              19164.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11052.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 94357.468 ops/s
[info]                  ·gc.alloc.rate:                   1166.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              19458.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22394.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 94954.372 ops/s
[info]                  ·gc.alloc.rate:               1190.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          19736.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22269.957 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 95631.123 ops/s
[info]                  ·gc.alloc.rate:                   1175.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              19348.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11061.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 95230.138 ops/s
[info]                  ·gc.alloc.rate:                   1171.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              19361.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22226.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   95147.346 ±(99.9%) 1996.526 ops/s [Average]
[info]   (min, avg, max) = (94357.468, 95147.346, 95631.123), stdev = 518.491
[info]   CI (99.9%): [93150.820, 97143.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1173.741 ±(99.9%) 40.897 MB/sec [Average]
[info]   (min, avg, max) = (1163.735, 1173.741, 1190.846), stdev = 10.621
[info]   CI (99.9%): [1132.845, 1214.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19413.814 ±(99.9%) 805.503 B/op [Average]
[info]   (min, avg, max) = (19164.452, 19413.814, 19736.195), stdev = 209.187
[info]   CI (99.9%): [18608.311, 20219.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.968 ±(99.9%) 1417.654 MB/sec [Average]
[info]   (min, avg, max) = (671.175, 1074.968, 1345.081), stdev = 368.160
[info]   CI (99.9%): [≈ 0, 2492.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17800.975 ±(99.9%) 23706.785 B/op [Average]
[info]   (min, avg, max) = (11052.943, 17800.975, 22394.169), stdev = 6156.577
[info]   CI (99.9%): [≈ 0, 41507.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 5.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 3.144), stdev = 1.399
[info]   CI (99.9%): [≈ 0, 6.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.596 ±(99.9%) 89.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.596, 51.947), stdev = 23.117
[info]   CI (99.9%): [≈ 0, 99.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.23% complete, ETA 00:57:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6953.666 ops/s
[info] # Warmup Iteration   2: 43264.198 ops/s
[info] # Warmup Iteration   3: 45659.734 ops/s
[info] # Warmup Iteration   4: 45057.899 ops/s
[info] # Warmup Iteration   5: 44672.741 ops/s
[info] Iteration   1: 45192.474 ops/s
[info]                  ·gc.alloc.rate:                   2089.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              72772.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69917.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.758 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 45957.700 ops/s
[info]                  ·gc.alloc.rate:                   2148.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              73578.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68524.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 46024.484 ops/s
[info]                  ·gc.alloc.rate:                   2150.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              73507.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68336.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 46102.285 ops/s
[info]                  ·gc.alloc.rate:                   2156.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              73558.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2663.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90862.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 46083.707 ops/s
[info]                  ·gc.alloc.rate:               2168.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          74016.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68463.530 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   45872.130 ±(99.9%) 1479.121 ops/s [Average]
[info]   (min, avg, max) = (45192.474, 45872.130, 46102.285), stdev = 384.123
[info]   CI (99.9%): [44393.009, 47351.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2142.616 ±(99.9%) 117.433 MB/sec [Average]
[info]   (min, avg, max) = (2089.779, 2142.616, 2168.083), stdev = 30.497
[info]   CI (99.9%): [2025.183, 2260.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73486.729 ±(99.9%) 1727.281 B/op [Average]
[info]   (min, avg, max) = (72772.316, 73486.729, 74016.276), stdev = 448.569
[info]   CI (99.9%): [71759.448, 75214.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2135.353 ±(99.9%) 1136.574 MB/sec [Average]
[info]   (min, avg, max) = (1999.110, 2135.353, 2663.324), stdev = 295.165
[info]   CI (99.9%): [998.780, 3271.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73220.848 ±(99.9%) 38055.898 B/op [Average]
[info]   (min, avg, max) = (68336.367, 73220.848, 90862.661), stdev = 9882.996
[info]   CI (99.9%): [35164.949, 111276.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.962 ±(99.9%) 7.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.962, 4.559), stdev = 2.012
[info]   CI (99.9%): [≈ 0, 8.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.458 ±(99.9%) 269.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.458, 158.758), stdev = 70.068
[info]   CI (99.9%): [≈ 0, 303.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 10.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57.43% complete, ETA 00:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20502.196 ops/s
[info] # Warmup Iteration   2: 78487.452 ops/s
[info] # Warmup Iteration   3: 77832.619 ops/s
[info] # Warmup Iteration   4: 79885.988 ops/s
[info] # Warmup Iteration   5: 79680.180 ops/s
[info] Iteration   1: 79284.369 ops/s
[info]                  ·gc.alloc.rate:                   1430.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              28383.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26656.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 77693.875 ops/s
[info]                  ·gc.alloc.rate:                   1409.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              28534.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27216.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 77057.736 ops/s
[info]                  ·gc.alloc.rate:                   1398.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              28551.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27456.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 79484.775 ops/s
[info]                  ·gc.alloc.rate:                   1439.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              28502.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26577.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 79732.739 ops/s
[info]                  ·gc.alloc.rate:                   1482.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              29263.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39657.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   78650.699 ±(99.9%) 4605.133 ops/s [Average]
[info]   (min, avg, max) = (77057.736, 78650.699, 79732.739), stdev = 1195.938
[info]   CI (99.9%): [74045.566, 83255.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1431.916 ±(99.9%) 126.073 MB/sec [Average]
[info]   (min, avg, max) = (1398.108, 1431.916, 1482.576), stdev = 32.741
[info]   CI (99.9%): [1305.843, 1557.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28647.245 ±(99.9%) 1350.314 B/op [Average]
[info]   (min, avg, max) = (28383.600, 28647.245, 29263.442), stdev = 350.672
[info]   CI (99.9%): [27296.931, 29997.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1476.631 ±(99.9%) 1146.307 MB/sec [Average]
[info]   (min, avg, max) = (1342.370, 1476.631, 2009.157), stdev = 297.692
[info]   CI (99.9%): [330.324, 2622.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29512.786 ±(99.9%) 21883.269 B/op [Average]
[info]   (min, avg, max) = (26577.449, 29512.786, 39657.227), stdev = 5683.015
[info]   CI (99.9%): [7629.518, 51396.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 5.184 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.808, 3.144), stdev = 1.346
[info]   CI (99.9%): [≈ 0, 5.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   16.387 ±(99.9%) 105.912 B/op [Average]
[info]   (min, avg, max) = (0.422, 16.387, 64.202), stdev = 27.505
[info]   CI (99.9%): [≈ 0, 122.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.63% complete, ETA 00:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31579.622 ops/s
[info] # Warmup Iteration   2: 108733.583 ops/s
[info] # Warmup Iteration   3: 111644.186 ops/s
[info] # Warmup Iteration   4: 110758.522 ops/s
[info] # Warmup Iteration   5: 112339.591 ops/s
[info] Iteration   1: 112746.855 ops/s
[info]                  ·gc.alloc.rate:               1071.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          14953.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9340.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 112334.848 ops/s
[info]                  ·gc.alloc.rate:                   1081.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              15148.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18758.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 112268.198 ops/s
[info]                  ·gc.alloc.rate:               1087.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          15243.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18780.103 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 112067.016 ops/s
[info]                  ·gc.alloc.rate:               1059.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          14872.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9411.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 112660.036 ops/s
[info]                  ·gc.alloc.rate:                   1090.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              15239.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18732.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   112415.391 ±(99.9%) 1087.828 ops/s [Average]
[info]   (min, avg, max) = (112067.016, 112415.391, 112746.855), stdev = 282.505
[info]   CI (99.9%): [111327.563, 113503.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1078.160 ±(99.9%) 49.658 MB/sec [Average]
[info]   (min, avg, max) = (1059.150, 1078.160, 1090.909), stdev = 12.896
[info]   CI (99.9%): [1028.502, 1127.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15091.598 ±(99.9%) 653.186 B/op [Average]
[info]   (min, avg, max) = (14872.445, 15091.598, 15243.185), stdev = 169.630
[info]   CI (99.9%): [14438.412, 15744.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1071.936 ±(99.9%) 1413.608 MB/sec [Average]
[info]   (min, avg, max) = (669.331, 1071.936, 1340.923), stdev = 367.109
[info]   CI (99.9%): [≈ 0, 2485.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15004.482 ±(99.9%) 19785.803 B/op [Average]
[info]   (min, avg, max) = (9340.202, 15004.482, 18780.103), stdev = 5138.310
[info]   CI (99.9%): [≈ 0, 34790.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 6.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 3.539), stdev = 1.578
[info]   CI (99.9%): [≈ 0, 6.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.004 ±(99.9%) 84.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.004, 49.436), stdev = 22.045
[info]   CI (99.9%): [≈ 0, 94.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.83% complete, ETA 00:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157559.956 ops/s
[info] # Warmup Iteration   2: 321765.547 ops/s
[info] # Warmup Iteration   3: 321532.981 ops/s
[info] # Warmup Iteration   4: 326876.455 ops/s
[info] # Warmup Iteration   5: 326516.552 ops/s
[info] Iteration   1: 326320.575 ops/s
[info]                  ·gc.alloc.rate:               504.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          2433.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2467.396 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 327265.671 ops/s
[info]                  ·gc.alloc.rate:               511.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          2457.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3204.994 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 327447.295 ops/s
[info]                  ·gc.alloc.rate:               502.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          2414.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3203.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 325354.634 ops/s
[info]                  ·gc.alloc.rate:      482.957 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 322858.778 ops/s
[info]                  ·gc.alloc.rate:                   502.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              2451.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3253.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   325849.391 ±(99.9%) 7196.098 ops/s [Average]
[info]   (min, avg, max) = (322858.778, 325849.391, 327447.295), stdev = 1868.804
[info]   CI (99.9%): [318653.292, 333045.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   500.770 ±(99.9%) 40.575 MB/sec [Average]
[info]   (min, avg, max) = (482.957, 500.770, 511.039), stdev = 10.537
[info]   CI (99.9%): [460.195, 541.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2418.440 ±(99.9%) 189.002 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2418.440, 2457.340), stdev = 49.083
[info]   CI (99.9%): [2229.439, 2607.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.449 ±(99.9%) 1112.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.449, 667.499), stdev = 288.812
[info]   CI (99.9%): [≈ 0, 1614.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2425.854 ±(99.9%) 5371.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2425.854, 3253.674), stdev = 1394.911
[info]   CI (99.9%): [≈ 0, 7797.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.03% complete, ETA 00:56:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281751.830 ops/s
[info] # Warmup Iteration   2: 502578.586 ops/s
[info] # Warmup Iteration   3: 520124.502 ops/s
[info] # Warmup Iteration   4: 516527.895 ops/s
[info] # Warmup Iteration   5: 536309.055 ops/s
[info] Iteration   1: 514181.750 ops/s
[info]                  ·gc.alloc.rate:                   657.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              2013.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2052.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 511714.014 ops/s
[info]                  ·gc.alloc.rate:               657.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          2021.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2062.049 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 518625.222 ops/s
[info]                  ·gc.alloc.rate:                   666.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              2021.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2036.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 529003.288 ops/s
[info]                  ·gc.alloc.rate:               672.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          1999.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1996.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 530521.240 ops/s
[info]                  ·gc.alloc.rate:               672.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          1996.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1991.976 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   520809.103 ±(99.9%) 32949.569 ops/s [Average]
[info]   (min, avg, max) = (511714.014, 520809.103, 530521.240), stdev = 8556.898
[info]   CI (99.9%): [487859.534, 553758.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   665.308 ±(99.9%) 28.982 MB/sec [Average]
[info]   (min, avg, max) = (657.311, 665.308, 672.989), stdev = 7.526
[info]   CI (99.9%): [636.326, 694.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2010.509 ±(99.9%) 45.620 B/op [Average]
[info]   (min, avg, max) = (1996.386, 2010.509, 2021.488), stdev = 11.847
[info]   CI (99.9%): [1964.889, 2056.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.962 ±(99.9%) 1.720 MB/sec [Average]
[info]   (min, avg, max) = (670.496, 670.962, 671.502), stdev = 0.447
[info]   CI (99.9%): [669.243, 672.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2027.874 ±(99.9%) 123.299 B/op [Average]
[info]   (min, avg, max) = (1991.976, 2027.874, 2062.049), stdev = 32.020
[info]   CI (99.9%): [1904.575, 2151.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.190), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.23% complete, ETA 00:55:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 455860.305 ops/s
[info] # Warmup Iteration   2: 742417.324 ops/s
[info] # Warmup Iteration   3: 740283.853 ops/s
[info] # Warmup Iteration   4: 766795.184 ops/s
[info] # Warmup Iteration   5: 734856.427 ops/s
[info] Iteration   1: 760745.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 767840.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 779838.016 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 757101.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 727562.309 ops/s
[info]                  ·gc.alloc.rate:      3.254 MB/sec
[info]                  ·gc.alloc.rate.norm: 7.038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   758617.598 ±(99.9%) 74732.046 ops/s [Average]
[info]   (min, avg, max) = (727562.309, 758617.598, 779838.016), stdev = 19407.675
[info]   CI (99.9%): [683885.553, 833349.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.651 ±(99.9%) 5.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.651, 3.254), stdev = 1.455
[info]   CI (99.9%): [≈ 0, 6.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.408 ±(99.9%) 12.119 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.408, 7.038), stdev = 3.147
[info]   CI (99.9%): [≈ 0, 13.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:55:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90901.898 ops/s
[info] # Warmup Iteration   2: 233134.045 ops/s
[info] # Warmup Iteration   3: 245728.233 ops/s
[info] # Warmup Iteration   4: 247059.941 ops/s
[info] # Warmup Iteration   5: 247458.609 ops/s
[info] Iteration   1: 249216.270 ops/s
[info]                  ·gc.alloc.rate:               820.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          5182.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4217.307 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 248992.300 ops/s
[info]                  ·gc.alloc.rate:                   840.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              5313.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8450.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 249306.181 ops/s
[info]                  ·gc.alloc.rate:               816.173 MB/sec
[info]                  ·gc.alloc.rate.norm:          5151.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4221.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 249120.021 ops/s
[info]                  ·gc.alloc.rate:               814.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          5142.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4225.176 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 249033.055 ops/s
[info]                  ·gc.alloc.rate:                   817.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              5167.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4230.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   249133.565 ±(99.9%) 497.903 ops/s [Average]
[info]   (min, avg, max) = (248992.300, 249133.565, 249306.181), stdev = 129.304
[info]   CI (99.9%): [248635.662, 249631.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   821.871 ±(99.9%) 41.624 MB/sec [Average]
[info]   (min, avg, max) = (814.005, 821.871, 840.706), stdev = 10.810
[info]   CI (99.9%): [780.247, 863.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5191.645 ±(99.9%) 269.080 B/op [Average]
[info]   (min, avg, max) = (5142.353, 5191.645, 5313.605), stdev = 69.879
[info]   CI (99.9%): [4922.565, 5460.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.404 ±(99.9%) 1150.842 MB/sec [Average]
[info]   (min, avg, max) = (667.869, 802.404, 1337.038), stdev = 298.870
[info]   CI (99.9%): [≈ 0, 1953.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5069.134 ±(99.9%) 7278.932 B/op [Average]
[info]   (min, avg, max) = (4217.307, 5069.134, 8450.621), stdev = 1890.315
[info]   CI (99.9%): [≈ 0, 12348.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.053 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.132), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58.63% complete, ETA 00:55:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17085.894 ops/s
[info] # Warmup Iteration   2: 25367.219 ops/s
[info] # Warmup Iteration   3: 26588.888 ops/s
[info] # Warmup Iteration   4: 26723.874 ops/s
[info] # Warmup Iteration   5: 26317.473 ops/s
[info] Iteration   1: 25808.616 ops/s
[info]                  ·gc.alloc.rate:               362.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          22095.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31196.497 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 26615.409 ops/s
[info]                  ·gc.alloc.rate:                   375.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              22215.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30251.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.693 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26791.245 ops/s
[info]                  ·gc.alloc.rate:      359.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 21088.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26684.935 ops/s
[info]                  ·gc.alloc.rate:               376.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          22210.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39524.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 26788.883 ops/s
[info]                  ·gc.alloc.rate:      358.992 MB/sec
[info]                  ·gc.alloc.rate.norm: 21088.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   26537.818 ±(99.9%) 1595.415 ops/s [Average]
[info]   (min, avg, max) = (25808.616, 26537.818, 26791.245), stdev = 414.324
[info]   CI (99.9%): [24942.403, 28133.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   366.560 ±(99.9%) 34.263 MB/sec [Average]
[info]   (min, avg, max) = (358.992, 366.560, 376.616), stdev = 8.898
[info]   CI (99.9%): [332.297, 400.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   21739.477 ±(99.9%) 2297.402 B/op [Average]
[info]   (min, avg, max) = (21088.016, 21739.477, 22215.751), stdev = 596.628
[info]   CI (99.9%): [19442.075, 24036.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   338.716 ±(99.9%) 1216.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.716, 670.217), stdev = 315.905
[info]   CI (99.9%): [≈ 0, 1555.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   20194.571 ±(99.9%) 72333.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20194.571, 39524.428), stdev = 18784.818
[info]   CI (99.9%): [≈ 0, 92528.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.739 ±(99.9%) 6.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.739, 3.693), stdev = 1.651
[info]   CI (99.9%): [≈ 0, 7.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.84% complete, ETA 00:55:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16223.607 ops/s
[info] # Warmup Iteration   2: 112998.671 ops/s
[info] # Warmup Iteration   3: 121068.436 ops/s
[info] # Warmup Iteration   4: 124304.810 ops/s
[info] # Warmup Iteration   5: 124588.646 ops/s
[info] Iteration   1: 123195.663 ops/s
[info]                  ·gc.alloc.rate:                   1724.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              22017.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17099.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 121350.132 ops/s
[info]                  ·gc.alloc.rate:                   1712.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              22204.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26063.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 122197.986 ops/s
[info]                  ·gc.alloc.rate:                   1722.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              22186.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17210.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 121987.346 ops/s
[info]                  ·gc.alloc.rate:               1732.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          22354.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25833.261 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 122378.688 ops/s
[info]                  ·gc.alloc.rate:               1712.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          22023.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17175.026 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   122221.963 ±(99.9%) 2574.728 ops/s [Average]
[info]   (min, avg, max) = (121350.132, 122221.963, 123195.663), stdev = 668.649
[info]   CI (99.9%): [119647.236, 124796.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1720.866 ±(99.9%) 33.348 MB/sec [Average]
[info]   (min, avg, max) = (1712.163, 1720.866, 1732.829), stdev = 8.660
[info]   CI (99.9%): [1687.518, 1754.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22157.234 ±(99.9%) 542.444 B/op [Average]
[info]   (min, avg, max) = (22017.281, 22157.234, 22354.442), stdev = 140.871
[info]   CI (99.9%): [21614.791, 22699.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1604.613 ±(99.9%) 1411.447 MB/sec [Average]
[info]   (min, avg, max) = (1335.584, 1604.613, 2009.776), stdev = 366.548
[info]   CI (99.9%): [193.166, 3016.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20676.282 ±(99.9%) 18535.732 B/op [Average]
[info]   (min, avg, max) = (17099.169, 20676.282, 26063.651), stdev = 4813.671
[info]   CI (99.9%): [2140.550, 39212.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.830), stdev = 1.700
[info]   CI (99.9%): [≈ 0, 7.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.256 ±(99.9%) 84.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.256, 49.674), stdev = 22.042
[info]   CI (99.9%): [≈ 0, 95.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.04% complete, ETA 00:54:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46720.324 ops/s
[info] # Warmup Iteration   2: 167273.351 ops/s
[info] # Warmup Iteration   3: 180315.117 ops/s
[info] # Warmup Iteration   4: 184733.240 ops/s
[info] # Warmup Iteration   5: 183877.717 ops/s
[info] Iteration   1: 183338.598 ops/s
[info]                  ·gc.alloc.rate:                   1127.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              9675.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11447.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 183805.002 ops/s
[info]                  ·gc.alloc.rate:               1116.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          9560.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5712.174 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 183299.396 ops/s
[info]                  ·gc.alloc.rate:                   1115.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              9578.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11467.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 183610.810 ops/s
[info]                  ·gc.alloc.rate:                   1127.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              9665.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11459.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 184427.788 ops/s
[info]                  ·gc.alloc.rate:                   1107.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              9449.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5710.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   183696.319 ±(99.9%) 1764.254 ops/s [Average]
[info]   (min, avg, max) = (183299.396, 183696.319, 184427.788), stdev = 458.171
[info]   CI (99.9%): [181932.064, 185460.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1118.922 ±(99.9%) 33.094 MB/sec [Average]
[info]   (min, avg, max) = (1107.380, 1118.922, 1127.735), stdev = 8.594
[info]   CI (99.9%): [1085.829, 1152.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9586.016 ±(99.9%) 353.150 B/op [Average]
[info]   (min, avg, max) = (9449.784, 9586.016, 9675.352), stdev = 91.712
[info]   CI (99.9%): [9232.866, 9939.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.543 ±(99.9%) 1407.444 MB/sec [Average]
[info]   (min, avg, max) = (667.151, 1068.543, 1337.027), stdev = 365.509
[info]   CI (99.9%): [≈ 0, 2475.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9159.467 ±(99.9%) 12121.253 B/op [Average]
[info]   (min, avg, max) = (5710.183, 9159.467, 11467.379), stdev = 3147.851
[info]   CI (99.9%): [≈ 0, 21280.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.789), stdev = 1.685
[info]   CI (99.9%): [≈ 0, 7.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.609 ±(99.9%) 55.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.609, 32.331), stdev = 14.380
[info]   CI (99.9%): [≈ 0, 61.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.24% complete, ETA 00:54:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210887.650 ops/s
[info] # Warmup Iteration   2: 391593.694 ops/s
[info] # Warmup Iteration   3: 422152.973 ops/s
[info] # Warmup Iteration   4: 424036.313 ops/s
[info] # Warmup Iteration   5: 420129.382 ops/s
[info] Iteration   1: 423812.590 ops/s
[info]                  ·gc.alloc.rate:               839.089 MB/sec
[info]                  ·gc.alloc.rate.norm:          3115.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2492.192 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 397143.904 ops/s
[info]                  ·gc.alloc.rate:               790.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          3131.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2659.739 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 397797.771 ops/s
[info]                  ·gc.alloc.rate:                   790.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              3126.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2657.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 397535.074 ops/s
[info]                  ·gc.alloc.rate:               786.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          3112.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2659.674 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 420206.811 ops/s
[info]                  ·gc.alloc.rate:               841.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          3151.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2517.317 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   407299.230 ±(99.9%) 51949.590 ops/s [Average]
[info]   (min, avg, max) = (397143.904, 407299.230, 423812.590), stdev = 13491.144
[info]   CI (99.9%): [355349.640, 459248.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   809.486 ±(99.9%) 108.575 MB/sec [Average]
[info]   (min, avg, max) = (786.180, 809.486, 841.519), stdev = 28.197
[info]   CI (99.9%): [700.910, 918.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3127.382 ±(99.9%) 60.338 B/op [Average]
[info]   (min, avg, max) = (3112.306, 3127.382, 3151.607), stdev = 15.670
[info]   CI (99.9%): [3067.044, 3187.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.694 ±(99.9%) 1.519 MB/sec [Average]
[info]   (min, avg, max) = (671.249, 671.694, 672.155), stdev = 0.395
[info]   CI (99.9%): [670.175, 673.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2597.383 ±(99.9%) 327.406 B/op [Average]
[info]   (min, avg, max) = (2492.192, 2597.383, 2659.739), stdev = 85.026
[info]   CI (99.9%): [2269.977, 2924.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.165), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.44% complete, ETA 00:54:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6216.575 ops/s
[info] # Warmup Iteration   2: 52130.150 ops/s
[info] # Warmup Iteration   3: 67604.246 ops/s
[info] # Warmup Iteration   4: 66868.935 ops/s
[info] # Warmup Iteration   5: 68233.907 ops/s
[info] Iteration   1: 68157.493 ops/s
[info]                  ·gc.alloc.rate:                   2734.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              63127.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61923.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 68619.183 ops/s
[info]                  ·gc.alloc.rate:                   2737.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              62775.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61661.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 68377.264 ops/s
[info]                  ·gc.alloc.rate:               2769.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          63730.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62016.433 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 68674.408 ops/s
[info]                  ·gc.alloc.rate:               2781.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          63738.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61918.911 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 68557.954 ops/s
[info]                  ·gc.alloc.rate:               2777.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          63762.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62146.899 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   68477.260 ±(99.9%) 811.771 ops/s [Average]
[info]   (min, avg, max) = (68157.493, 68477.260, 68674.408), stdev = 210.814
[info]   CI (99.9%): [67665.489, 69289.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2759.934 ±(99.9%) 87.042 MB/sec [Average]
[info]   (min, avg, max) = (2734.131, 2759.934, 2781.414), stdev = 22.605
[info]   CI (99.9%): [2672.892, 2846.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63426.724 ±(99.9%) 1739.121 B/op [Average]
[info]   (min, avg, max) = (62775.465, 63426.724, 63762.424), stdev = 451.644
[info]   CI (99.9%): [61687.603, 65165.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2694.941 ±(99.9%) 39.105 MB/sec [Average]
[info]   (min, avg, max) = (2682.000, 2694.941, 2707.420), stdev = 10.155
[info]   CI (99.9%): [2655.836, 2734.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61933.366 ±(99.9%) 685.845 B/op [Average]
[info]   (min, avg, max) = (61661.170, 61933.366, 62146.899), stdev = 178.112
[info]   CI (99.9%): [61247.521, 62619.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.179 ±(99.9%) 1.497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.874), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.133 ±(99.9%) 34.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.133, 20.187), stdev = 8.977
[info]   CI (99.9%): [≈ 0, 38.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59.64% complete, ETA 00:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44121.252 ops/s
[info] # Warmup Iteration   2: 149633.273 ops/s
[info] # Warmup Iteration   3: 164481.212 ops/s
[info] # Warmup Iteration   4: 161590.757 ops/s
[info] # Warmup Iteration   5: 162633.948 ops/s
[info] Iteration   1: 160582.079 ops/s
[info]                  ·gc.alloc.rate:                   1770.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              17347.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19768.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 165966.777 ops/s
[info]                  ·gc.alloc.rate:                   1823.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              17291.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12759.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 166866.300 ops/s
[info]                  ·gc.alloc.rate:                   1868.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              17624.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18986.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 166893.014 ops/s
[info]                  ·gc.alloc.rate:                   1858.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              17523.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18958.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 167252.103 ops/s
[info]                  ·gc.alloc.rate:                   1835.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              17271.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12612.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   165512.054 ±(99.9%) 10768.082 ops/s [Average]
[info]   (min, avg, max) = (160582.079, 165512.054, 167252.103), stdev = 2796.437
[info]   CI (99.9%): [154743.972, 176280.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1831.310 ±(99.9%) 148.672 MB/sec [Average]
[info]   (min, avg, max) = (1770.089, 1831.310, 1868.770), stdev = 38.610
[info]   CI (99.9%): [1682.637, 1979.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17411.682 ±(99.9%) 596.087 B/op [Average]
[info]   (min, avg, max) = (17271.516, 17411.682, 17624.182), stdev = 154.802
[info]   CI (99.9%): [16815.594, 18007.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.391 ±(99.9%) 1414.320 MB/sec [Average]
[info]   (min, avg, max) = (1340.463, 1745.391, 2017.159), stdev = 367.295
[info]   CI (99.9%): [331.071, 3159.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16616.875 ±(99.9%) 13875.947 B/op [Average]
[info]   (min, avg, max) = (12612.299, 16616.875, 19768.439), stdev = 3603.539
[info]   CI (99.9%): [2740.929, 30492.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.597 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.712, 3.310), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6.750 ±(99.9%) 53.076 B/op [Average]
[info]   (min, avg, max) = (0.196, 6.750, 31.386), stdev = 13.784
[info]   CI (99.9%): [≈ 0, 59.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.84% complete, ETA 00:53:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72828.331 ops/s
[info] # Warmup Iteration   2: 174970.475 ops/s
[info] # Warmup Iteration   3: 185856.961 ops/s
[info] # Warmup Iteration   4: 187203.089 ops/s
[info] # Warmup Iteration   5: 182751.309 ops/s
[info] Iteration   1: 186396.657 ops/s
[info]                  ·gc.alloc.rate:               1214.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          10254.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11321.941 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 184317.972 ops/s
[info]                  ·gc.alloc.rate:               1183.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          10106.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5727.810 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 183458.081 ops/s
[info]                  ·gc.alloc.rate:               1203.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          10324.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11515.026 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 186060.388 ops/s
[info]                  ·gc.alloc.rate:                   1219.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              10315.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11359.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 187702.322 ops/s
[info]                  ·gc.alloc.rate:                   1230.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              10316.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11248.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   185587.084 ±(99.9%) 6528.220 ops/s [Average]
[info]   (min, avg, max) = (183458.081, 185587.084, 187702.322), stdev = 1695.358
[info]   CI (99.9%): [179058.864, 192115.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1210.364 ±(99.9%) 68.501 MB/sec [Average]
[info]   (min, avg, max) = (1183.656, 1210.364, 1230.466), stdev = 17.789
[info]   CI (99.9%): [1141.863, 1278.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10263.544 ±(99.9%) 354.274 B/op [Average]
[info]   (min, avg, max) = (10106.951, 10263.544, 10324.775), stdev = 92.004
[info]   CI (99.9%): [9909.270, 10617.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.756 ±(99.9%) 1155.838 MB/sec [Average]
[info]   (min, avg, max) = (670.801, 1207.756, 1342.996), stdev = 300.168
[info]   CI (99.9%): [51.917, 2363.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10234.518 ±(99.9%) 9708.265 B/op [Average]
[info]   (min, avg, max) = (5727.810, 10234.518, 11515.026), stdev = 2521.206
[info]   CI (99.9%): [526.253, 19942.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 4.974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 2.977), stdev = 1.292
[info]   CI (99.9%): [≈ 0, 5.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.978 ±(99.9%) 42.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.978, 25.179), stdev = 10.926
[info]   CI (99.9%): [≈ 0, 48.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.04% complete, ETA 00:53:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246301.967 ops/s
[info] # Warmup Iteration   2: 513122.344 ops/s
[info] # Warmup Iteration   3: 536755.732 ops/s
[info] # Warmup Iteration   4: 542027.373 ops/s
[info] # Warmup Iteration   5: 540228.965 ops/s
[info] Iteration   1: 544362.345 ops/s
[info]                  ·gc.alloc.rate:      536.846 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 542204.850 ops/s
[info]                  ·gc.alloc.rate:               550.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          1599.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1937.368 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 540691.371 ops/s
[info]                  ·gc.alloc.rate:                   547.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1593.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1942.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 541938.919 ops/s
[info]                  ·gc.alloc.rate:               556.762 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1940.249 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 542088.567 ops/s
[info]                  ·gc.alloc.rate:               553.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          1607.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1939.755 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   542257.210 ±(99.9%) 5099.718 ops/s [Average]
[info]   (min, avg, max) = (540691.371, 542257.210, 544362.345), stdev = 1324.380
[info]   CI (99.9%): [537157.493, 547356.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   549.164 ±(99.9%) 29.650 MB/sec [Average]
[info]   (min, avg, max) = (536.846, 549.164, 556.762), stdev = 7.700
[info]   CI (99.9%): [519.514, 578.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1593.760 ±(99.9%) 96.253 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1593.760, 1616.817), stdev = 24.997
[info]   CI (99.9%): [1497.507, 1690.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.284 ±(99.9%) 1150.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.284, 668.182), stdev = 298.674
[info]   CI (99.9%): [≈ 0, 1684.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1552.035 ±(99.9%) 3340.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1552.035, 1942.806), stdev = 867.616
[info]   CI (99.9%): [≈ 0, 4892.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:53:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 697903.752 ops/s
[info] # Warmup Iteration   2: 1063569.886 ops/s
[info] # Warmup Iteration   3: 1152137.851 ops/s
[info] # Warmup Iteration   4: 1148841.735 ops/s
[info] # Warmup Iteration   5: 1152824.506 ops/s
[info] Iteration   1: 1151847.882 ops/s
[info]                  ·gc.alloc.rate:               872.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 917.050 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1154138.499 ops/s
[info]                  ·gc.alloc.rate:               874.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 915.208 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1124950.694 ops/s
[info]                  ·gc.alloc.rate:                   866.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1878.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1108685.809 ops/s
[info]                  ·gc.alloc.rate:               837.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          1189.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 954.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1143346.648 ops/s
[info]                  ·gc.alloc.rate:               862.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          1187.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 925.180 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1136593.906 ±(99.9%) 74580.380 ops/s [Average]
[info]   (min, avg, max) = (1108685.809, 1136593.906, 1154138.499), stdev = 19368.288
[info]   CI (99.9%): [1062013.526, 1211174.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   862.926 ±(99.9%) 57.300 MB/sec [Average]
[info]   (min, avg, max) = (837.673, 862.926, 874.479), stdev = 14.881
[info]   CI (99.9%): [805.626, 920.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1194.826 ±(99.9%) 38.541 B/op [Average]
[info]   (min, avg, max) = (1187.732, 1194.826, 1212.323), stdev = 10.009
[info]   CI (99.9%): [1156.285, 1233.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.950 ±(99.9%) 1155.967 MB/sec [Average]
[info]   (min, avg, max) = (671.211, 805.950, 1342.965), stdev = 300.201
[info]   CI (99.9%): [≈ 0, 1961.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1118.060 ±(99.9%) 1638.511 B/op [Average]
[info]   (min, avg, max) = (915.208, 1118.060, 1878.734), stdev = 425.516
[info]   CI (99.9%): [≈ 0, 2756.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.44% complete, ETA 00:52:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 794598.633 ops/s
[info] # Warmup Iteration   2: 1275486.729 ops/s
[info] # Warmup Iteration   3: 1278469.653 ops/s
[info] # Warmup Iteration   4: 1278119.199 ops/s
[info] # Warmup Iteration   5: 1280249.790 ops/s
[info] Iteration   1: 1279065.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1283617.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1278738.105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1279992.864 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1279934.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1280269.727 ±(99.9%) 7504.504 ops/s [Average]
[info]   (min, avg, max) = (1278738.105, 1280269.727, 1283617.539), stdev = 1948.896
[info]   CI (99.9%): [1272765.223, 1287774.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.64% complete, ETA 00:52:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114308.992 ops/s
[info] # Warmup Iteration   2: 332618.062 ops/s
[info] # Warmup Iteration   3: 361443.940 ops/s
[info] # Warmup Iteration   4: 362529.420 ops/s
[info] # Warmup Iteration   5: 359066.703 ops/s
[info] Iteration   1: 361329.903 ops/s
[info]                  ·gc.alloc.rate:               1024.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          4459.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5788.396 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 352011.845 ops/s
[info]                  ·gc.alloc.rate:               972.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          4345.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2973.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 351892.657 ops/s
[info]                  ·gc.alloc.rate:                   972.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              4348.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2980.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 360562.063 ops/s
[info]                  ·gc.alloc.rate:                   1008.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              4402.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5823.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 363964.160 ops/s
[info]                  ·gc.alloc.rate:               1003.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          4339.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2887.564 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   357952.126 ±(99.9%) 21643.377 ops/s [Average]
[info]   (min, avg, max) = (351892.657, 357952.126, 363964.160), stdev = 5620.716
[info]   CI (99.9%): [336308.749, 379595.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   996.239 ±(99.9%) 88.895 MB/sec [Average]
[info]   (min, avg, max) = (972.234, 996.239, 1024.026), stdev = 23.086
[info]   CI (99.9%): [907.344, 1085.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4379.116 ±(99.9%) 198.890 B/op [Average]
[info]   (min, avg, max) = (4339.620, 4379.116, 4459.877), stdev = 51.651
[info]   CI (99.9%): [4180.226, 4578.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   932.695 ±(99.9%) 1403.117 MB/sec [Average]
[info]   (min, avg, max) = (665.341, 932.695, 1334.639), stdev = 364.385
[info]   CI (99.9%): [≈ 0, 2335.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4090.896 ±(99.9%) 6031.323 B/op [Average]
[info]   (min, avg, max) = (2887.564, 4090.896, 5823.968), stdev = 1566.315
[info]   CI (99.9%): [≈ 0, 10122.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.093), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60.84% complete, ETA 00:52:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28396.296 ops/s
[info] # Warmup Iteration   2: 43318.191 ops/s
[info] # Warmup Iteration   3: 44576.466 ops/s
[info] # Warmup Iteration   4: 45400.341 ops/s
[info] # Warmup Iteration   5: 44960.471 ops/s
[info] Iteration   1: 44894.682 ops/s
[info]                  ·gc.alloc.rate:                   349.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              12246.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17933.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 45300.640 ops/s
[info]                  ·gc.alloc.rate:      338.515 MB/sec
[info]                  ·gc.alloc.rate.norm: 11760.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 44995.455 ops/s
[info]                  ·gc.alloc.rate:               359.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          12584.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23462.715 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45230.972 ops/s
[info]                  ·gc.alloc.rate:      338.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 11760.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45055.758 ops/s
[info]                  ·gc.alloc.rate:                   353.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              12345.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23430.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   45095.501 ±(99.9%) 645.346 ops/s [Average]
[info]   (min, avg, max) = (44894.682, 45095.501, 45300.640), stdev = 167.594
[info]   CI (99.9%): [44450.155, 45740.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   347.841 ±(99.9%) 36.584 MB/sec [Average]
[info]   (min, avg, max) = (338.019, 347.841, 359.817), stdev = 9.501
[info]   CI (99.9%): [311.258, 384.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   12139.256 ±(99.9%) 1414.453 B/op [Average]
[info]   (min, avg, max) = (11760.010, 12139.256, 12584.128), stdev = 367.329
[info]   CI (99.9%): [10724.803, 13553.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   370.674 ±(99.9%) 1326.795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.674, 670.868), stdev = 344.564
[info]   CI (99.9%): [≈ 0, 1697.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12965.525 ±(99.9%) 46392.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12965.525, 23462.715), stdev = 12047.938
[info]   CI (99.9%): [≈ 0, 59357.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 5.369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.629, 3.123), stdev = 1.394
[info]   CI (99.9%): [≈ 0, 5.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   21.960 ±(99.9%) 187.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.960, 109.069), stdev = 48.697
[info]   CI (99.9%): [≈ 0, 209.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.04% complete, ETA 00:52:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195.726 ops/s
[info] # Warmup Iteration   2: 446.317 ops/s
[info] # Warmup Iteration   3: 593.657 ops/s
[info] # Warmup Iteration   4: 595.699 ops/s
[info] # Warmup Iteration   5: 602.896 ops/s
[info] Iteration   1: 596.319 ops/s
[info]                  ·gc.alloc.rate:                   1275.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              3366307.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3526868.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 604.547 ops/s
[info]                  ·gc.alloc.rate:               1285.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          3345022.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3481965.593 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 603.919 ops/s
[info]                  ·gc.alloc.rate:                   1296.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              3374654.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3483698.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 607.144 ops/s
[info]                  ·gc.alloc.rate:                   1274.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              3302375.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1733254.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12665.263 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 599.886 ops/s
[info]                  ·gc.alloc.rate:                   1300.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              3410488.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3503991.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2184.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   602.363 ±(99.9%) 16.418 ops/s [Average]
[info]   (min, avg, max) = (596.319, 602.363, 607.144), stdev = 4.264
[info]   CI (99.9%): [585.945, 618.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1286.446 ±(99.9%) 44.298 MB/sec [Average]
[info]   (min, avg, max) = (1274.595, 1286.446, 1300.051), stdev = 11.504
[info]   CI (99.9%): [1242.149, 1330.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3359769.775 ±(99.9%) 153401.126 B/op [Average]
[info]   (min, avg, max) = (3302375.947, 3359769.775, 3410488.360), stdev = 39837.785
[info]   CI (99.9%): [3206368.649, 3513170.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1203.524 ±(99.9%) 1150.670 MB/sec [Average]
[info]   (min, avg, max) = (668.972, 1203.524, 1338.207), stdev = 298.825
[info]   CI (99.9%): [52.854, 2354.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3145955.853 ±(99.9%) 3041753.625 B/op [Average]
[info]   (min, avg, max) = (1733254.737, 3145955.853, 3526868.690), stdev = 789933.757
[info]   CI (99.9%): [104202.227, 6187709.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.153 ±(99.9%) 8.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.153, 4.888), stdev = 2.118
[info]   CI (99.9%): [≈ 0, 9.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2991.769 ±(99.9%) 21128.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2991.769, 12665.263), stdev = 5487.112
[info]   CI (99.9%): [≈ 0, 24120.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.24% complete, ETA 00:51:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163.905 ops/s
[info] # Warmup Iteration   2: 492.923 ops/s
[info] # Warmup Iteration   3: 602.688 ops/s
[info] # Warmup Iteration   4: 582.979 ops/s
[info] # Warmup Iteration   5: 595.869 ops/s
[info] Iteration   1: 599.827 ops/s
[info]                  ·gc.alloc.rate:               1275.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          3344131.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3489437.604 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 594.137 ops/s
[info]                  ·gc.alloc.rate:               1256.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          3326994.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3528149.835 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 582.554 ops/s
[info]                  ·gc.alloc.rate:                   1218.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              3289865.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1801284.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 581.250 ops/s
[info]                  ·gc.alloc.rate:                   1228.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              3325326.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3609659.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14075.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 583.150 ops/s
[info]                  ·gc.alloc.rate:                   1252.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              3377927.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3591013.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1627.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   588.183 ±(99.9%) 31.992 ops/s [Average]
[info]   (min, avg, max) = (581.250, 588.183, 599.827), stdev = 8.308
[info]   CI (99.9%): [556.191, 620.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1246.181 ±(99.9%) 87.994 MB/sec [Average]
[info]   (min, avg, max) = (1218.079, 1246.181, 1275.273), stdev = 22.852
[info]   CI (99.9%): [1158.187, 1334.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3332849.275 ±(99.9%) 123248.013 B/op [Average]
[info]   (min, avg, max) = (3289865.674, 3332849.275, 3377927.795), stdev = 32007.118
[info]   CI (99.9%): [3209601.262, 3456097.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.040 ±(99.9%) 1145.417 MB/sec [Average]
[info]   (min, avg, max) = (666.929, 1199.040, 1333.726), stdev = 297.461
[info]   CI (99.9%): [53.623, 2344.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3203909.092 ±(99.9%) 3024960.807 B/op [Average]
[info]   (min, avg, max) = (1801284.501, 3203909.092, 3609659.821), stdev = 785572.715
[info]   CI (99.9%): [178948.285, 6228869.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.169 ±(99.9%) 8.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.169, 5.201), stdev = 2.268
[info]   CI (99.9%): [≈ 0, 9.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3163.038 ±(99.9%) 23639.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3163.038, 14075.601), stdev = 6139.195
[info]   CI (99.9%): [≈ 0, 26802.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.45% complete, ETA 00:51:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20109.269 ops/s
[info] # Warmup Iteration   2: 41677.693 ops/s
[info] # Warmup Iteration   3: 41981.786 ops/s
[info] # Warmup Iteration   4: 41967.550 ops/s
[info] # Warmup Iteration   5: 42374.716 ops/s
[info] Iteration   1: 41858.277 ops/s
[info]                  ·gc.alloc.rate:                   711.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              26741.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25196.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.565 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42647.339 ops/s
[info]                  ·gc.alloc.rate:               722.202 MB/sec
[info]                  ·gc.alloc.rate.norm:          26649.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24729.059 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 42217.591 ops/s
[info]                  ·gc.alloc.rate:                   710.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              26500.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24980.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.776 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42264.978 ops/s
[info]                  ·gc.alloc.rate:               710.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          26436.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24953.103 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 42005.973 ops/s
[info]                  ·gc.alloc.rate:                   707.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              26488.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25106.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   42198.832 ±(99.9%) 1153.681 ops/s [Average]
[info]   (min, avg, max) = (41858.277, 42198.832, 42647.339), stdev = 299.607
[info]   CI (99.9%): [41045.151, 43352.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   712.344 ±(99.9%) 22.245 MB/sec [Average]
[info]   (min, avg, max) = (707.027, 712.344, 722.202), stdev = 5.777
[info]   CI (99.9%): [690.099, 734.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26563.261 ±(99.9%) 489.879 B/op [Average]
[info]   (min, avg, max) = (26436.786, 26563.261, 26741.574), stdev = 127.220
[info]   CI (99.9%): [26073.382, 27053.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.213 ±(99.9%) 0.457 MB/sec [Average]
[info]   (min, avg, max) = (670.133, 670.213, 670.423), stdev = 0.119
[info]   CI (99.9%): [669.757, 670.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24993.129 ±(99.9%) 682.253 B/op [Average]
[info]   (min, avg, max) = (24729.059, 24993.129, 25196.280), stdev = 177.179
[info]   CI (99.9%): [24310.876, 25675.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.780 ±(99.9%) 3.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 1.565), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:51:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142.514 ops/s
[info] # Warmup Iteration   2: 385.663 ops/s
[info] # Warmup Iteration   3: 567.838 ops/s
[info] # Warmup Iteration   4: 584.225 ops/s
[info] # Warmup Iteration   5: 582.054 ops/s
[info] Iteration   1: 575.715 ops/s
[info]                  ·gc.alloc.rate:               1265.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          3459849.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3644529.778 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 584.427 ops/s
[info]                  ·gc.alloc.rate:                   1262.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              3398982.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1795126.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 583.876 ops/s
[info]                  ·gc.alloc.rate:                   1274.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              3434055.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3597297.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 586.776 ops/s
[info]                  ·gc.alloc.rate:                   1291.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              3463477.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3579806.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13676.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 567.101 ops/s
[info]                  ·gc.alloc.rate:                   1254.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              3479873.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3692169.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2653.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   579.579 ±(99.9%) 31.306 ops/s [Average]
[info]   (min, avg, max) = (567.101, 579.579, 586.776), stdev = 8.130
[info]   CI (99.9%): [548.273, 610.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1269.700 ±(99.9%) 53.956 MB/sec [Average]
[info]   (min, avg, max) = (1254.572, 1269.700, 1291.417), stdev = 14.012
[info]   CI (99.9%): [1215.744, 1323.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3447247.699 ±(99.9%) 121619.434 B/op [Average]
[info]   (min, avg, max) = (3398982.482, 3447247.699, 3479873.577), stdev = 31584.181
[info]   CI (99.9%): [3325628.265, 3568867.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.156 ±(99.9%) 1148.071 MB/sec [Average]
[info]   (min, avg, max) = (666.815, 1200.156, 1334.793), stdev = 298.150
[info]   CI (99.9%): [52.085, 2348.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3261785.868 ±(99.9%) 3161586.389 B/op [Average]
[info]   (min, avg, max) = (1795126.263, 3261785.868, 3692169.014), stdev = 821053.945
[info]   CI (99.9%): [100199.479, 6423372.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.220 ±(99.9%) 8.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.220, 5.100), stdev = 2.207
[info]   CI (99.9%): [≈ 0, 9.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3288.493 ±(99.9%) 22782.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3288.493, 13676.593), stdev = 5916.649
[info]   CI (99.9%): [≈ 0, 26071.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61.85% complete, ETA 00:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184.149 ops/s
[info] # Warmup Iteration   2: 510.190 ops/s
[info] # Warmup Iteration   3: 595.409 ops/s
[info] # Warmup Iteration   4: 588.417 ops/s
[info] # Warmup Iteration   5: 597.207 ops/s
[info] Iteration   1: 596.923 ops/s
[info]                  ·gc.alloc.rate:                   1269.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              3344434.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3524477.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 580.344 ops/s
[info]                  ·gc.alloc.rate:                   1232.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              3342684.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3627603.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.399 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 580.278 ops/s
[info]                  ·gc.alloc.rate:               1214.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          3292461.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1813801.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 574.901 ops/s
[info]                  ·gc.alloc.rate:                   1230.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              3367123.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3659093.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13368.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 588.372 ops/s
[info]                  ·gc.alloc.rate:                   1277.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              3414417.073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3571211.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1724.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   584.164 ±(99.9%) 33.124 ops/s [Average]
[info]   (min, avg, max) = (574.901, 584.164, 596.923), stdev = 8.602
[info]   CI (99.9%): [551.040, 617.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1244.950 ±(99.9%) 103.560 MB/sec [Average]
[info]   (min, avg, max) = (1214.596, 1244.950, 1277.136), stdev = 26.894
[info]   CI (99.9%): [1141.390, 1348.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3352224.137 ±(99.9%) 170183.602 B/op [Average]
[info]   (min, avg, max) = (3292461.590, 3352224.137, 3414417.073), stdev = 44196.141
[info]   CI (99.9%): [3182040.535, 3522407.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1203.613 ±(99.9%) 1150.551 MB/sec [Average]
[info]   (min, avg, max) = (669.115, 1203.613, 1338.082), stdev = 298.795
[info]   CI (99.9%): [53.062, 2354.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3239237.614 ±(99.9%) 3074819.754 B/op [Average]
[info]   (min, avg, max) = (1813801.859, 3239237.614, 3659093.333), stdev = 798520.925
[info]   CI (99.9%): [164417.860, 6314057.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1.115 ±(99.9%) 8.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.115, 4.887), stdev = 2.126
[info]   CI (99.9%): [≈ 0, 9.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3040.943 ±(99.9%) 22409.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3040.943, 13368.889), stdev = 5819.602
[info]   CI (99.9%): [≈ 0, 25450.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62.05% complete, ETA 00:50:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4879.250 ops/s
[info] # Warmup Iteration   2: 12800.097 ops/s
[info] # Warmup Iteration   3: 14079.145 ops/s
[info] # Warmup Iteration   4: 14055.006 ops/s
[info] # Warmup Iteration   5: 14182.848 ops/s
[info] Iteration   1: 14136.817 ops/s
[info]                  ·gc.alloc.rate:               1132.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          126047.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148498.829 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 14169.432 ops/s
[info]                  ·gc.alloc.rate:                   1113.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              123671.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74095.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.312 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14086.030 ops/s
[info]                  ·gc.alloc.rate:                   1126.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              125900.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149137.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 14112.076 ops/s
[info]                  ·gc.alloc.rate:               1142.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          127406.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148937.013 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 14098.059 ops/s
[info]                  ·gc.alloc.rate:                   1132.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              126475.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74584.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14120.483 ±(99.9%) 128.050 ops/s [Average]
[info]   (min, avg, max) = (14086.030, 14120.483, 14169.432), stdev = 33.254
[info]   CI (99.9%): [13992.432, 14248.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1129.720 ±(99.9%) 40.980 MB/sec [Average]
[info]   (min, avg, max) = (1113.700, 1129.720, 1142.814), stdev = 10.642
[info]   CI (99.9%): [1088.741, 1170.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   125900.300 ±(99.9%) 5303.189 B/op [Average]
[info]   (min, avg, max) = (123671.830, 125900.300, 127406.374), stdev = 1377.221
[info]   CI (99.9%): [120597.111, 131203.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1068.023 ±(99.9%) 1407.264 MB/sec [Average]
[info]   (min, avg, max) = (667.247, 1068.023, 1335.940), stdev = 365.462
[info]   CI (99.9%): [≈ 0, 2475.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   119050.640 ±(99.9%) 157168.246 B/op [Average]
[info]   (min, avg, max) = (74095.030, 119050.640, 149137.424), stdev = 40816.094
[info]   CI (99.9%): [≈ 0, 276218.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.995 ±(99.9%) 8.478 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.995, 4.933), stdev = 2.202
[info]   CI (99.9%): [≈ 0, 9.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   111.076 ±(99.9%) 946.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.076, 550.742), stdev = 245.784
[info]   CI (99.9%): [≈ 0, 1057.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.25% complete, ETA 00:50:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7664.465 ops/s
[info] # Warmup Iteration   2: 17286.336 ops/s
[info] # Warmup Iteration   3: 19079.719 ops/s
[info] # Warmup Iteration   4: 19157.827 ops/s
[info] # Warmup Iteration   5: 19141.938 ops/s
[info] Iteration   1: 19188.420 ops/s
[info]                  ·gc.alloc.rate:                   1156.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              94853.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54633.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 19098.398 ops/s
[info]                  ·gc.alloc.rate:                   1169.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              96390.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109808.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 19065.174 ops/s
[info]                  ·gc.alloc.rate:                   1180.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              97467.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110059.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 19190.532 ops/s
[info]                  ·gc.alloc.rate:                   1149.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              94287.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54682.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19130.550 ops/s
[info]                  ·gc.alloc.rate:                   1172.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              96443.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109816.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   19134.615 ±(99.9%) 212.414 ops/s [Average]
[info]   (min, avg, max) = (19065.174, 19134.615, 19190.532), stdev = 55.163
[info]   CI (99.9%): [18922.200, 19347.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1165.882 ±(99.9%) 48.100 MB/sec [Average]
[info]   (min, avg, max) = (1149.831, 1165.882, 1180.808), stdev = 12.492
[info]   CI (99.9%): [1117.782, 1213.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   95888.546 ±(99.9%) 4979.149 B/op [Average]
[info]   (min, avg, max) = (94287.596, 95888.546, 97467.697), stdev = 1293.069
[info]   CI (99.9%): [90909.397, 100867.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1066.792 ±(99.9%) 1407.056 MB/sec [Average]
[info]   (min, avg, max) = (666.172, 1066.792, 1334.948), stdev = 365.408
[info]   CI (99.9%): [≈ 0, 2473.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   87800.117 ±(99.9%) 116500.862 B/op [Average]
[info]   (min, avg, max) = (54633.252, 87800.117, 110059.514), stdev = 30254.904
[info]   CI (99.9%): [≈ 0, 204300.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.170 ±(99.9%) 9.849 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 1.170, 5.745), stdev = 2.558
[info]   CI (99.9%): [≈ 0, 11.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   96.239 ±(99.9%) 810.237 B/op [Average]
[info]   (min, avg, max) = (1.707, 96.239, 472.640), stdev = 210.416
[info]   CI (99.9%): [≈ 0, 906.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.45% complete, ETA 00:50:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128908.073 ops/s
[info] # Warmup Iteration   2: 203626.356 ops/s
[info] # Warmup Iteration   3: 211096.879 ops/s
[info] # Warmup Iteration   4: 214270.315 ops/s
[info] # Warmup Iteration   5: 205196.649 ops/s
[info] Iteration   1: 201260.226 ops/s
[info]                  ·gc.alloc.rate:               755.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          5904.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5240.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 208724.844 ops/s
[info]                  ·gc.alloc.rate:                   799.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              6024.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10105.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 216615.949 ops/s
[info]                  ·gc.alloc.rate:               801.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          5819.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4870.896 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 215471.576 ops/s
[info]                  ·gc.alloc.rate:               796.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          5820.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4896.955 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 212342.363 ops/s
[info]                  ·gc.alloc.rate:                   785.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              5822.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4971.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   210882.991 ±(99.9%) 23838.790 ops/s [Average]
[info]   (min, avg, max) = (201260.226, 210882.991, 216615.949), stdev = 6190.858
[info]   CI (99.9%): [187044.202, 234721.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   787.527 ±(99.9%) 73.449 MB/sec [Average]
[info]   (min, avg, max) = (755.126, 787.527, 801.029), stdev = 19.074
[info]   CI (99.9%): [714.078, 860.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5878.238 ±(99.9%) 344.465 B/op [Average]
[info]   (min, avg, max) = (5819.518, 5878.238, 6024.468), stdev = 89.456
[info]   CI (99.9%): [5533.773, 6222.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.438 ±(99.9%) 1153.521 MB/sec [Average]
[info]   (min, avg, max) = (670.146, 804.438, 1340.317), stdev = 299.566
[info]   CI (99.9%): [≈ 0, 1957.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6017.063 ±(99.9%) 8818.886 B/op [Average]
[info]   (min, avg, max) = (4870.896, 6017.063, 10105.595), stdev = 2290.237
[info]   CI (99.9%): [≈ 0, 14835.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.124 ±(99.9%) 0.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.314), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.65% complete, ETA 00:49:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148404.103 ops/s
[info] # Warmup Iteration   2: 223464.564 ops/s
[info] # Warmup Iteration   3: 231021.327 ops/s
[info] # Warmup Iteration   4: 230793.378 ops/s
[info] # Warmup Iteration   5: 231473.284 ops/s
[info] Iteration   1: 230459.690 ops/s
[info]                  ·gc.alloc.rate:      0.942 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.429 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 231211.972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 231874.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 232005.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 232029.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   231516.117 ±(99.9%) 2611.282 ops/s [Average]
[info]   (min, avg, max) = (230459.690, 231516.117, 232029.470), stdev = 678.142
[info]   CI (99.9%): [228904.835, 234127.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.189 ±(99.9%) 1.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.189, 0.942), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 1.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.287 ±(99.9%) 11.068 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.287, 6.429), stdev = 2.874
[info]   CI (99.9%): [≈ 0, 12.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.85% complete, ETA 00:49:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7242.848 ops/s
[info] # Warmup Iteration   2: 16247.773 ops/s
[info] # Warmup Iteration   3: 17262.728 ops/s
[info] # Warmup Iteration   4: 17353.422 ops/s
[info] # Warmup Iteration   5: 17378.643 ops/s
[info] Iteration   1: 17842.330 ops/s
[info]                  ·gc.alloc.rate:               1165.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          102759.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117601.976 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 17643.650 ops/s
[info]                  ·gc.alloc.rate:               1154.480 MB/sec
[info]                  ·gc.alloc.rate.norm:          102969.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118951.108 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 17886.567 ops/s
[info]                  ·gc.alloc.rate:                   1148.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              101033.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58667.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.832 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17696.370 ops/s
[info]                  ·gc.alloc.rate:                   1141.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              101483.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118713.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 17784.755 ops/s
[info]                  ·gc.alloc.rate:                   1158.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              102496.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118126.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      6.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 537.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   17770.735 ±(99.9%) 387.082 ops/s [Average]
[info]   (min, avg, max) = (17643.650, 17770.735, 17886.567), stdev = 100.524
[info]   CI (99.9%): [17383.653, 18157.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1153.472 ±(99.9%) 35.219 MB/sec [Average]
[info]   (min, avg, max) = (1141.243, 1153.472, 1165.063), stdev = 9.146
[info]   CI (99.9%): [1118.254, 1188.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   102148.709 ±(99.9%) 3252.620 B/op [Average]
[info]   (min, avg, max) = (101033.823, 102148.709, 102969.602), stdev = 844.695
[info]   CI (99.9%): [98896.089, 105401.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.737 ±(99.9%) 1149.360 MB/sec [Average]
[info]   (min, avg, max) = (666.793, 1200.737, 1335.004), stdev = 298.485
[info]   CI (99.9%): [51.378, 2350.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106412.082 ±(99.9%) 102793.182 B/op [Average]
[info]   (min, avg, max) = (58667.742, 106412.082, 118951.108), stdev = 26695.063
[info]   CI (99.9%): [3618.900, 209205.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.224 ±(99.9%) 10.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.224, 6.078), stdev = 2.714
[info]   CI (99.9%): [≈ 0, 11.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   108.312 ±(99.9%) 924.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108.312, 537.875), stdev = 240.135
[info]   CI (99.9%): [≈ 0, 1032.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:49:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3874.290 ops/s
[info] # Warmup Iteration   2: 6964.711 ops/s
[info] # Warmup Iteration   3: 7037.504 ops/s
[info] # Warmup Iteration   4: 7159.776 ops/s
[info] # Warmup Iteration   5: 7143.950 ops/s
[info] Iteration   1: 7159.687 ops/s
[info]                  ·gc.alloc.rate:                   984.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              216479.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147453.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7134.278 ops/s
[info]                  ·gc.alloc.rate:                   996.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              219847.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     295940.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7165.378 ops/s
[info]                  ·gc.alloc.rate:               990.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          217512.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147330.268 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 7074.989 ops/s
[info]                  ·gc.alloc.rate:                   967.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              215253.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149224.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.607 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7127.412 ops/s
[info]                  ·gc.alloc.rate:                   1001.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              221043.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     296231.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.596 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   7132.349 ±(99.9%) 138.256 ops/s [Average]
[info]   (min, avg, max) = (7074.989, 7132.349, 7165.378), stdev = 35.905
[info]   CI (99.9%): [6994.093, 7270.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   988.178 ±(99.9%) 50.009 MB/sec [Average]
[info]   (min, avg, max) = (967.716, 988.178, 1001.088), stdev = 12.987
[info]   CI (99.9%): [938.169, 1038.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   218027.246 ±(99.9%) 9186.421 B/op [Average]
[info]   (min, avg, max) = (215253.410, 218027.246, 221043.672), stdev = 2385.684
[info]   CI (99.9%): [208840.825, 227213.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   939.189 ±(99.9%) 1414.799 MB/sec [Average]
[info]   (min, avg, max) = (670.859, 939.189, 1341.746), stdev = 367.419
[info]   CI (99.9%): [≈ 0, 2353.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   207236.148 ±(99.9%) 312332.932 B/op [Average]
[info]   (min, avg, max) = (147330.268, 207236.148, 296231.177), stdev = 81111.870
[info]   CI (99.9%): [≈ 0, 519569.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.274 ±(99.9%) 7.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.274, 4.596), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 11.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.25% complete, ETA 00:49:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751315.635 ops/s
[info] # Warmup Iteration   2: 1472925.204 ops/s
[info] # Warmup Iteration   3: 1552804.515 ops/s
[info] # Warmup Iteration   4: 1552302.343 ops/s
[info] # Warmup Iteration   5: 1554055.604 ops/s
[info] Iteration   1: 1537001.245 ops/s
[info]                  ·gc.alloc.rate:               85.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          87.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 523.830 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1555784.731 ops/s
[info]                  ·gc.alloc.rate:      63.271 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1553086.583 ops/s
[info]                  ·gc.alloc.rate:      63.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1549867.121 ops/s
[info]                  ·gc.alloc.rate:      63.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1553518.065 ops/s
[info]                  ·gc.alloc.rate:      63.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1549851.549 ±(99.9%) 28831.141 ops/s [Average]
[info]   (min, avg, max) = (1537001.245, 1549851.549, 1555784.731), stdev = 7487.356
[info]   CI (99.9%): [1521020.408, 1578682.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   67.654 ±(99.9%) 38.677 MB/sec [Average]
[info]   (min, avg, max) = (63.029, 67.654, 85.622), stdev = 10.044
[info]   CI (99.9%): [28.977, 106.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   68.734 ±(99.9%) 40.756 B/op [Average]
[info]   (min, avg, max) = (64.000, 68.734, 87.668), stdev = 10.584
[info]   CI (99.9%): [27.977, 109.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.321 ±(99.9%) 881.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.321, 511.606), stdev = 228.797
[info]   CI (99.9%): [≈ 0, 983.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   104.766 ±(99.9%) 902.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.766, 523.830), stdev = 234.264
[info]   CI (99.9%): [≈ 0, 1006.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.45% complete, ETA 00:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6098.746 ops/s
[info] # Warmup Iteration   2: 63396.309 ops/s
[info] # Warmup Iteration   3: 79649.585 ops/s
[info] # Warmup Iteration   4: 80955.288 ops/s
[info] # Warmup Iteration   5: 82023.252 ops/s
[info] Iteration   1: 81650.764 ops/s
[info]                  ·gc.alloc.rate:                   3440.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              66305.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64800.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.407 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 80784.167 ops/s
[info]                  ·gc.alloc.rate:                   3460.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              67395.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65679.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 81635.601 ops/s
[info]                  ·gc.alloc.rate:               3495.213 MB/sec
[info]                  ·gc.alloc.rate.norm:          67374.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65194.073 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 79702.613 ops/s
[info]                  ·gc.alloc.rate:               3415.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          67436.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3388.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66906.454 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 81795.443 ops/s
[info]                  ·gc.alloc.rate:               3502.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          67395.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3394.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65302.092 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   81113.718 ±(99.9%) 3403.711 ops/s [Average]
[info]   (min, avg, max) = (79702.613, 81113.718, 81795.443), stdev = 883.933
[info]   CI (99.9%): [77710.007, 84517.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3462.877 ±(99.9%) 141.710 MB/sec [Average]
[info]   (min, avg, max) = (3415.405, 3462.877, 3502.831), stdev = 36.802
[info]   CI (99.9%): [3321.167, 3604.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67181.492 ±(99.9%) 1887.410 B/op [Average]
[info]   (min, avg, max) = (66305.594, 67181.492, 67436.373), stdev = 490.154
[info]   CI (99.9%): [65294.082, 69068.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3379.881 ±(99.9%) 49.121 MB/sec [Average]
[info]   (min, avg, max) = (3362.019, 3379.881, 3394.025), stdev = 12.757
[info]   CI (99.9%): [3330.760, 3429.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65576.466 ±(99.9%) 3106.683 B/op [Average]
[info]   (min, avg, max) = (64800.145, 65576.466, 66906.454), stdev = 806.796
[info]   CI (99.9%): [62469.782, 68683.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.563 ±(99.9%) 4.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.563, 2.407), stdev = 1.046
[info]   CI (99.9%): [≈ 0, 4.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.65% complete, ETA 00:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482649.056 ops/s
[info] # Warmup Iteration   2: 1720058.810 ops/s
[info] # Warmup Iteration   3: 1846991.432 ops/s
[info] # Warmup Iteration   4: 1826581.153 ops/s
[info] # Warmup Iteration   5: 1803583.991 ops/s
[info] Iteration   1: 1790140.545 ops/s
[info]                  ·gc.alloc.rate:                   975.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              857.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1803416.971 ops/s
[info]                  ·gc.alloc.rate:               960.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          837.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 583.061 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1803920.630 ops/s
[info]                  ·gc.alloc.rate:               960.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          837.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 582.885 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1785223.768 ops/s
[info]                  ·gc.alloc.rate:               988.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          871.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1179.226 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 1807878.301 ops/s
[info]                  ·gc.alloc.rate:                   960.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              836.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     582.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1798116.043 ±(99.9%) 37871.337 ops/s [Average]
[info]   (min, avg, max) = (1785223.768, 1798116.043, 1807878.301), stdev = 9835.066
[info]   CI (99.9%): [1760244.706, 1835987.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   968.914 ±(99.9%) 48.678 MB/sec [Average]
[info]   (min, avg, max) = (960.142, 968.914, 988.224), stdev = 12.642
[info]   CI (99.9%): [920.235, 1017.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   848.055 ±(99.9%) 60.315 B/op [Average]
[info]   (min, avg, max) = (836.012, 848.055, 871.160), stdev = 15.664
[info]   CI (99.9%): [787.741, 908.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.722 ±(99.9%) 1408.270 MB/sec [Average]
[info]   (min, avg, max) = (668.159, 935.722, 1337.687), stdev = 365.723
[info]   CI (99.9%): [≈ 0, 2343.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   820.327 ±(99.9%) 1251.812 B/op [Average]
[info]   (min, avg, max) = (582.807, 820.327, 1179.226), stdev = 325.092
[info]   CI (99.9%): [≈ 0, 2072.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.018), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.86% complete, ETA 00:48:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1045046.073 ops/s
[info] # Warmup Iteration   2: 2004816.742 ops/s
[info] # Warmup Iteration   3: 2179377.340 ops/s
[info] # Warmup Iteration   4: 2181844.772 ops/s
[info] # Warmup Iteration   5: 2179105.959 ops/s
[info] Iteration   1: 2182166.471 ops/s
[info]                  ·gc.alloc.rate:               632.433 MB/sec
[info]                  ·gc.alloc.rate.norm:          456.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.792 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2182240.101 ops/s
[info]                  ·gc.alloc.rate:               627.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          452.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.762 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2187731.466 ops/s
[info]                  ·gc.alloc.rate:                   631.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2247277.906 ops/s
[info]                  ·gc.alloc.rate:                   648.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              454.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2245209.582 ops/s
[info]                  ·gc.alloc.rate:               646.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          452.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2208925.105 ±(99.9%) 131498.008 ops/s [Average]
[info]   (min, avg, max) = (2182166.471, 2208925.105, 2247277.906), stdev = 34149.615
[info]   CI (99.9%): [2077427.097, 2340423.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   637.295 ±(99.9%) 36.810 MB/sec [Average]
[info]   (min, avg, max) = (627.206, 637.295, 648.824), stdev = 9.559
[info]   CI (99.9%): [600.485, 674.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   454.028 ±(99.9%) 5.660 B/op [Average]
[info]   (min, avg, max) = (452.306, 454.028, 456.038), stdev = 1.470
[info]   CI (99.9%): [448.369, 459.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.101 ±(99.9%) 0.910 MB/sec [Average]
[info]   (min, avg, max) = (670.826, 671.101, 671.428), stdev = 0.236
[info]   CI (99.9%): [670.191, 672.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   478.198 ±(99.9%) 27.745 B/op [Average]
[info]   (min, avg, max) = (470.002, 478.198, 483.792), stdev = 7.205
[info]   CI (99.9%): [450.452, 505.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.06% complete, ETA 00:48:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1254713.017 ops/s
[info] # Warmup Iteration   2: 2318318.336 ops/s
[info] # Warmup Iteration   3: 2390291.501 ops/s
[info] # Warmup Iteration   4: 2390970.473 ops/s
[info] # Warmup Iteration   5: 2392749.820 ops/s
[info] Iteration   1: 2392951.166 ops/s
[info]                  ·gc.alloc.rate:      24.332 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2396374.328 ops/s
[info]                  ·gc.alloc.rate:      24.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2371117.868 ops/s
[info]                  ·gc.alloc.rate:      24.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2383650.827 ops/s
[info]                  ·gc.alloc.rate:      24.235 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2380161.735 ops/s
[info]                  ·gc.alloc.rate:      24.199 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2384851.185 ±(99.9%) 39005.157 ops/s [Average]
[info]   (min, avg, max) = (2371117.868, 2384851.185, 2396374.328), stdev = 10129.515
[info]   CI (99.9%): [2345846.028, 2423856.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.256 ±(99.9%) 0.359 MB/sec [Average]
[info]   (min, avg, max) = (24.146, 24.256, 24.370), stdev = 0.093
[info]   CI (99.9%): [23.897, 24.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.005 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.005, 16.026), stdev = 0.011
[info]   CI (99.9%): [15.961, 16.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.26% complete, ETA 00:47:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10504.648 ops/s
[info] # Warmup Iteration   2: 44351.597 ops/s
[info] # Warmup Iteration   3: 49754.659 ops/s
[info] # Warmup Iteration   4: 48498.111 ops/s
[info] # Warmup Iteration   5: 49030.900 ops/s
[info] Iteration   1: 48958.538 ops/s
[info]                  ·gc.alloc.rate:                   2127.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              68360.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64516.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 49737.407 ops/s
[info]                  ·gc.alloc.rate:               2146.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          67897.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63339.918 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 50682.770 ops/s
[info]                  ·gc.alloc.rate:                   2173.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              67473.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62094.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 50740.761 ops/s
[info]                  ·gc.alloc.rate:                   2229.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              69131.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82789.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 50798.166 ops/s
[info]                  ·gc.alloc.rate:                   2205.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              68323.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62169.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   50183.529 ±(99.9%) 3126.592 ops/s [Average]
[info]   (min, avg, max) = (48958.538, 50183.529, 50798.166), stdev = 811.966
[info]   CI (99.9%): [47056.937, 53310.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2176.286 ±(99.9%) 160.186 MB/sec [Average]
[info]   (min, avg, max) = (2127.322, 2176.286, 2229.052), stdev = 41.600
[info]   CI (99.9%): [2016.099, 2336.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68237.320 ±(99.9%) 2375.682 B/op [Average]
[info]   (min, avg, max) = (67473.072, 68237.320, 69131.899), stdev = 616.957
[info]   CI (99.9%): [65861.638, 70613.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.242 ±(99.9%) 1145.614 MB/sec [Average]
[info]   (min, avg, max) = (1999.802, 2137.242, 2669.417), stdev = 297.512
[info]   CI (99.9%): [991.628, 3282.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66981.942 ±(99.9%) 34239.577 B/op [Average]
[info]   (min, avg, max) = (62094.630, 66981.942, 82789.384), stdev = 8891.909
[info]   CI (99.9%): [32742.366, 101221.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.866 ±(99.9%) 7.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.248), stdev = 1.890
[info]   CI (99.9%): [≈ 0, 8.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.818 ±(99.9%) 233.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.818, 136.505), stdev = 60.760
[info]   CI (99.9%): [≈ 0, 261.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.46% complete, ETA 00:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91852.862 ops/s
[info] # Warmup Iteration   2: 584509.890 ops/s
[info] # Warmup Iteration   3: 837426.973 ops/s
[info] # Warmup Iteration   4: 857707.720 ops/s
[info] # Warmup Iteration   5: 849214.449 ops/s
[info] Iteration   1: 863014.410 ops/s
[info]                  ·gc.alloc.rate:                   2768.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              5049.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4885.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.443 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 866168.458 ops/s
[info]                  ·gc.alloc.rate:                   2790.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5070.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4858.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 868685.432 ops/s
[info]                  ·gc.alloc.rate:                   2828.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6055.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 867315.482 ops/s
[info]                  ·gc.alloc.rate:               2809.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          5096.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4873.651 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 856078.362 ops/s
[info]                  ·gc.alloc.rate:               2762.979 MB/sec
[info]                  ·gc.alloc.rate.norm:          5077.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4945.260 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   864252.429 ±(99.9%) 19354.327 ops/s [Average]
[info]   (min, avg, max) = (856078.362, 864252.429, 868685.432), stdev = 5026.257
[info]   CI (99.9%): [844898.103, 883606.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2792.186 ±(99.9%) 105.583 MB/sec [Average]
[info]   (min, avg, max) = (2762.979, 2792.186, 2828.318), stdev = 27.420
[info]   CI (99.9%): [2686.603, 2897.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5082.979 ±(99.9%) 104.697 B/op [Average]
[info]   (min, avg, max) = (5049.297, 5082.979, 5120.999), stdev = 27.189
[info]   CI (99.9%): [4978.282, 5187.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2815.096 ±(99.9%) 1139.225 MB/sec [Average]
[info]   (min, avg, max) = (2674.046, 2815.096, 3344.202), stdev = 295.853
[info]   CI (99.9%): [1675.871, 3954.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5123.614 ±(99.9%) 2009.030 B/op [Average]
[info]   (min, avg, max) = (4858.301, 5123.614, 6055.066), stdev = 521.739
[info]   CI (99.9%): [3114.585, 7132.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.791), stdev = 0.349
[info]   CI (99.9%): [≈ 0, 1.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.304 ±(99.9%) 2.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.304, 1.443), stdev = 0.637
[info]   CI (99.9%): [≈ 0, 2.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.66% complete, ETA 00:47:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.570 ops/s
[info] # Warmup Iteration   2: 4487697.560 ops/s
[info] # Warmup Iteration   3: 5059921.004 ops/s
[info] # Warmup Iteration   4: 4927363.028 ops/s
[info] # Warmup Iteration   5: 5125658.471 ops/s
[info] Iteration   1: 5156252.121 ops/s
[info]                  ·gc.alloc.rate:      314.546 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5110368.364 ops/s
[info]                  ·gc.alloc.rate:               327.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5153656.994 ops/s
[info]                  ·gc.alloc.rate:      314.380 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5124673.866 ops/s
[info]                  ·gc.alloc.rate:               336.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          103.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 4890209.212 ops/s
[info]                  ·gc.alloc.rate:      298.490 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5087032.111 ±(99.9%) 430218.011 ops/s [Average]
[info]   (min, avg, max) = (4890209.212, 5087032.111, 5156252.121), stdev = 111726.251
[info]   CI (99.9%): [4656814.100, 5517250.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   318.388 ±(99.9%) 56.133 MB/sec [Average]
[info]   (min, avg, max) = (298.490, 318.388, 336.641), stdev = 14.578
[info]   CI (99.9%): [262.254, 374.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   98.475 ±(99.9%) 13.408 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.475, 103.378), stdev = 3.482
[info]   CI (99.9%): [85.067, 111.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.427 ±(99.9%) 1258.896 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.427, 665.512), stdev = 326.931
[info]   CI (99.9%): [≈ 0, 1494.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   72.384 ±(99.9%) 386.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.384, 204.369), stdev = 100.489
[info]   CI (99.9%): [≈ 0, 459.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.86% complete, ETA 00:47:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12636.595 ops/s
[info] # Warmup Iteration   2: 721523.524 ops/s
[info] # Warmup Iteration   3: 952153.430 ops/s
[info] # Warmup Iteration   4: 976205.311 ops/s
[info] # Warmup Iteration   5: 977806.502 ops/s
[info] Iteration   1: 934687.179 ops/s
[info]                  ·gc.alloc.rate:                   1101.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              1855.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2246.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 972451.391 ops/s
[info]                  ·gc.alloc.rate:                   1148.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1858.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2160.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 975212.190 ops/s
[info]                  ·gc.alloc.rate:               1130.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          1824.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1078.218 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 970895.122 ops/s
[info]                  ·gc.alloc.rate:               1151.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          1867.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2167.135 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 973283.658 ops/s
[info]                  ·gc.alloc.rate:                   1152.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              1862.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2163.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   965305.908 ±(99.9%) 66181.321 ops/s [Average]
[info]   (min, avg, max) = (934687.179, 965305.908, 975212.190), stdev = 17187.079
[info]   CI (99.9%): [899124.587, 1031487.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1136.992 ±(99.9%) 82.635 MB/sec [Average]
[info]   (min, avg, max) = (1101.973, 1136.992, 1152.007), stdev = 21.460
[info]   CI (99.9%): [1054.356, 1219.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1853.679 ±(99.9%) 64.690 B/op [Average]
[info]   (min, avg, max) = (1824.697, 1853.679, 1867.143), stdev = 16.800
[info]   CI (99.9%): [1788.989, 1918.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.497 ±(99.9%) 1150.235 MB/sec [Average]
[info]   (min, avg, max) = (668.151, 1202.497, 1338.016), stdev = 298.712
[info]   CI (99.9%): [52.262, 2352.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1963.197 ±(99.9%) 1910.010 B/op [Average]
[info]   (min, avg, max) = (1078.218, 1963.197, 2246.598), stdev = 496.024
[info]   CI (99.9%): [53.186, 3873.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 7.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.164), stdev = 1.853
[info]   CI (99.9%): [≈ 0, 7.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.374 ±(99.9%) 11.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.374, 6.732), stdev = 2.996
[info]   CI (99.9%): [≈ 0, 12.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.06% complete, ETA 00:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1933589.341 ops/s
[info] # Warmup Iteration   2: 7303489.309 ops/s
[info] # Warmup Iteration   3: 8696657.389 ops/s
[info] # Warmup Iteration   4: 8735670.715 ops/s
[info] # Warmup Iteration   5: 8713435.152 ops/s
[info] Iteration   1: 8496020.565 ops/s
[info]                  ·gc.alloc.rate:               404.807 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.766 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 8408951.775 ops/s
[info]                  ·gc.alloc.rate:               396.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.749 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 8724698.503 ops/s
[info]                  ·gc.alloc.rate:      399.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8700819.302 ops/s
[info]                  ·gc.alloc.rate:                   412.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8701311.266 ops/s
[info]                  ·gc.alloc.rate:      398.083 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8606360.282 ±(99.9%) 554970.850 ops/s [Average]
[info]   (min, avg, max) = (8408951.775, 8606360.282, 8724698.503), stdev = 144124.167
[info]   CI (99.9%): [8051389.432, 9161331.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   402.404 ±(99.9%) 25.491 MB/sec [Average]
[info]   (min, avg, max) = (396.964, 402.404, 412.945), stdev = 6.620
[info]   CI (99.9%): [376.913, 427.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   73.592 ±(99.9%) 5.677 B/op [Average]
[info]   (min, avg, max) = (72.000, 73.592, 74.981), stdev = 1.474
[info]   CI (99.9%): [67.916, 79.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.946 ±(99.9%) 1217.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.946, 671.483), stdev = 316.222
[info]   CI (99.9%): [≈ 0, 1556.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   62.394 ±(99.9%) 223.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 62.394, 121.454), stdev = 57.954
[info]   CI (99.9%): [≈ 0, 285.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.26% complete, ETA 00:46:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3452.749 ops/s
[info] # Warmup Iteration   2: 136236.764 ops/s
[info] # Warmup Iteration   3: 439339.155 ops/s
[info] # Warmup Iteration   4: 487943.997 ops/s
[info] # Warmup Iteration   5: 481595.663 ops/s
[info] Iteration   1: 489375.094 ops/s
[info]                  ·gc.alloc.rate:               2301.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          7402.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6464.241 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 488627.205 ops/s
[info]                  ·gc.alloc.rate:                   2348.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              7560.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8648.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.626 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 476220.589 ops/s
[info]                  ·gc.alloc.rate:               2239.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          7399.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6662.780 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 474949.714 ops/s
[info]                  ·gc.alloc.rate:               2233.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          7400.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6690.399 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 484896.919 ops/s
[info]                  ·gc.alloc.rate:               2306.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          7486.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6561.748 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   482813.904 ±(99.9%) 26293.155 ops/s [Average]
[info]   (min, avg, max) = (474949.714, 482813.904, 489375.094), stdev = 6828.249
[info]   CI (99.9%): [456520.750, 509107.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2285.869 ±(99.9%) 187.590 MB/sec [Average]
[info]   (min, avg, max) = (2233.511, 2285.869, 2348.146), stdev = 48.717
[info]   CI (99.9%): [2098.279, 2473.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7449.984 ±(99.9%) 276.404 B/op [Average]
[info]   (min, avg, max) = (7399.902, 7449.984, 7560.126), stdev = 71.781
[info]   CI (99.9%): [7173.580, 7726.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2150.670 ±(99.9%) 1153.115 MB/sec [Average]
[info]   (min, avg, max) = (2009.999, 2150.670, 2686.303), stdev = 299.460
[info]   CI (99.9%): [997.555, 3303.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7005.605 ±(99.9%) 3553.902 B/op [Average]
[info]   (min, avg, max) = (6464.241, 7005.605, 8648.859), stdev = 922.937
[info]   CI (99.9%): [3451.703, 10559.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.287 ±(99.9%) 2.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.287, 1.437), stdev = 0.643
[info]   CI (99.9%): [≈ 0, 2.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.925 ±(99.9%) 7.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.925, 4.626), stdev = 2.069
[info]   CI (99.9%): [≈ 0, 8.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65.46% complete, ETA 00:46:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201537.700 ops/s
[info] # Warmup Iteration   2: 1034225.227 ops/s
[info] # Warmup Iteration   3: 1269422.309 ops/s
[info] # Warmup Iteration   4: 1291068.424 ops/s
[info] # Warmup Iteration   5: 1278483.626 ops/s
[info] Iteration   1: 1295597.424 ops/s
[info]                  ·gc.alloc.rate:               1806.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          2193.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1633.326 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1291941.133 ops/s
[info]                  ·gc.alloc.rate:                   1839.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              2241.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2458.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1289376.339 ops/s
[info]                  ·gc.alloc.rate:                   1843.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              2249.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2455.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1302694.493 ops/s
[info]                  ·gc.alloc.rate:               1827.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1619.178 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1296183.595 ops/s
[info]                  ·gc.alloc.rate:               1845.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          2241.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2441.030 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   1295158.597 ±(99.9%) 19427.587 ops/s [Average]
[info]   (min, avg, max) = (1289376.339, 1295158.597, 1302694.493), stdev = 5045.283
[info]   CI (99.9%): [1275731.010, 1314586.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1832.526 ±(99.9%) 62.932 MB/sec [Average]
[info]   (min, avg, max) = (1806.078, 1832.526, 1845.881), stdev = 16.343
[info]   CI (99.9%): [1769.594, 1895.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2226.696 ±(99.9%) 94.015 B/op [Average]
[info]   (min, avg, max) = (2193.743, 2226.696, 2249.708), stdev = 24.415
[info]   CI (99.9%): [2132.681, 2320.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1745.129 ±(99.9%) 1415.269 MB/sec [Average]
[info]   (min, avg, max) = (1340.354, 1745.129, 2018.280), stdev = 367.541
[info]   CI (99.9%): [329.860, 3160.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2121.489 ±(99.9%) 1741.119 B/op [Average]
[info]   (min, avg, max) = (1619.178, 2121.489, 2458.431), stdev = 452.163
[info]   CI (99.9%): [380.370, 3862.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 6.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.539), stdev = 1.580
[info]   CI (99.9%): [≈ 0, 6.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.867 ±(99.9%) 7.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.867, 4.311), stdev = 1.925
[info]   CI (99.9%): [≈ 0, 8.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.66% complete, ETA 00:45:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 869.616 ops/s
[info] # Warmup Iteration   2: 3579.413 ops/s
[info] # Warmup Iteration   3: 4001.370 ops/s
[info] # Warmup Iteration   4: 4560.324 ops/s
[info] # Warmup Iteration   5: 4526.984 ops/s
[info] Iteration   1: 4495.945 ops/s
[info]                  ·gc.alloc.rate:                   2246.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              786450.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     936186.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1503.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 4553.713 ops/s
[info]                  ·gc.alloc.rate:                   2310.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              798650.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     691070.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4625.379 ops/s
[info]                  ·gc.alloc.rate:                   2306.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              784806.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679863.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4507.735 ops/s
[info]                  ·gc.alloc.rate:                   2289.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              799179.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931253.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.603 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4616.232 ops/s
[info]                  ·gc.alloc.rate:                   2329.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              794040.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     683799.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4559.801 ±(99.9%) 230.319 ops/s [Average]
[info]   (min, avg, max) = (4495.945, 4559.801, 4625.379), stdev = 59.813
[info]   CI (99.9%): [4329.482, 4790.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2296.617 ±(99.9%) 120.135 MB/sec [Average]
[info]   (min, avg, max) = (2246.947, 2296.617, 2329.194), stdev = 31.199
[info]   CI (99.9%): [2176.483, 2416.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   792625.330 ±(99.9%) 25868.358 B/op [Average]
[info]   (min, avg, max) = (784806.300, 792625.330, 799179.367), stdev = 6717.930
[info]   CI (99.9%): [766756.972, 818493.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2269.216 ±(99.9%) 1412.824 MB/sec [Average]
[info]   (min, avg, max) = (1998.366, 2269.216, 2674.755), stdev = 366.906
[info]   CI (99.9%): [856.392, 3682.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   784434.774 ±(99.9%) 525030.836 B/op [Average]
[info]   (min, avg, max) = (679863.410, 784434.774, 936186.934), stdev = 136348.841
[info]   CI (99.9%): [259403.938, 1309465.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.988 ±(99.9%) 7.126 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.988, 4.297), stdev = 1.851
[info]   CI (99.9%): [≈ 0, 8.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   345.139 ±(99.9%) 2495.857 B/op [Average]
[info]   (min, avg, max) = (28.383, 345.139, 1503.982), stdev = 648.166
[info]   CI (99.9%): [≈ 0, 2840.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.209
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.86% complete, ETA 00:45:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1167.616 ops/s
[info] # Warmup Iteration   2: 5576.026 ops/s
[info] # Warmup Iteration   3: 6692.094 ops/s
[info] # Warmup Iteration   4: 6833.652 ops/s
[info] # Warmup Iteration   5: 6629.691 ops/s
[info] Iteration   1: 6801.412 ops/s
[info]                  ·gc.alloc.rate:                   2326.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              538262.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     618078.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6804.404 ops/s
[info]                  ·gc.alloc.rate:                   2322.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              537157.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464664.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6843.886 ops/s
[info]                  ·gc.alloc.rate:                   2324.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              534598.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     462782.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6835.131 ops/s
[info]                  ·gc.alloc.rate:                   2363.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              544039.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     619146.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.585 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6846.683 ops/s
[info]                  ·gc.alloc.rate:               2340.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          537847.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464732.435 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6826.303 ±(99.9%) 83.958 ops/s [Average]
[info]   (min, avg, max) = (6801.412, 6826.303, 6846.683), stdev = 21.804
[info]   CI (99.9%): [6742.346, 6910.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2335.445 ±(99.9%) 64.959 MB/sec [Average]
[info]   (min, avg, max) = (2322.664, 2335.445, 2363.046), stdev = 16.870
[info]   CI (99.9%): [2270.486, 2400.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   538381.167 ±(99.9%) 13355.071 B/op [Average]
[info]   (min, avg, max) = (534598.879, 538381.167, 544039.181), stdev = 3468.269
[info]   CI (99.9%): [525026.096, 551736.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2280.904 ±(99.9%) 1404.398 MB/sec [Average]
[info]   (min, avg, max) = (2009.205, 2280.904, 2689.274), stdev = 364.718
[info]   CI (99.9%): [876.506, 3685.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   525880.856 ±(99.9%) 325981.552 B/op [Average]
[info]   (min, avg, max) = (462782.775, 525880.856, 619146.016), stdev = 84656.374
[info]   CI (99.9%): [199899.304, 851862.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 1.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 0.958), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59.706 ±(99.9%) 361.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.706, 221.568), stdev = 93.942
[info]   CI (99.9%): [≈ 0, 421.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.06% complete, ETA 00:45:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23641.945 ops/s
[info] # Warmup Iteration   2: 42426.479 ops/s
[info] # Warmup Iteration   3: 43391.780 ops/s
[info] # Warmup Iteration   4: 44652.888 ops/s
[info] # Warmup Iteration   5: 45787.748 ops/s
[info] Iteration   1: 46096.490 ops/s
[info]                  ·gc.alloc.rate:                   765.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              26136.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22834.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 46178.542 ops/s
[info]                  ·gc.alloc.rate:               774.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          26381.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22793.650 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 46258.378 ops/s
[info]                  ·gc.alloc.rate:                   767.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              26099.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22731.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46306.717 ops/s
[info]                  ·gc.alloc.rate:               763.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          25938.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22708.015 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 46028.809 ops/s
[info]                  ·gc.alloc.rate:               758.647 MB/sec
[info]                  ·gc.alloc.rate.norm:          25937.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22844.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   46173.787 ±(99.9%) 438.374 ops/s [Average]
[info]   (min, avg, max) = (46028.809, 46173.787, 46306.717), stdev = 113.844
[info]   CI (99.9%): [45735.414, 46612.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   765.741 ±(99.9%) 21.851 MB/sec [Average]
[info]   (min, avg, max) = (758.647, 765.741, 774.111), stdev = 5.675
[info]   CI (99.9%): [743.890, 787.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26098.718 ±(99.9%) 701.900 B/op [Average]
[info]   (min, avg, max) = (25937.942, 26098.718, 26381.214), stdev = 182.281
[info]   CI (99.9%): [25396.819, 26800.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668.437 ±(99.9%) 1.412 MB/sec [Average]
[info]   (min, avg, max) = (668.158, 668.437, 668.840), stdev = 0.367
[info]   CI (99.9%): [667.025, 669.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22782.414 ±(99.9%) 234.142 B/op [Average]
[info]   (min, avg, max) = (22708.015, 22782.414, 22844.148), stdev = 60.806
[info]   CI (99.9%): [22548.272, 23016.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.284 ±(99.9%) 1.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 0.711), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.27% complete, ETA 00:45:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1523.041 ops/s
[info] # Warmup Iteration   2: 4064.609 ops/s
[info] # Warmup Iteration   3: 4890.226 ops/s
[info] # Warmup Iteration   4: 4983.994 ops/s
[info] # Warmup Iteration   5: 4966.759 ops/s
[info] Iteration   1: 4992.652 ops/s
[info]                  ·gc.alloc.rate:               1036.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          326626.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210702.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 4963.697 ops/s
[info]                  ·gc.alloc.rate:                   1058.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              335678.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424076.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 4956.891 ops/s
[info]                  ·gc.alloc.rate:               1032.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          327718.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212549.189 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 4964.396 ops/s
[info]                  ·gc.alloc.rate:                   1045.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              331216.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424413.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4987.842 ops/s
[info]                  ·gc.alloc.rate:                   1034.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              326550.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211228.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4973.096 ±(99.9%) 61.686 ops/s [Average]
[info]   (min, avg, max) = (4956.891, 4973.096, 4992.652), stdev = 16.020
[info]   CI (99.9%): [4911.410, 5034.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1041.413 ±(99.9%) 41.577 MB/sec [Average]
[info]   (min, avg, max) = (1032.256, 1041.413, 1058.728), stdev = 10.797
[info]   CI (99.9%): [999.836, 1082.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   329558.147 ±(99.9%) 15065.436 B/op [Average]
[info]   (min, avg, max) = (326550.223, 329558.147, 335678.336), stdev = 3912.446
[info]   CI (99.9%): [314492.711, 344623.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   936.784 ±(99.9%) 1411.365 MB/sec [Average]
[info]   (min, avg, max) = (668.373, 936.784, 1339.051), stdev = 366.527
[info]   CI (99.9%): [≈ 0, 2348.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   296593.987 ±(99.9%) 448719.402 B/op [Average]
[info]   (min, avg, max) = (210702.046, 296593.987, 424413.564), stdev = 116531.004
[info]   CI (99.9%): [≈ 0, 745313.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.649 ±(99.9%) 35.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.649, 19.704), stdev = 9.241
[info]   CI (99.9%): [≈ 0, 42.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.47% complete, ETA 00:44:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1290.352 ops/s
[info] # Warmup Iteration   2: 4099.027 ops/s
[info] # Warmup Iteration   3: 4693.069 ops/s
[info] # Warmup Iteration   4: 5084.829 ops/s
[info] # Warmup Iteration   5: 5125.229 ops/s
[info] Iteration   1: 5133.013 ops/s
[info]                  ·gc.alloc.rate:               649.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          199089.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 202607.595 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5089.591 ops/s
[info]                  ·gc.alloc.rate:               643.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          198970.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204318.875 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5079.089 ops/s
[info]                  ·gc.alloc.rate:                   640.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              198344.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205340.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.898 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5103.732 ops/s
[info]                  ·gc.alloc.rate:               650.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          200594.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204374.754 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 5125.121 ops/s
[info]                  ·gc.alloc.rate:               645.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          198288.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 204009.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5106.109 ±(99.9%) 88.100 ops/s [Average]
[info]   (min, avg, max) = (5079.089, 5106.109, 5133.013), stdev = 22.879
[info]   CI (99.9%): [5018.009, 5194.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   645.911 ±(99.9%) 16.371 MB/sec [Average]
[info]   (min, avg, max) = (640.201, 645.911, 650.580), stdev = 4.252
[info]   CI (99.9%): [629.540, 662.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   199057.503 ±(99.9%) 3586.641 B/op [Average]
[info]   (min, avg, max) = (198288.501, 199057.503, 200594.539), stdev = 931.439
[info]   CI (99.9%): [195470.862, 202644.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.360 ±(99.9%) 5.843 MB/sec [Average]
[info]   (min, avg, max) = (660.845, 662.360, 664.446), stdev = 1.517
[info]   CI (99.9%): [656.518, 668.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   204130.084 ±(99.9%) 3798.448 B/op [Average]
[info]   (min, avg, max) = (202607.595, 204130.084, 205340.114), stdev = 986.445
[info]   CI (99.9%): [200331.636, 207928.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.580 ±(99.9%) 22.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.580, 12.898), stdev = 5.768
[info]   CI (99.9%): [≈ 0, 24.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.67% complete, ETA 00:44:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4048.511 ops/s
[info] # Warmup Iteration   2: 6216.256 ops/s
[info] # Warmup Iteration   3: 6580.847 ops/s
[info] # Warmup Iteration   4: 6625.906 ops/s
[info] # Warmup Iteration   5: 6592.579 ops/s
[info] Iteration   1: 6574.988 ops/s
[info]                  ·gc.alloc.rate:                   339.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              81335.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122442.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6606.548 ops/s
[info]                  ·gc.alloc.rate:      322.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6578.930 ops/s
[info]                  ·gc.alloc.rate:               335.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          80166.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160449.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6605.812 ops/s
[info]                  ·gc.alloc.rate:      322.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6583.910 ops/s
[info]                  ·gc.alloc.rate:                   360.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              86132.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160327.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.975 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6590.038 ±(99.9%) 58.043 ops/s [Average]
[info]   (min, avg, max) = (6574.988, 6590.038, 6606.548), stdev = 15.073
[info]   CI (99.9%): [6531.995, 6648.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   336.218 ±(99.9%) 59.590 MB/sec [Average]
[info]   (min, avg, max) = (322.818, 336.218, 360.417), stdev = 15.475
[info]   CI (99.9%): [276.628, 395.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80288.433 ±(99.9%) 14684.305 B/op [Average]
[info]   (min, avg, max) = (76904.065, 80288.433, 86132.311), stdev = 3813.467
[info]   CI (99.9%): [65604.128, 94972.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.658 ±(99.9%) 1326.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.658, 670.883), stdev = 344.551
[info]   CI (99.9%): [≈ 0, 1697.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   88643.871 ±(99.9%) 317254.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88643.871, 160449.177), stdev = 82389.874
[info]   CI (99.9%): [≈ 0, 405897.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.992 ±(99.9%) 10.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.992, 4.982), stdev = 2.727
[info]   CI (99.9%): [≈ 0, 12.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.87% complete, ETA 00:44:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4018.502 ops/s
[info] # Warmup Iteration   2: 6300.442 ops/s
[info] # Warmup Iteration   3: 6652.449 ops/s
[info] # Warmup Iteration   4: 6629.269 ops/s
[info] # Warmup Iteration   5: 6651.854 ops/s
[info] Iteration   1: 6631.933 ops/s
[info]                  ·gc.alloc.rate:               291.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          69160.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121390.770 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6626.298 ops/s
[info]                  ·gc.alloc.rate:               285.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          67777.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121500.659 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6653.187 ops/s
[info]                  ·gc.alloc.rate:      276.428 MB/sec
[info]                  ·gc.alloc.rate.norm: 65384.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6532.725 ops/s
[info]                  ·gc.alloc.rate:                   297.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              71709.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123229.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6638.559 ops/s
[info]                  ·gc.alloc.rate:      276.288 MB/sec
[info]                  ·gc.alloc.rate.norm: 65495.373 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6616.540 ±(99.9%) 184.519 ops/s [Average]
[info]   (min, avg, max) = (6532.725, 6616.540, 6653.187), stdev = 47.919
[info]   CI (99.9%): [6432.021, 6801.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   285.453 ±(99.9%) 36.090 MB/sec [Average]
[info]   (min, avg, max) = (276.288, 285.453, 297.688), stdev = 9.372
[info]   CI (99.9%): [249.363, 321.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67905.321 ±(99.9%) 10229.465 B/op [Average]
[info]   (min, avg, max) = (65384.065, 67905.321, 71709.658), stdev = 2656.560
[info]   CI (99.9%): [57675.855, 78134.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306.952 ±(99.9%) 1078.978 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.952, 511.601), stdev = 280.207
[info]   CI (99.9%): [≈ 0, 1385.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   73224.234 ±(99.9%) 257408.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73224.234, 123229.743), stdev = 66848.254
[info]   CI (99.9%): [≈ 0, 330633.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.006 ±(99.9%) 17.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.006, 10.028), stdev = 4.485
[info]   CI (99.9%): [≈ 0, 19.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.07% complete, ETA 00:44:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1471.266 ops/s
[info] # Warmup Iteration   2: 6499.143 ops/s
[info] # Warmup Iteration   3: 7788.254 ops/s
[info] # Warmup Iteration   4: 7798.358 ops/s
[info] # Warmup Iteration   5: 7790.351 ops/s
[info] Iteration   1: 7729.268 ops/s
[info]                  ·gc.alloc.rate:                   1665.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              339109.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409068.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.709 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 7863.760 ops/s
[info]                  ·gc.alloc.rate:                   1685.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              337227.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268209.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 711.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7889.348 ops/s
[info]                  ·gc.alloc.rate:                   1702.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              339605.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400457.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7840.482 ops/s
[info]                  ·gc.alloc.rate:               1695.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          340299.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 267926.342 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 7692.633 ops/s
[info]                  ·gc.alloc.rate:                   1659.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              339555.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273079.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7803.098 ±(99.9%) 334.419 ops/s [Average]
[info]   (min, avg, max) = (7692.633, 7803.098, 7889.348), stdev = 86.848
[info]   CI (99.9%): [7468.679, 8137.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1681.771 ±(99.9%) 71.800 MB/sec [Average]
[info]   (min, avg, max) = (1659.862, 1681.771, 1702.579), stdev = 18.646
[info]   CI (99.9%): [1609.971, 1753.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   339159.598 ±(99.9%) 4469.666 B/op [Average]
[info]   (min, avg, max) = (337227.833, 339159.598, 340299.725), stdev = 1160.758
[info]   CI (99.9%): [334689.932, 343629.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1605.396 ±(99.9%) 1416.304 MB/sec [Average]
[info]   (min, avg, max) = (1334.907, 1605.396, 2008.956), stdev = 367.810
[info]   CI (99.9%): [189.092, 3021.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   323748.080 ±(99.9%) 285127.842 B/op [Average]
[info]   (min, avg, max) = (267926.342, 323748.080, 409068.066), stdev = 74046.795
[info]   CI (99.9%): [38620.238, 608875.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.853 ±(99.9%) 5.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.853, 3.554), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   170.724 ±(99.9%) 1177.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 170.724, 711.123), stdev = 305.797
[info]   CI (99.9%): [≈ 0, 1348.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.27% complete, ETA 00:43:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.692 ops/s
[info] # Warmup Iteration   2: 17658.785 ops/s
[info] # Warmup Iteration   3: 18615.944 ops/s
[info] # Warmup Iteration   4: 18691.919 ops/s
[info] # Warmup Iteration   5: 19049.275 ops/s
[info] Iteration   1: 19113.856 ops/s
[info]                  ·gc.alloc.rate:      471.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18766.278 ops/s
[info]                  ·gc.alloc.rate:               494.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          41475.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55693.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 19117.277 ops/s
[info]                  ·gc.alloc.rate:               488.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          40234.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54671.597 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 18383.131 ops/s
[info]                  ·gc.alloc.rate:                   473.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              40563.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56917.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19161.722 ops/s
[info]                  ·gc.alloc.rate:      472.843 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   18908.453 ±(99.9%) 1285.965 ops/s [Average]
[info]   (min, avg, max) = (18383.131, 18908.453, 19161.722), stdev = 333.961
[info]   CI (99.9%): [17622.488, 20194.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   480.346 ±(99.9%) 40.800 MB/sec [Average]
[info]   (min, avg, max) = (471.653, 480.346, 494.615), stdev = 10.596
[info]   CI (99.9%): [439.545, 521.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   39987.409 ±(99.9%) 4422.383 B/op [Average]
[info]   (min, avg, max) = (38832.023, 39987.409, 41475.183), stdev = 1148.479
[info]   CI (99.9%): [35565.026, 44409.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.644 ±(99.9%) 1401.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.644, 664.869), stdev = 363.911
[info]   CI (99.9%): [≈ 0, 1799.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   33456.532 ±(99.9%) 117644.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33456.532, 56917.157), stdev = 30551.840
[info]   CI (99.9%): [≈ 0, 151100.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 3.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.433, 2.166), stdev = 0.969
[info]   CI (99.9%): [≈ 0, 4.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.47% complete, ETA 00:43:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4827.157 ops/s
[info] # Warmup Iteration   2: 13786.235 ops/s
[info] # Warmup Iteration   3: 15956.538 ops/s
[info] # Warmup Iteration   4: 15635.601 ops/s
[info] # Warmup Iteration   5: 15801.430 ops/s
[info] Iteration   1: 15939.464 ops/s
[info]                  ·gc.alloc.rate:               433.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          42751.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50511.596 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15973.158 ops/s
[info]                  ·gc.alloc.rate:      424.605 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15918.549 ops/s
[info]                  ·gc.alloc.rate:               440.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          43568.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65165.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 15909.519 ops/s
[info]                  ·gc.alloc.rate:                   437.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              43325.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65198.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15979.470 ops/s
[info]                  ·gc.alloc.rate:      424.829 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15944.032 ±(99.9%) 121.243 ops/s [Average]
[info]   (min, avg, max) = (15909.519, 15944.032, 15979.470), stdev = 31.486
[info]   CI (99.9%): [15822.790, 16065.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   432.234 ±(99.9%) 28.480 MB/sec [Average]
[info]   (min, avg, max) = (424.605, 432.234, 440.715), stdev = 7.396
[info]   CI (99.9%): [403.754, 460.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42661.827 ±(99.9%) 3132.762 B/op [Average]
[info]   (min, avg, max) = (41832.027, 42661.827, 43568.655), stdev = 813.568
[info]   CI (99.9%): [39529.065, 45794.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   365.986 ±(99.9%) 1307.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 365.986, 659.176), stdev = 339.483
[info]   CI (99.9%): [≈ 0, 1673.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   36175.093 ±(99.9%) 129234.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36175.093, 65198.313), stdev = 33561.899
[info]   CI (99.9%): [≈ 0, 165410.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.824 ±(99.9%) 7.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 4.118), stdev = 1.842
[info]   CI (99.9%): [≈ 0, 7.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67.67% complete, ETA 00:43:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13816.125 ops/s
[info] # Warmup Iteration   2: 22407.974 ops/s
[info] # Warmup Iteration   3: 23470.939 ops/s
[info] # Warmup Iteration   4: 23371.922 ops/s
[info] # Warmup Iteration   5: 23054.783 ops/s
[info] Iteration   1: 23380.923 ops/s
[info]                  ·gc.alloc.rate:               448.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          30159.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34435.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 23460.524 ops/s
[info]                  ·gc.alloc.rate:      442.760 MB/sec
[info]                  ·gc.alloc.rate.norm: 29696.679 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23510.053 ops/s
[info]                  ·gc.alloc.rate:               450.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          30139.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44902.026 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 23474.272 ops/s
[info]                  ·gc.alloc.rate:                   453.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              30399.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44972.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23592.860 ops/s
[info]                  ·gc.alloc.rate:      433.678 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23483.726 ±(99.9%) 297.021 ops/s [Average]
[info]   (min, avg, max) = (23380.923, 23483.726, 23592.860), stdev = 77.135
[info]   CI (99.9%): [23186.706, 23780.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   445.652 ±(99.9%) 29.821 MB/sec [Average]
[info]   (min, avg, max) = (433.678, 445.652, 453.450), stdev = 7.744
[info]   CI (99.9%): [415.831, 475.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29864.693 ±(99.9%) 2240.510 B/op [Average]
[info]   (min, avg, max) = (28928.018, 29864.693, 30399.568), stdev = 581.853
[info]   CI (99.9%): [27624.183, 32105.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.655 ±(99.9%) 1326.723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.655, 670.829), stdev = 344.546
[info]   CI (99.9%): [≈ 0, 1697.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24862.043 ±(99.9%) 88939.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24862.043, 44972.786), stdev = 23097.264
[info]   CI (99.9%): [≈ 0, 113801.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 2.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.396), stdev = 0.624
[info]   CI (99.9%): [≈ 0, 2.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67.87% complete, ETA 00:42:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99.891 ops/s
[info] # Warmup Iteration   2: 2431.056 ops/s
[info] # Warmup Iteration   3: 3981.509 ops/s
[info] # Warmup Iteration   4: 4025.744 ops/s
[info] # Warmup Iteration   5: 4074.757 ops/s
[info] Iteration   1: 4075.729 ops/s
[info]                  ·gc.alloc.rate:                   2459.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              949281.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775436.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4113.679 ops/s
[info]                  ·gc.alloc.rate:                   2507.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              959131.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1026406.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.852 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4085.198 ops/s
[info]                  ·gc.alloc.rate:                   2477.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              954243.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1035491.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.211 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4121.630 ops/s
[info]                  ·gc.alloc.rate:               2498.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          954060.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 771109.006 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4003.526 ops/s
[info]                  ·gc.alloc.rate:               2456.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          965626.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1060619.570 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4079.953 ±(99.9%) 180.209 ops/s [Average]
[info]   (min, avg, max) = (4003.526, 4079.953, 4121.630), stdev = 46.800
[info]   CI (99.9%): [3899.744, 4260.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2479.834 ±(99.9%) 87.950 MB/sec [Average]
[info]   (min, avg, max) = (2456.634, 2479.834, 2507.275), stdev = 22.840
[info]   CI (99.9%): [2391.884, 2567.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   956468.732 ±(99.9%) 23843.629 B/op [Average]
[info]   (min, avg, max) = (949281.430, 956468.732, 965626.846), stdev = 6192.115
[info]   CI (99.9%): [932625.103, 980312.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2419.620 ±(99.9%) 1425.240 MB/sec [Average]
[info]   (min, avg, max) = (2008.800, 2419.620, 2698.303), stdev = 370.130
[info]   CI (99.9%): [994.380, 3844.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   933812.732 ±(99.9%) 566409.757 B/op [Average]
[info]   (min, avg, max) = (771109.006, 933812.732, 1060619.570), stdev = 147094.815
[info]   CI (99.9%): [367402.975, 1500222.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.339 ±(99.9%) 2.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 1.364), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   130.902 ±(99.9%) 864.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.902, 526.446), stdev = 224.577
[info]   CI (99.9%): [≈ 0, 995.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68.07% complete, ETA 00:42:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2935.749 ops/s
[info] # Warmup Iteration   2: 9332.779 ops/s
[info] # Warmup Iteration   3: 9918.644 ops/s
[info] # Warmup Iteration   4: 9912.070 ops/s
[info] # Warmup Iteration   5: 9940.734 ops/s
[info] Iteration   1: 9903.059 ops/s
[info]                  ·gc.alloc.rate:                   1251.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              198861.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213293.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9928.559 ops/s
[info]                  ·gc.alloc.rate:               1258.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          199464.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212861.667 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 9960.436 ops/s
[info]                  ·gc.alloc.rate:                   1248.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              197223.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106141.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9907.144 ops/s
[info]                  ·gc.alloc.rate:                   1270.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              201843.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213492.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9956.219 ops/s
[info]                  ·gc.alloc.rate:                   1261.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              199418.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212263.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   9931.083 ±(99.9%) 102.932 ops/s [Average]
[info]   (min, avg, max) = (9903.059, 9931.083, 9960.436), stdev = 26.731
[info]   CI (99.9%): [9828.151, 10034.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1258.203 ±(99.9%) 33.676 MB/sec [Average]
[info]   (min, avg, max) = (1248.648, 1258.203, 1270.737), stdev = 8.746
[info]   CI (99.9%): [1224.527, 1291.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   199362.375 ±(99.9%) 6384.709 B/op [Average]
[info]   (min, avg, max) = (197223.533, 199362.375, 201843.819), stdev = 1658.089
[info]   CI (99.9%): [192977.666, 205747.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1208.862 ±(99.9%) 1155.647 MB/sec [Average]
[info]   (min, avg, max) = (671.997, 1208.862, 1344.076), stdev = 300.118
[info]   CI (99.9%): [53.216, 2364.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   191610.499 ±(99.9%) 183987.174 B/op [Average]
[info]   (min, avg, max) = (106141.614, 191610.499, 213492.994), stdev = 47780.885
[info]   CI (99.9%): [7623.324, 375597.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.742 ±(99.9%) 5.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.742, 3.109), stdev = 1.344
[info]   CI (99.9%): [≈ 0, 5.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   117.841 ±(99.9%) 822.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.841, 493.769), stdev = 213.477
[info]   CI (99.9%): [≈ 0, 939.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.27% complete, ETA 00:42:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2542.224 ops/s
[info] # Warmup Iteration   2: 8796.492 ops/s
[info] # Warmup Iteration   3: 10473.199 ops/s
[info] # Warmup Iteration   4: 10380.583 ops/s
[info] # Warmup Iteration   5: 10229.940 ops/s
[info] Iteration   1: 10279.375 ops/s
[info]                  ·gc.alloc.rate:                   2194.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              335907.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307678.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 574.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10383.440 ops/s
[info]                  ·gc.alloc.rate:                   2212.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              335277.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303891.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10392.363 ops/s
[info]                  ·gc.alloc.rate:               2217.108 MB/sec
[info]                  ·gc.alloc.rate.norm:          335726.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 303527.194 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 10256.965 ops/s
[info]                  ·gc.alloc.rate:                   2201.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              337841.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307755.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10423.616 ops/s
[info]                  ·gc.alloc.rate:               2263.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          341789.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 404706.486 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10347.152 ±(99.9%) 285.149 ops/s [Average]
[info]   (min, avg, max) = (10256.965, 10347.152, 10423.616), stdev = 74.052
[info]   CI (99.9%): [10062.003, 10632.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2217.882 ±(99.9%) 104.758 MB/sec [Average]
[info]   (min, avg, max) = (2194.197, 2217.882, 2263.869), stdev = 27.205
[info]   CI (99.9%): [2113.124, 2322.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   337308.474 ±(99.9%) 10360.493 B/op [Average]
[info]   (min, avg, max) = (335277.452, 337308.474, 341789.782), stdev = 2690.587
[info]   CI (99.9%): [326947.981, 347668.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2141.184 ±(99.9%) 1161.165 MB/sec [Average]
[info]   (min, avg, max) = (2004.468, 2141.184, 2680.602), stdev = 301.551
[info]   CI (99.9%): [980.019, 3302.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   325511.812 ±(99.9%) 170647.814 B/op [Average]
[info]   (min, avg, max) = (303527.194, 325511.812, 404706.486), stdev = 44316.695
[info]   CI (99.9%): [154863.998, 496159.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.792 ±(99.9%) 6.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.792, 3.750), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   121.127 ±(99.9%) 976.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.127, 574.047), stdev = 253.470
[info]   CI (99.9%): [≈ 0, 1097.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.47% complete, ETA 00:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.824 ops/s
[info] # Warmup Iteration   2: 46716.175 ops/s
[info] # Warmup Iteration   3: 55148.475 ops/s
[info] # Warmup Iteration   4: 54423.714 ops/s
[info] # Warmup Iteration   5: 53730.055 ops/s
[info] Iteration   1: 53573.551 ops/s
[info]                  ·gc.alloc.rate:                   525.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              15425.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19530.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 54749.348 ops/s
[info]                  ·gc.alloc.rate:      511.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 54495.505 ops/s
[info]                  ·gc.alloc.rate:               528.001 MB/sec
[info]                  ·gc.alloc.rate.norm:          15246.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19200.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 54505.100 ops/s
[info]                  ·gc.alloc.rate:               529.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          15284.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19216.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 55827.548 ops/s
[info]                  ·gc.alloc.rate:                   536.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              15129.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18759.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   54630.210 ±(99.9%) 3103.378 ops/s [Average]
[info]   (min, avg, max) = (53573.551, 54630.210, 55827.548), stdev = 805.937
[info]   CI (99.9%): [51526.833, 57733.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   526.224 ±(99.9%) 35.034 MB/sec [Average]
[info]   (min, avg, max) = (511.845, 526.224, 536.704), stdev = 9.098
[info]   CI (99.9%): [491.190, 561.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15159.539 ±(99.9%) 1046.105 B/op [Average]
[info]   (min, avg, max) = (14712.008, 15159.539, 15425.751), stdev = 271.670
[info]   CI (99.9%): [14113.434, 16205.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.188 ±(99.9%) 1145.576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.188, 665.627), stdev = 297.502
[info]   CI (99.9%): [≈ 0, 1677.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15341.415 ±(99.9%) 33040.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15341.415, 19530.782), stdev = 8580.507
[info]   CI (99.9%): [≈ 0, 48381.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.442 ±(99.9%) 2.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.442, 1.174), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.67% complete, ETA 00:41:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15800.821 ops/s
[info] # Warmup Iteration   2: 43567.975 ops/s
[info] # Warmup Iteration   3: 43553.458 ops/s
[info] # Warmup Iteration   4: 44119.066 ops/s
[info] # Warmup Iteration   5: 43915.197 ops/s
[info] Iteration   1: 43856.647 ops/s
[info]                  ·gc.alloc.rate:                   652.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              23419.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23820.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.821 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43954.573 ops/s
[info]                  ·gc.alloc.rate:               646.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          23131.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23755.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 43839.888 ops/s
[info]                  ·gc.alloc.rate:                   651.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              23369.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23817.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45469.595 ops/s
[info]                  ·gc.alloc.rate:               671.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          23239.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22917.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 45424.839 ops/s
[info]                  ·gc.alloc.rate:               669.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          23207.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22940.124 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   44509.108 ±(99.9%) 3302.456 ops/s [Average]
[info]   (min, avg, max) = (43839.888, 44509.108, 45469.595), stdev = 857.637
[info]   CI (99.9%): [41206.652, 47811.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   658.228 ±(99.9%) 44.749 MB/sec [Average]
[info]   (min, avg, max) = (646.079, 658.228, 671.469), stdev = 11.621
[info]   CI (99.9%): [613.479, 702.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23273.385 ±(99.9%) 457.377 B/op [Average]
[info]   (min, avg, max) = (23131.289, 23273.385, 23419.982), stdev = 118.779
[info]   CI (99.9%): [22816.008, 23730.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   663.044 ±(99.9%) 3.186 MB/sec [Average]
[info]   (min, avg, max) = (662.140, 663.044, 663.903), stdev = 0.828
[info]   CI (99.9%): [659.857, 666.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23450.205 ±(99.9%) 1835.895 B/op [Average]
[info]   (min, avg, max) = (22917.426, 23450.205, 23820.407), stdev = 476.776
[info]   CI (99.9%): [21614.311, 25286.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.877 ±(99.9%) 7.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.877, 4.343), stdev = 1.938
[info]   CI (99.9%): [≈ 0, 8.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.463 ±(99.9%) 267.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.463, 155.821), stdev = 69.521
[info]   CI (99.9%): [≈ 0, 299.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68.88% complete, ETA 00:41:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28668.421 ops/s
[info] # Warmup Iteration   2: 83098.985 ops/s
[info] # Warmup Iteration   3: 89449.770 ops/s
[info] # Warmup Iteration   4: 86468.306 ops/s
[info] # Warmup Iteration   5: 88253.192 ops/s
[info] Iteration   1: 89649.014 ops/s
[info]                  ·gc.alloc.rate:               698.665 MB/sec
[info]                  ·gc.alloc.rate.norm:          12264.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11769.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 88950.978 ops/s
[info]                  ·gc.alloc.rate:               689.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          12188.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11862.066 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 90147.969 ops/s
[info]                  ·gc.alloc.rate:                   693.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              12110.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11710.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.828 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 89888.692 ops/s
[info]                  ·gc.alloc.rate:               691.922 MB/sec
[info]                  ·gc.alloc.rate.norm:          12113.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11744.667 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 90155.980 ops/s
[info]                  ·gc.alloc.rate:                   695.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              12135.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11720.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   89758.527 ±(99.9%) 1916.353 ops/s [Average]
[info]   (min, avg, max) = (88950.978, 89758.527, 90155.980), stdev = 497.671
[info]   CI (99.9%): [87842.174, 91674.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   693.731 ±(99.9%) 13.817 MB/sec [Average]
[info]   (min, avg, max) = (689.082, 693.731, 698.665), stdev = 3.588
[info]   CI (99.9%): [679.914, 707.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12162.489 ±(99.9%) 250.727 B/op [Average]
[info]   (min, avg, max) = (12110.393, 12162.489, 12264.680), stdev = 65.113
[info]   CI (99.9%): [11911.762, 12413.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.855 ±(99.9%) 1.469 MB/sec [Average]
[info]   (min, avg, max) = (670.485, 670.855, 671.483), stdev = 0.382
[info]   CI (99.9%): [669.386, 672.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11761.549 ±(99.9%) 233.881 B/op [Average]
[info]   (min, avg, max) = (11710.151, 11761.549, 11862.066), stdev = 60.738
[info]   CI (99.9%): [11527.668, 11995.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.014 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.238 ±(99.9%) 1.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.238, 0.828), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.08% complete, ETA 00:41:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50804.278 ops/s
[info] # Warmup Iteration   2: 100774.464 ops/s
[info] # Warmup Iteration   3: 100261.044 ops/s
[info] # Warmup Iteration   4: 104148.168 ops/s
[info] # Warmup Iteration   5: 104324.166 ops/s
[info] Iteration   1: 104518.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 104038.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 103748.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 103694.956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 103875.866 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   103975.162 ±(99.9%) 1276.053 ops/s [Average]
[info]   (min, avg, max) = (103694.956, 103975.162, 104518.623), stdev = 331.387
[info]   CI (99.9%): [102699.108, 105251.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.28% complete, ETA 00:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 690.687 ops/s
[info] # Warmup Iteration   2: 6484.000 ops/s
[info] # Warmup Iteration   3: 7431.626 ops/s
[info] # Warmup Iteration   4: 7651.489 ops/s
[info] # Warmup Iteration   5: 7688.678 ops/s
[info] Iteration   1: 7631.490 ops/s
[info]                  ·gc.alloc.rate:                   2295.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              473355.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551896.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.911 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7690.257 ops/s
[info]                  ·gc.alloc.rate:                   2324.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              475749.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411755.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.600 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7639.655 ops/s
[info]                  ·gc.alloc.rate:                   2283.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              470451.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414998.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7716.943 ops/s
[info]                  ·gc.alloc.rate:               2302.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          469575.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 411877.501 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 7600.527 ops/s
[info]                  ·gc.alloc.rate:               2262.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          468344.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 419058.027 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7655.774 ±(99.9%) 180.943 ops/s [Average]
[info]   (min, avg, max) = (7600.527, 7655.774, 7716.943), stdev = 46.990
[info]   CI (99.9%): [7474.831, 7836.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2293.852 ±(99.9%) 89.295 MB/sec [Average]
[info]   (min, avg, max) = (2262.166, 2293.852, 2324.897), stdev = 23.190
[info]   CI (99.9%): [2204.556, 2383.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   471495.478 ±(99.9%) 11593.287 B/op [Average]
[info]   (min, avg, max) = (468344.806, 471495.478, 475749.615), stdev = 3010.740
[info]   CI (99.9%): [459902.191, 483088.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.436 ±(99.9%) 1134.345 MB/sec [Average]
[info]   (min, avg, max) = (2012.170, 2149.436, 2676.342), stdev = 294.586
[info]   CI (99.9%): [1015.090, 3283.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   441917.220 ±(99.9%) 237015.887 B/op [Average]
[info]   (min, avg, max) = (411755.565, 441917.220, 551896.564), stdev = 61552.273
[info]   CI (99.9%): [204901.333, 678933.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.266 ±(99.9%) 1.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.062), stdev = 0.453
[info]   CI (99.9%): [≈ 0, 2.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54.875 ±(99.9%) 359.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.875, 218.911), stdev = 93.335
[info]   CI (99.9%): [≈ 0, 414.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69.48% complete, ETA 00:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2302.929 ops/s
[info] # Warmup Iteration   2: 4329.453 ops/s
[info] # Warmup Iteration   3: 4525.622 ops/s
[info] # Warmup Iteration   4: 4519.852 ops/s
[info] # Warmup Iteration   5: 4351.715 ops/s
[info] Iteration   1: 4516.643 ops/s
[info]                  ·gc.alloc.rate:                   481.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              167911.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178243.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4544.361 ops/s
[info]                  ·gc.alloc.rate:               486.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          168507.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231978.695 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 4555.295 ops/s
[info]                  ·gc.alloc.rate:      466.573 MB/sec
[info]                  ·gc.alloc.rate.norm: 161176.095 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4537.025 ops/s
[info]                  ·gc.alloc.rate:               482.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          167223.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232336.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 4535.749 ops/s
[info]                  ·gc.alloc.rate:                   490.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              170083.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232503.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4537.814 ±(99.9%) 54.509 ops/s [Average]
[info]   (min, avg, max) = (4516.643, 4537.814, 4555.295), stdev = 14.156
[info]   CI (99.9%): [4483.305, 4592.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   481.503 ±(99.9%) 34.773 MB/sec [Average]
[info]   (min, avg, max) = (466.573, 481.503, 490.254), stdev = 9.030
[info]   CI (99.9%): [446.730, 516.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   166980.516 ±(99.9%) 13139.802 B/op [Average]
[info]   (min, avg, max) = (161176.095, 166980.516, 170083.163), stdev = 3412.365
[info]   CI (99.9%): [153840.714, 180120.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   504.308 ±(99.9%) 1117.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.308, 670.176), stdev = 290.139
[info]   CI (99.9%): [≈ 0, 1621.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   175012.503 ±(99.9%) 387349.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 175012.503, 232503.296), stdev = 100593.490
[info]   CI (99.9%): [≈ 0, 562362.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3.708 ±(99.9%) 20.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.708, 11.289), stdev = 5.274
[info]   CI (99.9%): [≈ 0, 24.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.68% complete, ETA 00:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1092616.290 ops/s
[info] # Warmup Iteration   2: 7291030.254 ops/s
[info] # Warmup Iteration   3: 8967953.436 ops/s
[info] # Warmup Iteration   4: 9006044.552 ops/s
[info] # Warmup Iteration   5: 9135773.160 ops/s
[info] Iteration   1: 9127352.099 ops/s
[info]                  ·gc.alloc.rate:                   4918.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4713.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     812.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9123213.698 ops/s
[info]                  ·gc.alloc.rate:                   4918.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4732.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     816.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 9019330.035 ops/s
[info]                  ·gc.alloc.rate:               4865.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4747.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 828.400 B/op
[info]                  ·gc.count:                    7.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 9045842.315 ops/s
[info]                  ·gc.alloc.rate:                   4879.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4757.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     827.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9037861.225 ops/s
[info]                  ·gc.alloc.rate:                   4876.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              849.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4763.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   9070719.874 ±(99.9%) 195420.747 ops/s [Average]
[info]   (min, avg, max) = (9019330.035, 9070719.874, 9127352.099), stdev = 50750.147
[info]   CI (99.9%): [8875299.128, 9266140.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4891.816 ±(99.9%) 96.123 MB/sec [Average]
[info]   (min, avg, max) = (4865.443, 4891.816, 4918.987), stdev = 24.963
[info]   CI (99.9%): [4795.693, 4987.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   848.707 ±(99.9%) 1.802 B/op [Average]
[info]   (min, avg, max) = (848.103, 848.707, 849.223), stdev = 0.468
[info]   CI (99.9%): [846.905, 850.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4742.684 ±(99.9%) 77.672 MB/sec [Average]
[info]   (min, avg, max) = (4713.321, 4742.684, 4763.130), stdev = 20.171
[info]   CI (99.9%): [4665.012, 4820.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   822.866 ±(99.9%) 30.099 B/op [Average]
[info]   (min, avg, max) = (812.643, 822.866, 829.413), stdev = 7.817
[info]   CI (99.9%): [792.767, 852.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69.88% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.573 ops/s
[info] # Warmup Iteration   2: 35158771.393 ops/s
[info] # Warmup Iteration   3: 37984855.713 ops/s
[info] # Warmup Iteration   4: 38026876.155 ops/s
[info] # Warmup Iteration   5: 38038342.585 ops/s
[info] Iteration   1: 38024335.007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38105178.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37911218.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38038538.154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38063865.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38028627.164 ±(99.9%) 279026.899 ops/s [Average]
[info]   (min, avg, max) = (37911218.713, 38028627.164, 38105178.006), stdev = 72462.400
[info]   CI (99.9%): [37749600.265, 38307654.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.08% complete, ETA 00:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576162.497 ops/s
[info] # Warmup Iteration   2: 8548793.245 ops/s
[info] # Warmup Iteration   3: 10083895.727 ops/s
[info] # Warmup Iteration   4: 10047842.341 ops/s
[info] # Warmup Iteration   5: 9978302.534 ops/s
[info] Iteration   1: 9979974.420 ops/s
[info]                  ·gc.alloc.rate:               3913.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          617.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4014.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 633.106 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 9977204.579 ops/s
[info]                  ·gc.alloc.rate:                   3885.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              612.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     529.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9767206.802 ops/s
[info]                  ·gc.alloc.rate:                   3834.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              617.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4047.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     652.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 9906094.429 ops/s
[info]                  ·gc.alloc.rate:               3860.999 MB/sec
[info]                  ·gc.alloc.rate.norm:          613.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 537.457 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 9746311.332 ops/s
[info]                  ·gc.alloc.rate:                   3828.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              618.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     657.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9875358.312 ±(99.9%) 433140.848 ops/s [Average]
[info]   (min, avg, max) = (9746311.332, 9875358.312, 9979974.420), stdev = 112485.303
[info]   CI (99.9%): [9442217.464, 10308499.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3864.627 ±(99.9%) 136.442 MB/sec [Average]
[info]   (min, avg, max) = (3828.613, 3864.627, 3913.064), stdev = 35.434
[info]   CI (99.9%): [3728.185, 4001.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   615.872 ±(99.9%) 9.729 B/op [Average]
[info]   (min, avg, max) = (612.929, 615.872, 618.217), stdev = 2.527
[info]   CI (99.9%): [606.143, 625.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3775.234 ±(99.9%) 1421.366 MB/sec [Average]
[info]   (min, avg, max) = (3359.951, 3775.234, 4070.196), stdev = 369.124
[info]   CI (99.9%): [2353.868, 5196.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   601.989 ±(99.9%) 242.720 B/op [Average]
[info]   (min, avg, max) = (529.958, 601.989, 657.226), stdev = 63.034
[info]   CI (99.9%): [359.269, 844.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.28% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13603753.051 ops/s
[info] # Warmup Iteration   2: 45319430.273 ops/s
[info] # Warmup Iteration   3: 48130770.951 ops/s
[info] # Warmup Iteration   4: 48085532.092 ops/s
[info] # Warmup Iteration   5: 48103829.234 ops/s
[info] Iteration   1: 48123990.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48169095.319 ops/s
[info]                  ·gc.alloc.rate:      0.661 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48078300.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48102925.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48120282.745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48118918.777 ±(99.9%) 128448.494 ops/s [Average]
[info]   (min, avg, max) = (48078300.201, 48118918.777, 48169095.319), stdev = 33357.666
[info]   CI (99.9%): [47990470.283, 48247367.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   0.133 ±(99.9%) 1.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.133, 0.661), stdev = 0.296
[info]   CI (99.9%): [≈ 0, 1.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.48% complete, ETA 00:39:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7879252.494 ops/s
[info] # Warmup Iteration   2: 30026315.637 ops/s
[info] # Warmup Iteration   3: 31015903.214 ops/s
[info] # Warmup Iteration   4: 31589008.573 ops/s
[info] # Warmup Iteration   5: 31617137.333 ops/s
[info] Iteration   1: 31454136.284 ops/s
[info]                  ·gc.alloc.rate:               820.820 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 30841674.265 ops/s
[info]                  ·gc.alloc.rate:                   818.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 31668782.457 ops/s
[info]                  ·gc.alloc.rate:                   822.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31683881.830 ops/s
[info]                  ·gc.alloc.rate:                   819.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 31570014.911 ops/s
[info]                  ·gc.alloc.rate:               818.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.541 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31443697.949 ±(99.9%) 1343384.736 ops/s [Average]
[info]   (min, avg, max) = (30841674.265, 31443697.949, 31683881.830), stdev = 348872.750
[info]   CI (99.9%): [30100313.213, 32787082.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   819.846 ±(99.9%) 6.449 MB/sec [Average]
[info]   (min, avg, max) = (818.145, 819.846, 822.104), stdev = 1.675
[info]   CI (99.9%): [813.397, 826.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.035 ±(99.9%) 1.608 B/op [Average]
[info]   (min, avg, max) = (40.722, 41.035, 41.744), stdev = 0.418
[info]   CI (99.9%): [39.426, 42.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.669 ±(99.9%) 1156.704 MB/sec [Average]
[info]   (min, avg, max) = (671.490, 806.669, 1344.026), stdev = 300.392
[info]   CI (99.9%): [≈ 0, 1963.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.504 ±(99.9%) 60.393 B/op [Average]
[info]   (min, avg, max) = (33.404, 40.504, 68.560), stdev = 15.684
[info]   CI (99.9%): [≈ 0, 100.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70.68% complete, ETA 00:39:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1248776.768 ops/s
[info] # Warmup Iteration   2: 7448928.038 ops/s
[info] # Warmup Iteration   3: 9067672.625 ops/s
[info] # Warmup Iteration   4: 9053102.233 ops/s
[info] # Warmup Iteration   5: 9130428.423 ops/s
[info] Iteration   1: 9092792.176 ops/s
[info]                  ·gc.alloc.rate:               3855.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          667.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4015.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 694.993 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 9105583.955 ops/s
[info]                  ·gc.alloc.rate:                   3836.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              662.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     580.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9111234.576 ops/s
[info]                  ·gc.alloc.rate:                   3865.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              667.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4047.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 9035181.694 ops/s
[info]                  ·gc.alloc.rate:               3807.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          663.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 589.286 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 9091001.103 ops/s
[info]                  ·gc.alloc.rate:                   3859.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              668.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     704.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9087158.701 ±(99.9%) 116593.262 ops/s [Average]
[info]   (min, avg, max) = (9035181.694, 9087158.701, 9111234.576), stdev = 30278.900
[info]   CI (99.9%): [8970565.439, 9203751.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3844.741 ±(99.9%) 89.742 MB/sec [Average]
[info]   (min, avg, max) = (3807.789, 3844.741, 3865.052), stdev = 23.306
[info]   CI (99.9%): [3755.000, 3934.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   665.819 ±(99.9%) 9.651 B/op [Average]
[info]   (min, avg, max) = (662.983, 665.819, 668.108), stdev = 2.506
[info]   CI (99.9%): [656.168, 675.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3775.247 ±(99.9%) 1420.928 MB/sec [Average]
[info]   (min, avg, max) = (3359.977, 3775.247, 4069.675), stdev = 369.011
[info]   CI (99.9%): [2354.319, 5196.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   653.711 ±(99.9%) 242.249 B/op [Average]
[info]   (min, avg, max) = (580.665, 653.711, 704.506), stdev = 62.911
[info]   CI (99.9%): [411.462, 895.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70.88% complete, ETA 00:38:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2390363.305 ops/s
[info] # Warmup Iteration   2: 9391066.072 ops/s
[info] # Warmup Iteration   3: 11436342.224 ops/s
[info] # Warmup Iteration   4: 11486185.660 ops/s
[info] # Warmup Iteration   5: 11617040.418 ops/s
[info] Iteration   1: 11554229.003 ops/s
[info]                  ·gc.alloc.rate:                   4943.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4722.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     643.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 11530572.201 ops/s
[info]                  ·gc.alloc.rate:                   4949.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              675.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4742.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11457191.808 ops/s
[info]                  ·gc.alloc.rate:                   4920.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              675.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4753.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     652.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 11458830.736 ops/s
[info]                  ·gc.alloc.rate:                   4908.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              674.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4760.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 11297199.394 ops/s
[info]                  ·gc.alloc.rate:                   4828.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              672.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   11459604.629 ±(99.9%) 386851.035 ops/s [Average]
[info]   (min, avg, max) = (11297199.394, 11459604.629, 11554229.003), stdev = 100463.985
[info]   CI (99.9%): [11072753.594, 11846455.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4910.043 ±(99.9%) 186.160 MB/sec [Average]
[info]   (min, avg, max) = (4828.918, 4910.043, 4949.077), stdev = 48.345
[info]   CI (99.9%): [4723.883, 5096.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   674.265 ±(99.9%) 5.167 B/op [Average]
[info]   (min, avg, max) = (672.672, 674.265, 675.833), stdev = 1.342
[info]   CI (99.9%): [669.098, 679.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4612.008 ±(99.9%) 1144.045 MB/sec [Average]
[info]   (min, avg, max) = (4081.137, 4612.008, 4760.174), stdev = 297.105
[info]   CI (99.9%): [3467.963, 5756.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   633.126 ±(99.9%) 140.078 B/op [Average]
[info]   (min, avg, max) = (568.506, 633.126, 653.731), stdev = 36.378
[info]   CI (99.9%): [493.048, 773.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.398 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.121, 0.291), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.017, 0.040), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 1.000
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.08% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2581197.013 ops/s
[info] # Warmup Iteration   2: 11980759.258 ops/s
[info] # Warmup Iteration   3: 12916848.369 ops/s
[info] # Warmup Iteration   4: 13660911.662 ops/s
[info] # Warmup Iteration   5: 13683292.311 ops/s
[info] Iteration   1: 13779186.237 ops/s
[info]                  ·gc.alloc.rate:                   1639.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              187.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13726473.596 ops/s
[info]                  ·gc.alloc.rate:                   1669.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              191.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 13606065.191 ops/s
[info]                  ·gc.alloc.rate:                   1630.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13600053.047 ops/s
[info]                  ·gc.alloc.rate:                   1642.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13327116.166 ops/s
[info]                  ·gc.alloc.rate:                   1609.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              190.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   13607778.847 ±(99.9%) 673320.909 ops/s [Average]
[info]   (min, avg, max) = (13327116.166, 13607778.847, 13779186.237), stdev = 174859.302
[info]   CI (99.9%): [12934457.939, 14281099.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1638.247 ±(99.9%) 83.597 MB/sec [Average]
[info]   (min, avg, max) = (1609.073, 1638.247, 1669.129), stdev = 21.710
[info]   CI (99.9%): [1554.651, 1721.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   189.468 ±(99.9%) 6.099 B/op [Average]
[info]   (min, avg, max) = (187.234, 189.468, 191.367), stdev = 1.584
[info]   CI (99.9%): [183.368, 195.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.398 ±(99.9%) 1414.618 MB/sec [Average]
[info]   (min, avg, max) = (1340.971, 1610.398, 2015.136), stdev = 367.372
[info]   CI (99.9%): [195.780, 3025.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   186.454 ±(99.9%) 168.180 B/op [Average]
[info]   (min, avg, max) = (153.314, 186.454, 237.417), stdev = 43.676
[info]   CI (99.9%): [18.275, 354.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 4.563 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.666, 2.769), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.077 ±(99.9%) 0.523 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.077, 0.317), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.29% complete, ETA 00:38:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.693 ops/s
[info] # Warmup Iteration   2: 39052886.404 ops/s
[info] # Warmup Iteration   3: 42270460.571 ops/s
[info] # Warmup Iteration   4: 38962541.638 ops/s
[info] # Warmup Iteration   5: 41980788.383 ops/s
[info] Iteration   1: 41263548.433 ops/s
[info]                  ·gc.alloc.rate:                   854.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42132696.502 ops/s
[info]                  ·gc.alloc.rate:               881.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 41526280.212 ops/s
[info]                  ·gc.alloc.rate:               885.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50.542 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 42305181.029 ops/s
[info]                  ·gc.alloc.rate:               878.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.831 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 42368182.939 ops/s
[info]                  ·gc.alloc.rate:                   876.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   41919177.823 ±(99.9%) 1906372.809 ops/s [Average]
[info]   (min, avg, max) = (41263548.433, 41919177.823, 42368182.939), stdev = 495078.965
[info]   CI (99.9%): [40012805.014, 43825550.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   875.322 ±(99.9%) 46.604 MB/sec [Average]
[info]   (min, avg, max) = (854.640, 875.322, 885.764), stdev = 12.103
[info]   CI (99.9%): [828.718, 921.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.862 ±(99.9%) 1.615 B/op [Average]
[info]   (min, avg, max) = (32.544, 32.862, 33.566), stdev = 0.419
[info]   CI (99.9%): [31.247, 34.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.224 ±(99.9%) 1148.445 MB/sec [Average]
[info]   (min, avg, max) = (666.181, 800.224, 1333.744), stdev = 298.248
[info]   CI (99.9%): [≈ 0, 1948.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   30.091 ±(99.9%) 44.033 B/op [Average]
[info]   (min, avg, max) = (24.795, 30.091, 50.542), stdev = 11.435
[info]   CI (99.9%): [≈ 0, 74.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.027), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.49% complete, ETA 00:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1221959.588 ops/s
[info] # Warmup Iteration   2: 12288632.443 ops/s
[info] # Warmup Iteration   3: 13031928.239 ops/s
[info] # Warmup Iteration   4: 13118539.136 ops/s
[info] # Warmup Iteration   5: 13104082.283 ops/s
[info] Iteration   1: 13130164.535 ops/s
[info]                  ·gc.alloc.rate:                   2695.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13232743.107 ops/s
[info]                  ·gc.alloc.rate:                   2714.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13231334.003 ops/s
[info]                  ·gc.alloc.rate:                   2729.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13205012.405 ops/s
[info]                  ·gc.alloc.rate:               2725.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.201 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 13097079.550 ops/s
[info]                  ·gc.alloc.rate:               2676.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          321.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 242.783 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13179266.720 ±(99.9%) 238920.911 ops/s [Average]
[info]   (min, avg, max) = (13097079.550, 13179266.720, 13232743.107), stdev = 62047.002
[info]   CI (99.9%): [12940345.809, 13418187.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2708.285 ±(99.9%) 84.799 MB/sec [Average]
[info]   (min, avg, max) = (2676.524, 2708.285, 2729.448), stdev = 22.022
[info]   CI (99.9%): [2623.486, 2793.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.388 ±(99.9%) 5.055 B/op [Average]
[info]   (min, avg, max) = (321.623, 323.388, 324.734), stdev = 1.313
[info]   CI (99.9%): [318.333, 328.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2546.745 ±(99.9%) 1133.145 MB/sec [Average]
[info]   (min, avg, max) = (2020.422, 2546.745, 2687.144), stdev = 294.274
[info]   CI (99.9%): [1413.599, 3679.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   304.009 ±(99.9%) 131.858 B/op [Average]
[info]   (min, avg, max) = (242.783, 304.009, 320.506), stdev = 34.243
[info]   CI (99.9%): [172.151, 435.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.167), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.020), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71.69% complete, ETA 00:37:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17863719.239 ops/s
[info] # Warmup Iteration   2: 48489373.809 ops/s
[info] # Warmup Iteration   3: 48763688.274 ops/s
[info] # Warmup Iteration   4: 49548038.634 ops/s
[info] # Warmup Iteration   5: 49648361.500 ops/s
[info] Iteration   1: 49390395.069 ops/s
[info]                  ·gc.alloc.rate:                   1022.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 47462723.865 ops/s
[info]                  ·gc.alloc.rate:               996.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44.554 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 49226572.708 ops/s
[info]                  ·gc.alloc.rate:               1016.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.488 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 49218088.324 ops/s
[info]                  ·gc.alloc.rate:                   1041.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 49576875.862 ops/s
[info]                  ·gc.alloc.rate:               1032.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.359 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   48974931.166 ±(99.9%) 3303578.414 ops/s [Average]
[info]   (min, avg, max) = (47462723.865, 48974931.166, 49576875.862), stdev = 857928.823
[info]   CI (99.9%): [45671352.752, 52278509.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1021.751 ±(99.9%) 66.143 MB/sec [Average]
[info]   (min, avg, max) = (996.180, 1021.751, 1041.383), stdev = 17.177
[info]   CI (99.9%): [955.608, 1087.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.833 ±(99.9%) 1.277 B/op [Average]
[info]   (min, avg, max) = (32.493, 32.833, 33.298), stdev = 0.332
[info]   CI (99.9%): [31.557, 34.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.081 ±(99.9%) 1417.708 MB/sec [Average]
[info]   (min, avg, max) = (671.572, 941.081, 1345.033), stdev = 368.174
[info]   CI (99.9%): [≈ 0, 2358.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.361 ±(99.9%) 47.218 B/op [Average]
[info]   (min, avg, max) = (21.359, 30.361, 44.554), stdev = 12.262
[info]   CI (99.9%): [≈ 0, 77.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71.89% complete, ETA 00:37:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20773789.576 ops/s
[info] # Warmup Iteration   2: 56710474.088 ops/s
[info] # Warmup Iteration   3: 62566437.796 ops/s
[info] # Warmup Iteration   4: 62535991.904 ops/s
[info] # Warmup Iteration   5: 62498970.270 ops/s
[info] Iteration   1: 62481636.382 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62603731.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62235735.593 ops/s
[info]                  ·gc.alloc.rate:      0.651 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62539586.819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62592770.617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   62490692.113 ±(99.9%) 579753.324 ops/s [Average]
[info]   (min, avg, max) = (62235735.593, 62490692.113, 62603731.153), stdev = 150560.097
[info]   CI (99.9%): [61910938.789, 63070445.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.130 ±(99.9%) 1.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.130, 0.651), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.09% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4374424.299 ops/s
[info] # Warmup Iteration   2: 17134686.107 ops/s
[info] # Warmup Iteration   3: 17651271.781 ops/s
[info] # Warmup Iteration   4: 17882261.078 ops/s
[info] # Warmup Iteration   5: 17840441.376 ops/s
[info] Iteration   1: 17853418.175 ops/s
[info]                  ·gc.alloc.rate:                   1674.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              147.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17946402.461 ops/s
[info]                  ·gc.alloc.rate:               1681.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.708 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 17875385.529 ops/s
[info]                  ·gc.alloc.rate:                   1688.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17843402.001 ops/s
[info]                  ·gc.alloc.rate:                   1685.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17895351.363 ops/s
[info]                  ·gc.alloc.rate:                   1718.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              151.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17882791.906 ±(99.9%) 157279.806 ops/s [Average]
[info]   (min, avg, max) = (17843402.001, 17882791.906, 17946402.461), stdev = 40845.066
[info]   CI (99.9%): [17725512.099, 18040071.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1689.632 ±(99.9%) 64.936 MB/sec [Average]
[info]   (min, avg, max) = (1674.078, 1689.632, 1718.176), stdev = 16.864
[info]   CI (99.9%): [1624.696, 1754.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148.693 ±(99.9%) 5.639 B/op [Average]
[info]   (min, avg, max) = (147.462, 148.693, 151.098), stdev = 1.465
[info]   CI (99.9%): [143.053, 154.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1614.521 ±(99.9%) 1430.093 MB/sec [Average]
[info]   (min, avg, max) = (1339.991, 1614.521, 2025.257), stdev = 371.390
[info]   CI (99.9%): [184.428, 3044.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   142.080 ±(99.9%) 125.781 B/op [Average]
[info]   (min, avg, max) = (117.708, 142.080, 178.103), stdev = 32.665
[info]   CI (99.9%): [16.299, 267.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.29% complete, ETA 00:37:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398084.891 ops/s
[info] # Warmup Iteration   2: 2348771.729 ops/s
[info] # Warmup Iteration   3: 2735980.057 ops/s
[info] # Warmup Iteration   4: 2751022.491 ops/s
[info] # Warmup Iteration   5: 2747538.951 ops/s
[info] Iteration   1: 2744005.087 ops/s
[info]                  ·gc.alloc.rate:                   2201.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              1262.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2700329.248 ops/s
[info]                  ·gc.alloc.rate:                   2153.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1255.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1171.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2698428.476 ops/s
[info]                  ·gc.alloc.rate:               2162.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1171.348 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2745761.846 ops/s
[info]                  ·gc.alloc.rate:               2241.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          1284.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2679.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1535.694 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 2762356.420 ops/s
[info]                  ·gc.alloc.rate:                   2227.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1147.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2730176.215 ±(99.9%) 111742.933 ops/s [Average]
[info]   (min, avg, max) = (2698428.476, 2730176.215, 2762356.420), stdev = 29019.285
[info]   CI (99.9%): [2618433.282, 2841919.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2197.331 ±(99.9%) 148.723 MB/sec [Average]
[info]   (min, avg, max) = (2153.622, 2197.331, 2241.557), stdev = 38.623
[info]   CI (99.9%): [2048.608, 2346.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1266.539 ±(99.9%) 43.579 B/op [Average]
[info]   (min, avg, max) = (1255.106, 1266.539, 1284.767), stdev = 11.317
[info]   CI (99.9%): [1222.960, 1310.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2145.372 ±(99.9%) 1149.487 MB/sec [Average]
[info]   (min, avg, max) = (2008.505, 2145.372, 2679.355), stdev = 298.518
[info]   CI (99.9%): [995.885, 3294.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1236.304 ±(99.9%) 645.673 B/op [Average]
[info]   (min, avg, max) = (1147.538, 1236.304, 1535.694), stdev = 167.679
[info]   CI (99.9%): [590.631, 1881.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.722 ±(99.9%) 5.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 3.404), stdev = 1.501
[info]   CI (99.9%): [≈ 0, 6.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.415 ±(99.9%) 3.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 1.952), stdev = 0.861
[info]   CI (99.9%): [≈ 0, 3.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72.49% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2972626.488 ops/s
[info] # Warmup Iteration   2: 10099976.097 ops/s
[info] # Warmup Iteration   3: 11333340.186 ops/s
[info] # Warmup Iteration   4: 11562805.828 ops/s
[info] # Warmup Iteration   5: 11460066.080 ops/s
[info] Iteration   1: 11347013.349 ops/s
[info]                  ·gc.alloc.rate:                   2188.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11479531.665 ops/s
[info]                  ·gc.alloc.rate:                   2235.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11642391.625 ops/s
[info]                  ·gc.alloc.rate:               2252.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 272.299 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 11620176.113 ops/s
[info]                  ·gc.alloc.rate:                   2292.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              310.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11611536.262 ops/s
[info]                  ·gc.alloc.rate:                   2264.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   11540129.803 ±(99.9%) 482982.944 ops/s [Average]
[info]   (min, avg, max) = (11347013.349, 11540129.803, 11642391.625), stdev = 125429.137
[info]   CI (99.9%): [11057146.859, 12023112.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2246.764 ±(99.9%) 148.148 MB/sec [Average]
[info]   (min, avg, max) = (2188.911, 2246.764, 2292.591), stdev = 38.474
[info]   CI (99.9%): [2098.616, 2394.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   306.364 ±(99.9%) 10.380 B/op [Average]
[info]   (min, avg, max) = (303.492, 306.364, 310.491), stdev = 2.696
[info]   CI (99.9%): [295.984, 316.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2151.632 ±(99.9%) 1156.201 MB/sec [Average]
[info]   (min, avg, max) = (2014.440, 2151.632, 2688.738), stdev = 300.262
[info]   CI (99.9%): [995.431, 3307.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   293.305 ±(99.9%) 152.902 B/op [Average]
[info]   (min, avg, max) = (272.299, 293.305, 364.142), stdev = 39.708
[info]   CI (99.9%): [140.403, 446.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 5.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.957), stdev = 1.316
[info]   CI (99.9%): [≈ 0, 5.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.410), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.69% complete, ETA 00:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70223.995 ops/s
[info] # Warmup Iteration   2: 164485.435 ops/s
[info] # Warmup Iteration   3: 167485.675 ops/s
[info] # Warmup Iteration   4: 169962.322 ops/s
[info] # Warmup Iteration   5: 168110.741 ops/s
[info] Iteration   1: 169512.826 ops/s
[info]                  ·gc.alloc.rate:               3229.905 MB/sec
[info]                  ·gc.alloc.rate.norm:          29978.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31145.516 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 170219.712 ops/s
[info]                  ·gc.alloc.rate:                   3255.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              30102.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31084.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 168457.510 ops/s
[info]                  ·gc.alloc.rate:                   3210.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              29993.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25191.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 170873.691 ops/s
[info]                  ·gc.alloc.rate:                   3269.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              30116.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31131.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.959 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 168083.369 ops/s
[info]                  ·gc.alloc.rate:                   3191.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              29877.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25372.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   169429.421 ±(99.9%) 4504.552 ops/s [Average]
[info]   (min, avg, max) = (168083.369, 169429.421, 170873.691), stdev = 1169.818
[info]   CI (99.9%): [164924.869, 173933.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3231.501 ±(99.9%) 124.063 MB/sec [Average]
[info]   (min, avg, max) = (3191.067, 3231.501, 3269.987), stdev = 32.219
[info]   CI (99.9%): [3107.439, 3355.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30013.646 ±(99.9%) 377.619 B/op [Average]
[info]   (min, avg, max) = (29877.912, 30013.646, 30116.328), stdev = 98.067
[info]   CI (99.9%): [29636.027, 30391.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3100.909 ±(99.9%) 1398.303 MB/sec [Average]
[info]   (min, avg, max) = (2696.645, 3100.909, 3380.159), stdev = 363.135
[info]   CI (99.9%): [1702.607, 4499.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28785.163 ±(99.9%) 12316.069 B/op [Average]
[info]   (min, avg, max) = (25191.763, 28785.163, 31145.516), stdev = 3198.444
[info]   CI (99.9%): [16469.094, 41101.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.347 ±(99.9%) 1.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 0.959), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.89% complete, ETA 00:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1954.001 ops/s
[info] # Warmup Iteration   2: 24758.673 ops/s
[info] # Warmup Iteration   3: 33553.551 ops/s
[info] # Warmup Iteration   4: 33611.379 ops/s
[info] # Warmup Iteration   5: 33132.904 ops/s
[info] Iteration   1: 33297.148 ops/s
[info]                  ·gc.alloc.rate:                   2520.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              119112.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126490.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 33845.651 ops/s
[info]                  ·gc.alloc.rate:                   2519.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              117154.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93514.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 32870.088 ops/s
[info]                  ·gc.alloc.rate:               2490.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          119219.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128688.003 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 33052.726 ops/s
[info]                  ·gc.alloc.rate:                   2489.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              118545.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96192.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.991 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33672.527 ops/s
[info]                  ·gc.alloc.rate:               2563.034 MB/sec
[info]                  ·gc.alloc.rate.norm:          119782.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126199.609 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   33347.628 ±(99.9%) 1577.291 ops/s [Average]
[info]   (min, avg, max) = (32870.088, 33347.628, 33845.651), stdev = 409.617
[info]   CI (99.9%): [31770.337, 34924.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2516.646 ±(99.9%) 115.332 MB/sec [Average]
[info]   (min, avg, max) = (2489.940, 2516.646, 2563.034), stdev = 29.951
[info]   CI (99.9%): [2401.315, 2631.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118762.919 ±(99.9%) 3852.501 B/op [Average]
[info]   (min, avg, max) = (117154.574, 118762.919, 119782.008), stdev = 1000.482
[info]   CI (99.9%): [114910.418, 122615.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2419.289 ±(99.9%) 1418.274 MB/sec [Average]
[info]   (min, avg, max) = (2011.426, 2419.289, 2700.355), stdev = 368.321
[info]   CI (99.9%): [1001.015, 3837.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114217.186 ±(99.9%) 68263.589 B/op [Average]
[info]   (min, avg, max) = (93514.444, 114217.186, 128688.003), stdev = 17727.837
[info]   CI (99.9%): [45953.597, 182480.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 2.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.249), stdev = 0.554
[info]   CI (99.9%): [≈ 0, 2.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.199 ±(99.9%) 100.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.199, 59.034), stdev = 26.187
[info]   CI (99.9%): [≈ 0, 113.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.09% complete, ETA 00:36:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21213.344 ops/s
[info] # Warmup Iteration   2: 137791.248 ops/s
[info] # Warmup Iteration   3: 141497.176 ops/s
[info] # Warmup Iteration   4: 144679.213 ops/s
[info] # Warmup Iteration   5: 143654.373 ops/s
[info] Iteration   1: 144782.163 ops/s
[info]                  ·gc.alloc.rate:                   1236.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              13443.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7258.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.226 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 144636.846 ops/s
[info]                  ·gc.alloc.rate:               1250.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          13600.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14539.295 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 144573.404 ops/s
[info]                  ·gc.alloc.rate:                   1258.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              13698.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14560.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 142539.492 ops/s
[info]                  ·gc.alloc.rate:                   1228.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              13560.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14780.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.671 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 144463.601 ops/s
[info]                  ·gc.alloc.rate:                   1255.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              13673.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14572.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   144199.101 ±(99.9%) 3599.862 ops/s [Average]
[info]   (min, avg, max) = (142539.492, 144199.101, 144782.163), stdev = 934.873
[info]   CI (99.9%): [140599.240, 147798.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1245.757 ±(99.9%) 49.211 MB/sec [Average]
[info]   (min, avg, max) = (1228.218, 1245.757, 1258.415), stdev = 12.780
[info]   CI (99.9%): [1196.546, 1294.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13595.261 ±(99.9%) 389.236 B/op [Average]
[info]   (min, avg, max) = (13443.723, 13595.261, 13698.173), stdev = 101.083
[info]   CI (99.9%): [13206.026, 13984.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.643 ±(99.9%) 1153.280 MB/sec [Average]
[info]   (min, avg, max) = (667.877, 1203.643, 1338.688), stdev = 299.503
[info]   CI (99.9%): [50.363, 2356.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13142.194 ±(99.9%) 12669.544 B/op [Average]
[info]   (min, avg, max) = (7258.999, 13142.194, 14780.019), stdev = 3290.240
[info]   CI (99.9%): [472.650, 25811.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.955), stdev = 1.760
[info]   CI (99.9%): [≈ 0, 7.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.915 ±(99.9%) 74.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.915, 43.671), stdev = 19.429
[info]   CI (99.9%): [≈ 0, 83.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.29% complete, ETA 00:35:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220161.759 ops/s
[info] # Warmup Iteration   2: 441122.558 ops/s
[info] # Warmup Iteration   3: 441174.363 ops/s
[info] # Warmup Iteration   4: 435191.270 ops/s
[info] # Warmup Iteration   5: 441953.314 ops/s
[info] Iteration   1: 443287.280 ops/s
[info]                  ·gc.alloc.rate:               1761.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          6255.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4777.241 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 442421.065 ops/s
[info]                  ·gc.alloc.rate:                   1772.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              6303.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7177.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 445373.392 ops/s
[info]                  ·gc.alloc.rate:               1780.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          6291.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4747.734 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 440817.633 ops/s
[info]                  ·gc.alloc.rate:               1765.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          6302.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7186.898 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 442112.243 ops/s
[info]                  ·gc.alloc.rate:               1770.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          6303.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4780.698 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   442802.323 ±(99.9%) 6502.386 ops/s [Average]
[info]   (min, avg, max) = (440817.633, 442802.323, 445373.392), stdev = 1688.649
[info]   CI (99.9%): [436299.937, 449304.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1770.121 ±(99.9%) 27.367 MB/sec [Average]
[info]   (min, avg, max) = (1761.937, 1770.121, 1780.486), stdev = 7.107
[info]   CI (99.9%): [1742.754, 1797.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6291.141 ±(99.9%) 79.739 B/op [Average]
[info]   (min, avg, max) = (6255.188, 6291.141, 6303.676), stdev = 20.708
[info]   CI (99.9%): [6211.402, 6370.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.637 ±(99.9%) 1416.015 MB/sec [Average]
[info]   (min, avg, max) = (1343.028, 1612.637, 2017.814), stdev = 367.735
[info]   CI (99.9%): [196.621, 3028.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5734.004 ±(99.9%) 5090.776 B/op [Average]
[info]   (min, avg, max) = (4747.734, 5734.004, 7186.898), stdev = 1322.058
[info]   CI (99.9%): [643.228, 10824.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.595 ±(99.9%) 5.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.977), stdev = 1.331
[info]   CI (99.9%): [≈ 0, 5.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.118 ±(99.9%) 18.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.118, 10.589), stdev = 4.736
[info]   CI (99.9%): [≈ 0, 20.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.49% complete, ETA 00:35:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275287.204 ops/s
[info] # Warmup Iteration   2: 467009.767 ops/s
[info] # Warmup Iteration   3: 463376.621 ops/s
[info] # Warmup Iteration   4: 466257.758 ops/s
[info] # Warmup Iteration   5: 469798.094 ops/s
[info] Iteration   1: 477205.108 ops/s
[info]                  ·gc.alloc.rate:                   1361.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              4489.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4432.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 478912.191 ops/s
[info]                  ·gc.alloc.rate:                   1364.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4483.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4419.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 480217.127 ops/s
[info]                  ·gc.alloc.rate:                   1380.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              4522.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4410.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 486498.167 ops/s
[info]                  ·gc.alloc.rate:                   1397.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              4522.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4352.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 483892.330 ops/s
[info]                  ·gc.alloc.rate:               1391.795 MB/sec
[info]                  ·gc.alloc.rate.norm:          4525.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4369.960 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   481344.985 ±(99.9%) 14583.393 ops/s [Average]
[info]   (min, avg, max) = (477205.108, 481344.985, 486498.167), stdev = 3787.261
[info]   CI (99.9%): [466761.592, 495928.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1379.184 ±(99.9%) 62.541 MB/sec [Average]
[info]   (min, avg, max) = (1361.221, 1379.184, 1397.971), stdev = 16.242
[info]   CI (99.9%): [1316.643, 1441.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4508.575 ±(99.9%) 79.221 B/op [Average]
[info]   (min, avg, max) = (4483.325, 4508.575, 4525.422), stdev = 20.573
[info]   CI (99.9%): [4429.354, 4587.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1344.948 ±(99.9%) 3.914 MB/sec [Average]
[info]   (min, avg, max) = (1343.981, 1344.948, 1346.389), stdev = 1.016
[info]   CI (99.9%): [1341.034, 1348.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4396.969 ±(99.9%) 131.848 B/op [Average]
[info]   (min, avg, max) = (4352.123, 4396.969, 4432.190), stdev = 34.240
[info]   CI (99.9%): [4265.121, 4528.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 4.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.645), stdev = 1.153
[info]   CI (99.9%): [≈ 0, 5.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1.935 ±(99.9%) 14.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.935, 8.664), stdev = 3.779
[info]   CI (99.9%): [≈ 0, 16.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.69% complete, ETA 00:35:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8272.721 ops/s
[info] # Warmup Iteration   2: 51449.208 ops/s
[info] # Warmup Iteration   3: 62815.184 ops/s
[info] # Warmup Iteration   4: 62876.872 ops/s
[info] # Warmup Iteration   5: 63489.695 ops/s
[info] Iteration   1: 61791.546 ops/s
[info]                  ·gc.alloc.rate:                   1463.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              37278.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34010.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 63060.675 ops/s
[info]                  ·gc.alloc.rate:                   1489.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              37164.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33400.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60755.761 ops/s
[info]                  ·gc.alloc.rate:                   1444.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              37426.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34726.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 62110.916 ops/s
[info]                  ·gc.alloc.rate:                   1477.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              37431.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51043.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 63869.842 ops/s
[info]                  ·gc.alloc.rate:                   1529.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              37691.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33139.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   62317.748 ±(99.9%) 4604.865 ops/s [Average]
[info]   (min, avg, max) = (60755.761, 62317.748, 63869.842), stdev = 1195.869
[info]   CI (99.9%): [57712.883, 66922.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1481.088 ±(99.9%) 122.484 MB/sec [Average]
[info]   (min, avg, max) = (1444.931, 1481.088, 1529.707), stdev = 31.809
[info]   CI (99.9%): [1358.604, 1603.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   37398.516 ±(99.9%) 762.815 B/op [Average]
[info]   (min, avg, max) = (37164.100, 37398.516, 37691.508), stdev = 198.101
[info]   CI (99.9%): [36635.702, 38161.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.943 ±(99.9%) 1162.874 MB/sec [Average]
[info]   (min, avg, max) = (1335.486, 1474.943, 2015.132), stdev = 301.995
[info]   CI (99.9%): [312.069, 2637.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37264.266 ±(99.9%) 29754.938 B/op [Average]
[info]   (min, avg, max) = (33139.880, 37264.266, 51043.831), stdev = 7727.263
[info]   CI (99.9%): [7509.328, 67019.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.996 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.142, 0.604), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.586 ±(99.9%) 25.225 B/op [Average]
[info]   (min, avg, max) = (0.513, 3.586, 15.297), stdev = 6.551
[info]   CI (99.9%): [≈ 0, 28.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:34:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69420.280 ops/s
[info] # Warmup Iteration   2: 296555.280 ops/s
[info] # Warmup Iteration   3: 314953.114 ops/s
[info] # Warmup Iteration   4: 316315.242 ops/s
[info] # Warmup Iteration   5: 317894.284 ops/s
[info] Iteration   1: 318217.874 ops/s
[info]                  ·gc.alloc.rate:                   2391.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              11824.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13272.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.810 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 319738.243 ops/s
[info]                  ·gc.alloc.rate:                   2375.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              11693.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9885.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 320197.549 ops/s
[info]                  ·gc.alloc.rate:               2405.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          11822.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13165.604 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 321266.092 ops/s
[info]                  ·gc.alloc.rate:               2399.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          11753.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9855.191 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 319652.879 ops/s
[info]                  ·gc.alloc.rate:                   2415.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              11893.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13240.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   319814.527 ±(99.9%) 4233.518 ops/s [Average]
[info]   (min, avg, max) = (318217.874, 319814.527, 321266.092), stdev = 1099.431
[info]   CI (99.9%): [315581.009, 324048.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2397.612 ±(99.9%) 57.968 MB/sec [Average]
[info]   (min, avg, max) = (2375.743, 2397.612, 2415.719), stdev = 15.054
[info]   CI (99.9%): [2339.644, 2455.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11797.552 ±(99.9%) 293.987 B/op [Average]
[info]   (min, avg, max) = (11693.261, 11797.552, 11893.333), stdev = 76.348
[info]   CI (99.9%): [11503.564, 12091.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2414.600 ±(99.9%) 1421.715 MB/sec [Average]
[info]   (min, avg, max) = (2008.472, 2414.600, 2689.388), stdev = 369.215
[info]   CI (99.9%): [992.885, 3836.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11883.968 ±(99.9%) 7079.739 B/op [Average]
[info]   (min, avg, max) = (9855.191, 11883.968, 13272.780), stdev = 1838.586
[info]   CI (99.9%): [4804.229, 18963.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.602), stdev = 1.602
[info]   CI (99.9%): [≈ 0, 6.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.644 ±(99.9%) 30.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.644, 17.810), stdev = 7.920
[info]   CI (99.9%): [≈ 0, 34.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.10% complete, ETA 00:34:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145876.555 ops/s
[info] # Warmup Iteration   2: 489220.584 ops/s
[info] # Warmup Iteration   3: 502667.807 ops/s
[info] # Warmup Iteration   4: 501570.841 ops/s
[info] # Warmup Iteration   5: 504543.088 ops/s
[info] Iteration   1: 499622.722 ops/s
[info]                  ·gc.alloc.rate:               1326.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          4176.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4201.009 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 492979.407 ops/s
[info]                  ·gc.alloc.rate:               1299.330 MB/sec
[info]                  ·gc.alloc.rate.norm:          4147.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2132.942 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 506361.541 ops/s
[info]                  ·gc.alloc.rate:                   1348.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              4190.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4155.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 492883.622 ops/s
[info]                  ·gc.alloc.rate:                   1325.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              4232.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4273.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 491663.276 ops/s
[info]                  ·gc.alloc.rate:                   1310.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              4192.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4273.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   496702.113 ±(99.9%) 24021.338 ops/s [Average]
[info]   (min, avg, max) = (491663.276, 496702.113, 506361.541), stdev = 6238.265
[info]   CI (99.9%): [472680.775, 520723.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1321.991 ±(99.9%) 71.349 MB/sec [Average]
[info]   (min, avg, max) = (1299.330, 1321.991, 1348.172), stdev = 18.529
[info]   CI (99.9%): [1250.642, 1393.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4187.944 ±(99.9%) 117.554 B/op [Average]
[info]   (min, avg, max) = (4147.797, 4187.944, 4232.286), stdev = 30.529
[info]   CI (99.9%): [4070.389, 4305.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.644 ±(99.9%) 1150.529 MB/sec [Average]
[info]   (min, avg, max) = (668.161, 1202.644, 1338.316), stdev = 298.789
[info]   CI (99.9%): [52.115, 2353.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3807.119 ±(99.9%) 3608.979 B/op [Average]
[info]   (min, avg, max) = (2132.942, 3807.119, 4273.331), stdev = 937.240
[info]   CI (99.9%): [198.139, 7416.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.899 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.899, 4.413), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.870 ±(99.9%) 24.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.870, 14.091), stdev = 6.273
[info]   CI (99.9%): [≈ 0, 27.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.30% complete, ETA 00:34:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721406.961 ops/s
[info] # Warmup Iteration   2: 1302641.025 ops/s
[info] # Warmup Iteration   3: 1316156.158 ops/s
[info] # Warmup Iteration   4: 1343706.310 ops/s
[info] # Warmup Iteration   5: 1333513.862 ops/s
[info] Iteration   1: 1340913.394 ops/s
[info]                  ·gc.alloc.rate:                   2709.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              3179.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3156.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.220 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1321057.631 ops/s
[info]                  ·gc.alloc.rate:                   2689.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              3203.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3212.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1342042.261 ops/s
[info]                  ·gc.alloc.rate:                   2723.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              3193.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3169.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1337453.225 ops/s
[info]                  ·gc.alloc.rate:                   2719.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              3200.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3187.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1336024.576 ops/s
[info]                  ·gc.alloc.rate:                   2714.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              3197.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3196.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1335498.217 ±(99.9%) 32490.530 ops/s [Average]
[info]   (min, avg, max) = (1321057.631, 1335498.217, 1342042.261), stdev = 8437.688
[info]   CI (99.9%): [1303007.687, 1367988.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2711.203 ±(99.9%) 51.183 MB/sec [Average]
[info]   (min, avg, max) = (2689.314, 2711.203, 2723.039), stdev = 13.292
[info]   CI (99.9%): [2660.020, 2762.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3194.868 ±(99.9%) 35.810 B/op [Average]
[info]   (min, avg, max) = (3179.684, 3194.868, 3203.647), stdev = 9.300
[info]   CI (99.9%): [3159.058, 3230.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2702.375 ±(99.9%) 35.823 MB/sec [Average]
[info]   (min, avg, max) = (2689.980, 2702.375, 2713.298), stdev = 9.303
[info]   CI (99.9%): [2666.552, 2738.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3184.529 ±(99.9%) 83.728 B/op [Average]
[info]   (min, avg, max) = (3156.981, 3184.529, 3212.413), stdev = 21.744
[info]   CI (99.9%): [3100.801, 3268.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.187), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.069, 0.220), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.50% complete, ETA 00:34:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15902.724 ops/s
[info] # Warmup Iteration   2: 93075.902 ops/s
[info] # Warmup Iteration   3: 101346.484 ops/s
[info] # Warmup Iteration   4: 103424.151 ops/s
[info] # Warmup Iteration   5: 102992.540 ops/s
[info] Iteration   1: 104715.700 ops/s
[info]                  ·gc.alloc.rate:                   3515.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              52828.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50176.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 104597.817 ops/s
[info]                  ·gc.alloc.rate:                   3512.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              52839.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50398.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 102971.370 ops/s
[info]                  ·gc.alloc.rate:                   3460.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              52878.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51388.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 101587.986 ops/s
[info]                  ·gc.alloc.rate:               3389.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          52509.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41815.488 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 102204.816 ops/s
[info]                  ·gc.alloc.rate:               3436.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          52913.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52097.485 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   103215.538 ±(99.9%) 5408.505 ops/s [Average]
[info]   (min, avg, max) = (101587.986, 103215.538, 104715.700), stdev = 1404.572
[info]   CI (99.9%): [97807.033, 108624.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3462.746 ±(99.9%) 203.824 MB/sec [Average]
[info]   (min, avg, max) = (3389.769, 3462.746, 3515.254), stdev = 52.933
[info]   CI (99.9%): [3258.922, 3666.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52793.767 ±(99.9%) 626.487 B/op [Average]
[info]   (min, avg, max) = (52509.068, 52793.767, 52913.721), stdev = 162.697
[info]   CI (99.9%): [52167.280, 53420.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3226.845 ±(99.9%) 1137.098 MB/sec [Average]
[info]   (min, avg, max) = (2699.436, 3226.845, 3383.604), stdev = 295.301
[info]   CI (99.9%): [2089.747, 4363.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49175.354 ±(99.9%) 16120.371 B/op [Average]
[info]   (min, avg, max) = (41815.488, 49175.354, 52097.485), stdev = 4186.409
[info]   CI (99.9%): [33054.983, 65295.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.251 ±(99.9%) 1.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.251, 0.626), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74.70% complete, ETA 00:33:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230273.045 ops/s
[info] # Warmup Iteration   2: 581709.402 ops/s
[info] # Warmup Iteration   3: 577299.968 ops/s
[info] # Warmup Iteration   4: 595941.249 ops/s
[info] # Warmup Iteration   5: 598307.257 ops/s
[info] Iteration   1: 592723.070 ops/s
[info]                  ·gc.alloc.rate:               2662.122 MB/sec
[info]                  ·gc.alloc.rate.norm:          7068.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7133.230 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 592365.980 ops/s
[info]                  ·gc.alloc.rate:                   2685.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              7135.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7136.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 596833.516 ops/s
[info]                  ·gc.alloc.rate:               2680.190 MB/sec
[info]                  ·gc.alloc.rate.norm:          7067.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5317.937 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 600189.503 ops/s
[info]                  ·gc.alloc.rate:                   2721.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              7134.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7063.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 599591.433 ops/s
[info]                  ·gc.alloc.rate:                   2719.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              7137.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7086.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   596340.701 ±(99.9%) 14214.701 ops/s [Average]
[info]   (min, avg, max) = (592365.980, 596340.701, 600189.503), stdev = 3691.513
[info]   CI (99.9%): [582126.000, 610555.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2693.864 ±(99.9%) 99.925 MB/sec [Average]
[info]   (min, avg, max) = (2662.122, 2693.864, 2721.738), stdev = 25.950
[info]   CI (99.9%): [2593.938, 2793.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7108.612 ±(99.9%) 144.141 B/op [Average]
[info]   (min, avg, max) = (7067.001, 7108.612, 7137.705), stdev = 37.433
[info]   CI (99.9%): [6964.471, 7252.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2556.880 ±(99.9%) 1162.671 MB/sec [Average]
[info]   (min, avg, max) = (2016.850, 2556.880, 2700.089), stdev = 301.942
[info]   CI (99.9%): [1394.209, 3719.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6747.643 ±(99.9%) 3079.865 B/op [Average]
[info]   (min, avg, max) = (5317.937, 6747.643, 7136.668), stdev = 799.831
[info]   CI (99.9%): [3667.778, 9827.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.167), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.442), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.90% complete, ETA 00:33:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102073.721 ops/s
[info] # Warmup Iteration   2: 327295.036 ops/s
[info] # Warmup Iteration   3: 334400.220 ops/s
[info] # Warmup Iteration   4: 347815.226 ops/s
[info] # Warmup Iteration   5: 349496.554 ops/s
[info] Iteration   1: 340233.695 ops/s
[info]                  ·gc.alloc.rate:               1177.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          5445.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6199.851 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 347433.472 ops/s
[info]                  ·gc.alloc.rate:               1196.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          5420.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6074.110 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 348705.764 ops/s
[info]                  ·gc.alloc.rate:               1197.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          5406.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6056.432 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 349552.233 ops/s
[info]                  ·gc.alloc.rate:               1186.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          5340.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3021.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 348535.402 ops/s
[info]                  ·gc.alloc.rate:                   1208.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              5457.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6064.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   346892.113 ±(99.9%) 14624.030 ops/s [Average]
[info]   (min, avg, max) = (340233.695, 346892.113, 349552.233), stdev = 3797.814
[info]   CI (99.9%): [332268.083, 361516.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1193.398 ±(99.9%) 46.099 MB/sec [Average]
[info]   (min, avg, max) = (1177.382, 1193.398, 1208.746), stdev = 11.972
[info]   CI (99.9%): [1147.298, 1239.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5414.230 ±(99.9%) 176.544 B/op [Average]
[info]   (min, avg, max) = (5340.664, 5414.230, 5457.770), stdev = 45.848
[info]   CI (99.9%): [5237.687, 5590.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.508 ±(99.9%) 1154.459 MB/sec [Average]
[info]   (min, avg, max) = (671.196, 1207.508, 1343.063), stdev = 299.809
[info]   CI (99.9%): [53.049, 2361.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5483.262 ±(99.9%) 5303.585 B/op [Average]
[info]   (min, avg, max) = (3021.673, 5483.262, 6199.851), stdev = 1377.324
[info]   CI (99.9%): [179.677, 10786.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.393), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.064 ±(99.9%) 26.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.064, 15.322), stdev = 6.852
[info]   CI (99.9%): [≈ 0, 29.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.10% complete, ETA 00:33:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283854.556 ops/s
[info] # Warmup Iteration   2: 796143.534 ops/s
[info] # Warmup Iteration   3: 805232.145 ops/s
[info] # Warmup Iteration   4: 820888.165 ops/s
[info] # Warmup Iteration   5: 849277.418 ops/s
[info] Iteration   1: 849958.244 ops/s
[info]                  ·gc.alloc.rate:                   632.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              1170.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 848474.527 ops/s
[info]                  ·gc.alloc.rate:               627.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          1164.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1234.346 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 810503.328 ops/s
[info]                  ·gc.alloc.rate:      585.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 1136.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 808523.268 ops/s
[info]                  ·gc.alloc.rate:                   606.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              1179.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1295.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 811222.583 ops/s
[info]                  ·gc.alloc.rate:               603.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          1170.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1289.736 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   825736.390 ±(99.9%) 82647.894 ops/s [Average]
[info]   (min, avg, max) = (808523.268, 825736.390, 849958.244), stdev = 21463.396
[info]   CI (99.9%): [743088.496, 908384.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   610.895 ±(99.9%) 74.278 MB/sec [Average]
[info]   (min, avg, max) = (585.089, 610.895, 632.131), stdev = 19.290
[info]   CI (99.9%): [536.618, 685.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1164.134 ±(99.9%) 64.276 B/op [Average]
[info]   (min, avg, max) = (1136.001, 1164.134, 1179.895), stdev = 16.692
[info]   CI (99.9%): [1099.858, 1228.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   532.513 ±(99.9%) 1146.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.513, 666.549), stdev = 297.684
[info]   CI (99.9%): [≈ 0, 1678.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1010.705 ±(99.9%) 2178.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1010.705, 1295.332), stdev = 565.756
[info]   CI (99.9%): [≈ 0, 3189.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.852), stdev = 1.720
[info]   CI (99.9%): [≈ 0, 7.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.434 ±(99.9%) 12.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.434, 7.131), stdev = 3.185
[info]   CI (99.9%): [≈ 0, 13.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.30% complete, ETA 00:33:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1011053.960 ops/s
[info] # Warmup Iteration   2: 2020343.668 ops/s
[info] # Warmup Iteration   3: 2083215.653 ops/s
[info] # Warmup Iteration   4: 2107449.284 ops/s
[info] # Warmup Iteration   5: 2039415.907 ops/s
[info] Iteration   1: 2087720.910 ops/s
[info]                  ·gc.alloc.rate:               984.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          741.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 506.195 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2119629.644 ops/s
[info]                  ·gc.alloc.rate:               997.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          740.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 499.070 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2116164.497 ops/s
[info]                  ·gc.alloc.rate:                   1023.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2124743.767 ops/s
[info]                  ·gc.alloc.rate:               1008.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 498.083 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2119593.526 ops/s
[info]                  ·gc.alloc.rate:                   1008.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              748.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2113570.469 ±(99.9%) 56878.914 ops/s [Average]
[info]   (min, avg, max) = (2087720.910, 2113570.469, 2124743.767), stdev = 14771.273
[info]   CI (99.9%): [2056691.555, 2170449.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1004.215 ±(99.9%) 55.778 MB/sec [Average]
[info]   (min, avg, max) = (984.172, 1004.215, 1023.048), stdev = 14.485
[info]   CI (99.9%): [948.437, 1059.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   747.711 ±(99.9%) 31.030 B/op [Average]
[info]   (min, avg, max) = (740.389, 747.711, 760.783), stdev = 8.058
[info]   CI (99.9%): [716.681, 778.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.306 ±(99.9%) 1419.653 MB/sec [Average]
[info]   (min, avg, max) = (671.512, 941.306, 1345.650), stdev = 368.679
[info]   CI (99.9%): [≈ 0, 2360.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   700.494 ±(99.9%) 1051.331 B/op [Average]
[info]   (min, avg, max) = (498.083, 700.494, 999.976), stdev = 273.027
[info]   CI (99.9%): [≈ 0, 1751.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.015), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75.50% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1266516.071 ops/s
[info] # Warmup Iteration   2: 2244193.881 ops/s
[info] # Warmup Iteration   3: 2342055.492 ops/s
[info] # Warmup Iteration   4: 2340917.297 ops/s
[info] # Warmup Iteration   5: 2338192.013 ops/s
[info] Iteration   1: 2340229.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2339694.892 ops/s
[info]                  ·gc.alloc.rate:      0.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2340517.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2337738.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2330498.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2337735.646 ±(99.9%) 16128.742 ops/s [Average]
[info]   (min, avg, max) = (2330498.208, 2337735.646, 2340517.669), stdev = 4188.583
[info]   CI (99.9%): [2321606.904, 2353864.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.70% complete, ETA 00:32:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151803.779 ops/s
[info] # Warmup Iteration   2: 456323.279 ops/s
[info] # Warmup Iteration   3: 474038.632 ops/s
[info] # Warmup Iteration   4: 468262.073 ops/s
[info] # Warmup Iteration   5: 468634.343 ops/s
[info] Iteration   1: 473788.890 ops/s
[info]                  ·gc.alloc.rate:                   701.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2219.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 472063.372 ops/s
[info]                  ·gc.alloc.rate:               706.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          2356.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2229.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 470915.309 ops/s
[info]                  ·gc.alloc.rate:                   695.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              2323.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2235.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 456014.214 ops/s
[info]                  ·gc.alloc.rate:                   674.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              2329.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2309.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 453946.083 ops/s
[info]                  ·gc.alloc.rate:               672.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          2330.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2320.001 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   465345.574 ±(99.9%) 36756.156 ops/s [Average]
[info]   (min, avg, max) = (453946.083, 465345.574, 473788.890), stdev = 9545.457
[info]   CI (99.9%): [428589.417, 502101.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   690.070 ±(99.9%) 60.117 MB/sec [Average]
[info]   (min, avg, max) = (672.267, 690.070, 706.864), stdev = 15.612
[info]   CI (99.9%): [629.953, 750.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2333.605 ±(99.9%) 49.705 B/op [Average]
[info]   (min, avg, max) = (2323.290, 2333.605, 2356.159), stdev = 12.908
[info]   CI (99.9%): [2283.900, 2383.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.860 ±(99.9%) 1.785 MB/sec [Average]
[info]   (min, avg, max) = (668.101, 668.860, 669.243), stdev = 0.464
[info]   CI (99.9%): [667.075, 670.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2262.718 ±(99.9%) 184.729 B/op [Average]
[info]   (min, avg, max) = (2219.333, 2262.718, 2320.001), stdev = 47.974
[info]   CI (99.9%): [2077.989, 2447.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.278), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75.90% complete, ETA 00:32:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71789.340 ops/s
[info] # Warmup Iteration   2: 153920.954 ops/s
[info] # Warmup Iteration   3: 160269.089 ops/s
[info] # Warmup Iteration   4: 159035.158 ops/s
[info] # Warmup Iteration   5: 160663.375 ops/s
[info] Iteration   1: 159041.850 ops/s
[info]                  ·gc.alloc.rate:                   963.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              9534.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13289.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 159814.236 ops/s
[info]                  ·gc.alloc.rate:               954.137 MB/sec
[info]                  ·gc.alloc.rate.norm:          9392.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6618.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 159826.726 ops/s
[info]                  ·gc.alloc.rate:                   941.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              9269.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6618.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 159617.838 ops/s
[info]                  ·gc.alloc.rate:                   953.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              9403.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13254.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 159970.932 ops/s
[info]                  ·gc.alloc.rate:               940.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          9247.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6616.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   159654.316 ±(99.9%) 1404.285 ops/s [Average]
[info]   (min, avg, max) = (159041.850, 159654.316, 159970.932), stdev = 364.688
[info]   CI (99.9%): [158250.031, 161058.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   950.607 ±(99.9%) 38.182 MB/sec [Average]
[info]   (min, avg, max) = (940.048, 950.607, 963.753), stdev = 9.916
[info]   CI (99.9%): [912.425, 988.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9369.512 ±(99.9%) 446.361 B/op [Average]
[info]   (min, avg, max) = (9247.819, 9369.512, 9534.224), stdev = 115.918
[info]   CI (99.9%): [8923.151, 9815.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   940.928 ±(99.9%) 1416.263 MB/sec [Average]
[info]   (min, avg, max) = (672.123, 940.928, 1344.341), stdev = 367.799
[info]   CI (99.9%): [≈ 0, 2357.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9279.279 ±(99.9%) 14033.816 B/op [Average]
[info]   (min, avg, max) = (6616.107, 9279.279, 13289.218), stdev = 3644.538
[info]   CI (99.9%): [≈ 0, 23313.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.246 ±(99.9%) 1.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 0.616), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.10% complete, ETA 00:31:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10691.885 ops/s
[info] # Warmup Iteration   2: 53199.708 ops/s
[info] # Warmup Iteration   3: 56866.497 ops/s
[info] # Warmup Iteration   4: 59533.722 ops/s
[info] # Warmup Iteration   5: 59049.691 ops/s
[info] Iteration   1: 59713.094 ops/s
[info]                  ·gc.alloc.rate:                   2090.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              55102.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53108.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 60225.000 ops/s
[info]                  ·gc.alloc.rate:                   2094.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              54724.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52587.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 60409.828 ops/s
[info]                  ·gc.alloc.rate:                   2112.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              55042.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52303.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60001.544 ops/s
[info]                  ·gc.alloc.rate:               2127.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          55792.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70228.297 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 58883.781 ops/s
[info]                  ·gc.alloc.rate:               2076.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          55487.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53757.835 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59846.649 ±(99.9%) 2301.757 ops/s [Average]
[info]   (min, avg, max) = (58883.781, 59846.649, 60409.828), stdev = 597.759
[info]   CI (99.9%): [57544.893, 62148.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2100.424 ±(99.9%) 76.546 MB/sec [Average]
[info]   (min, avg, max) = (2076.262, 2100.424, 2127.195), stdev = 19.879
[info]   CI (99.9%): [2023.877, 2176.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55230.023 ±(99.9%) 1598.536 B/op [Average]
[info]   (min, avg, max) = (54724.637, 55230.023, 55792.413), stdev = 415.135
[info]   CI (99.9%): [53631.486, 56828.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2145.030 ±(99.9%) 1146.424 MB/sec [Average]
[info]   (min, avg, max) = (2007.813, 2145.030, 2677.591), stdev = 297.723
[info]   CI (99.9%): [998.606, 3291.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   56397.085 ±(99.9%) 29848.969 B/op [Average]
[info]   (min, avg, max) = (52303.854, 56397.085, 70228.297), stdev = 7751.682
[info]   CI (99.9%): [26548.116, 86246.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 4.815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 2.894), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 5.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19.604 ±(99.9%) 126.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.604, 76.261), stdev = 32.957
[info]   CI (99.9%): [≈ 0, 146.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.793
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.31% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18966.011 ops/s
[info] # Warmup Iteration   2: 72574.125 ops/s
[info] # Warmup Iteration   3: 91652.061 ops/s
[info] # Warmup Iteration   4: 94185.673 ops/s
[info] # Warmup Iteration   5: 94594.938 ops/s
[info] Iteration   1: 93834.653 ops/s
[info]                  ·gc.alloc.rate:                   1726.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              28961.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33657.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 93471.407 ops/s
[info]                  ·gc.alloc.rate:                   1713.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              28847.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22539.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 94937.852 ops/s
[info]                  ·gc.alloc.rate:                   1768.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              29312.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33228.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 94897.310 ops/s
[info]                  ·gc.alloc.rate:                   1752.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              29062.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22094.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 94619.913 ops/s
[info]                  ·gc.alloc.rate:                   1761.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              29298.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33244.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   94352.227 ±(99.9%) 2550.927 ops/s [Average]
[info]   (min, avg, max) = (93471.407, 94352.227, 94937.852), stdev = 662.468
[info]   CI (99.9%): [91801.300, 96903.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1744.476 ±(99.9%) 90.181 MB/sec [Average]
[info]   (min, avg, max) = (1713.416, 1744.476, 1768.258), stdev = 23.420
[info]   CI (99.9%): [1654.295, 1834.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29096.481 ±(99.9%) 789.799 B/op [Average]
[info]   (min, avg, max) = (28847.977, 29096.481, 29312.079), stdev = 205.108
[info]   CI (99.9%): [28306.682, 29886.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1736.217 ±(99.9%) 1408.736 MB/sec [Average]
[info]   (min, avg, max) = (1332.248, 1736.217, 2006.835), stdev = 365.844
[info]   CI (99.9%): [327.481, 3144.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28953.008 ±(99.9%) 23343.883 B/op [Average]
[info]   (min, avg, max) = (22094.821, 28953.008, 33657.981), stdev = 6062.332
[info]   CI (99.9%): [5609.125, 52296.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.937 ±(99.9%) 6.011 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.937, 3.664), stdev = 1.561
[info]   CI (99.9%): [≈ 0, 6.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.722 ±(99.9%) 101.243 B/op [Average]
[info]   (min, avg, max) = (0.346, 15.722, 61.690), stdev = 26.292
[info]   CI (99.9%): [≈ 0, 116.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.51% complete, ETA 00:31:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58711.850 ops/s
[info] # Warmup Iteration   2: 151124.924 ops/s
[info] # Warmup Iteration   3: 156130.117 ops/s
[info] # Warmup Iteration   4: 160554.903 ops/s
[info] # Warmup Iteration   5: 160498.750 ops/s
[info] Iteration   1: 154321.886 ops/s
[info]                  ·gc.alloc.rate:                   2430.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              24789.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20536.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 154292.520 ops/s
[info]                  ·gc.alloc.rate:                   2455.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              25048.230 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27373.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 155400.817 ops/s
[info]                  ·gc.alloc.rate:               2461.493 MB/sec
[info]                  ·gc.alloc.rate.norm:          24926.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20398.067 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 155348.254 ops/s
[info]                  ·gc.alloc.rate:                   2488.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              25211.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27263.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 158261.000 ops/s
[info]                  ·gc.alloc.rate:               2531.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          25176.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26821.002 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   155524.895 ±(99.9%) 6238.414 ops/s [Average]
[info]   (min, avg, max) = (154292.520, 155524.895, 158261.000), stdev = 1620.096
[info]   CI (99.9%): [149286.482, 161763.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2473.816 ±(99.9%) 147.882 MB/sec [Average]
[info]   (min, avg, max) = (2430.989, 2473.816, 2531.874), stdev = 38.404
[info]   CI (99.9%): [2325.934, 2621.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25030.489 ±(99.9%) 676.836 B/op [Average]
[info]   (min, avg, max) = (24789.074, 25030.489, 25211.608), stdev = 175.772
[info]   CI (99.9%): [24353.652, 25707.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2420.144 ±(99.9%) 1427.365 MB/sec [Average]
[info]   (min, avg, max) = (2013.936, 2420.144, 2697.219), stdev = 370.682
[info]   CI (99.9%): [992.779, 3847.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24478.493 ±(99.9%) 14123.974 B/op [Average]
[info]   (min, avg, max) = (20398.067, 24478.493, 27373.448), stdev = 3667.951
[info]   CI (99.9%): [10354.519, 38602.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.382 ±(99.9%) 2.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.486), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 2.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:31:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2086.304 ops/s
[info] # Warmup Iteration   2: 21425.512 ops/s
[info] # Warmup Iteration   3: 32970.889 ops/s
[info] # Warmup Iteration   4: 32960.955 ops/s
[info] # Warmup Iteration   5: 33124.162 ops/s
[info] Iteration   1: 33185.698 ops/s
[info]                  ·gc.alloc.rate:                   2217.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              105177.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95228.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.869 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 32501.210 ops/s
[info]                  ·gc.alloc.rate:                   2187.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              105902.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97464.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33226.890 ops/s
[info]                  ·gc.alloc.rate:               2206.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          104492.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95424.044 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 33187.121 ops/s
[info]                  ·gc.alloc.rate:               2219.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          105231.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95709.883 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 32982.741 ops/s
[info]                  ·gc.alloc.rate:               2219.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          105903.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96469.373 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33016.732 ±(99.9%) 1169.016 ops/s [Average]
[info]   (min, avg, max) = (32501.210, 33016.732, 33226.890), stdev = 303.590
[info]   CI (99.9%): [31847.716, 34185.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2210.028 ±(99.9%) 53.764 MB/sec [Average]
[info]   (min, avg, max) = (2187.080, 2210.028, 2219.606), stdev = 13.962
[info]   CI (99.9%): [2156.264, 2263.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105341.249 ±(99.9%) 2269.603 B/op [Average]
[info]   (min, avg, max) = (104492.540, 105341.249, 105903.090), stdev = 589.409
[info]   CI (99.9%): [103071.646, 107610.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.221 ±(99.9%) 20.267 MB/sec [Average]
[info]   (min, avg, max) = (2008.145, 2015.221, 2021.886), stdev = 5.263
[info]   CI (99.9%): [1994.953, 2035.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   96059.299 ±(99.9%) 3527.834 B/op [Average]
[info]   (min, avg, max) = (95228.884, 96059.299, 97464.312), stdev = 916.167
[info]   CI (99.9%): [92531.465, 99587.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.235 ±(99.9%) 1.769 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.235, 1.052), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 2.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.183 ±(99.9%) 83.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.183, 49.869), stdev = 21.784
[info]   CI (99.9%): [≈ 0, 95.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:30:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51575.389 ops/s
[info] # Warmup Iteration   2: 146994.644 ops/s
[info] # Warmup Iteration   3: 154811.839 ops/s
[info] # Warmup Iteration   4: 156571.294 ops/s
[info] # Warmup Iteration   5: 157064.115 ops/s
[info] Iteration   1: 160315.019 ops/s
[info]                  ·gc.alloc.rate:               1063.637 MB/sec
[info]                  ·gc.alloc.rate.norm:          10441.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6545.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 160966.589 ops/s
[info]                  ·gc.alloc.rate:                   1084.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              10602.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13051.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 160486.033 ops/s
[info]                  ·gc.alloc.rate:               1086.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          10652.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13103.689 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 162208.037 ops/s
[info]                  ·gc.alloc.rate:                   1083.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              10510.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6488.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 160869.447 ops/s
[info]                  ·gc.alloc.rate:                   1090.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10660.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13091.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   160969.025 ±(99.9%) 2859.655 ops/s [Average]
[info]   (min, avg, max) = (160315.019, 160969.025, 162208.037), stdev = 742.643
[info]   CI (99.9%): [158109.371, 163828.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1081.553 ±(99.9%) 39.813 MB/sec [Average]
[info]   (min, avg, max) = (1063.637, 1081.553, 1090.075), stdev = 10.339
[info]   CI (99.9%): [1041.740, 1121.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10573.347 ±(99.9%) 365.201 B/op [Average]
[info]   (min, avg, max) = (10441.483, 10573.347, 10660.330), stdev = 94.841
[info]   CI (99.9%): [10208.147, 10938.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.121 ±(99.9%) 1410.656 MB/sec [Average]
[info]   (min, avg, max) = (666.818, 1069.121, 1338.698), stdev = 366.343
[info]   CI (99.9%): [≈ 0, 2479.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10456.403 ±(99.9%) 13846.346 B/op [Average]
[info]   (min, avg, max) = (6488.929, 10456.403, 13103.689), stdev = 3595.852
[info]   CI (99.9%): [≈ 0, 24302.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.832), stdev = 1.707
[info]   CI (99.9%): [≈ 0, 7.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.616 ±(99.9%) 64.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.616, 37.470), stdev = 16.690
[info]   CI (99.9%): [≈ 0, 71.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.11% complete, ETA 00:30:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233948.101 ops/s
[info] # Warmup Iteration   2: 400793.952 ops/s
[info] # Warmup Iteration   3: 441405.301 ops/s
[info] # Warmup Iteration   4: 439220.703 ops/s
[info] # Warmup Iteration   5: 422134.008 ops/s
[info] Iteration   1: 429841.535 ops/s
[info]                  ·gc.alloc.rate:               498.289 MB/sec
[info]                  ·gc.alloc.rate.norm:          1823.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1873.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 437514.199 ops/s
[info]                  ·gc.alloc.rate:               506.441 MB/sec
[info]                  ·gc.alloc.rate.norm:          1821.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2411.861 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 446304.982 ops/s
[info]                  ·gc.alloc.rate:      505.357 MB/sec
[info]                  ·gc.alloc.rate.norm: 1782.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 436921.835 ops/s
[info]                  ·gc.alloc.rate:                   493.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1776.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2414.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 433818.840 ops/s
[info]                  ·gc.alloc.rate:               503.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          1825.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2434.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   436880.278 ±(99.9%) 23434.018 ops/s [Average]
[info]   (min, avg, max) = (429841.535, 436880.278, 446304.982), stdev = 6085.740
[info]   CI (99.9%): [413446.260, 460314.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   501.297 ±(99.9%) 21.037 MB/sec [Average]
[info]   (min, avg, max) = (493.290, 501.297, 506.441), stdev = 5.463
[info]   CI (99.9%): [480.260, 522.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1805.832 ±(99.9%) 93.386 B/op [Average]
[info]   (min, avg, max) = (1776.731, 1805.832, 1825.003), stdev = 24.252
[info]   CI (99.9%): [1712.446, 1899.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.809 ±(99.9%) 1118.481 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.809, 671.210), stdev = 290.466
[info]   CI (99.9%): [≈ 0, 1623.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1826.974 ±(99.9%) 4037.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1826.974, 2434.778), stdev = 1048.480
[info]   CI (99.9%): [≈ 0, 5864.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.31% complete, ETA 00:30:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149158.641 ops/s
[info] # Warmup Iteration   2: 477548.356 ops/s
[info] # Warmup Iteration   3: 483153.258 ops/s
[info] # Warmup Iteration   4: 482214.552 ops/s
[info] # Warmup Iteration   5: 482628.484 ops/s
[info] Iteration   1: 481554.322 ops/s
[info]                  ·gc.alloc.rate:      4.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 483093.681 ops/s
[info]                  ·gc.alloc.rate:      4.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 482580.810 ops/s
[info]                  ·gc.alloc.rate:      4.907 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 482176.185 ops/s
[info]                  ·gc.alloc.rate:      4.903 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 482074.369 ops/s
[info]                  ·gc.alloc.rate:      4.901 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   482295.873 ±(99.9%) 2221.202 ops/s [Average]
[info]   (min, avg, max) = (481554.322, 482295.873, 483093.681), stdev = 576.839
[info]   CI (99.9%): [480074.672, 484517.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.904 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (4.896, 4.904, 4.912), stdev = 0.006
[info]   CI (99.9%): [4.881, 4.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.51% complete, ETA 00:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13740.802 ops/s
[info] # Warmup Iteration   2: 54159.042 ops/s
[info] # Warmup Iteration   3: 61505.535 ops/s
[info] # Warmup Iteration   4: 64674.591 ops/s
[info] # Warmup Iteration   5: 63843.237 ops/s
[info] Iteration   1: 63250.452 ops/s
[info]                  ·gc.alloc.rate:                   1323.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              32921.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33214.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 63983.515 ops/s
[info]                  ·gc.alloc.rate:                   1332.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              32779.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32868.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 63120.427 ops/s
[info]                  ·gc.alloc.rate:                        1325.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                   33050.832 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.015 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.384 B/op
[info]                  ·gc.churn.Metaspace:                   0.045 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1351.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          33694.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      116.786 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              39.000 ms
[info] Iteration   4: 65448.720 ops/s
[info]                  ·gc.alloc.rate:                   1373.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              33007.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32122.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 65279.122 ops/s
[info]                  ·gc.alloc.rate:               1380.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          33279.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32136.630 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   64216.447 ±(99.9%) 4234.150 ops/s [Average]
[info]   (min, avg, max) = (63120.427, 64216.447, 65448.720), stdev = 1099.595
[info]   CI (99.9%): [59982.297, 68450.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1347.041 ±(99.9%) 105.958 MB/sec [Average]
[info]   (min, avg, max) = (1323.170, 1347.041, 1380.469), stdev = 27.517
[info]   CI (99.9%): [1241.083, 1452.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33007.448 ±(99.9%) 707.952 B/op [Average]
[info]   (min, avg, max) = (32779.206, 33007.448, 33279.058), stdev = 183.853
[info]   CI (99.9%): [32299.496, 33715.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.077 ±(99.9%) 0.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.077, 0.384), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.009 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.226 ±(99.9%) 1.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.226, 1.128), stdev = 0.504
[info]   CI (99.9%): [≈ 0, 2.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1338.457 ±(99.9%) 28.603 MB/sec [Average]
[info]   (min, avg, max) = (1333.079, 1338.457, 1351.527), stdev = 7.428
[info]   CI (99.9%): [1309.854, 1367.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32807.461 ±(99.9%) 2637.160 B/op [Average]
[info]   (min, avg, max) = (32122.310, 32807.461, 33694.505), stdev = 684.862
[info]   CI (99.9%): [30170.301, 35444.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.962 ±(99.9%) 8.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.962, 4.684), stdev = 2.081
[info]   CI (99.9%): [≈ 0, 8.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23.972 ±(99.9%) 199.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.972, 116.786), stdev = 51.888
[info]   CI (99.9%): [≈ 0, 223.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.000, 39.000), stdev = 15.264
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.71% complete, ETA 00:29:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216499.267 ops/s
[info] # Warmup Iteration   2: 2437119.478 ops/s
[info] # Warmup Iteration   3: 2878621.043 ops/s
[info] # Warmup Iteration   4: 2893144.627 ops/s
[info] # Warmup Iteration   5: 2910927.812 ops/s
[info] Iteration   1: 2912463.168 ops/s
[info]                  ·gc.alloc.rate:               3758.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          2030.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4017.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2170.715 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 2921742.861 ops/s
[info]                  ·gc.alloc.rate:                   3755.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              2022.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3358.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1808.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2910697.294 ops/s
[info]                  ·gc.alloc.rate:                   3771.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              2038.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4045.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2187.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2859707.151 ops/s
[info]                  ·gc.alloc.rate:               3679.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          2025.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3382.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1861.304 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 2903032.707 ops/s
[info]                  ·gc.alloc.rate:                   3735.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              2025.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1837.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2901528.636 ±(99.9%) 93601.978 ops/s [Average]
[info]   (min, avg, max) = (2859707.151, 2901528.636, 2921742.861), stdev = 24308.137
[info]   CI (99.9%): [2807926.658, 2995130.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3740.119 ±(99.9%) 138.758 MB/sec [Average]
[info]   (min, avg, max) = (3679.717, 3740.119, 3771.166), stdev = 36.035
[info]   CI (99.9%): [3601.361, 3878.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2028.545 ±(99.9%) 24.959 B/op [Average]
[info]   (min, avg, max) = (2022.768, 2028.545, 2038.948), stdev = 6.482
[info]   CI (99.9%): [2003.586, 2053.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3638.780 ±(99.9%) 1382.173 MB/sec [Average]
[info]   (min, avg, max) = (3358.556, 3638.780, 4045.660), stdev = 358.946
[info]   CI (99.9%): [2256.607, 5020.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1973.222 ±(99.9%) 727.329 B/op [Average]
[info]   (min, avg, max) = (1808.983, 1973.222, 2187.358), stdev = 188.885
[info]   CI (99.9%): [1245.893, 2700.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.304
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.91% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.679 ops/s
[info] # Warmup Iteration   2: 728806.017 ops/s
[info] # Warmup Iteration   3: 787248.352 ops/s
[info] # Warmup Iteration   4: 805860.728 ops/s
[info] # Warmup Iteration   5: 803373.879 ops/s
[info] Iteration   1: 808821.108 ops/s
[info]                  ·gc.alloc.rate:      468.826 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 806690.548 ops/s
[info]                  ·gc.alloc.rate:               482.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1299.679 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 793342.878 ops/s
[info]                  ·gc.alloc.rate:                   472.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              937.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1321.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 798670.040 ops/s
[info]                  ·gc.alloc.rate:      475.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 937.310 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779275.233 ops/s
[info]                  ·gc.alloc.rate:                   451.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1346.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   797359.961 ±(99.9%) 45696.632 ops/s [Average]
[info]   (min, avg, max) = (779275.233, 797359.961, 808821.108), stdev = 11867.270
[info]   CI (99.9%): [751663.330, 843056.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   470.298 ±(99.9%) 44.899 MB/sec [Average]
[info]   (min, avg, max) = (451.612, 470.298, 482.892), stdev = 11.660
[info]   CI (99.9%): [425.399, 515.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   928.040 ±(99.9%) 56.825 B/op [Average]
[info]   (min, avg, max) = (912.001, 928.040, 941.744), stdev = 14.757
[info]   CI (99.9%): [871.214, 984.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.905 ±(99.9%) 1405.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.905, 666.857), stdev = 365.062
[info]   CI (99.9%): [≈ 0, 1805.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   793.578 ±(99.9%) 2790.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 793.578, 1346.672), stdev = 724.625
[info]   CI (99.9%): [≈ 0, 3583.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.106), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.11% complete, ETA 00:29:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19470.838 ops/s
[info] # Warmup Iteration   2: 233035.600 ops/s
[info] # Warmup Iteration   3: 354761.253 ops/s
[info] # Warmup Iteration   4: 365895.008 ops/s
[info] # Warmup Iteration   5: 369406.765 ops/s
[info] Iteration   1: 368427.362 ops/s
[info]                  ·gc.alloc.rate:               859.057 MB/sec
[info]                  ·gc.alloc.rate.norm:          3669.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2847.133 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 364416.443 ops/s
[info]                  ·gc.alloc.rate:                   864.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              3734.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5762.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 365960.455 ops/s
[info]                  ·gc.alloc.rate:               863.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          3711.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2870.621 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 362422.264 ops/s
[info]                  ·gc.alloc.rate:                   838.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              3639.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2898.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 353559.934 ops/s
[info]                  ·gc.alloc.rate:               829.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          3692.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2974.040 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   362957.291 ±(99.9%) 21923.861 ops/s [Average]
[info]   (min, avg, max) = (353559.934, 362957.291, 368427.362), stdev = 5693.557
[info]   CI (99.9%): [341033.431, 384881.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   850.960 ±(99.9%) 61.946 MB/sec [Average]
[info]   (min, avg, max) = (829.506, 850.960, 864.753), stdev = 16.087
[info]   CI (99.9%): [789.014, 912.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3689.332 ±(99.9%) 142.151 B/op [Average]
[info]   (min, avg, max) = (3639.109, 3689.332, 3734.168), stdev = 36.916
[info]   CI (99.9%): [3547.181, 3831.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.901 ±(99.9%) 1148.636 MB/sec [Average]
[info]   (min, avg, max) = (666.588, 800.901, 1334.510), stdev = 298.297
[info]   CI (99.9%): [≈ 0, 1949.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3470.610 ±(99.9%) 4937.259 B/op [Average]
[info]   (min, avg, max) = (2847.133, 3470.610, 5762.671), stdev = 1282.190
[info]   CI (99.9%): [≈ 0, 8407.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78.31% complete, ETA 00:29:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354509.080 ops/s
[info] # Warmup Iteration   2: 678161.488 ops/s
[info] # Warmup Iteration   3: 739438.426 ops/s
[info] # Warmup Iteration   4: 741364.695 ops/s
[info] # Warmup Iteration   5: 750625.920 ops/s
[info] Iteration   1: 740501.816 ops/s
[info]                  ·gc.alloc.rate:               677.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          1438.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1426.365 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 749467.762 ops/s
[info]                  ·gc.alloc.rate:               683.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          1435.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1409.339 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 737677.512 ops/s
[info]                  ·gc.alloc.rate:                   660.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1433.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 738208.039 ops/s
[info]                  ·gc.alloc.rate:               667.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          1421.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1432.908 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 737882.361 ops/s
[info]                  ·gc.alloc.rate:               678.917 MB/sec
[info]                  ·gc.alloc.rate.norm:          1447.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1434.268 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   740747.498 ±(99.9%) 19271.120 ops/s [Average]
[info]   (min, avg, max) = (737677.512, 740747.498, 749467.762), stdev = 5004.649
[info]   CI (99.9%): [721476.377, 760018.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   673.302 ±(99.9%) 36.679 MB/sec [Average]
[info]   (min, avg, max) = (660.016, 673.302, 683.407), stdev = 9.525
[info]   CI (99.9%): [636.623, 709.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1430.359 ±(99.9%) 60.244 B/op [Average]
[info]   (min, avg, max) = (1408.001, 1430.359, 1447.975), stdev = 15.645
[info]   CI (99.9%): [1370.115, 1490.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.857 ±(99.9%) 2.495 MB/sec [Average]
[info]   (min, avg, max) = (671.155, 671.857, 672.490), stdev = 0.648
[info]   CI (99.9%): [669.361, 674.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1427.365 ±(99.9%) 40.733 B/op [Average]
[info]   (min, avg, max) = (1409.339, 1427.365, 1434.268), stdev = 10.578
[info]   CI (99.9%): [1386.632, 1468.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.51% complete, ETA 00:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 985716.137 ops/s
[info] # Warmup Iteration   2: 2341406.994 ops/s
[info] # Warmup Iteration   3: 3254904.175 ops/s
[info] # Warmup Iteration   4: 3294687.635 ops/s
[info] # Warmup Iteration   5: 3306116.987 ops/s
[info] Iteration   1: 3297168.560 ops/s
[info]                  ·gc.alloc.rate:               1981.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          945.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 964.710 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 3296513.319 ops/s
[info]                  ·gc.alloc.rate:                   1990.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3289936.722 ops/s
[info]                  ·gc.alloc.rate:                   2002.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              957.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3298273.446 ops/s
[info]                  ·gc.alloc.rate:               2008.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          958.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 962.460 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3223427.878 ops/s
[info]                  ·gc.alloc.rate:               1964.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          959.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 985.843 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3281063.985 ±(99.9%) 124698.619 ops/s [Average]
[info]   (min, avg, max) = (3223427.878, 3281063.985, 3298273.446), stdev = 32383.835
[info]   CI (99.9%): [3156365.366, 3405762.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1989.428 ±(99.9%) 66.621 MB/sec [Average]
[info]   (min, avg, max) = (1964.518, 1989.428, 2008.209), stdev = 17.301
[info]   CI (99.9%): [1922.806, 2056.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   954.228 ±(99.9%) 22.590 B/op [Average]
[info]   (min, avg, max) = (945.912, 954.228, 959.088), stdev = 5.867
[info]   CI (99.9%): [931.638, 976.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2019.456 ±(99.9%) 6.740 MB/sec [Average]
[info]   (min, avg, max) = (2017.163, 2019.456, 2021.193), stdev = 1.750
[info]   CI (99.9%): [2012.716, 2026.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   968.684 ±(99.9%) 37.205 B/op [Average]
[info]   (min, avg, max) = (962.460, 968.684, 985.843), stdev = 9.662
[info]   CI (99.9%): [931.479, 1005.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.525 ±(99.9%) 4.472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.525, 2.602), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 4.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.250 ±(99.9%) 2.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.242), stdev = 0.554
[info]   CI (99.9%): [≈ 0, 2.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.71% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1771241.290 ops/s
[info] # Warmup Iteration   2: 4285102.815 ops/s
[info] # Warmup Iteration   3: 7886865.325 ops/s
[info] # Warmup Iteration   4: 7882109.646 ops/s
[info] # Warmup Iteration   5: 7786488.809 ops/s
[info] Iteration   1: 7895363.492 ops/s
[info]                  ·gc.alloc.rate:               866.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133.914 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 7879605.809 ops/s
[info]                  ·gc.alloc.rate:               862.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          172.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 7868736.401 ops/s
[info]                  ·gc.alloc.rate:                   873.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              174.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7912219.591 ops/s
[info]                  ·gc.alloc.rate:               871.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          173.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133.833 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8011018.018 ops/s
[info]                  ·gc.alloc.rate:               870.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          170.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132.248 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7913388.662 ±(99.9%) 219460.273 ops/s [Average]
[info]   (min, avg, max) = (7868736.401, 7913388.662, 8011018.018), stdev = 56993.136
[info]   CI (99.9%): [7693928.389, 8132848.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   868.696 ±(99.9%) 16.007 MB/sec [Average]
[info]   (min, avg, max) = (862.453, 868.696, 873.080), stdev = 4.157
[info]   CI (99.9%): [852.689, 884.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   172.745 ±(99.9%) 5.181 B/op [Average]
[info]   (min, avg, max) = (170.924, 172.745, 174.603), stdev = 1.346
[info]   CI (99.9%): [167.564, 177.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   807.253 ±(99.9%) 1158.621 MB/sec [Average]
[info]   (min, avg, max) = (671.967, 807.253, 1345.501), stdev = 300.890
[info]   CI (99.9%): [≈ 0, 1965.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   160.679 ±(99.9%) 233.362 B/op [Average]
[info]   (min, avg, max) = (132.248, 160.679, 269.080), stdev = 60.603
[info]   CI (99.9%): [≈ 0, 394.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.92% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3851.661 ops/s
[info] # Warmup Iteration   2: 78358.959 ops/s
[info] # Warmup Iteration   3: 207853.676 ops/s
[info] # Warmup Iteration   4: 242215.975 ops/s
[info] # Warmup Iteration   5: 240428.860 ops/s
[info] Iteration   1: 235890.829 ops/s
[info]                  ·gc.alloc.rate:                   2093.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              13969.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13397.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 238896.422 ops/s
[info]                  ·gc.alloc.rate:                   2123.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              13985.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13257.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 234894.038 ops/s
[info]                  ·gc.alloc.rate:                   2085.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              13975.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13500.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 235964.044 ops/s
[info]                  ·gc.alloc.rate:               2094.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          13967.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13453.649 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 237871.509 ops/s
[info]                  ·gc.alloc.rate:               2124.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          14058.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17822.822 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   236703.368 ±(99.9%) 6284.499 ops/s [Average]
[info]   (min, avg, max) = (234894.038, 236703.368, 238896.422), stdev = 1632.064
[info]   CI (99.9%): [230418.870, 242987.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2104.416 ±(99.9%) 70.265 MB/sec [Average]
[info]   (min, avg, max) = (2085.964, 2104.416, 2124.992), stdev = 18.248
[info]   CI (99.9%): [2034.150, 2174.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13991.157 ±(99.9%) 147.517 B/op [Average]
[info]   (min, avg, max) = (13967.058, 13991.157, 14058.431), stdev = 38.310
[info]   CI (99.9%): [13843.640, 14138.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.388 ±(99.9%) 1172.385 MB/sec [Average]
[info]   (min, avg, max) = (2008.056, 2149.388, 2693.996), stdev = 304.465
[info]   CI (99.9%): [977.003, 3321.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   14286.335 ±(99.9%) 7620.690 B/op [Average]
[info]   (min, avg, max) = (13257.227, 14286.335, 17822.822), stdev = 1979.069
[info]   CI (99.9%): [6665.645, 21907.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.287 ±(99.9%) 1.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.287, 0.978), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.902 ±(99.9%) 10.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.902, 6.445), stdev = 2.768
[info]   CI (99.9%): [≈ 0, 12.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79.12% complete, ETA 00:27:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80770.936 ops/s
[info] # Warmup Iteration   2: 246688.091 ops/s
[info] # Warmup Iteration   3: 302621.667 ops/s
[info] # Warmup Iteration   4: 306507.836 ops/s
[info] # Warmup Iteration   5: 306499.225 ops/s
[info] Iteration   1: 305233.502 ops/s
[info]                  ·gc.alloc.rate:               609.153 MB/sec
[info]                  ·gc.alloc.rate.norm:          3140.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3457.014 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 307421.324 ops/s
[info]                  ·gc.alloc.rate:               623.350 MB/sec
[info]                  ·gc.alloc.rate.norm:          3190.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3432.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 308368.471 ops/s
[info]                  ·gc.alloc.rate:               601.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          3069.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3423.708 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 318680.807 ops/s
[info]                  ·gc.alloc.rate:      620.665 MB/sec
[info]                  ·gc.alloc.rate.norm: 3064.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 305967.595 ops/s
[info]                  ·gc.alloc.rate:                   596.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              3065.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3450.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   309134.340 ±(99.9%) 21082.128 ops/s [Average]
[info]   (min, avg, max) = (305233.502, 309134.340, 318680.807), stdev = 5474.962
[info]   CI (99.9%): [288052.212, 330216.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   610.208 ±(99.9%) 45.281 MB/sec [Average]
[info]   (min, avg, max) = (596.124, 610.208, 623.350), stdev = 11.759
[info]   CI (99.9%): [564.927, 655.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3106.279 ±(99.9%) 220.104 B/op [Average]
[info]   (min, avg, max) = (3064.001, 3106.279, 3190.770), stdev = 57.160
[info]   CI (99.9%): [2886.175, 3326.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   536.609 ±(99.9%) 1155.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.609, 671.087), stdev = 299.974
[info]   CI (99.9%): [≈ 0, 1691.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2752.737 ±(99.9%) 5925.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2752.737, 3457.014), stdev = 1538.885
[info]   CI (99.9%): [≈ 0, 8678.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.32% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 963081.974 ops/s
[info] # Warmup Iteration   2: 1476491.674 ops/s
[info] # Warmup Iteration   3: 1574033.075 ops/s
[info] # Warmup Iteration   4: 1562883.341 ops/s
[info] # Warmup Iteration   5: 1582759.994 ops/s
[info] Iteration   1: 1578540.984 ops/s
[info]                  ·gc.alloc.rate:      88.272 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1579800.738 ops/s
[info]                  ·gc.alloc.rate:      88.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1582213.047 ops/s
[info]                  ·gc.alloc.rate:      88.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1581907.585 ops/s
[info]                  ·gc.alloc.rate:      88.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1576192.623 ops/s
[info]                  ·gc.alloc.rate:                   103.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              103.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     510.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1579730.995 ±(99.9%) 9595.599 ops/s [Average]
[info]   (min, avg, max) = (1576192.623, 1579730.995, 1582213.047), stdev = 2491.947
[info]   CI (99.9%): [1570135.397, 1589326.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   91.480 ±(99.9%) 26.652 MB/sec [Average]
[info]   (min, avg, max) = (88.272, 91.480, 103.861), stdev = 6.921
[info]   CI (99.9%): [64.829, 118.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   91.140 ±(99.9%) 27.036 B/op [Average]
[info]   (min, avg, max) = (88.000, 91.140, 103.700), stdev = 7.021
[info]   CI (99.9%): [64.105, 118.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.319 ±(99.9%) 880.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.319, 511.593), stdev = 228.791
[info]   CI (99.9%): [≈ 0, 983.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   102.160 ±(99.9%) 879.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.160, 510.800), stdev = 228.437
[info]   CI (99.9%): [≈ 0, 981.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.158 ±(99.9%) 1.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.792), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.158 ±(99.9%) 1.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.790), stdev = 0.353
[info]   CI (99.9%): [≈ 0, 1.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.52% complete, ETA 00:27:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2310.983 ops/s
[info] # Warmup Iteration   2: 63612.586 ops/s
[info] # Warmup Iteration   3: 74791.411 ops/s
[info] # Warmup Iteration   4: 76414.967 ops/s
[info] # Warmup Iteration   5: 76840.151 ops/s
[info] Iteration   1: 74891.863 ops/s
[info]                  ·gc.alloc.rate:                   3266.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              68627.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70653.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 75954.681 ops/s
[info]                  ·gc.alloc.rate:                   3379.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              70012.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69915.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 75515.760 ops/s
[info]                  ·gc.alloc.rate:               3347.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          69764.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70504.346 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 74255.470 ops/s
[info]                  ·gc.alloc.rate:               3268.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          69262.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2712.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57475.366 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 74352.888 ops/s
[info]                  ·gc.alloc.rate:               3299.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          69820.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3396.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71868.756 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   74994.132 ±(99.9%) 2830.960 ops/s [Average]
[info]   (min, avg, max) = (74255.470, 74994.132, 75954.681), stdev = 735.191
[info]   CI (99.9%): [72163.173, 77825.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3312.315 ±(99.9%) 191.746 MB/sec [Average]
[info]   (min, avg, max) = (3266.028, 3312.315, 3379.206), stdev = 49.796
[info]   CI (99.9%): [3120.569, 3504.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69497.620 ±(99.9%) 2156.181 B/op [Average]
[info]   (min, avg, max) = (68627.264, 69497.620, 70012.832), stdev = 559.953
[info]   CI (99.9%): [67341.439, 71653.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3245.862 ±(99.9%) 1148.878 MB/sec [Average]
[info]   (min, avg, max) = (2712.601, 3245.862, 3396.465), stdev = 298.360
[info]   CI (99.9%): [2096.984, 4394.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68083.613 ±(99.9%) 22998.141 B/op [Average]
[info]   (min, avg, max) = (57475.366, 68083.613, 71868.756), stdev = 5972.544
[info]   CI (99.9%): [45085.472, 91081.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.699 ±(99.9%) 5.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.062), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.72% complete, ETA 00:27:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470325.875 ops/s
[info] # Warmup Iteration   2: 1446282.891 ops/s
[info] # Warmup Iteration   3: 1552725.860 ops/s
[info] # Warmup Iteration   4: 1564712.289 ops/s
[info] # Warmup Iteration   5: 1570930.290 ops/s
[info] Iteration   1: 1525213.925 ops/s
[info]                  ·gc.alloc.rate:                   853.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1376.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1562593.329 ops/s
[info]                  ·gc.alloc.rate:               833.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          839.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 672.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1561972.424 ops/s
[info]                  ·gc.alloc.rate:                   844.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              850.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1522372.371 ops/s
[info]                  ·gc.alloc.rate:               811.947 MB/sec
[info]                  ·gc.alloc.rate.norm:          839.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 690.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1553135.864 ops/s
[info]                  ·gc.alloc.rate:               828.895 MB/sec
[info]                  ·gc.alloc.rate.norm:          839.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 677.731 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1545057.583 ±(99.9%) 76220.928 ops/s [Average]
[info]   (min, avg, max) = (1522372.371, 1545057.583, 1562593.329), stdev = 19794.333
[info]   CI (99.9%): [1468836.654, 1621278.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   834.549 ±(99.9%) 61.154 MB/sec [Average]
[info]   (min, avg, max) = (811.947, 834.549, 853.741), stdev = 15.882
[info]   CI (99.9%): [773.394, 895.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   850.106 ±(99.9%) 68.807 B/op [Average]
[info]   (min, avg, max) = (839.355, 850.106, 880.887), stdev = 17.869
[info]   CI (99.9%): [781.299, 918.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801.408 ±(99.9%) 1147.160 MB/sec [Average]
[info]   (min, avg, max) = (667.532, 801.408, 1334.332), stdev = 297.914
[info]   CI (99.9%): [≈ 0, 1948.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   818.127 ±(99.9%) 1202.830 B/op [Average]
[info]   (min, avg, max) = (672.253, 818.127, 1376.758), stdev = 312.371
[info]   CI (99.9%): [≈ 0, 2020.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.92% complete, ETA 00:26:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 975329.332 ops/s
[info] # Warmup Iteration   2: 1782603.337 ops/s
[info] # Warmup Iteration   3: 1920191.242 ops/s
[info] # Warmup Iteration   4: 1927236.943 ops/s
[info] # Warmup Iteration   5: 1923768.511 ops/s
[info] Iteration   1: 1906332.499 ops/s
[info]                  ·gc.alloc.rate:      532.352 MB/sec
[info]                  ·gc.alloc.rate.norm: 439.493 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1906854.330 ops/s
[info]                  ·gc.alloc.rate:               538.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          444.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 553.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1926427.987 ops/s
[info]                  ·gc.alloc.rate:                   534.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1927793.864 ops/s
[info]                  ·gc.alloc.rate:                   544.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              444.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1932718.160 ops/s
[info]                  ·gc.alloc.rate:      520.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1920025.368 ±(99.9%) 48072.206 ops/s [Average]
[info]   (min, avg, max) = (1906332.499, 1920025.368, 1932718.160), stdev = 12484.199
[info]   CI (99.9%): [1871953.161, 1968097.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   534.132 ±(99.9%) 33.568 MB/sec [Average]
[info]   (min, avg, max) = (520.714, 534.132, 544.204), stdev = 8.718
[info]   CI (99.9%): [500.564, 567.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   437.831 ±(99.9%) 32.161 B/op [Average]
[info]   (min, avg, max) = (424.000, 437.831, 444.396), stdev = 8.352
[info]   CI (99.9%): [405.670, 469.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   402.364 ±(99.9%) 1414.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.364, 670.829), stdev = 367.307
[info]   CI (99.9%): [≈ 0, 1816.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   329.750 ±(99.9%) 1159.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 329.750, 553.377), stdev = 301.028
[info]   CI (99.9%): [≈ 0, 1488.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.12% complete, ETA 00:26:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 728399.860 ops/s
[info] # Warmup Iteration   2: 1705157.226 ops/s
[info] # Warmup Iteration   3: 1753414.241 ops/s
[info] # Warmup Iteration   4: 1801473.334 ops/s
[info] # Warmup Iteration   5: 1799555.578 ops/s
[info] Iteration   1: 1800382.062 ops/s
[info]                  ·gc.alloc.rate:      18.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1798391.098 ops/s
[info]                  ·gc.alloc.rate:      19.308 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.896 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1798349.397 ops/s
[info]                  ·gc.alloc.rate:      18.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1795863.072 ops/s
[info]                  ·gc.alloc.rate:      18.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1801031.675 ops/s
[info]                  ·gc.alloc.rate:      18.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1798803.461 ±(99.9%) 7815.722 ops/s [Average]
[info]   (min, avg, max) = (1795863.072, 1798803.461, 1801031.675), stdev = 2029.718
[info]   CI (99.9%): [1790987.738, 1806619.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.493 ±(99.9%) 1.756 MB/sec [Average]
[info]   (min, avg, max) = (18.258, 18.493, 19.308), stdev = 0.456
[info]   CI (99.9%): [16.737, 20.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.179 ±(99.9%) 1.542 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.179, 16.896), stdev = 0.401
[info]   CI (99.9%): [14.637, 17.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.32% complete, ETA 00:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10985.087 ops/s
[info] # Warmup Iteration   2: 45930.774 ops/s
[info] # Warmup Iteration   3: 48525.143 ops/s
[info] # Warmup Iteration   4: 49600.889 ops/s
[info] # Warmup Iteration   5: 50970.172 ops/s
[info] Iteration   1: 51110.867 ops/s
[info]                  ·gc.alloc.rate:                   2192.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              67511.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61824.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 50233.282 ops/s
[info]                  ·gc.alloc.rate:                   2204.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              69073.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83603.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 51304.177 ops/s
[info]                  ·gc.alloc.rate:               2199.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          67461.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61325.134 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 50523.706 ops/s
[info]                  ·gc.alloc.rate:               2206.790 MB/sec
[info]                  ·gc.alloc.rate.norm:          68736.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62351.015 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 51436.014 ops/s
[info]                  ·gc.alloc.rate:                   2232.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              68296.321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61399.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   50921.609 ±(99.9%) 1999.844 ops/s [Average]
[info]   (min, avg, max) = (50233.282, 50921.609, 51436.014), stdev = 519.353
[info]   CI (99.9%): [48921.765, 52921.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2207.246 ±(99.9%) 57.858 MB/sec [Average]
[info]   (min, avg, max) = (2192.527, 2207.246, 2232.251), stdev = 15.026
[info]   CI (99.9%): [2149.388, 2265.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68215.740 ±(99.9%) 2775.702 B/op [Average]
[info]   (min, avg, max) = (67461.291, 68215.740, 69073.157), stdev = 720.841
[info]   CI (99.9%): [65440.038, 70991.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2136.972 ±(99.9%) 1144.603 MB/sec [Average]
[info]   (min, avg, max) = (1999.725, 2136.972, 2668.674), stdev = 297.250
[info]   CI (99.9%): [992.369, 3281.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66100.879 ±(99.9%) 37709.441 B/op [Average]
[info]   (min, avg, max) = (61325.134, 66100.879, 83603.922), stdev = 9793.022
[info]   CI (99.9%): [28391.438, 103810.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 7.538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.891, 4.393), stdev = 1.958
[info]   CI (99.9%): [≈ 0, 8.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.439 ±(99.9%) 232.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.439, 135.254), stdev = 60.273
[info]   CI (99.9%): [≈ 0, 259.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.52% complete, ETA 00:26:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136783.448 ops/s
[info] # Warmup Iteration   2: 270182.096 ops/s
[info] # Warmup Iteration   3: 271310.719 ops/s
[info] # Warmup Iteration   4: 269796.150 ops/s
[info] # Warmup Iteration   5: 270991.267 ops/s
[info] Iteration   1: 270595.184 ops/s
[info]                  ·gc.alloc.rate:                   1101.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              6406.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7814.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 268200.466 ops/s
[info]                  ·gc.alloc.rate:               1075.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          6309.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3944.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 271761.517 ops/s
[info]                  ·gc.alloc.rate:                   1106.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              6407.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7789.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 270164.816 ops/s
[info]                  ·gc.alloc.rate:               1098.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          6400.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7839.153 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 272201.236 ops/s
[info]                  ·gc.alloc.rate:                   1079.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              6239.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3894.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   270584.644 ±(99.9%) 6045.349 ops/s [Average]
[info]   (min, avg, max) = (268200.466, 270584.644, 272201.236), stdev = 1569.958
[info]   CI (99.9%): [264539.295, 276629.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1092.323 ±(99.9%) 54.002 MB/sec [Average]
[info]   (min, avg, max) = (1075.370, 1092.323, 1106.517), stdev = 14.024
[info]   CI (99.9%): [1038.321, 1146.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6352.798 ±(99.9%) 290.239 B/op [Average]
[info]   (min, avg, max) = (6239.813, 6352.798, 6407.221), stdev = 75.374
[info]   CI (99.9%): [6062.559, 6643.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.079 ±(99.9%) 1417.308 MB/sec [Average]
[info]   (min, avg, max) = (672.198, 1076.079, 1345.809), stdev = 368.070
[info]   CI (99.9%): [≈ 0, 2493.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6256.172 ±(99.9%) 8215.491 B/op [Average]
[info]   (min, avg, max) = (3894.057, 6256.172, 7839.153), stdev = 2133.537
[info]   CI (99.9%): [≈ 0, 14471.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.558 ±(99.9%) 4.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.748), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.226 ±(99.9%) 27.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.226, 15.888), stdev = 7.079
[info]   CI (99.9%): [≈ 0, 30.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.72% complete, ETA 00:25:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1708.889 ops/s
[info] # Warmup Iteration   2: 27037.171 ops/s
[info] # Warmup Iteration   3: 38276.901 ops/s
[info] # Warmup Iteration   4: 38383.971 ops/s
[info] # Warmup Iteration   5: 39193.525 ops/s
[info] Iteration   1: 38743.272 ops/s
[info]                  ·gc.alloc.rate:                   1956.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              79466.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54333.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 39476.758 ops/s
[info]                  ·gc.alloc.rate:                   2030.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              80938.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80146.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 39675.471 ops/s
[info]                  ·gc.alloc.rate:                   2026.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              80362.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79875.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 39059.588 ops/s
[info]                  ·gc.alloc.rate:               1997.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          80452.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81234.712 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 39906.815 ops/s
[info]                  ·gc.alloc.rate:                   2065.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              81455.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79638.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.821 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   39372.381 ±(99.9%) 1808.159 ops/s [Average]
[info]   (min, avg, max) = (38743.272, 39372.381, 39906.815), stdev = 469.573
[info]   CI (99.9%): [37564.222, 41180.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2015.127 ±(99.9%) 157.028 MB/sec [Average]
[info]   (min, avg, max) = (1956.388, 2015.127, 2065.443), stdev = 40.780
[info]   CI (99.9%): [1858.099, 2172.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80535.164 ±(99.9%) 2848.455 B/op [Average]
[info]   (min, avg, max) = (79466.554, 80535.164, 81455.985), stdev = 739.735
[info]   CI (99.9%): [77686.709, 83383.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1879.616 ±(99.9%) 1166.706 MB/sec [Average]
[info]   (min, avg, max) = (1337.643, 1879.616, 2019.350), stdev = 302.990
[info]   CI (99.9%): [712.910, 3046.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75045.745 ±(99.9%) 44646.175 B/op [Average]
[info]   (min, avg, max) = (54333.727, 75045.745, 81234.712), stdev = 11594.470
[info]   CI (99.9%): [30399.570, 119691.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 2.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.312), stdev = 0.580
[info]   CI (99.9%): [≈ 0, 2.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.955 ±(99.9%) 88.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.955, 52.283), stdev = 23.106
[info]   CI (99.9%): [≈ 0, 99.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.92% complete, ETA 00:25:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31439.015 ops/s
[info] # Warmup Iteration   2: 105493.932 ops/s
[info] # Warmup Iteration   3: 112356.718 ops/s
[info] # Warmup Iteration   4: 114148.277 ops/s
[info] # Warmup Iteration   5: 113267.413 ops/s
[info] Iteration   1: 113924.550 ops/s
[info]                  ·gc.alloc.rate:                   1154.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              15938.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18441.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 113898.913 ops/s
[info]                  ·gc.alloc.rate:               1143.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          15797.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18462.919 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 113110.909 ops/s
[info]                  ·gc.alloc.rate:                   1131.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              15743.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9300.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 113991.844 ops/s
[info]                  ·gc.alloc.rate:               1154.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          15933.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18476.583 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 114200.723 ops/s
[info]                  ·gc.alloc.rate:                   1168.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              16098.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18451.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   113825.388 ±(99.9%) 1604.273 ops/s [Average]
[info]   (min, avg, max) = (113110.909, 113825.388, 114200.723), stdev = 416.625
[info]   CI (99.9%): [112221.115, 115429.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1150.300 ±(99.9%) 52.811 MB/sec [Average]
[info]   (min, avg, max) = (1131.546, 1150.300, 1168.283), stdev = 13.715
[info]   CI (99.9%): [1097.490, 1203.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15902.342 ±(99.9%) 534.880 B/op [Average]
[info]   (min, avg, max) = (15743.038, 15902.342, 16098.870), stdev = 138.907
[info]   CI (99.9%): [15367.462, 16437.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.498 ±(99.9%) 1151.641 MB/sec [Average]
[info]   (min, avg, max) = (668.498, 1203.498, 1338.987), stdev = 299.078
[info]   CI (99.9%): [51.857, 2355.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16626.529 ±(99.9%) 15769.442 B/op [Average]
[info]   (min, avg, max) = (9300.718, 16626.529, 18476.583), stdev = 4095.274
[info]   CI (99.9%): [857.087, 32395.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 7.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.080), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 7.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.418 ±(99.9%) 96.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.418, 56.226), stdev = 25.049
[info]   CI (99.9%): [≈ 0, 107.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.12% complete, ETA 00:25:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157182.686 ops/s
[info] # Warmup Iteration   2: 327828.664 ops/s
[info] # Warmup Iteration   3: 322704.639 ops/s
[info] # Warmup Iteration   4: 336724.979 ops/s
[info] # Warmup Iteration   5: 335601.113 ops/s
[info] Iteration   1: 331732.221 ops/s
[info]                  ·gc.alloc.rate:               465.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2427.084 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 329831.090 ops/s
[info]                  ·gc.alloc.rate:      445.766 MB/sec
[info]                  ·gc.alloc.rate.norm: 2126.855 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 330345.023 ops/s
[info]                  ·gc.alloc.rate:               468.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          2233.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3194.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 333777.406 ops/s
[info]                  ·gc.alloc.rate:                   475.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              2240.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3161.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 336963.371 ops/s
[info]                  ·gc.alloc.rate:      467.142 MB/sec
[info]                  ·gc.alloc.rate.norm: 2181.730 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   332529.822 ±(99.9%) 11210.846 ops/s [Average]
[info]   (min, avg, max) = (329831.090, 332529.822, 336963.371), stdev = 2911.421
[info]   CI (99.9%): [321318.976, 343740.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   464.459 ±(99.9%) 42.832 MB/sec [Average]
[info]   (min, avg, max) = (445.766, 464.459, 475.317), stdev = 11.123
[info]   CI (99.9%): [421.628, 507.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2197.856 ±(99.9%) 177.171 B/op [Average]
[info]   (min, avg, max) = (2126.855, 2197.856, 2240.521), stdev = 46.011
[info]   CI (99.9%): [2020.685, 2375.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.574 ±(99.9%) 1326.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.574, 670.649), stdev = 344.459
[info]   CI (99.9%): [≈ 0, 1696.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1756.498 ±(99.9%) 6286.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1756.498, 3194.140), stdev = 1632.517
[info]   CI (99.9%): [≈ 0, 8042.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.33% complete, ETA 00:24:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179513.284 ops/s
[info] # Warmup Iteration   2: 356448.588 ops/s
[info] # Warmup Iteration   3: 365648.588 ops/s
[info] # Warmup Iteration   4: 364957.358 ops/s
[info] # Warmup Iteration   5: 364869.788 ops/s
[info] Iteration   1: 365234.628 ops/s
[info]                  ·gc.alloc.rate:      3.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 363917.272 ops/s
[info]                  ·gc.alloc.rate:      4.628 MB/sec
[info]                  ·gc.alloc.rate.norm: 20.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 365206.036 ops/s
[info]                  ·gc.alloc.rate:      3.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 365138.131 ops/s
[info]                  ·gc.alloc.rate:      3.713 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 365016.464 ops/s
[info]                  ·gc.alloc.rate:      3.712 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   364902.506 ±(99.9%) 2145.354 ops/s [Average]
[info]   (min, avg, max) = (363917.272, 364902.506, 365234.628), stdev = 557.142
[info]   CI (99.9%): [362757.153, 367047.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.896 ±(99.9%) 1.576 MB/sec [Average]
[info]   (min, avg, max) = (3.712, 3.896, 4.628), stdev = 0.409
[info]   CI (99.9%): [2.320, 5.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.803 ±(99.9%) 6.900 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.803, 20.008), stdev = 1.792
[info]   CI (99.9%): [9.903, 23.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.53% complete, ETA 00:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5713.500 ops/s
[info] # Warmup Iteration   2: 42438.452 ops/s
[info] # Warmup Iteration   3: 50762.556 ops/s
[info] # Warmup Iteration   4: 50760.153 ops/s
[info] # Warmup Iteration   5: 50927.591 ops/s
[info] Iteration   1: 49609.366 ops/s
[info]                  ·gc.alloc.rate:                   1350.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              42847.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42200.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52008.567 ops/s
[info]                  ·gc.alloc.rate:                   1383.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              41849.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40374.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52128.222 ops/s
[info]                  ·gc.alloc.rate:                   1389.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              41961.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40362.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 52206.519 ops/s
[info]                  ·gc.alloc.rate:                   1378.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              41556.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40383.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 52148.968 ops/s
[info]                  ·gc.alloc.rate:                   1390.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              41944.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40510.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   51620.328 ±(99.9%) 4337.634 ops/s [Average]
[info]   (min, avg, max) = (49609.366, 51620.328, 52206.519), stdev = 1126.470
[info]   CI (99.9%): [47282.695, 55957.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1378.476 ±(99.9%) 62.565 MB/sec [Average]
[info]   (min, avg, max) = (1350.742, 1378.476, 1390.024), stdev = 16.248
[info]   CI (99.9%): [1315.911, 1441.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   42031.987 ±(99.9%) 1862.936 B/op [Average]
[info]   (min, avg, max) = (41556.351, 42031.987, 42847.043), stdev = 483.799
[info]   CI (99.9%): [40169.051, 43894.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.766 ±(99.9%) 18.095 MB/sec [Average]
[info]   (min, avg, max) = (1330.344, 1336.766, 1342.499), stdev = 4.699
[info]   CI (99.9%): [1318.672, 1354.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   40766.369 ±(99.9%) 3094.598 B/op [Average]
[info]   (min, avg, max) = (40362.333, 40766.369, 42200.001), stdev = 803.657
[info]   CI (99.9%): [37671.772, 43860.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.733 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.121, 0.458), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.648 ±(99.9%) 22.089 B/op [Average]
[info]   (min, avg, max) = (0.628, 3.648, 13.806), stdev = 5.736
[info]   CI (99.9%): [≈ 0, 25.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81.73% complete, ETA 00:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13613.119 ops/s
[info] # Warmup Iteration   2: 61220.788 ops/s
[info] # Warmup Iteration   3: 70221.731 ops/s
[info] # Warmup Iteration   4: 73949.349 ops/s
[info] # Warmup Iteration   5: 71341.047 ops/s
[info] Iteration   1: 72768.199 ops/s
[info]                  ·gc.alloc.rate:                   1568.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              33919.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43558.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 74031.406 ops/s
[info]                  ·gc.alloc.rate:                   1573.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              33450.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28562.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 73490.985 ops/s
[info]                  ·gc.alloc.rate:                   1574.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              33722.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28787.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 73039.386 ops/s
[info]                  ·gc.alloc.rate:                   1605.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              34589.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43303.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 74105.775 ops/s
[info]                  ·gc.alloc.rate:               1586.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          33687.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28435.863 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73487.150 ±(99.9%) 2275.067 ops/s [Average]
[info]   (min, avg, max) = (72768.199, 73487.150, 74105.775), stdev = 590.828
[info]   CI (99.9%): [71212.083, 75762.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1581.691 ±(99.9%) 56.838 MB/sec [Average]
[info]   (min, avg, max) = (1568.425, 1581.691, 1605.381), stdev = 14.761
[info]   CI (99.9%): [1524.853, 1638.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   33873.862 ±(99.9%) 1668.324 B/op [Average]
[info]   (min, avg, max) = (33450.342, 33873.862, 34589.181), stdev = 433.259
[info]   CI (99.9%): [32205.538, 35542.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.184 ±(99.9%) 1412.406 MB/sec [Average]
[info]   (min, avg, max) = (1338.998, 1610.184, 2014.113), stdev = 366.797
[info]   CI (99.9%): [197.778, 3022.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34529.592 ±(99.9%) 31295.960 B/op [Average]
[info]   (min, avg, max) = (28435.863, 34529.592, 43558.605), stdev = 8127.461
[info]   CI (99.9%): [3233.632, 65825.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.581), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 6.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.140 ±(99.9%) 130.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.140, 76.675), stdev = 33.855
[info]   CI (99.9%): [≈ 0, 146.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.93% complete, ETA 00:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27668.732 ops/s
[info] # Warmup Iteration   2: 113605.319 ops/s
[info] # Warmup Iteration   3: 134131.897 ops/s
[info] # Warmup Iteration   4: 137024.338 ops/s
[info] # Warmup Iteration   5: 136601.078 ops/s
[info] Iteration   1: 136992.182 ops/s
[info]                  ·gc.alloc.rate:               688.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          7903.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7648.952 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 137031.623 ops/s
[info]                  ·gc.alloc.rate:               691.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          7941.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7647.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 136267.243 ops/s
[info]                  ·gc.alloc.rate:               683.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          7894.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7697.107 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 132854.029 ops/s
[info]                  ·gc.alloc.rate:               666.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          7890.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7894.917 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 136326.963 ops/s
[info]                  ·gc.alloc.rate:                   685.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              7916.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7701.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   135894.408 ±(99.9%) 6688.488 ops/s [Average]
[info]   (min, avg, max) = (132854.029, 135894.408, 137031.623), stdev = 1736.979
[info]   CI (99.9%): [129205.920, 142582.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   683.016 ±(99.9%) 38.083 MB/sec [Average]
[info]   (min, avg, max) = (666.118, 683.016, 691.507), stdev = 9.890
[info]   CI (99.9%): [644.932, 721.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7909.437 ±(99.9%) 78.906 B/op [Average]
[info]   (min, avg, max) = (7890.391, 7909.437, 7941.344), stdev = 20.492
[info]   CI (99.9%): [7830.531, 7988.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.375 ±(99.9%) 2.004 MB/sec [Average]
[info]   (min, avg, max) = (665.881, 666.375, 667.132), stdev = 0.521
[info]   CI (99.9%): [664.371, 668.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7717.911 ±(99.9%) 393.674 B/op [Average]
[info]   (min, avg, max) = (7647.054, 7717.911, 7894.917), stdev = 102.236
[info]   CI (99.9%): [7324.237, 8111.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.240), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.13% complete, ETA 00:23:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109583.130 ops/s
[info] # Warmup Iteration   2: 253759.821 ops/s
[info] # Warmup Iteration   3: 259515.870 ops/s
[info] # Warmup Iteration   4: 260106.638 ops/s
[info] # Warmup Iteration   5: 261838.742 ops/s
[info] Iteration   1: 256511.172 ops/s
[info]                  ·gc.alloc.rate:               1105.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          6779.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8237.340 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 261598.548 ops/s
[info]                  ·gc.alloc.rate:               1093.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          6577.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4039.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 260684.645 ops/s
[info]                  ·gc.alloc.rate:               1103.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          6661.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8115.309 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 259610.388 ops/s
[info]                  ·gc.alloc.rate:                   1108.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              6717.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8149.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 260227.922 ops/s
[info]                  ·gc.alloc.rate:                   1085.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              6563.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4069.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   259726.535 ±(99.9%) 7463.162 ops/s [Average]
[info]   (min, avg, max) = (256511.172, 259726.535, 261598.548), stdev = 1938.159
[info]   CI (99.9%): [252263.373, 267189.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1099.078 ±(99.9%) 36.664 MB/sec [Average]
[info]   (min, avg, max) = (1085.264, 1099.078, 1108.192), stdev = 9.522
[info]   CI (99.9%): [1062.414, 1135.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6660.048 ±(99.9%) 354.263 B/op [Average]
[info]   (min, avg, max) = (6563.456, 6660.048, 6779.668), stdev = 92.001
[info]   CI (99.9%): [6305.784, 7014.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.115 ±(99.9%) 1416.438 MB/sec [Average]
[info]   (min, avg, max) = (671.491, 1075.115, 1344.313), stdev = 367.844
[info]   CI (99.9%): [≈ 0, 2491.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6522.127 ±(99.9%) 8676.423 B/op [Average]
[info]   (min, avg, max) = (4039.504, 6522.127, 8237.340), stdev = 2253.239
[info]   CI (99.9%): [≈ 0, 15198.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.579 ±(99.9%) 4.938 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.873), stdev = 1.282
[info]   CI (99.9%): [≈ 0, 5.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.500 ±(99.9%) 29.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.500, 17.375), stdev = 7.756
[info]   CI (99.9%): [≈ 0, 33.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.33% complete, ETA 00:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 650.638 ops/s
[info] # Warmup Iteration   2: 21233.363 ops/s
[info] # Warmup Iteration   3: 28187.196 ops/s
[info] # Warmup Iteration   4: 27874.840 ops/s
[info] # Warmup Iteration   5: 27637.971 ops/s
[info] Iteration   1: 28211.504 ops/s
[info]                  ·gc.alloc.rate:                   1522.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              84954.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74356.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28401.188 ops/s
[info]                  ·gc.alloc.rate:                   1532.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              84912.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111047.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 28310.896 ops/s
[info]                  ·gc.alloc.rate:                   1524.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              84741.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74464.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28425.293 ops/s
[info]                  ·gc.alloc.rate:                   1541.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              85354.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74281.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28517.850 ops/s
[info]                  ·gc.alloc.rate:               1534.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          84668.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74039.619 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   28373.346 ±(99.9%) 449.256 ops/s [Average]
[info]   (min, avg, max) = (28211.504, 28373.346, 28517.850), stdev = 116.670
[info]   CI (99.9%): [27924.090, 28822.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1531.195 ±(99.9%) 29.601 MB/sec [Average]
[info]   (min, avg, max) = (1522.893, 1531.195, 1541.762), stdev = 7.687
[info]   CI (99.9%): [1501.595, 1560.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84926.193 ±(99.9%) 1027.903 B/op [Average]
[info]   (min, avg, max) = (84668.644, 84926.193, 85354.724), stdev = 266.943
[info]   CI (99.9%): [83898.290, 85954.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1472.032 ±(99.9%) 1145.339 MB/sec [Average]
[info]   (min, avg, max) = (1332.927, 1472.032, 2004.071), stdev = 297.441
[info]   CI (99.9%): [326.693, 2617.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81638.079 ±(99.9%) 63309.119 B/op [Average]
[info]   (min, avg, max) = (74039.619, 81638.079, 111047.624), stdev = 16441.177
[info]   CI (99.9%): [18328.960, 144947.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 1.976 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.187), stdev = 0.513
[info]   CI (99.9%): [≈ 0, 2.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   15.261 ±(99.9%) 109.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.261, 65.957), stdev = 28.523
[info]   CI (99.9%): [≈ 0, 125.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.483
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.53% complete, ETA 00:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51014.580 ops/s
[info] # Warmup Iteration   2: 165694.727 ops/s
[info] # Warmup Iteration   3: 176470.535 ops/s
[info] # Warmup Iteration   4: 178942.844 ops/s
[info] # Warmup Iteration   5: 178034.765 ops/s
[info] Iteration   1: 177208.575 ops/s
[info]                  ·gc.alloc.rate:               998.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          8865.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5928.102 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 176860.154 ops/s
[info]                  ·gc.alloc.rate:               995.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          8862.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5945.290 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 177038.577 ops/s
[info]                  ·gc.alloc.rate:                   1012.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              8997.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11881.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 178304.698 ops/s
[info]                  ·gc.alloc.rate:               1012.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          8933.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5900.522 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 176904.140 ops/s
[info]                  ·gc.alloc.rate:                   1016.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              9046.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11906.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   177263.229 ±(99.9%) 2301.970 ops/s [Average]
[info]   (min, avg, max) = (176860.154, 177263.229, 178304.698), stdev = 597.814
[info]   CI (99.9%): [174961.258, 179565.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1007.141 ±(99.9%) 36.050 MB/sec [Average]
[info]   (min, avg, max) = (995.997, 1007.141, 1016.945), stdev = 9.362
[info]   CI (99.9%): [971.091, 1043.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8941.093 ±(99.9%) 312.014 B/op [Average]
[info]   (min, avg, max) = (8862.817, 8941.093, 9046.589), stdev = 81.029
[info]   CI (99.9%): [8629.079, 9253.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.882 ±(99.9%) 1411.992 MB/sec [Average]
[info]   (min, avg, max) = (667.540, 935.882, 1338.400), stdev = 366.690
[info]   CI (99.9%): [≈ 0, 2347.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8312.422 ±(99.9%) 12590.291 B/op [Average]
[info]   (min, avg, max) = (5900.522, 8312.422, 11906.208), stdev = 3269.659
[info]   CI (99.9%): [≈ 0, 20902.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.185), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.73% complete, ETA 00:23:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259023.954 ops/s
[info] # Warmup Iteration   2: 462620.707 ops/s
[info] # Warmup Iteration   3: 454482.602 ops/s
[info] # Warmup Iteration   4: 460621.015 ops/s
[info] # Warmup Iteration   5: 468645.256 ops/s
[info] Iteration   1: 476309.122 ops/s
[info]                  ·gc.alloc.rate:                   1426.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              4712.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4440.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 474262.549 ops/s
[info]                  ·gc.alloc.rate:               1416.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          4701.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4463.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 476560.816 ops/s
[info]                  ·gc.alloc.rate:                   1449.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              4786.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6665.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.830 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 474017.991 ops/s
[info]                  ·gc.alloc.rate:                   1428.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              4743.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4458.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 477050.415 ops/s
[info]                  ·gc.alloc.rate:                   1449.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              4780.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4426.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   475640.179 ±(99.9%) 5381.673 ops/s [Average]
[info]   (min, avg, max) = (474017.991, 475640.179, 477050.415), stdev = 1397.603
[info]   CI (99.9%): [470258.506, 481021.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1434.205 ±(99.9%) 55.808 MB/sec [Average]
[info]   (min, avg, max) = (1416.851, 1434.205, 1449.499), stdev = 14.493
[info]   CI (99.9%): [1378.396, 1490.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4744.979 ±(99.9%) 148.456 B/op [Average]
[info]   (min, avg, max) = (4701.461, 4744.979, 4786.663), stdev = 38.554
[info]   CI (99.9%): [4596.523, 4893.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.522 ±(99.9%) 1162.228 MB/sec [Average]
[info]   (min, avg, max) = (1341.652, 1478.522, 2018.441), stdev = 301.827
[info]   CI (99.9%): [316.294, 2640.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4890.852 ±(99.9%) 3820.430 B/op [Average]
[info]   (min, avg, max) = (4426.142, 4890.852, 6665.475), stdev = 992.154
[info]   CI (99.9%): [1070.422, 8711.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 2.977), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.104 ±(99.9%) 16.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.104, 9.830), stdev = 4.323
[info]   CI (99.9%): [≈ 0, 18.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.93% complete, ETA 00:22:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189094.920 ops/s
[info] # Warmup Iteration   2: 516801.384 ops/s
[info] # Warmup Iteration   3: 514585.654 ops/s
[info] # Warmup Iteration   4: 525044.874 ops/s
[info] # Warmup Iteration   5: 520306.643 ops/s
[info] Iteration   1: 525714.518 ops/s
[info]                  ·gc.alloc.rate:               1006.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          3012.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4018.274 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 529258.601 ops/s
[info]                  ·gc.alloc.rate:               996.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          2963.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1997.791 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 526322.174 ops/s
[info]                  ·gc.alloc.rate:                   997.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              2981.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4018.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 524831.145 ops/s
[info]                  ·gc.alloc.rate:               987.189 MB/sec
[info]                  ·gc.alloc.rate.norm:          2960.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2015.490 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 526947.292 ops/s
[info]                  ·gc.alloc.rate:               992.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          2964.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2009.399 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   526614.746 ±(99.9%) 6436.970 ops/s [Average]
[info]   (min, avg, max) = (524831.145, 526614.746, 529258.601), stdev = 1671.661
[info]   CI (99.9%): [520177.777, 533051.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   996.090 ±(99.9%) 27.479 MB/sec [Average]
[info]   (min, avg, max) = (987.189, 996.090, 1006.605), stdev = 7.136
[info]   CI (99.9%): [968.611, 1023.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2976.372 ±(99.9%) 84.050 B/op [Average]
[info]   (min, avg, max) = (2960.113, 2976.372, 3012.463), stdev = 21.828
[info]   CI (99.9%): [2892.322, 3060.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   940.808 ±(99.9%) 1415.821 MB/sec [Average]
[info]   (min, avg, max) = (671.912, 940.808, 1344.477), stdev = 367.684
[info]   CI (99.9%): [≈ 0, 2356.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2811.967 ±(99.9%) 4241.475 B/op [Average]
[info]   (min, avg, max) = (1997.791, 2811.967, 4018.880), stdev = 1101.498
[info]   CI (99.9%): [≈ 0, 7053.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.187), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.13% complete, ETA 00:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5997.080 ops/s
[info] # Warmup Iteration   2: 57652.001 ops/s
[info] # Warmup Iteration   3: 66814.406 ops/s
[info] # Warmup Iteration   4: 67562.240 ops/s
[info] # Warmup Iteration   5: 67283.458 ops/s
[info] Iteration   1: 66847.222 ops/s
[info]                  ·gc.alloc.rate:                   1480.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              34853.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31380.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 66940.363 ops/s
[info]                  ·gc.alloc.rate:               1489.784 MB/sec
[info]                  ·gc.alloc.rate.norm:          35023.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31407.010 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 65811.218 ops/s
[info]                  ·gc.alloc.rate:                   1490.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              35643.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48060.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 65707.076 ops/s
[info]                  ·gc.alloc.rate:                   1475.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              35336.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32165.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 66491.213 ops/s
[info]                  ·gc.alloc.rate:                   1479.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              35013.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31832.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   66359.418 ±(99.9%) 2211.099 ops/s [Average]
[info]   (min, avg, max) = (65707.076, 66359.418, 66940.363), stdev = 574.215
[info]   CI (99.9%): [64148.319, 68570.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1483.135 ±(99.9%) 25.914 MB/sec [Average]
[info]   (min, avg, max) = (1475.397, 1483.135, 1490.616), stdev = 6.730
[info]   CI (99.9%): [1457.222, 1509.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35174.195 ±(99.9%) 1214.482 B/op [Average]
[info]   (min, avg, max) = (34853.828, 35174.195, 35643.572), stdev = 315.397
[info]   CI (99.9%): [33959.713, 36388.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1473.357 ±(99.9%) 1155.050 MB/sec [Average]
[info]   (min, avg, max) = (1332.987, 1473.357, 2009.875), stdev = 299.963
[info]   CI (99.9%): [318.307, 2628.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34969.240 ±(99.9%) 28206.753 B/op [Average]
[info]   (min, avg, max) = (31380.593, 34969.240, 48060.065), stdev = 7325.204
[info]   CI (99.9%): [6762.487, 63175.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.458), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.683 ±(99.9%) 17.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.683, 10.952), stdev = 4.653
[info]   CI (99.9%): [≈ 0, 20.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.33% complete, ETA 00:22:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26072.078 ops/s
[info] # Warmup Iteration   2: 84725.850 ops/s
[info] # Warmup Iteration   3: 94442.799 ops/s
[info] # Warmup Iteration   4: 91414.774 ops/s
[info] # Warmup Iteration   5: 92767.574 ops/s
[info] Iteration   1: 89758.207 ops/s
[info]                  ·gc.alloc.rate:                   1461.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              25615.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23548.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 89696.889 ops/s
[info]                  ·gc.alloc.rate:                   1471.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              25809.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23587.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 92874.408 ops/s
[info]                  ·gc.alloc.rate:                   1521.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              25769.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22781.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.562 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 91348.881 ops/s
[info]                  ·gc.alloc.rate:                   1510.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              26019.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23114.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 90970.431 ops/s
[info]                  ·gc.alloc.rate:                   1502.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              25985.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23165.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   90929.763 ±(99.9%) 5039.594 ops/s [Average]
[info]   (min, avg, max) = (89696.889, 90929.763, 92874.408), stdev = 1308.767
[info]   CI (99.9%): [85890.169, 95969.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1493.540 ±(99.9%) 99.572 MB/sec [Average]
[info]   (min, avg, max) = (1461.417, 1493.540, 1521.403), stdev = 25.858
[info]   CI (99.9%): [1393.969, 1593.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25839.893 ±(99.9%) 638.616 B/op [Average]
[info]   (min, avg, max) = (25615.001, 25839.893, 26019.904), stdev = 165.847
[info]   CI (99.9%): [25201.276, 26478.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.983 ±(99.9%) 8.724 MB/sec [Average]
[info]   (min, avg, max) = (1339.491, 1342.983, 1344.964), stdev = 2.266
[info]   CI (99.9%): [1334.259, 1351.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23239.400 ±(99.9%) 1287.754 B/op [Average]
[info]   (min, avg, max) = (22781.387, 23239.400, 23587.671), stdev = 334.426
[info]   CI (99.9%): [21951.646, 24527.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.771 ±(99.9%) 5.799 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.771, 3.457), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.080 ±(99.9%) 98.182 B/op [Average]
[info]   (min, avg, max) = (0.365, 13.080, 58.562), stdev = 25.498
[info]   CI (99.9%): [≈ 0, 111.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:22:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15787.741 ops/s
[info] # Warmup Iteration   2: 151113.305 ops/s
[info] # Warmup Iteration   3: 163393.017 ops/s
[info] # Warmup Iteration   4: 168038.744 ops/s
[info] # Warmup Iteration   5: 159249.420 ops/s
[info] Iteration   1: 162654.825 ops/s
[info]                  ·gc.alloc.rate:               694.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          6714.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6435.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 167725.319 ops/s
[info]                  ·gc.alloc.rate:               709.003 MB/sec
[info]                  ·gc.alloc.rate.norm:          6650.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6241.115 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 167571.690 ops/s
[info]                  ·gc.alloc.rate:               705.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          6628.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6256.233 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 167377.892 ops/s
[info]                  ·gc.alloc.rate:                   725.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              6812.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12484.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 167746.818 ops/s
[info]                  ·gc.alloc.rate:               705.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          6617.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6256.331 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   166615.309 ±(99.9%) 8544.194 ops/s [Average]
[info]   (min, avg, max) = (162654.825, 166615.309, 167746.818), stdev = 2218.900
[info]   CI (99.9%): [158071.115, 175159.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   708.096 ±(99.9%) 43.661 MB/sec [Average]
[info]   (min, avg, max) = (694.216, 708.096, 725.703), stdev = 11.339
[info]   CI (99.9%): [664.435, 751.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6684.790 ±(99.9%) 310.471 B/op [Average]
[info]   (min, avg, max) = (6617.812, 6684.790, 6812.379), stdev = 80.628
[info]   CI (99.9%): [6374.319, 6995.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   798.805 ±(99.9%) 1143.299 MB/sec [Average]
[info]   (min, avg, max) = (665.331, 798.805, 1329.934), stdev = 296.911
[info]   CI (99.9%): [≈ 0, 1942.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7534.758 ±(99.9%) 10659.068 B/op [Average]
[info]   (min, avg, max) = (6241.115, 7534.758, 12484.459), stdev = 2768.126
[info]   CI (99.9%): [≈ 0, 18193.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.195), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.73% complete, ETA 00:21:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96665.571 ops/s
[info] # Warmup Iteration   2: 246050.852 ops/s
[info] # Warmup Iteration   3: 271792.904 ops/s
[info] # Warmup Iteration   4: 277273.166 ops/s
[info] # Warmup Iteration   5: 277716.831 ops/s
[info] Iteration   1: 278766.484 ops/s
[info]                  ·gc.alloc.rate:               1040.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          5874.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7581.563 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 278665.376 ops/s
[info]                  ·gc.alloc.rate:               1011.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          5711.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3794.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 268279.538 ops/s
[info]                  ·gc.alloc.rate:                   1000.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              5866.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7884.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 278614.062 ops/s
[info]                  ·gc.alloc.rate:                   1007.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              5690.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3796.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 276017.415 ops/s
[info]                  ·gc.alloc.rate:                   1026.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              5853.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7668.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   276068.575 ±(99.9%) 17346.426 ops/s [Average]
[info]   (min, avg, max) = (268279.538, 276068.575, 278766.484), stdev = 4504.812
[info]   CI (99.9%): [258722.149, 293415.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1017.229 ±(99.9%) 62.582 MB/sec [Average]
[info]   (min, avg, max) = (1000.025, 1017.229, 1040.584), stdev = 16.252
[info]   CI (99.9%): [954.647, 1079.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5799.226 ±(99.9%) 346.558 B/op [Average]
[info]   (min, avg, max) = (5690.915, 5799.226, 5874.291), stdev = 90.000
[info]   CI (99.9%): [5452.668, 6145.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.211 ±(99.9%) 1417.347 MB/sec [Average]
[info]   (min, avg, max) = (671.861, 1075.211, 1345.013), stdev = 368.081
[info]   CI (99.9%): [≈ 0, 2492.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6144.978 ±(99.9%) 8270.317 B/op [Average]
[info]   (min, avg, max) = (3794.090, 6144.978, 7884.104), stdev = 2147.775
[info]   CI (99.9%): [≈ 0, 14415.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.122), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.94% complete, ETA 00:21:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5648.469 ops/s
[info] # Warmup Iteration   2: 51665.602 ops/s
[info] # Warmup Iteration   3: 66273.952 ops/s
[info] # Warmup Iteration   4: 64411.986 ops/s
[info] # Warmup Iteration   5: 66211.439 ops/s
[info] Iteration   1: 67673.410 ops/s
[info]                  ·gc.alloc.rate:                   2624.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              61038.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62169.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.913 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 68219.802 ops/s
[info]                  ·gc.alloc.rate:                   2658.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              61319.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61537.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68282.194 ops/s
[info]                  ·gc.alloc.rate:                   2660.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              61330.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46161.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 67886.393 ops/s
[info]                  ·gc.alloc.rate:               2673.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          61971.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62067.026 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 68211.128 ops/s
[info]                  ·gc.alloc.rate:               2685.294 MB/sec
[info]                  ·gc.alloc.rate.norm:          61950.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61981.987 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   68054.585 ±(99.9%) 1013.663 ops/s [Average]
[info]   (min, avg, max) = (67673.410, 68054.585, 68282.194), stdev = 263.245
[info]   CI (99.9%): [67040.922, 69068.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2660.482 ±(99.9%) 87.561 MB/sec [Average]
[info]   (min, avg, max) = (2624.637, 2660.482, 2685.294), stdev = 22.739
[info]   CI (99.9%): [2572.921, 2748.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61522.042 ±(99.9%) 1608.557 B/op [Average]
[info]   (min, avg, max) = (61038.163, 61522.042, 61971.578), stdev = 417.737
[info]   CI (99.9%): [59913.485, 63130.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2541.567 ±(99.9%) 1159.947 MB/sec [Average]
[info]   (min, avg, max) = (2002.844, 2541.567, 2686.642), stdev = 301.235
[info]   CI (99.9%): [1381.621, 3701.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   58783.486 ±(99.9%) 27185.932 B/op [Average]
[info]   (min, avg, max) = (46161.357, 58783.486, 62169.395), stdev = 7060.100
[info]   CI (99.9%): [31597.554, 85969.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 1.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.770), stdev = 0.338
[info]   CI (99.9%): [≈ 0, 1.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.871 ±(99.9%) 30.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.871, 17.913), stdev = 7.860
[info]   CI (99.9%): [≈ 0, 34.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84.14% complete, ETA 00:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47172.018 ops/s
[info] # Warmup Iteration   2: 154485.084 ops/s
[info] # Warmup Iteration   3: 152456.025 ops/s
[info] # Warmup Iteration   4: 157295.579 ops/s
[info] # Warmup Iteration   5: 153659.446 ops/s
[info] Iteration   1: 158311.164 ops/s
[info]                  ·gc.alloc.rate:                   1330.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              13221.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13364.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 154970.148 ops/s
[info]                  ·gc.alloc.rate:                   1313.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              13341.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13659.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 157984.317 ops/s
[info]                  ·gc.alloc.rate:               1338.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          13327.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13392.063 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 158232.269 ops/s
[info]                  ·gc.alloc.rate:                   1330.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              13230.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13384.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 157680.907 ops/s
[info]                  ·gc.alloc.rate:               1322.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          13197.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13390.858 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   157435.761 ±(99.9%) 5391.250 ops/s [Average]
[info]   (min, avg, max) = (154970.148, 157435.761, 158311.164), stdev = 1400.091
[info]   CI (99.9%): [152044.511, 162827.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1326.924 ±(99.9%) 35.453 MB/sec [Average]
[info]   (min, avg, max) = (1313.813, 1326.924, 1338.048), stdev = 9.207
[info]   CI (99.9%): [1291.471, 1362.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   13263.772 ±(99.9%) 254.060 B/op [Average]
[info]   (min, avg, max) = (13197.040, 13263.772, 13341.311), stdev = 65.979
[info]   CI (99.9%): [13009.712, 13517.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.314 ±(99.9%) 5.992 MB/sec [Average]
[info]   (min, avg, max) = (1341.708, 1344.314, 1345.798), stdev = 1.556
[info]   CI (99.9%): [1338.323, 1350.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13438.181 ±(99.9%) 477.596 B/op [Average]
[info]   (min, avg, max) = (13364.405, 13438.181, 13659.165), stdev = 124.030
[info]   CI (99.9%): [12960.585, 13915.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.810 ±(99.9%) 5.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 3.456), stdev = 1.499
[info]   CI (99.9%): [≈ 0, 6.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8.079 ±(99.9%) 57.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.079, 34.372), stdev = 14.908
[info]   CI (99.9%): [≈ 0, 65.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.34% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76758.936 ops/s
[info] # Warmup Iteration   2: 184020.394 ops/s
[info] # Warmup Iteration   3: 204504.865 ops/s
[info] # Warmup Iteration   4: 204602.287 ops/s
[info] # Warmup Iteration   5: 205005.117 ops/s
[info] Iteration   1: 201714.263 ops/s
[info]                  ·gc.alloc.rate:               1400.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          10923.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10462.164 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 202838.222 ops/s
[info]                  ·gc.alloc.rate:                   1405.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              10904.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10412.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 205462.742 ops/s
[info]                  ·gc.alloc.rate:                   1422.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              10897.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10284.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 206224.842 ops/s
[info]                  ·gc.alloc.rate:                   1439.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              10985.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10238.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 205058.250 ops/s
[info]                  ·gc.alloc.rate:               1433.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          11001.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10281.360 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   204259.664 ±(99.9%) 7317.901 ops/s [Average]
[info]   (min, avg, max) = (201714.263, 204259.664, 206224.842), stdev = 1900.436
[info]   CI (99.9%): [196941.763, 211577.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1420.330 ±(99.9%) 65.854 MB/sec [Average]
[info]   (min, avg, max) = (1400.310, 1420.330, 1439.531), stdev = 17.102
[info]   CI (99.9%): [1354.475, 1486.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10942.394 ±(99.9%) 183.534 B/op [Average]
[info]   (min, avg, max) = (10897.798, 10942.394, 11001.376), stdev = 47.663
[info]   CI (99.9%): [10758.860, 11125.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.486 ±(99.9%) 4.499 MB/sec [Average]
[info]   (min, avg, max) = (1339.669, 1341.486, 1342.801), stdev = 1.168
[info]   CI (99.9%): [1336.987, 1345.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10335.846 ±(99.9%) 369.276 B/op [Average]
[info]   (min, avg, max) = (10238.838, 10335.846, 10462.164), stdev = 95.900
[info]   CI (99.9%): [9966.570, 10705.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.040), stdev = 1.315
[info]   CI (99.9%): [≈ 0, 5.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.452 ±(99.9%) 38.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.452, 23.281), stdev = 10.073
[info]   CI (99.9%): [≈ 0, 44.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.54% complete, ETA 00:20:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182761.854 ops/s
[info] # Warmup Iteration   2: 484607.982 ops/s
[info] # Warmup Iteration   3: 498587.076 ops/s
[info] # Warmup Iteration   4: 492432.249 ops/s
[info] # Warmup Iteration   5: 508072.649 ops/s
[info] Iteration   1: 505465.299 ops/s
[info]                  ·gc.alloc.rate:                   409.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1274.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1592.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 505825.124 ops/s
[info]                  ·gc.alloc.rate:               410.984 MB/sec
[info]                  ·gc.alloc.rate.norm:          1278.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1591.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 506784.725 ops/s
[info]                  ·gc.alloc.rate:                   423.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1314.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2067.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 506557.964 ops/s
[info]                  ·gc.alloc.rate:      399.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 505877.504 ops/s
[info]                  ·gc.alloc.rate:               412.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          1284.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2071.302 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   506102.123 ±(99.9%) 2114.758 ops/s [Average]
[info]   (min, avg, max) = (505465.299, 506102.123, 506784.725), stdev = 549.196
[info]   CI (99.9%): [503987.365, 508216.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   411.109 ±(99.9%) 33.386 MB/sec [Average]
[info]   (min, avg, max) = (399.137, 411.109, 423.415), stdev = 8.670
[info]   CI (99.9%): [377.723, 444.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1278.361 ±(99.9%) 102.793 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1278.361, 1314.821), stdev = 26.695
[info]   CI (99.9%): [1175.568, 1381.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   470.965 ±(99.9%) 1056.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 470.965, 665.843), stdev = 274.331
[info]   CI (99.9%): [≈ 0, 1527.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1464.705 ±(99.9%) 3284.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1464.705, 2071.302), stdev = 852.848
[info]   CI (99.9%): [≈ 0, 4748.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.194), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.74% complete, ETA 00:20:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359906.216 ops/s
[info] # Warmup Iteration   2: 608624.895 ops/s
[info] # Warmup Iteration   3: 634333.238 ops/s
[info] # Warmup Iteration   4: 647113.679 ops/s
[info] # Warmup Iteration   5: 640608.066 ops/s
[info] Iteration   1: 644063.679 ops/s
[info]                  ·gc.alloc.rate:               365.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1250.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 646902.518 ops/s
[info]                  ·gc.alloc.rate:      348.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 642846.545 ops/s
[info]                  ·gc.alloc.rate:               366.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          896.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1252.448 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 623260.426 ops/s
[info]                  ·gc.alloc.rate:                   353.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              891.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1693.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 625122.756 ops/s
[info]                  ·gc.alloc.rate:      336.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   636439.185 ±(99.9%) 43497.356 ops/s [Average]
[info]   (min, avg, max) = (623260.426, 636439.185, 646902.518), stdev = 11296.125
[info]   CI (99.9%): [592941.829, 679936.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   354.043 ±(99.9%) 47.335 MB/sec [Average]
[info]   (min, avg, max) = (336.861, 354.043, 366.199), stdev = 12.293
[info]   CI (99.9%): [306.708, 401.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   875.401 ±(99.9%) 96.571 B/op [Average]
[info]   (min, avg, max) = (848.001, 875.401, 896.497), stdev = 25.079
[info]   CI (99.9%): [778.831, 971.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.823 ±(99.9%) 1217.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.823, 670.906), stdev = 316.065
[info]   CI (99.9%): [≈ 0, 1555.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   839.298 ±(99.9%) 3031.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 839.298, 1693.949), stdev = 787.197
[info]   CI (99.9%): [≈ 0, 3870.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 397141.604 ops/s
[info] # Warmup Iteration   2: 665027.152 ops/s
[info] # Warmup Iteration   3: 693567.081 ops/s
[info] # Warmup Iteration   4: 692849.324 ops/s
[info] # Warmup Iteration   5: 692974.356 ops/s
[info] Iteration   1: 693641.858 ops/s
[info]                  ·gc.alloc.rate:      7.054 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 695218.976 ops/s
[info]                  ·gc.alloc.rate:      8.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 18.197 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 694924.433 ops/s
[info]                  ·gc.alloc.rate:      7.066 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 694754.309 ops/s
[info]                  ·gc.alloc.rate:      7.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 695280.312 ops/s
[info]                  ·gc.alloc.rate:      7.069 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   694763.978 ±(99.9%) 2553.225 ops/s [Average]
[info]   (min, avg, max) = (693641.858, 694763.978, 695280.312), stdev = 663.064
[info]   CI (99.9%): [692210.753, 697317.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.258 ±(99.9%) 1.681 MB/sec [Average]
[info]   (min, avg, max) = (7.054, 7.258, 8.039), stdev = 0.437
[info]   CI (99.9%): [5.577, 8.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.440 ±(99.9%) 3.782 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.440, 18.197), stdev = 0.982
[info]   CI (99.9%): [12.658, 20.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.14% complete, ETA 00:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12313.939 ops/s
[info] # Warmup Iteration   2: 32260.894 ops/s
[info] # Warmup Iteration   3: 35425.699 ops/s
[info] # Warmup Iteration   4: 35140.015 ops/s
[info] # Warmup Iteration   5: 34599.197 ops/s
[info] Iteration   1: 34947.161 ops/s
[info]                  ·gc.alloc.rate:                   1887.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              84959.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90683.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35819.246 ops/s
[info]                  ·gc.alloc.rate:                   1941.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              85295.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88330.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35575.903 ops/s
[info]                  ·gc.alloc.rate:                   1928.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              85314.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59174.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 36026.046 ops/s
[info]                  ·gc.alloc.rate:                   1953.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              85332.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87577.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35928.717 ops/s
[info]                  ·gc.alloc.rate:                   1974.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              86505.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87901.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35659.414 ±(99.9%) 1663.780 ops/s [Average]
[info]   (min, avg, max) = (34947.161, 35659.414, 36026.046), stdev = 432.078
[info]   CI (99.9%): [33995.634, 37323.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1937.059 ±(99.9%) 125.730 MB/sec [Average]
[info]   (min, avg, max) = (1887.200, 1937.059, 1974.744), stdev = 32.652
[info]   CI (99.9%): [1811.329, 2062.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85481.489 ±(99.9%) 2282.333 B/op [Average]
[info]   (min, avg, max) = (84959.066, 85481.489, 86505.150), stdev = 592.715
[info]   CI (99.9%): [83199.156, 87763.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.778 ±(99.9%) 1156.342 MB/sec [Average]
[info]   (min, avg, max) = (1337.629, 1874.778, 2014.359), stdev = 300.298
[info]   CI (99.9%): [718.437, 3031.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82733.494 ±(99.9%) 50929.700 B/op [Average]
[info]   (min, avg, max) = (59174.319, 82733.494, 90683.600), stdev = 13226.281
[info]   CI (99.9%): [31803.793, 133663.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.825 ±(99.9%) 4.929 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.825, 2.978), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.872 ±(99.9%) 221.800 B/op [Average]
[info]   (min, avg, max) = (0.909, 36.872, 134.053), stdev = 57.601
[info]   CI (99.9%): [≈ 0, 258.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85.34% complete, ETA 00:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58585.115 ops/s
[info] # Warmup Iteration   2: 118323.251 ops/s
[info] # Warmup Iteration   3: 126235.484 ops/s
[info] # Warmup Iteration   4: 126683.716 ops/s
[info] # Warmup Iteration   5: 126968.159 ops/s
[info] Iteration   1: 127351.969 ops/s
[info]                  ·gc.alloc.rate:               1351.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          16697.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16612.311 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 127141.677 ops/s
[info]                  ·gc.alloc.rate:                   1358.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              16817.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16647.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 127735.083 ops/s
[info]                  ·gc.alloc.rate:                   1378.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              16981.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16578.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 127048.267 ops/s
[info]                  ·gc.alloc.rate:                   1358.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              16821.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16652.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 127672.656 ops/s
[info]                  ·gc.alloc.rate:               1364.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          16824.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16546.436 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   127389.930 ±(99.9%) 1185.080 ops/s [Average]
[info]   (min, avg, max) = (127048.267, 127389.930, 127735.083), stdev = 307.761
[info]   CI (99.9%): [126204.850, 128575.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1362.245 ±(99.9%) 39.743 MB/sec [Average]
[info]   (min, avg, max) = (1351.180, 1362.245, 1378.587), stdev = 10.321
[info]   CI (99.9%): [1322.503, 1401.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16828.364 ±(99.9%) 389.166 B/op [Average]
[info]   (min, avg, max) = (16697.090, 16828.364, 16981.467), stdev = 101.065
[info]   CI (99.9%): [16439.198, 17217.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.355 ±(99.9%) 5.204 MB/sec [Average]
[info]   (min, avg, max) = (1342.220, 1344.355, 1345.887), stdev = 1.352
[info]   CI (99.9%): [1339.151, 1349.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16607.544 ±(99.9%) 174.689 B/op [Average]
[info]   (min, avg, max) = (16546.436, 16607.544, 16652.446), stdev = 45.366
[info]   CI (99.9%): [16432.855, 16782.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 4.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 2.790), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8.318 ±(99.9%) 57.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.318, 34.368), stdev = 14.810
[info]   CI (99.9%): [≈ 0, 65.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.54% complete, ETA 00:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18277.482 ops/s
[info] # Warmup Iteration   2: 62987.417 ops/s
[info] # Warmup Iteration   3: 78959.330 ops/s
[info] # Warmup Iteration   4: 80700.949 ops/s
[info] # Warmup Iteration   5: 81711.195 ops/s
[info] Iteration   1: 81471.226 ops/s
[info]                  ·gc.alloc.rate:                   3037.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              58664.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51702.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 82124.210 ops/s
[info]                  ·gc.alloc.rate:                   3099.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              59393.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64153.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 82457.277 ops/s
[info]                  ·gc.alloc.rate:                   3099.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              59161.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51242.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 82261.585 ops/s
[info]                  ·gc.alloc.rate:               3120.738 MB/sec
[info]                  ·gc.alloc.rate.norm:          59689.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3367.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64412.071 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 82523.319 ops/s
[info]                  ·gc.alloc.rate:               3103.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          59183.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51515.995 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   82167.523 ±(99.9%) 1617.846 ops/s [Average]
[info]   (min, avg, max) = (81471.226, 82167.523, 82523.319), stdev = 420.149
[info]   CI (99.9%): [80549.678, 83785.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3092.087 ±(99.9%) 123.148 MB/sec [Average]
[info]   (min, avg, max) = (3037.053, 3092.087, 3120.738), stdev = 31.981
[info]   CI (99.9%): [2968.939, 3215.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59218.446 ±(99.9%) 1446.530 B/op [Average]
[info]   (min, avg, max) = (58664.196, 59218.446, 59689.764), stdev = 375.659
[info]   CI (99.9%): [57771.916, 60664.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2955.673 ±(99.9%) 1414.164 MB/sec [Average]
[info]   (min, avg, max) = (2676.641, 2955.673, 3367.633), stdev = 367.254
[info]   CI (99.9%): [1541.509, 4369.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   56605.285 ±(99.9%) 26996.841 B/op [Average]
[info]   (min, avg, max) = (51242.611, 56605.285, 64412.071), stdev = 7010.994
[info]   CI (99.9%): [29608.444, 83602.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.722 ±(99.9%) 4.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 2.815), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.74% complete, ETA 00:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27651.756 ops/s
[info] # Warmup Iteration   2: 107948.845 ops/s
[info] # Warmup Iteration   3: 136051.514 ops/s
[info] # Warmup Iteration   4: 134508.088 ops/s
[info] # Warmup Iteration   5: 131552.223 ops/s
[info] Iteration   1: 137426.000 ops/s
[info]                  ·gc.alloc.rate:                   1792.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              20525.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15299.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.715 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 135645.611 ops/s
[info]                  ·gc.alloc.rate:                   1793.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              20812.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23270.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 137036.580 ops/s
[info]                  ·gc.alloc.rate:                   1810.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              20788.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22965.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 137128.706 ops/s
[info]                  ·gc.alloc.rate:               1811.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          20792.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15285.777 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 136922.536 ops/s
[info]                  ·gc.alloc.rate:               1808.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          20791.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22965.738 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   136831.887 ±(99.9%) 2652.783 ops/s [Average]
[info]   (min, avg, max) = (135645.611, 136831.887, 137426.000), stdev = 688.919
[info]   CI (99.9%): [134179.103, 139484.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1803.473 ±(99.9%) 36.379 MB/sec [Average]
[info]   (min, avg, max) = (1792.507, 1803.473, 1811.844), stdev = 9.448
[info]   CI (99.9%): [1767.094, 1839.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20742.019 ±(99.9%) 466.756 B/op [Average]
[info]   (min, avg, max) = (20525.861, 20742.019, 20812.422), stdev = 121.215
[info]   CI (99.9%): [20275.263, 21208.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1734.355 ±(99.9%) 1407.171 MB/sec [Average]
[info]   (min, avg, max) = (1332.012, 1734.355, 2005.770), stdev = 365.438
[info]   CI (99.9%): [327.185, 3141.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19957.447 ±(99.9%) 16404.437 B/op [Average]
[info]   (min, avg, max) = (15285.777, 19957.447, 23270.603), stdev = 4260.180
[info]   CI (99.9%): [3553.009, 36361.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.914 ±(99.9%) 7.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.914, 4.465), stdev = 1.985
[info]   CI (99.9%): [≈ 0, 8.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.600 ±(99.9%) 88.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.600, 51.805), stdev = 23.037
[info]   CI (99.9%): [≈ 0, 99.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.94% complete, ETA 00:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342976.717 ops/s
[info] # Warmup Iteration   2: 604020.214 ops/s
[info] # Warmup Iteration   3: 626488.637 ops/s
[info] # Warmup Iteration   4: 656328.356 ops/s
[info] # Warmup Iteration   5: 646028.429 ops/s
[info] Iteration   1: 655703.575 ops/s
[info]                  ·gc.alloc.rate:               1765.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          4236.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4843.237 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 657701.103 ops/s
[info]                  ·gc.alloc.rate:                   1770.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              4235.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3220.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 657105.992 ops/s
[info]                  ·gc.alloc.rate:                   1783.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              4272.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4823.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 646401.354 ops/s
[info]                  ·gc.alloc.rate:                   1761.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4899.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 656514.074 ops/s
[info]                  ·gc.alloc.rate:                   1762.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              4224.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3216.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   654685.220 ±(99.9%) 18057.003 ops/s [Average]
[info]   (min, avg, max) = (646401.354, 654685.220, 657701.103), stdev = 4689.346
[info]   CI (99.9%): [636628.217, 672742.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1768.739 ±(99.9%) 35.169 MB/sec [Average]
[info]   (min, avg, max) = (1761.561, 1768.739, 1783.834), stdev = 9.133
[info]   CI (99.9%): [1733.571, 1803.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4251.468 ±(99.9%) 105.797 B/op [Average]
[info]   (min, avg, max) = (4224.167, 4251.468, 4288.676), stdev = 27.475
[info]   CI (99.9%): [4145.671, 4357.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1746.495 ±(99.9%) 1415.858 MB/sec [Average]
[info]   (min, avg, max) = (1341.610, 1746.495, 2018.632), stdev = 367.694
[info]   CI (99.9%): [330.637, 3162.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4200.407 ±(99.9%) 3454.748 B/op [Average]
[info]   (min, avg, max) = (3216.079, 4200.407, 4899.501), stdev = 897.187
[info]   CI (99.9%): [745.660, 7655.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.019), stdev = 1.323
[info]   CI (99.9%): [≈ 0, 5.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.565 ±(99.9%) 12.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.565, 7.223), stdev = 3.166
[info]   CI (99.9%): [≈ 0, 13.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:18:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1244.312 ops/s
[info] # Warmup Iteration   2: 7683.983 ops/s
[info] # Warmup Iteration   3: 15429.803 ops/s
[info] # Warmup Iteration   4: 20235.072 ops/s
[info] # Warmup Iteration   5: 21665.462 ops/s
[info] Iteration   1: 21298.077 ops/s
[info]                  ·gc.alloc.rate:                   2800.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              206870.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196691.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.615 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 21005.000 ops/s
[info]                  ·gc.alloc.rate:                   2844.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              213061.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200092.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 20742.114 ops/s
[info]                  ·gc.alloc.rate:                   2781.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              210989.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203023.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 21532.439 ops/s
[info]                  ·gc.alloc.rate:               2833.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          207090.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195917.250 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 20952.669 ops/s
[info]                  ·gc.alloc.rate:                   2753.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              206824.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201939.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.127 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   21106.060 ±(99.9%) 1194.426 ops/s [Average]
[info]   (min, avg, max) = (20742.114, 21106.060, 21532.439), stdev = 310.189
[info]   CI (99.9%): [19911.634, 22300.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2802.499 ±(99.9%) 143.374 MB/sec [Average]
[info]   (min, avg, max) = (2753.728, 2802.499, 2844.122), stdev = 37.234
[info]   CI (99.9%): [2659.125, 2945.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   208967.345 ±(99.9%) 11120.579 B/op [Average]
[info]   (min, avg, max) = (206824.269, 208967.345, 213061.462), stdev = 2887.979
[info]   CI (99.9%): [197846.766, 220087.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2675.735 ±(99.9%) 38.341 MB/sec [Average]
[info]   (min, avg, max) = (2662.265, 2675.735, 2688.695), stdev = 9.957
[info]   CI (99.9%): [2637.393, 2714.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   199532.817 ±(99.9%) 12091.260 B/op [Average]
[info]   (min, avg, max) = (195917.250, 199532.817, 203023.560), stdev = 3140.062
[info]   CI (99.9%): [187441.557, 211624.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.379 ±(99.9%) 2.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.379, 1.416), stdev = 0.598
[info]   CI (99.9%): [≈ 0, 2.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28.446 ±(99.9%) 172.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.446, 106.060), stdev = 44.839
[info]   CI (99.9%): [≈ 0, 201.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:18:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12017.919 ops/s
[info] # Warmup Iteration   2: 70158.671 ops/s
[info] # Warmup Iteration   3: 79345.201 ops/s
[info] # Warmup Iteration   4: 80324.906 ops/s
[info] # Warmup Iteration   5: 83216.419 ops/s
[info] Iteration   1: 82447.627 ops/s
[info]                  ·gc.alloc.rate:                   3313.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              63239.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51040.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 83371.969 ops/s
[info]                  ·gc.alloc.rate:                   3404.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              64247.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63233.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 82822.104 ops/s
[info]                  ·gc.alloc.rate:                   3382.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              64273.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63876.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.396 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 82880.473 ops/s
[info]                  ·gc.alloc.rate:               3386.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          64294.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64072.688 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 82560.688 ops/s
[info]                  ·gc.alloc.rate:               3372.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          64291.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64488.389 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   82816.572 ±(99.9%) 1380.573 ops/s [Average]
[info]   (min, avg, max) = (82447.627, 82816.572, 83371.969), stdev = 358.531
[info]   CI (99.9%): [81435.999, 84197.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   3371.889 ±(99.9%) 133.653 MB/sec [Average]
[info]   (min, avg, max) = (3313.273, 3371.889, 3404.482), stdev = 34.709
[info]   CI (99.9%): [3238.236, 3505.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   64069.223 ±(99.9%) 1787.345 B/op [Average]
[info]   (min, avg, max) = (63239.570, 64069.223, 64294.309), stdev = 464.168
[info]   CI (99.9%): [62281.878, 65856.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   3228.863 ±(99.9%) 1195.067 MB/sec [Average]
[info]   (min, avg, max) = (2674.122, 3228.863, 3383.198), stdev = 310.355
[info]   CI (99.9%): [2033.796, 4423.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   61342.165 ±(99.9%) 22244.052 B/op [Average]
[info]   (min, avg, max) = (51040.261, 61342.165, 64488.389), stdev = 5776.710
[info]   CI (99.9%): [39098.113, 83586.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.317 ±(99.9%) 1.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.317, 0.795), stdev = 0.332
[info]   CI (99.9%): [≈ 0, 1.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.55% complete, ETA 00:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87629.339 ops/s
[info] # Warmup Iteration   2: 273548.861 ops/s
[info] # Warmup Iteration   3: 269579.491 ops/s
[info] # Warmup Iteration   4: 284379.804 ops/s
[info] # Warmup Iteration   5: 285397.521 ops/s
[info] Iteration   1: 285619.270 ops/s
[info]                  ·gc.alloc.rate:                   1359.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              7491.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7363.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 285569.208 ops/s
[info]                  ·gc.alloc.rate:                   1356.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              7473.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7371.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 287939.684 ops/s
[info]                  ·gc.alloc.rate:                   1379.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              7541.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7316.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 287343.886 ops/s
[info]                  ·gc.alloc.rate:                   1375.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              7532.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7326.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 280321.813 ops/s
[info]                  ·gc.alloc.rate:               1330.807 MB/sec
[info]                  ·gc.alloc.rate.norm:          7469.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3750.871 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   285358.772 ±(99.9%) 11565.542 ops/s [Average]
[info]   (min, avg, max) = (280321.813, 285358.772, 287939.684), stdev = 3003.535
[info]   CI (99.9%): [273793.230, 296924.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1360.342 ±(99.9%) 74.496 MB/sec [Average]
[info]   (min, avg, max) = (1330.807, 1360.342, 1379.864), stdev = 19.346
[info]   CI (99.9%): [1285.846, 1434.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7501.587 ±(99.9%) 129.249 B/op [Average]
[info]   (min, avg, max) = (7469.371, 7501.587, 7541.559), stdev = 33.566
[info]   CI (99.9%): [7372.338, 7630.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.720 ±(99.9%) 1152.564 MB/sec [Average]
[info]   (min, avg, max) = (668.287, 1203.720, 1338.666), stdev = 299.317
[info]   CI (99.9%): [51.156, 2356.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6625.613 ±(99.9%) 6188.759 B/op [Average]
[info]   (min, avg, max) = (3750.871, 6625.613, 7371.593), stdev = 1607.201
[info]   CI (99.9%): [436.853, 12814.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 5.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.414), stdev = 1.481
[info]   CI (99.9%): [≈ 0, 6.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.325 ±(99.9%) 31.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.325, 18.660), stdev = 8.096
[info]   CI (99.9%): [≈ 0, 35.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.75% complete, ETA 00:17:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635492.271 ops/s
[info] # Warmup Iteration   2: 1179221.210 ops/s
[info] # Warmup Iteration   3: 1257824.368 ops/s
[info] # Warmup Iteration   4: 1229880.450 ops/s
[info] # Warmup Iteration   5: 1206188.918 ops/s
[info] Iteration   1: 1208852.831 ops/s
[info]                  ·gc.alloc.rate:                   623.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              811.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1236963.776 ops/s
[info]                  ·gc.alloc.rate:               653.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          830.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 853.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1252970.227 ops/s
[info]                  ·gc.alloc.rate:                   645.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              810.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     842.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1212906.857 ops/s
[info]                  ·gc.alloc.rate:               627.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          814.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 870.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1214795.218 ops/s
[info]                  ·gc.alloc.rate:               628.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          814.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 870.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1225297.782 ±(99.9%) 72962.714 ops/s [Average]
[info]   (min, avg, max) = (1208852.831, 1225297.782, 1252970.227), stdev = 18948.185
[info]   CI (99.9%): [1152335.068, 1298260.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   635.576 ±(99.9%) 49.655 MB/sec [Average]
[info]   (min, avg, max) = (623.414, 635.576, 653.102), stdev = 12.895
[info]   CI (99.9%): [585.920, 685.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   816.301 ±(99.9%) 32.093 B/op [Average]
[info]   (min, avg, max) = (810.548, 816.301, 830.926), stdev = 8.334
[info]   CI (99.9%): [784.208, 848.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.010 ±(99.9%) 2.146 MB/sec [Average]
[info]   (min, avg, max) = (670.465, 671.010, 671.808), stdev = 0.557
[info]   CI (99.9%): [668.864, 673.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   861.999 ±(99.9%) 51.247 B/op [Average]
[info]   (min, avg, max) = (842.961, 861.999, 872.875), stdev = 13.309
[info]   CI (99.9%): [810.752, 913.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.027), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.95% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598346.905 ops/s
[info] # Warmup Iteration   2: 1265791.539 ops/s
[info] # Warmup Iteration   3: 1321479.273 ops/s
[info] # Warmup Iteration   4: 1320292.699 ops/s
[info] # Warmup Iteration   5: 1320161.988 ops/s
[info] Iteration   1: 1319200.151 ops/s
[info]                  ·gc.alloc.rate:      0.086 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.103 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1321966.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1319915.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1322350.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1316108.793 ops/s
[info]                  ·gc.alloc.rate:      1.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.355 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1319908.308 ±(99.9%) 9653.557 ops/s [Average]
[info]   (min, avg, max) = (1316108.793, 1319908.308, 1322350.649), stdev = 2506.998
[info]   CI (99.9%): [1310254.752, 1329561.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.244 ±(99.9%) 1.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.244, 1.133), stdev = 0.498
[info]   CI (99.9%): [≈ 0, 2.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.292 ±(99.9%) 2.295 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.292, 1.355), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87.15% complete, ETA 00:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4085.327 ops/s
[info] # Warmup Iteration   2: 19576.463 ops/s
[info] # Warmup Iteration   3: 43782.912 ops/s
[info] # Warmup Iteration   4: 45945.078 ops/s
[info] # Warmup Iteration   5: 46785.103 ops/s
[info] Iteration   1: 47789.405 ops/s
[info]                  ·gc.alloc.rate:               2602.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          85677.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2659.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87584.252 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 48378.171 ops/s
[info]                  ·gc.alloc.rate:               2628.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          85486.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2668.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86812.480 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 47867.915 ops/s
[info]                  ·gc.alloc.rate:                   2599.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              85455.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88085.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.422 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47636.019 ops/s
[info]                  ·gc.alloc.rate:                   2586.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              85458.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66581.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 47809.377 ops/s
[info]                  ·gc.alloc.rate:               2636.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          86780.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88700.697 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   47896.178 ±(99.9%) 1088.673 ops/s [Average]
[info]   (min, avg, max) = (47636.019, 47896.178, 48378.171), stdev = 282.725
[info]   CI (99.9%): [46807.504, 48984.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2610.487 ±(99.9%) 80.366 MB/sec [Average]
[info]   (min, avg, max) = (2586.680, 2610.487, 2636.417), stdev = 20.871
[info]   CI (99.9%): [2530.120, 2690.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85771.638 ±(99.9%) 2200.359 B/op [Average]
[info]   (min, avg, max) = (85455.197, 85771.638, 86780.488), stdev = 571.426
[info]   CI (99.9%): [83571.279, 87971.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2543.615 ±(99.9%) 1138.318 MB/sec [Average]
[info]   (min, avg, max) = (2015.308, 2543.615, 2694.753), stdev = 295.618
[info]   CI (99.9%): [1405.297, 3681.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83552.913 ±(99.9%) 36629.642 B/op [Average]
[info]   (min, avg, max) = (66581.319, 83552.913, 88700.697), stdev = 9512.602
[info]   CI (99.9%): [46923.271, 120182.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.510 ±(99.9%) 8.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.510, 4.126), stdev = 2.082
[info]   CI (99.9%): [≈ 0, 9.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.35% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69979.008 ops/s
[info] # Warmup Iteration   2: 712785.960 ops/s
[info] # Warmup Iteration   3: 843198.095 ops/s
[info] # Warmup Iteration   4: 861252.644 ops/s
[info] # Warmup Iteration   5: 856100.282 ops/s
[info] Iteration   1: 843941.665 ops/s
[info]                  ·gc.alloc.rate:                   2259.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4212.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3752.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 837899.265 ops/s
[info]                  ·gc.alloc.rate:                   2269.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              4261.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3769.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 840701.259 ops/s
[info]                  ·gc.alloc.rate:               2249.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          4210.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3755.977 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 861705.095 ops/s
[info]                  ·gc.alloc.rate:                   2356.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4889.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 866566.962 ops/s
[info]                  ·gc.alloc.rate:                   2344.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              4257.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3654.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   850162.849 ±(99.9%) 50240.894 ops/s [Average]
[info]   (min, avg, max) = (837899.265, 850162.849, 866566.962), stdev = 13047.401
[info]   CI (99.9%): [799921.955, 900403.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2295.729 ±(99.9%) 195.527 MB/sec [Average]
[info]   (min, avg, max) = (2249.144, 2295.729, 2356.721), stdev = 50.778
[info]   CI (99.9%): [2100.202, 2491.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4249.325 ±(99.9%) 150.359 B/op [Average]
[info]   (min, avg, max) = (4210.210, 4249.325, 4304.118), stdev = 39.048
[info]   CI (99.9%): [4098.966, 4399.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2143.176 ±(99.9%) 1149.709 MB/sec [Average]
[info]   (min, avg, max) = (2006.488, 2143.176, 2677.260), stdev = 298.576
[info]   CI (99.9%): [993.467, 3292.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3964.570 ±(99.9%) 1998.808 B/op [Average]
[info]   (min, avg, max) = (3654.894, 3964.570, 4889.524), stdev = 519.084
[info]   CI (99.9%): [1965.762, 5963.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.872), stdev = 1.711
[info]   CI (99.9%): [≈ 0, 7.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.514 ±(99.9%) 12.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.514, 7.220), stdev = 3.191
[info]   CI (99.9%): [≈ 0, 13.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.55% complete, ETA 00:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63679.477 ops/s
[info] # Warmup Iteration   2: 1585556.420 ops/s
[info] # Warmup Iteration   3: 1806536.563 ops/s
[info] # Warmup Iteration   4: 1864337.917 ops/s
[info] # Warmup Iteration   5: 1803614.753 ops/s
[info] Iteration   1: 1869855.206 ops/s
[info]                  ·gc.alloc.rate:               1196.188 MB/sec
[info]                  ·gc.alloc.rate.norm:          1006.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1123.051 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 1837909.728 ops/s
[info]                  ·gc.alloc.rate:               1154.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          988.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 571.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1862794.607 ops/s
[info]                  ·gc.alloc.rate:                   1185.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1001.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1128.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 1866045.710 ops/s
[info]                  ·gc.alloc.rate:                   1198.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1010.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1127.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1869291.013 ops/s
[info]                  ·gc.alloc.rate:                   1186.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              998.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1861179.253 ±(99.9%) 51259.699 ops/s [Average]
[info]   (min, avg, max) = (1837909.728, 1861179.253, 1869855.206), stdev = 13311.981
[info]   CI (99.9%): [1809919.554, 1912438.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1184.297 ±(99.9%) 66.588 MB/sec [Average]
[info]   (min, avg, max) = (1154.974, 1184.297, 1198.002), stdev = 17.293
[info]   CI (99.9%): [1117.710, 1250.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1001.390 ±(99.9%) 31.603 B/op [Average]
[info]   (min, avg, max) = (988.992, 1001.390, 1010.383), stdev = 8.207
[info]   CI (99.9%): [969.787, 1032.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.396 ±(99.9%) 1151.419 MB/sec [Average]
[info]   (min, avg, max) = (667.497, 1202.396, 1337.493), stdev = 299.020
[info]   CI (99.9%): [50.976, 2353.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1015.348 ±(99.9%) 955.296 B/op [Average]
[info]   (min, avg, max) = (571.570, 1015.348, 1128.392), stdev = 248.087
[info]   CI (99.9%): [60.051, 1970.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.893 ±(99.9%) 7.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.893, 4.423), stdev = 1.973
[info]   CI (99.9%): [≈ 0, 8.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.752 ±(99.9%) 6.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.752, 3.724), stdev = 1.662
[info]   CI (99.9%): [≈ 0, 7.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.75% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1673189.639 ops/s
[info] # Warmup Iteration   2: 8107664.894 ops/s
[info] # Warmup Iteration   3: 8500248.300 ops/s
[info] # Warmup Iteration   4: 8538456.739 ops/s
[info] # Warmup Iteration   5: 8564955.442 ops/s
[info] Iteration   1: 8532459.649 ops/s
[info]                  ·gc.alloc.rate:               275.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94.361 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 8557467.435 ops/s
[info]                  ·gc.alloc.rate:      261.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8445404.861 ops/s
[info]                  ·gc.alloc.rate:               275.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          51.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95.335 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 8371241.508 ops/s
[info]                  ·gc.alloc.rate:      255.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8341162.760 ops/s
[info]                  ·gc.alloc.rate:                   268.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8449547.243 ±(99.9%) 367415.697 ops/s [Average]
[info]   (min, avg, max) = (8341162.760, 8449547.243, 8557467.435), stdev = 95416.690
[info]   CI (99.9%): [8082131.546, 8816962.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267.175 ±(99.9%) 34.480 MB/sec [Average]
[info]   (min, avg, max) = (255.324, 267.175, 275.847), stdev = 8.954
[info]   CI (99.9%): [232.695, 301.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.762 ±(99.9%) 6.258 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.762, 51.295), stdev = 1.625
[info]   CI (99.9%): [43.504, 56.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.976 ±(99.9%) 1079.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.976, 511.669), stdev = 280.230
[info]   CI (99.9%): [≈ 0, 1386.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   57.244 ±(99.9%) 201.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.244, 96.526), stdev = 52.262
[info]   CI (99.9%): [≈ 0, 258.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.95% complete, ETA 00:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4042.344 ops/s
[info] # Warmup Iteration   2: 120761.445 ops/s
[info] # Warmup Iteration   3: 235431.105 ops/s
[info] # Warmup Iteration   4: 313677.262 ops/s
[info] # Warmup Iteration   5: 325640.830 ops/s
[info] Iteration   1: 325125.397 ops/s
[info]                  ·gc.alloc.rate:                   2120.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              10263.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9720.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 320507.746 ops/s
[info]                  ·gc.alloc.rate:                   2075.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9876.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 316810.565 ops/s
[info]                  ·gc.alloc.rate:                   2047.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              10169.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9996.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 321709.160 ops/s
[info]                  ·gc.alloc.rate:                   2090.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              10224.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9851.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 326187.074 ops/s
[info]                  ·gc.alloc.rate:               2118.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          10219.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9732.399 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   322067.988 ±(99.9%) 14474.302 ops/s [Average]
[info]   (min, avg, max) = (316810.565, 322067.988, 326187.074), stdev = 3758.930
[info]   CI (99.9%): [307593.686, 336542.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2090.334 ±(99.9%) 117.921 MB/sec [Average]
[info]   (min, avg, max) = (2047.138, 2090.334, 2120.257), stdev = 30.624
[info]   CI (99.9%): [1972.414, 2208.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10213.810 ±(99.9%) 136.821 B/op [Average]
[info]   (min, avg, max) = (10169.159, 10213.810, 10263.270), stdev = 35.532
[info]   CI (99.9%): [10076.989, 10350.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2012.650 ±(99.9%) 12.892 MB/sec [Average]
[info]   (min, avg, max) = (2008.141, 2012.650, 2017.297), stdev = 3.348
[info]   CI (99.9%): [1999.758, 2025.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9835.543 ±(99.9%) 438.007 B/op [Average]
[info]   (min, avg, max) = (9720.562, 9835.543, 9996.680), stdev = 113.749
[info]   CI (99.9%): [9397.536, 10273.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 2.919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.749), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.943 ±(99.9%) 14.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.943, 8.586), stdev = 3.722
[info]   CI (99.9%): [≈ 0, 16.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88.15% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80217.654 ops/s
[info] # Warmup Iteration   2: 945773.549 ops/s
[info] # Warmup Iteration   3: 1063914.826 ops/s
[info] # Warmup Iteration   4: 1079033.361 ops/s
[info] # Warmup Iteration   5: 1082768.803 ops/s
[info] Iteration   1: 1114164.875 ops/s
[info]                  ·gc.alloc.rate:               1809.325 MB/sec
[info]                  ·gc.alloc.rate.norm:          2555.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2823.888 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1117941.575 ops/s
[info]                  ·gc.alloc.rate:               1811.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          2550.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1878.301 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1111109.840 ops/s
[info]                  ·gc.alloc.rate:               1814.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          2570.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2840.489 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1115979.271 ops/s
[info]                  ·gc.alloc.rate:               1820.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          2567.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2834.543 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1117779.595 ops/s
[info]                  ·gc.alloc.rate:                   1825.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              2570.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1891.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1115395.031 ±(99.9%) 10957.182 ops/s [Average]
[info]   (min, avg, max) = (1111109.840, 1115395.031, 1117941.575), stdev = 2845.545
[info]   CI (99.9%): [1104437.849, 1126352.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1816.448 ±(99.9%) 25.868 MB/sec [Average]
[info]   (min, avg, max) = (1809.325, 1816.448, 1825.881), stdev = 6.718
[info]   CI (99.9%): [1790.580, 1842.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2562.863 ±(99.9%) 36.164 B/op [Average]
[info]   (min, avg, max) = (2550.220, 2562.863, 2570.750), stdev = 9.392
[info]   CI (99.9%): [2526.699, 2599.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1738.552 ±(99.9%) 1404.714 MB/sec [Average]
[info]   (min, avg, max) = (1334.332, 1738.552, 2010.057), stdev = 364.800
[info]   CI (99.9%): [333.837, 3143.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2453.792 ±(99.9%) 1999.529 B/op [Average]
[info]   (min, avg, max) = (1878.301, 2453.792, 2840.489), stdev = 519.271
[info]   CI (99.9%): [454.262, 4453.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.35% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201939.211 ops/s
[info] # Warmup Iteration   2: 2277236.717 ops/s
[info] # Warmup Iteration   3: 2709695.285 ops/s
[info] # Warmup Iteration   4: 2751235.792 ops/s
[info] # Warmup Iteration   5: 2689371.779 ops/s
[info] Iteration   1: 2750963.782 ops/s
[info]                  ·gc.alloc.rate:                   1209.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              691.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2778247.928 ops/s
[info]                  ·gc.alloc.rate:               1227.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          694.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 757.365 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2728024.536 ops/s
[info]                  ·gc.alloc.rate:                   1179.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              680.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2649363.627 ops/s
[info]                  ·gc.alloc.rate:                   1171.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     795.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2626357.792 ops/s
[info]                  ·gc.alloc.rate:                   1161.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     802.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2706591.533 ±(99.9%) 253056.423 ops/s [Average]
[info]   (min, avg, max) = (2626357.792, 2706591.533, 2778247.928), stdev = 65717.949
[info]   CI (99.9%): [2453535.110, 2959647.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1189.711 ±(99.9%) 105.231 MB/sec [Average]
[info]   (min, avg, max) = (1161.804, 1189.711, 1227.053), stdev = 27.328
[info]   CI (99.9%): [1084.481, 1294.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   691.751 ±(99.9%) 25.931 B/op [Average]
[info]   (min, avg, max) = (680.150, 691.751, 696.153), stdev = 6.734
[info]   CI (99.9%): [665.820, 717.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.120 ±(99.9%) 1152.270 MB/sec [Average]
[info]   (min, avg, max) = (668.829, 1204.120, 1339.652), stdev = 299.241
[info]   CI (99.9%): [51.850, 2356.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   701.075 ±(99.9%) 682.718 B/op [Average]
[info]   (min, avg, max) = (385.832, 701.075, 802.719), stdev = 177.300
[info]   CI (99.9%): [18.356, 1383.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.882), stdev = 1.731
[info]   CI (99.9%): [≈ 0, 7.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.471 ±(99.9%) 3.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.471, 2.326), stdev = 1.037
[info]   CI (99.9%): [≈ 0, 4.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.55% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1229058.373 ops/s
[info] # Warmup Iteration   2: 5883906.736 ops/s
[info] # Warmup Iteration   3: 6169978.549 ops/s
[info] # Warmup Iteration   4: 6189312.476 ops/s
[info] # Warmup Iteration   5: 6001858.075 ops/s
[info] Iteration   1: 6015634.871 ops/s
[info]                  ·gc.alloc.rate:               698.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          182.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.411 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6063844.562 ops/s
[info]                  ·gc.alloc.rate:               695.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5964865.527 ops/s
[info]                  ·gc.alloc.rate:               685.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6251070.649 ops/s
[info]                  ·gc.alloc.rate:               724.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          182.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168.967 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6233127.559 ops/s
[info]                  ·gc.alloc.rate:               735.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          185.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 339.243 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6105708.634 ±(99.9%) 498611.413 ops/s [Average]
[info]   (min, avg, max) = (5964865.527, 6105708.634, 6251070.649), stdev = 129487.800
[info]   CI (99.9%): [5607097.221, 6604320.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   707.959 ±(99.9%) 81.147 MB/sec [Average]
[info]   (min, avg, max) = (685.864, 707.959, 735.951), stdev = 21.074
[info]   CI (99.9%): [626.812, 789.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   182.446 ±(99.9%) 8.032 B/op [Average]
[info]   (min, avg, max) = (180.506, 182.446, 185.814), stdev = 2.086
[info]   CI (99.9%): [174.413, 190.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.416 ±(99.9%) 1158.562 MB/sec [Average]
[info]   (min, avg, max) = (670.494, 805.416, 1343.637), stdev = 300.875
[info]   CI (99.9%): [≈ 0, 1963.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   206.940 ±(99.9%) 285.030 B/op [Average]
[info]   (min, avg, max) = (168.967, 206.940, 339.243), stdev = 74.021
[info]   CI (99.9%): [≈ 0, 491.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.76% complete, ETA 00:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1044474.238 ops/s
[info] # Warmup Iteration   2: 6120728.618 ops/s
[info] # Warmup Iteration   3: 6593266.650 ops/s
[info] # Warmup Iteration   4: 6600278.160 ops/s
[info] # Warmup Iteration   5: 6762278.621 ops/s
[info] Iteration   1: 6742807.912 ops/s
[info]                  ·gc.alloc.rate:               426.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119.406 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6759851.301 ops/s
[info]                  ·gc.alloc.rate:               430.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119.109 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6803439.371 ops/s
[info]                  ·gc.alloc.rate:      415.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6754673.239 ops/s
[info]                  ·gc.alloc.rate:               431.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6673452.549 ops/s
[info]                  ·gc.alloc.rate:               422.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158.114 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6746844.874 ±(99.9%) 180981.472 ops/s [Average]
[info]   (min, avg, max) = (6673452.549, 6746844.874, 6803439.371), stdev = 47000.314
[info]   CI (99.9%): [6565863.402, 6927826.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   425.198 ±(99.9%) 25.468 MB/sec [Average]
[info]   (min, avg, max) = (415.046, 425.198, 431.700), stdev = 6.614
[info]   CI (99.9%): [399.730, 450.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   99.183 ±(99.9%) 7.033 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.183, 100.578), stdev = 1.826
[info]   CI (99.9%): [92.150, 106.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.851 ±(99.9%) 1062.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.851, 670.527), stdev = 276.011
[info]   CI (99.9%): [≈ 0, 1535.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   110.570 ±(99.9%) 248.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.570, 158.114), stdev = 64.655
[info]   CI (99.9%): [≈ 0, 359.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.96% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15950.867 ops/s
[info] # Warmup Iteration   2: 348592.331 ops/s
[info] # Warmup Iteration   3: 406377.316 ops/s
[info] # Warmup Iteration   4: 415786.226 ops/s
[info] # Warmup Iteration   5: 415042.053 ops/s
[info] Iteration   1: 419760.014 ops/s
[info]                  ·gc.alloc.rate:                   2613.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              9799.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9996.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.561 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 407888.930 ops/s
[info]                  ·gc.alloc.rate:                   2553.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              9849.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10271.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 413193.516 ops/s
[info]                  ·gc.alloc.rate:               2587.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          9853.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7611.651 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 416590.618 ops/s
[info]                  ·gc.alloc.rate:                   2634.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              9952.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10093.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 410511.963 ops/s
[info]                  ·gc.alloc.rate:                   2598.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              9961.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10281.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   413589.008 ±(99.9%) 18184.509 ops/s [Average]
[info]   (min, avg, max) = (407888.930, 413589.008, 419760.014), stdev = 4722.459
[info]   CI (99.9%): [395404.499, 431773.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2597.526 ±(99.9%) 117.196 MB/sec [Average]
[info]   (min, avg, max) = (2553.324, 2597.526, 2634.551), stdev = 30.435
[info]   CI (99.9%): [2480.330, 2714.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9883.305 ±(99.9%) 271.972 B/op [Average]
[info]   (min, avg, max) = (9799.849, 9883.305, 9961.794), stdev = 70.630
[info]   CI (99.9%): [9611.333, 10155.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2536.354 ±(99.9%) 1158.085 MB/sec [Average]
[info]   (min, avg, max) = (1998.512, 2536.354, 2682.066), stdev = 300.751
[info]   CI (99.9%): [1378.269, 3694.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9650.943 ±(99.9%) 4414.247 B/op [Average]
[info]   (min, avg, max) = (7611.651, 9650.943, 10281.634), stdev = 1146.366
[info]   CI (99.9%): [5236.696, 14065.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.416), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.408 ±(99.9%) 2.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 1.561), stdev = 0.656
[info]   CI (99.9%): [≈ 0, 2.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.16% complete, ETA 00:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18904.923 ops/s
[info] # Warmup Iteration   2: 73428.381 ops/s
[info] # Warmup Iteration   3: 75828.244 ops/s
[info] # Warmup Iteration   4: 78312.776 ops/s
[info] # Warmup Iteration   5: 77995.231 ops/s
[info] Iteration   1: 77208.757 ops/s
[info]                  ·gc.alloc.rate:                   2169.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              44222.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54774.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.680 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 76810.587 ops/s
[info]                  ·gc.alloc.rate:                   2144.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              43933.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41177.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 77874.105 ops/s
[info]                  ·gc.alloc.rate:               2173.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          43917.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40588.736 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 78418.894 ops/s
[info]                  ·gc.alloc.rate:               2200.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          44169.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40333.960 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 78848.664 ops/s
[info]                  ·gc.alloc.rate:                   2214.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              44188.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40185.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   77832.202 ±(99.9%) 3228.312 ops/s [Average]
[info]   (min, avg, max) = (76810.587, 77832.202, 78848.664), stdev = 838.382
[info]   CI (99.9%): [74603.889, 81060.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2180.436 ±(99.9%) 105.902 MB/sec [Average]
[info]   (min, avg, max) = (2144.317, 2180.436, 2214.047), stdev = 27.502
[info]   CI (99.9%): [2074.535, 2286.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44086.342 ±(99.9%) 569.915 B/op [Average]
[info]   (min, avg, max) = (43917.461, 44086.342, 44222.379), stdev = 148.005
[info]   CI (99.9%): [43516.427, 44656.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2145.785 ±(99.9%) 1165.712 MB/sec [Average]
[info]   (min, avg, max) = (2008.500, 2145.785, 2687.317), stdev = 302.732
[info]   CI (99.9%): [980.072, 3311.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   43411.978 ±(99.9%) 24501.953 B/op [Average]
[info]   (min, avg, max) = (40185.132, 43411.978, 54774.433), stdev = 6363.080
[info]   CI (99.9%): [18910.025, 67913.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.664), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 7.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.190 ±(99.9%) 128.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.190, 74.680), stdev = 33.258
[info]   CI (99.9%): [≈ 0, 143.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.36% complete, ETA 00:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24359.064 ops/s
[info] # Warmup Iteration   2: 99647.669 ops/s
[info] # Warmup Iteration   3: 126221.265 ops/s
[info] # Warmup Iteration   4: 131027.480 ops/s
[info] # Warmup Iteration   5: 129781.838 ops/s
[info] Iteration   1: 129792.325 ops/s
[info]                  ·gc.alloc.rate:                   2042.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              24762.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24336.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 132217.760 ops/s
[info]                  ·gc.alloc.rate:                   2077.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              24722.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23859.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 132382.935 ops/s
[info]                  ·gc.alloc.rate:               2093.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          24881.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23757.481 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 128804.160 ops/s
[info]                  ·gc.alloc.rate:               2038.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          24911.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24417.098 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 126873.457 ops/s
[info]                  ·gc.alloc.rate:               2022.488 MB/sec
[info]                  ·gc.alloc.rate.norm:          25086.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24835.064 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   130014.127 ±(99.9%) 8998.542 ops/s [Average]
[info]   (min, avg, max) = (126873.457, 130014.127, 132382.935), stdev = 2336.893
[info]   CI (99.9%): [121015.585, 139012.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2054.912 ±(99.9%) 112.830 MB/sec [Average]
[info]   (min, avg, max) = (2022.488, 2054.912, 2093.114), stdev = 29.302
[info]   CI (99.9%): [1942.082, 2167.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24873.080 ±(99.9%) 551.414 B/op [Average]
[info]   (min, avg, max) = (24722.855, 24873.080, 25086.586), stdev = 143.200
[info]   CI (99.9%): [24321.666, 25424.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2002.302 ±(99.9%) 15.050 MB/sec [Average]
[info]   (min, avg, max) = (1998.481, 2002.302, 2007.310), stdev = 3.908
[info]   CI (99.9%): [1987.252, 2017.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24241.063 ±(99.9%) 1692.497 B/op [Average]
[info]   (min, avg, max) = (23757.481, 24241.063, 24835.064), stdev = 439.536
[info]   CI (99.9%): [22548.567, 25933.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 6.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 3.623), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 6.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.113 ±(99.9%) 73.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.113, 43.920), stdev = 19.020
[info]   CI (99.9%): [≈ 0, 84.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.56% complete, ETA 00:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68867.402 ops/s
[info] # Warmup Iteration   2: 165503.646 ops/s
[info] # Warmup Iteration   3: 176298.245 ops/s
[info] # Warmup Iteration   4: 176629.378 ops/s
[info] # Warmup Iteration   5: 181642.401 ops/s
[info] Iteration   1: 183138.866 ops/s
[info]                  ·gc.alloc.rate:                   2768.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              23786.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23080.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 183246.137 ops/s
[info]                  ·gc.alloc.rate:                   2785.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              23920.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23061.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 183156.296 ops/s
[info]                  ·gc.alloc.rate:                   2797.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              24035.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23102.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 183362.957 ops/s
[info]                  ·gc.alloc.rate:               2801.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          24040.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23123.375 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 180764.685 ops/s
[info]                  ·gc.alloc.rate:               2763.471 MB/sec
[info]                  ·gc.alloc.rate.norm:          24058.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23512.675 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   182733.788 ±(99.9%) 4252.445 ops/s [Average]
[info]   (min, avg, max) = (180764.685, 182733.788, 183362.957), stdev = 1104.346
[info]   CI (99.9%): [178481.343, 186986.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2783.095 ±(99.9%) 65.148 MB/sec [Average]
[info]   (min, avg, max) = (2763.471, 2783.095, 2801.176), stdev = 16.919
[info]   CI (99.9%): [2717.947, 2848.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23968.320 ±(99.9%) 444.740 B/op [Average]
[info]   (min, avg, max) = (23786.247, 23968.320, 24058.492), stdev = 115.498
[info]   CI (99.9%): [23523.580, 24413.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2691.024 ±(99.9%) 25.008 MB/sec [Average]
[info]   (min, avg, max) = (2685.330, 2691.024, 2700.776), stdev = 6.495
[info]   CI (99.9%): [2666.016, 2716.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23176.084 ±(99.9%) 730.022 B/op [Average]
[info]   (min, avg, max) = (23061.406, 23176.084, 23512.675), stdev = 189.584
[info]   CI (99.9%): [22446.062, 23906.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.399 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.250), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.608 ±(99.9%) 3.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.145), stdev = 0.890
[info]   CI (99.9%): [≈ 0, 4.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.76% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7084.077 ops/s
[info] # Warmup Iteration   2: 48214.768 ops/s
[info] # Warmup Iteration   3: 56494.450 ops/s
[info] # Warmup Iteration   4: 57660.049 ops/s
[info] # Warmup Iteration   5: 57299.830 ops/s
[info] Iteration   1: 58898.559 ops/s
[info]                  ·gc.alloc.rate:                   2973.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              79458.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71304.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 58971.922 ops/s
[info]                  ·gc.alloc.rate:                   3005.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              80176.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89010.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.111 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 58860.166 ops/s
[info]                  ·gc.alloc.rate:               2987.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          79862.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71568.710 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 59008.798 ops/s
[info]                  ·gc.alloc.rate:               2994.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          79854.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71597.589 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 58883.599 ops/s
[info]                  ·gc.alloc.rate:               3016.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          80613.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90026.465 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   58924.609 ±(99.9%) 242.312 ops/s [Average]
[info]   (min, avg, max) = (58860.166, 58924.609, 59008.798), stdev = 62.928
[info]   CI (99.9%): [58682.297, 59166.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2995.384 ±(99.9%) 63.171 MB/sec [Average]
[info]   (min, avg, max) = (2973.894, 2995.384, 3016.519), stdev = 16.405
[info]   CI (99.9%): [2932.213, 3058.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79993.070 ±(99.9%) 1657.009 B/op [Average]
[info]   (min, avg, max) = (79458.638, 79993.070, 80613.571), stdev = 430.320
[info]   CI (99.9%): [78336.061, 81650.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2947.057 ±(99.9%) 1426.197 MB/sec [Average]
[info]   (min, avg, max) = (2668.695, 2947.057, 3368.744), stdev = 370.379
[info]   CI (99.9%): [1520.860, 4373.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78701.555 ±(99.9%) 38051.437 B/op [Average]
[info]   (min, avg, max) = (71304.094, 78701.555, 90026.465), stdev = 9881.837
[info]   CI (99.9%): [40650.119, 116752.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.445 ±(99.9%) 2.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 1.112), stdev = 0.609
[info]   CI (99.9%): [≈ 0, 2.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89.96% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48856.077 ops/s
[info] # Warmup Iteration   2: 112210.965 ops/s
[info] # Warmup Iteration   3: 112616.701 ops/s
[info] # Warmup Iteration   4: 114922.468 ops/s
[info] # Warmup Iteration   5: 113541.691 ops/s
[info] Iteration   1: 114011.530 ops/s
[info]                  ·gc.alloc.rate:                   2270.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              31334.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27825.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.345 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 114877.939 ops/s
[info]                  ·gc.alloc.rate:                   2298.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              31482.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27560.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.856 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 116342.185 ops/s
[info]                  ·gc.alloc.rate:                   2354.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              31852.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36278.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.126 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 116278.633 ops/s
[info]                  ·gc.alloc.rate:               2327.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          31492.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27256.466 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 115675.432 ops/s
[info]                  ·gc.alloc.rate:                   2316.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              31503.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27455.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   115437.144 ±(99.9%) 3816.350 ops/s [Average]
[info]   (min, avg, max) = (114011.530, 115437.144, 116342.185), stdev = 991.094
[info]   CI (99.9%): [111620.794, 119253.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2313.285 ±(99.9%) 121.963 MB/sec [Average]
[info]   (min, avg, max) = (2270.141, 2313.285, 2354.798), stdev = 31.674
[info]   CI (99.9%): [2191.321, 2435.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   31533.056 ±(99.9%) 736.656 B/op [Average]
[info]   (min, avg, max) = (31334.251, 31533.056, 31852.149), stdev = 191.307
[info]   CI (99.9%): [30796.400, 32269.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2148.489 ±(99.9%) 1148.512 MB/sec [Average]
[info]   (min, avg, max) = (2011.802, 2148.489, 2682.023), stdev = 298.265
[info]   CI (99.9%): [999.977, 3297.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29275.164 ±(99.9%) 15095.632 B/op [Average]
[info]   (min, avg, max) = (27256.466, 29275.164, 36278.354), stdev = 3920.288
[info]   CI (99.9%): [14179.533, 44370.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.187 ±(99.9%) 1.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.187, 0.749), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2.579 ±(99.9%) 16.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.579, 10.345), stdev = 4.362
[info]   CI (99.9%): [≈ 0, 19.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.16% complete, ETA 00:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65608.873 ops/s
[info] # Warmup Iteration   2: 182223.220 ops/s
[info] # Warmup Iteration   3: 186947.754 ops/s
[info] # Warmup Iteration   4: 186771.714 ops/s
[info] # Warmup Iteration   5: 187144.823 ops/s
[info] Iteration   1: 188072.132 ops/s
[info]                  ·gc.alloc.rate:                   1325.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              11095.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11215.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 188364.285 ops/s
[info]                  ·gc.alloc.rate:                   1331.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              11122.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11209.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 188460.429 ops/s
[info]                  ·gc.alloc.rate:               1346.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          11245.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11208.916 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 189723.844 ops/s
[info]                  ·gc.alloc.rate:                   1330.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              11034.661 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11139.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 189905.538 ops/s
[info]                  ·gc.alloc.rate:                   1343.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              11136.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11106.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   188905.245 ±(99.9%) 3253.319 ops/s [Average]
[info]   (min, avg, max) = (188072.132, 188905.245, 189905.538), stdev = 844.877
[info]   CI (99.9%): [185651.926, 192158.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1335.625 ±(99.9%) 35.127 MB/sec [Average]
[info]   (min, avg, max) = (1325.912, 1335.625, 1346.723), stdev = 9.122
[info]   CI (99.9%): [1300.499, 1370.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11127.051 ±(99.9%) 296.990 B/op [Average]
[info]   (min, avg, max) = (11034.661, 11127.051, 11245.920), stdev = 77.127
[info]   CI (99.9%): [10830.061, 11424.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.495 ±(99.9%) 4.651 MB/sec [Average]
[info]   (min, avg, max) = (1340.271, 1341.495, 1342.982), stdev = 1.208
[info]   CI (99.9%): [1336.844, 1346.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11176.031 ±(99.9%) 190.597 B/op [Average]
[info]   (min, avg, max) = (11106.966, 11176.031, 11215.372), stdev = 49.498
[info]   CI (99.9%): [10985.434, 11366.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.560), stdev = 1.576
[info]   CI (99.9%): [≈ 0, 6.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.149 ±(99.9%) 50.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.149, 29.528), stdev = 13.071
[info]   CI (99.9%): [≈ 0, 56.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.36% complete, ETA 00:12:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153407.554 ops/s
[info] # Warmup Iteration   2: 437816.635 ops/s
[info] # Warmup Iteration   3: 453932.387 ops/s
[info] # Warmup Iteration   4: 457523.777 ops/s
[info] # Warmup Iteration   5: 467341.502 ops/s
[info] Iteration   1: 447785.088 ops/s
[info]                  ·gc.alloc.rate:                   398.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              1399.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1798.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 464090.887 ops/s
[info]                  ·gc.alloc.rate:               412.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          1399.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1734.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 466966.664 ops/s
[info]                  ·gc.alloc.rate:      403.657 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.343 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 443983.769 ops/s
[info]                  ·gc.alloc.rate:                   402.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              1427.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2359.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 464849.351 ops/s
[info]                  ·gc.alloc.rate:               415.617 MB/sec
[info]                  ·gc.alloc.rate.norm:          1407.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2254.170 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   457535.152 ±(99.9%) 41478.618 ops/s [Average]
[info]   (min, avg, max) = (443983.769, 457535.152, 466966.664), stdev = 10771.865
[info]   CI (99.9%): [416056.534, 499013.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   406.611 ±(99.9%) 28.170 MB/sec [Average]
[info]   (min, avg, max) = (398.260, 406.611, 415.617), stdev = 7.316
[info]   CI (99.9%): [378.441, 434.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1398.876 ±(99.9%) 93.578 B/op [Average]
[info]   (min, avg, max) = (1360.343, 1398.876, 1427.306), stdev = 24.302
[info]   CI (99.9%): [1305.298, 1492.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   470.968 ±(99.9%) 1056.371 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 470.968, 665.823), stdev = 274.336
[info]   CI (99.9%): [≈ 0, 1527.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1629.413 ±(99.9%) 3662.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1629.413, 2359.993), stdev = 951.133
[info]   CI (99.9%): [≈ 0, 5291.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.148), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.56% complete, ETA 00:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347428.368 ops/s
[info] # Warmup Iteration   2: 626299.469 ops/s
[info] # Warmup Iteration   3: 650682.858 ops/s
[info] # Warmup Iteration   4: 665077.911 ops/s
[info] # Warmup Iteration   5: 662297.848 ops/s
[info] Iteration   1: 652780.454 ops/s
[info]                  ·gc.alloc.rate:                   367.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              887.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 637732.271 ops/s
[info]                  ·gc.alloc.rate:               366.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          904.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1262.505 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 645764.290 ops/s
[info]                  ·gc.alloc.rate:      347.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 640586.232 ops/s
[info]                  ·gc.alloc.rate:               358.244 MB/sec
[info]                  ·gc.alloc.rate.norm:          880.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1647.173 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 642815.935 ops/s
[info]                  ·gc.alloc.rate:      346.380 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   643935.836 ±(99.9%) 22164.524 ops/s [Average]
[info]   (min, avg, max) = (637732.271, 643935.836, 652780.454), stdev = 5756.056
[info]   CI (99.9%): [621771.313, 666100.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.443 ±(99.9%) 38.894 MB/sec [Average]
[info]   (min, avg, max) = (346.380, 357.443, 367.981), stdev = 10.101
[info]   CI (99.9%): [318.549, 396.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   873.584 ±(99.9%) 96.343 B/op [Average]
[info]   (min, avg, max) = (848.001, 873.584, 904.726), stdev = 25.020
[info]   CI (99.9%): [777.242, 969.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.752 ±(99.9%) 1216.665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.752, 670.487), stdev = 315.964
[info]   CI (99.9%): [≈ 0, 1555.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   828.629 ±(99.9%) 2979.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 828.629, 1647.173), stdev = 773.855
[info]   CI (99.9%): [≈ 0, 3808.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:12:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380905.248 ops/s
[info] # Warmup Iteration   2: 685297.120 ops/s
[info] # Warmup Iteration   3: 712422.238 ops/s
[info] # Warmup Iteration   4: 711405.517 ops/s
[info] # Warmup Iteration   5: 711495.453 ops/s
[info] Iteration   1: 707133.215 ops/s
[info]                  ·gc.alloc.rate:      7.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 711486.561 ops/s
[info]                  ·gc.alloc.rate:      7.234 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 710787.449 ops/s
[info]                  ·gc.alloc.rate:      7.227 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 710613.237 ops/s
[info]                  ·gc.alloc.rate:      7.225 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 710235.699 ops/s
[info]                  ·gc.alloc.rate:      7.221 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   710051.232 ±(99.9%) 6519.678 ops/s [Average]
[info]   (min, avg, max) = (707133.215, 710051.232, 711486.561), stdev = 1693.140
[info]   CI (99.9%): [703531.554, 716570.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.219 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (7.190, 7.219, 7.234), stdev = 0.017
[info]   CI (99.9%): [7.154, 7.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.96% complete, ETA 00:12:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9749.954 ops/s
[info] # Warmup Iteration   2: 31985.689 ops/s
[info] # Warmup Iteration   3: 34319.306 ops/s
[info] # Warmup Iteration   4: 33698.130 ops/s
[info] # Warmup Iteration   5: 35205.472 ops/s
[info] Iteration   1: 34960.886 ops/s
[info]                  ·gc.alloc.rate:                   1884.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              84810.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60421.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34396.388 ops/s
[info]                  ·gc.alloc.rate:                   1880.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              86046.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92072.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34433.247 ops/s
[info]                  ·gc.alloc.rate:                   1881.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              86008.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91732.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.903 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 35468.232 ops/s
[info]                  ·gc.alloc.rate:               1924.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          85353.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88972.593 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 34641.747 ops/s
[info]                  ·gc.alloc.rate:                   1880.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              85423.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60781.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   34780.100 ±(99.9%) 1714.393 ops/s [Average]
[info]   (min, avg, max) = (34396.388, 34780.100, 35468.232), stdev = 445.223
[info]   CI (99.9%): [33065.706, 36494.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1890.274 ±(99.9%) 73.375 MB/sec [Average]
[info]   (min, avg, max) = (1880.411, 1890.274, 1924.257), stdev = 19.055
[info]   CI (99.9%): [1816.898, 1963.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85528.551 ±(99.9%) 1978.113 B/op [Average]
[info]   (min, avg, max) = (84810.289, 85528.551, 86046.575), stdev = 513.710
[info]   CI (99.9%): [83550.438, 87506.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1741.125 ±(99.9%) 1409.550 MB/sec [Average]
[info]   (min, avg, max) = (1337.956, 1741.125, 2012.353), stdev = 366.056
[info]   CI (99.9%): [331.575, 3150.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78796.010 ±(99.9%) 64126.081 B/op [Average]
[info]   (min, avg, max) = (60421.535, 78796.010, 92072.318), stdev = 16653.339
[info]   CI (99.9%): [14669.930, 142922.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.913), stdev = 1.732
[info]   CI (99.9%): [≈ 0, 7.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.325 ±(99.9%) 305.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.325, 179.055), stdev = 79.249
[info]   CI (99.9%): [≈ 0, 342.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91.16% complete, ETA 00:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50509.684 ops/s
[info] # Warmup Iteration   2: 115900.023 ops/s
[info] # Warmup Iteration   3: 116593.326 ops/s
[info] # Warmup Iteration   4: 120341.430 ops/s
[info] # Warmup Iteration   5: 120874.957 ops/s
[info] Iteration   1: 120043.959 ops/s
[info]                  ·gc.alloc.rate:                   1287.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              16878.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17614.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 120008.140 ops/s
[info]                  ·gc.alloc.rate:               1283.535 MB/sec
[info]                  ·gc.alloc.rate.norm:          16830.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17627.530 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 120172.572 ops/s
[info]                  ·gc.alloc.rate:                   1296.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              16974.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17621.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 120385.730 ops/s
[info]                  ·gc.alloc.rate:                   1310.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              17136.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17591.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 120489.703 ops/s
[info]                  ·gc.alloc.rate:                   1299.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              16973.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17541.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   120220.021 ±(99.9%) 813.049 ops/s [Average]
[info]   (min, avg, max) = (120008.140, 120220.021, 120489.703), stdev = 211.146
[info]   CI (99.9%): [119406.972, 121033.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1295.514 ±(99.9%) 41.301 MB/sec [Average]
[info]   (min, avg, max) = (1283.535, 1295.514, 1310.842), stdev = 10.726
[info]   CI (99.9%): [1254.213, 1336.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16958.463 ±(99.9%) 451.473 B/op [Average]
[info]   (min, avg, max) = (16830.167, 16958.463, 17136.214), stdev = 117.246
[info]   CI (99.9%): [16506.990, 17409.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344.459 ±(99.9%) 4.581 MB/sec [Average]
[info]   (min, avg, max) = (1343.012, 1344.459, 1345.659), stdev = 1.190
[info]   CI (99.9%): [1339.878, 1349.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17599.325 ±(99.9%) 136.119 B/op [Average]
[info]   (min, avg, max) = (17541.089, 17599.325, 17627.530), stdev = 35.350
[info]   CI (99.9%): [17463.206, 17735.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 5.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.248), stdev = 1.443
[info]   CI (99.9%): [≈ 0, 6.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8.709 ±(99.9%) 72.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.709, 42.454), stdev = 18.865
[info]   CI (99.9%): [≈ 0, 81.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.37% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117909.992 ops/s
[info] # Warmup Iteration   2: 3355460.390 ops/s
[info] # Warmup Iteration   3: 3623643.415 ops/s
[info] # Warmup Iteration   4: 3659585.857 ops/s
[info] # Warmup Iteration   5: 3655827.887 ops/s
[info] Iteration   1: 3629742.790 ops/s
[info]                  ·gc.alloc.rate:               2901.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          1257.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1162.251 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 3629715.476 ops/s
[info]                  ·gc.alloc.rate:                   2955.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              1281.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3353.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1454.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3669013.550 ops/s
[info]                  ·gc.alloc.rate:               2959.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          1269.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1153.709 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 3675069.955 ops/s
[info]                  ·gc.alloc.rate:                   2965.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              1269.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1154.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3666329.155 ops/s
[info]                  ·gc.alloc.rate:                   2959.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1270.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1160.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3653974.185 ±(99.9%) 86092.354 ops/s [Average]
[info]   (min, avg, max) = (3629715.476, 3653974.185, 3675069.955), stdev = 22357.911
[info]   CI (99.9%): [3567881.831, 3740066.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2948.245 ±(99.9%) 101.484 MB/sec [Average]
[info]   (min, avg, max) = (2901.481, 2948.245, 2965.096), stdev = 26.355
[info]   CI (99.9%): [2846.761, 3049.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1269.766 ±(99.9%) 32.092 B/op [Average]
[info]   (min, avg, max) = (1257.934, 1269.766, 1281.474), stdev = 8.334
[info]   CI (99.9%): [1237.674, 1301.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2824.755 ±(99.9%) 1139.296 MB/sec [Average]
[info]   (min, avg, max) = (2680.785, 2824.755, 3353.822), stdev = 295.872
[info]   CI (99.9%): [1685.458, 3964.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1216.985 ±(99.9%) 510.527 B/op [Average]
[info]   (min, avg, max) = (1153.709, 1216.985, 1454.066), stdev = 132.582
[info]   CI (99.9%): [706.457, 1727.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.57% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.654 ops/s
[info] # Warmup Iteration   2: 5779323.743 ops/s
[info] # Warmup Iteration   3: 5790473.540 ops/s
[info] # Warmup Iteration   4: 6012126.372 ops/s
[info] # Warmup Iteration   5: 5999572.528 ops/s
[info] Iteration   1: 6017274.554 ops/s
[info]                  ·gc.alloc.rate:                   1152.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              301.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6004167.170 ops/s
[info]                  ·gc.alloc.rate:               1163.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 349.584 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 5979913.463 ops/s
[info]                  ·gc.alloc.rate:               1169.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 351.358 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 6025569.850 ops/s
[info]                  ·gc.alloc.rate:               1156.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          301.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5999947.767 ops/s
[info]                  ·gc.alloc.rate:                   1167.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6005374.561 ±(99.9%) 67486.173 ops/s [Average]
[info]   (min, avg, max) = (5979913.463, 6005374.561, 6025569.850), stdev = 17525.945
[info]   CI (99.9%): [5937888.388, 6072860.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1161.673 ±(99.9%) 28.263 MB/sec [Average]
[info]   (min, avg, max) = (1152.131, 1161.673, 1169.049), stdev = 7.340
[info]   CI (99.9%): [1133.410, 1189.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.411 ±(99.9%) 10.530 B/op [Average]
[info]   (min, avg, max) = (301.298, 304.411, 307.639), stdev = 2.734
[info]   CI (99.9%): [293.882, 314.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1068.096 ±(99.9%) 1409.082 MB/sec [Average]
[info]   (min, avg, max) = (666.564, 1068.096, 1337.008), stdev = 365.934
[info]   CI (99.9%): [≈ 0, 2477.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   280.074 ±(99.9%) 371.554 B/op [Average]
[info]   (min, avg, max) = (174.316, 280.074, 351.358), stdev = 96.491
[info]   CI (99.9%): [≈ 0, 651.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.831 ±(99.9%) 7.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 4.138), stdev = 1.849
[info]   CI (99.9%): [≈ 0, 7.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.218 ±(99.9%) 1.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 1.085), stdev = 0.485
[info]   CI (99.9%): [≈ 0, 2.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.77% complete, ETA 00:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 900920.218 ops/s
[info] # Warmup Iteration   2: 3796639.960 ops/s
[info] # Warmup Iteration   3: 4126131.284 ops/s
[info] # Warmup Iteration   4: 4111484.045 ops/s
[info] # Warmup Iteration   5: 4151649.872 ops/s
[info] Iteration   1: 4138196.117 ops/s
[info]                  ·gc.alloc.rate:                   2280.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              867.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4132321.062 ops/s
[info]                  ·gc.alloc.rate:                   2264.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              862.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4136698.114 ops/s
[info]                  ·gc.alloc.rate:               2313.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1016.297 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4134206.010 ops/s
[info]                  ·gc.alloc.rate:               2286.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 764.161 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4029219.647 ops/s
[info]                  ·gc.alloc.rate:                   2230.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     785.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4114128.190 ±(99.9%) 182978.802 ops/s [Average]
[info]   (min, avg, max) = (4029219.647, 4114128.190, 4138196.117), stdev = 47519.014
[info]   CI (99.9%): [3931149.388, 4297106.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2274.772 ±(99.9%) 117.637 MB/sec [Average]
[info]   (min, avg, max) = (2230.186, 2274.772, 2313.112), stdev = 30.550
[info]   CI (99.9%): [2157.135, 2392.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   870.139 ±(99.9%) 24.999 B/op [Average]
[info]   (min, avg, max) = (862.235, 870.139, 879.951), stdev = 6.492
[info]   CI (99.9%): [845.140, 895.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2140.603 ±(99.9%) 1142.882 MB/sec [Average]
[info]   (min, avg, max) = (2003.989, 2140.603, 2671.521), stdev = 296.803
[info]   CI (99.9%): [997.721, 3283.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   818.624 ±(99.9%) 427.023 B/op [Average]
[info]   (min, avg, max) = (763.175, 818.624, 1016.297), stdev = 110.897
[info]   CI (99.9%): [391.601, 1245.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.935), stdev = 1.755
[info]   CI (99.9%): [≈ 0, 7.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.302 ±(99.9%) 2.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.496), stdev = 0.667
[info]   CI (99.9%): [≈ 0, 2.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.97% complete, ETA 00:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3288402.942 ops/s
[info] # Warmup Iteration   2: 6625492.960 ops/s
[info] # Warmup Iteration   3: 6977829.515 ops/s
[info] # Warmup Iteration   4: 6967184.105 ops/s
[info] # Warmup Iteration   5: 6657813.918 ops/s
[info] Iteration   1: 6846249.329 ops/s
[info]                  ·gc.alloc.rate:               1340.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 309.095 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 6857313.350 ops/s
[info]                  ·gc.alloc.rate:                   1330.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6944203.502 ops/s
[info]                  ·gc.alloc.rate:               1330.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          301.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 152.554 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6945724.874 ops/s
[info]                  ·gc.alloc.rate:                   1359.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6946769.437 ops/s
[info]                  ·gc.alloc.rate:                   1346.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6908052.098 ±(99.9%) 198403.444 ops/s [Average]
[info]   (min, avg, max) = (6846249.329, 6908052.098, 6946769.437), stdev = 51524.744
[info]   CI (99.9%): [6709648.655, 7106455.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1341.782 ±(99.9%) 46.921 MB/sec [Average]
[info]   (min, avg, max) = (1330.839, 1341.782, 1359.926), stdev = 12.185
[info]   CI (99.9%): [1294.861, 1388.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   305.664 ±(99.9%) 10.350 B/op [Average]
[info]   (min, avg, max) = (301.610, 305.664, 308.121), stdev = 2.688
[info]   CI (99.9%): [295.314, 316.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.031 ±(99.9%) 1157.867 MB/sec [Average]
[info]   (min, avg, max) = (673.136, 1211.031, 1347.021), stdev = 300.694
[info]   CI (99.9%): [53.165, 2368.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   276.044 ±(99.9%) 265.940 B/op [Average]
[info]   (min, avg, max) = (152.554, 276.044, 309.095), stdev = 69.064
[info]   CI (99.9%): [10.104, 541.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.796 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.810), stdev = 1.246
[info]   CI (99.9%): [≈ 0, 5.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 1.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.637), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.17% complete, ETA 00:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1110906.640 ops/s
[info] # Warmup Iteration   2: 3915076.951 ops/s
[info] # Warmup Iteration   3: 4113351.082 ops/s
[info] # Warmup Iteration   4: 4231216.466 ops/s
[info] # Warmup Iteration   5: 4208451.620 ops/s
[info] Iteration   1: 4250487.298 ops/s
[info]                  ·gc.alloc.rate:                   2426.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              898.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4278769.493 ops/s
[info]                  ·gc.alloc.rate:                   2450.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     983.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4273441.923 ops/s
[info]                  ·gc.alloc.rate:               2445.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          900.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 739.149 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4240511.700 ops/s
[info]                  ·gc.alloc.rate:               2455.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          911.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 995.232 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 4307096.787 ops/s
[info]                  ·gc.alloc.rate:               2466.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          901.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 736.678 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4270061.440 ±(99.9%) 100324.036 ops/s [Average]
[info]   (min, avg, max) = (4240511.700, 4270061.440, 4307096.787), stdev = 26053.833
[info]   CI (99.9%): [4169737.405, 4370385.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2449.111 ±(99.9%) 56.676 MB/sec [Average]
[info]   (min, avg, max) = (2426.816, 2449.111, 2466.740), stdev = 14.719
[info]   CI (99.9%): [2392.435, 2505.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   902.637 ±(99.9%) 19.371 B/op [Average]
[info]   (min, avg, max) = (898.526, 902.637, 911.402), stdev = 5.031
[info]   CI (99.9%): [883.266, 922.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2277.771 ±(99.9%) 1406.423 MB/sec [Average]
[info]   (min, avg, max) = (2007.100, 2277.771, 2681.685), stdev = 365.244
[info]   CI (99.9%): [871.348, 3684.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   839.740 ±(99.9%) 526.272 B/op [Average]
[info]   (min, avg, max) = (736.678, 839.740, 995.232), stdev = 136.671
[info]   CI (99.9%): [313.468, 1366.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.479), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.177), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92.37% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1465355.906 ops/s
[info] # Warmup Iteration   2: 3785385.770 ops/s
[info] # Warmup Iteration   3: 3906216.310 ops/s
[info] # Warmup Iteration   4: 3949019.700 ops/s
[info] # Warmup Iteration   5: 3940621.560 ops/s
[info] Iteration   1: 3888738.747 ops/s
[info]                  ·gc.alloc.rate:                   2199.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              890.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     817.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3846427.684 ops/s
[info]                  ·gc.alloc.rate:                   2191.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1099.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3991325.201 ops/s
[info]                  ·gc.alloc.rate:                   2269.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3978833.089 ops/s
[info]                  ·gc.alloc.rate:               2264.584 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 797.713 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3989843.263 ops/s
[info]                  ·gc.alloc.rate:                   2271.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   3939033.597 ±(99.9%) 258348.226 ops/s [Average]
[info]   (min, avg, max) = (3846427.684, 3939033.597, 3991325.201), stdev = 67092.214
[info]   CI (99.9%): [3680685.371, 4197381.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2239.362 ±(99.9%) 155.058 MB/sec [Average]
[info]   (min, avg, max) = (2191.251, 2239.362, 2271.435), stdev = 40.268
[info]   CI (99.9%): [2084.303, 2394.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   894.630 ±(99.9%) 9.817 B/op [Average]
[info]   (min, avg, max) = (890.165, 894.630, 896.526), stdev = 2.549
[info]   CI (99.9%): [884.813, 904.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2151.270 ±(99.9%) 1152.347 MB/sec [Average]
[info]   (min, avg, max) = (2014.349, 2151.270, 2686.591), stdev = 299.261
[info]   CI (99.9%): [998.923, 3303.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   860.928 ±(99.9%) 514.090 B/op [Average]
[info]   (min, avg, max) = (794.309, 860.928, 1099.189), stdev = 133.508
[info]   CI (99.9%): [346.837, 1375.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.081), stdev = 1.356
[info]   CI (99.9%): [≈ 0, 5.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.266 ±(99.9%) 2.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.247), stdev = 0.549
[info]   CI (99.9%): [≈ 0, 2.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.57% complete, ETA 00:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035205.804 ops/s
[info] # Warmup Iteration   2: 2030256.371 ops/s
[info] # Warmup Iteration   3: 2187670.951 ops/s
[info] # Warmup Iteration   4: 2162761.100 ops/s
[info] # Warmup Iteration   5: 2202490.208 ops/s
[info] Iteration   1: 2191533.990 ops/s
[info]                  ·gc.alloc.rate:               1301.059 MB/sec
[info]                  ·gc.alloc.rate.norm:          934.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 963.406 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 2178081.517 ops/s
[info]                  ·gc.alloc.rate:                   1316.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2187348.541 ops/s
[info]                  ·gc.alloc.rate:               1306.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          940.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 966.277 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2193215.741 ops/s
[info]                  ·gc.alloc.rate:                   1324.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2189397.230 ops/s
[info]                  ·gc.alloc.rate:                   1321.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2187915.404 ±(99.9%) 22814.068 ops/s [Average]
[info]   (min, avg, max) = (2178081.517, 2187915.404, 2193215.741), stdev = 5924.741
[info]   CI (99.9%): [2165101.336, 2210729.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1314.025 ±(99.9%) 38.069 MB/sec [Average]
[info]   (min, avg, max) = (1301.059, 1314.025, 1324.373), stdev = 9.886
[info]   CI (99.9%): [1275.956, 1352.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   945.177 ±(99.9%) 29.059 B/op [Average]
[info]   (min, avg, max) = (934.266, 945.177, 951.018), stdev = 7.546
[info]   CI (99.9%): [916.118, 974.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.600 ±(99.9%) 4.359 MB/sec [Average]
[info]   (min, avg, max) = (1341.635, 1342.600, 1344.357), stdev = 1.132
[info]   CI (99.9%): [1338.242, 1346.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   965.731 ±(99.9%) 9.821 B/op [Average]
[info]   (min, avg, max) = (963.406, 965.731, 969.904), stdev = 2.550
[info]   CI (99.9%): [955.910, 975.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.637 ±(99.9%) 5.396 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.637, 3.144), stdev = 1.401
[info]   CI (99.9%): [≈ 0, 6.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.457 ±(99.9%) 3.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.256), stdev = 1.005
[info]   CI (99.9%): [≈ 0, 4.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.77% complete, ETA 00:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.836 ops/s
[info] # Warmup Iteration   2: 5313199.580 ops/s
[info] # Warmup Iteration   3: 5710037.235 ops/s
[info] # Warmup Iteration   4: 5795669.821 ops/s
[info] # Warmup Iteration   5: 5890611.599 ops/s
[info] Iteration   1: 5882365.497 ops/s
[info]                  ·gc.alloc.rate:               585.510 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 5885047.021 ops/s
[info]                  ·gc.alloc.rate:               592.652 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.139 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5819202.305 ops/s
[info]                  ·gc.alloc.rate:                   579.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5890050.655 ops/s
[info]                  ·gc.alloc.rate:               594.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          158.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.078 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5906609.286 ops/s
[info]                  ·gc.alloc.rate:      583.666 MB/sec
[info]                  ·gc.alloc.rate.norm: 155.507 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5876654.953 ±(99.9%) 128875.116 ops/s [Average]
[info]   (min, avg, max) = (5819202.305, 5876654.953, 5906609.286), stdev = 33468.458
[info]   CI (99.9%): [5747779.836, 6005530.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   587.057 ±(99.9%) 24.305 MB/sec [Average]
[info]   (min, avg, max) = (579.180, 587.057, 594.276), stdev = 6.312
[info]   CI (99.9%): [562.752, 611.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.206 ±(99.9%) 5.322 B/op [Average]
[info]   (min, avg, max) = (155.507, 157.206, 158.779), stdev = 1.382
[info]   CI (99.9%): [151.884, 162.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.067 ±(99.9%) 1147.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.067, 666.507), stdev = 297.994
[info]   CI (99.9%): [≈ 0, 1680.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   142.934 ±(99.9%) 307.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.934, 180.235), stdev = 79.908
[info]   CI (99.9%): [≈ 0, 450.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.97% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 986556.325 ops/s
[info] # Warmup Iteration   2: 4165993.023 ops/s
[info] # Warmup Iteration   3: 4343065.197 ops/s
[info] # Warmup Iteration   4: 4334457.824 ops/s
[info] # Warmup Iteration   5: 4315728.822 ops/s
[info] Iteration   1: 4351077.678 ops/s
[info]                  ·gc.alloc.rate:               1390.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          502.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 484.410 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 4352465.557 ops/s
[info]                  ·gc.alloc.rate:                   1377.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              498.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4370077.579 ops/s
[info]                  ·gc.alloc.rate:                   1395.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              502.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4387421.268 ops/s
[info]                  ·gc.alloc.rate:                   1411.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              506.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     480.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4388390.094 ops/s
[info]                  ·gc.alloc.rate:               1400.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          502.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479.498 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4369886.435 ±(99.9%) 69609.073 ops/s [Average]
[info]   (min, avg, max) = (4351077.678, 4369886.435, 4388390.094), stdev = 18077.255
[info]   CI (99.9%): [4300277.362, 4439495.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1395.221 ±(99.9%) 48.333 MB/sec [Average]
[info]   (min, avg, max) = (1377.758, 1395.221, 1411.673), stdev = 12.552
[info]   CI (99.9%): [1346.887, 1443.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   502.444 ±(99.9%) 11.213 B/op [Average]
[info]   (min, avg, max) = (498.130, 502.444, 506.329), stdev = 2.912
[info]   CI (99.9%): [491.231, 513.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339.464 ±(99.9%) 5.487 MB/sec [Average]
[info]   (min, avg, max) = (1337.146, 1339.464, 1340.965), stdev = 1.425
[info]   CI (99.9%): [1333.977, 1344.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   482.378 ±(99.9%) 8.729 B/op [Average]
[info]   (min, avg, max) = (479.498, 482.378, 484.501), stdev = 2.267
[info]   CI (99.9%): [473.649, 491.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 5.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.310), stdev = 1.442
[info]   CI (99.9%): [≈ 0, 6.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.268 ±(99.9%) 2.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.268, 1.192), stdev = 0.519
[info]   CI (99.9%): [≈ 0, 2.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.17% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2762183.352 ops/s
[info] # Warmup Iteration   2: 5807710.303 ops/s
[info] # Warmup Iteration   3: 5805027.611 ops/s
[info] # Warmup Iteration   4: 5828308.030 ops/s
[info] # Warmup Iteration   5: 5811601.942 ops/s
[info] Iteration   1: 5565640.479 ops/s
[info]                  ·gc.alloc.rate:               573.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          162.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189.691 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5749927.777 ops/s
[info]                  ·gc.alloc.rate:      568.501 MB/sec
[info]                  ·gc.alloc.rate.norm: 155.590 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5903095.522 ops/s
[info]                  ·gc.alloc.rate:               579.961 MB/sec
[info]                  ·gc.alloc.rate.norm:          154.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.838 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 5921557.606 ops/s
[info]                  ·gc.alloc.rate:                   593.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5940486.674 ops/s
[info]                  ·gc.alloc.rate:               592.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.891 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   5816141.611 ±(99.9%) 612695.105 ops/s [Average]
[info]   (min, avg, max) = (5565640.479, 5816141.611, 5940486.674), stdev = 159114.973
[info]   CI (99.9%): [5203446.507, 6428836.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   581.578 ±(99.9%) 43.575 MB/sec [Average]
[info]   (min, avg, max) = (568.501, 581.578, 593.707), stdev = 11.316
[info]   CI (99.9%): [538.004, 625.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   157.405 ±(99.9%) 11.078 B/op [Average]
[info]   (min, avg, max) = (154.618, 157.405, 162.067), stdev = 2.877
[info]   CI (99.9%): [146.326, 168.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.945 ±(99.9%) 1155.814 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.945, 671.573), stdev = 300.161
[info]   CI (99.9%): [≈ 0, 1692.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   144.975 ±(99.9%) 312.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 144.975, 189.691), stdev = 81.192
[info]   CI (99.9%): [≈ 0, 457.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.37% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3966209.372 ops/s
[info] # Warmup Iteration   2: 6333460.136 ops/s
[info] # Warmup Iteration   3: 6459495.975 ops/s
[info] # Warmup Iteration   4: 6455253.796 ops/s
[info] # Warmup Iteration   5: 6458657.400 ops/s
[info] Iteration   1: 6463602.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6463594.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6462119.950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6459144.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6448928.585 ops/s
[info]                  ·gc.alloc.rate:      0.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6459478.119 ±(99.9%) 23763.584 ops/s [Average]
[info]   (min, avg, max) = (6448928.585, 6459478.119, 6463602.802), stdev = 6171.327
[info]   CI (99.9%): [6435714.535, 6483241.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.034 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.008 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.008, 0.041), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.57% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1929437.847 ops/s
[info] # Warmup Iteration   2: 4357250.995 ops/s
[info] # Warmup Iteration   3: 4552954.348 ops/s
[info] # Warmup Iteration   4: 4539280.675 ops/s
[info] # Warmup Iteration   5: 4508737.159 ops/s
[info] Iteration   1: 4610411.342 ops/s
[info]                  ·gc.alloc.rate:                   1297.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              442.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4628735.606 ops/s
[info]                  ·gc.alloc.rate:                   1325.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              450.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4609170.227 ops/s
[info]                  ·gc.alloc.rate:                   1303.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.225 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4634138.621 ops/s
[info]                  ·gc.alloc.rate:                   1323.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4639386.324 ops/s
[info]                  ·gc.alloc.rate:                   1326.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     454.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4624368.424 ±(99.9%) 53281.409 ops/s [Average]
[info]   (min, avg, max) = (4609170.227, 4624368.424, 4639386.324), stdev = 13837.013
[info]   CI (99.9%): [4571087.015, 4677649.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1315.174 ±(99.9%) 51.984 MB/sec [Average]
[info]   (min, avg, max) = (1297.362, 1315.174, 1326.167), stdev = 13.500
[info]   CI (99.9%): [1263.190, 1367.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   447.567 ±(99.9%) 12.958 B/op [Average]
[info]   (min, avg, max) = (442.840, 447.567, 450.584), stdev = 3.365
[info]   CI (99.9%): [434.609, 460.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.702 ±(99.9%) 4.023 MB/sec [Average]
[info]   (min, avg, max) = (1340.318, 1341.702, 1343.020), stdev = 1.045
[info]   CI (99.9%): [1337.679, 1345.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   456.605 ±(99.9%) 5.606 B/op [Average]
[info]   (min, avg, max) = (454.673, 456.605, 458.317), stdev = 1.456
[info]   CI (99.9%): [450.999, 462.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.301 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.758, 3.685), stdev = 1.636
[info]   CI (99.9%): [≈ 0, 7.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.257 ±(99.9%) 2.140 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.257, 1.251), stdev = 0.556
[info]   CI (99.9%): [≈ 0, 2.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93.78% complete, ETA 00:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261062.776 ops/s
[info] # Warmup Iteration   2: 392819.375 ops/s
[info] # Warmup Iteration   3: 400944.417 ops/s
[info] # Warmup Iteration   4: 400951.764 ops/s
[info] # Warmup Iteration   5: 401637.642 ops/s
[info] Iteration   1: 402100.492 ops/s
[info]                  ·gc.alloc.rate:      386.337 MB/sec
[info]                  ·gc.alloc.rate.norm: 1512.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 398539.084 ops/s
[info]                  ·gc.alloc.rate:               393.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          1555.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2020.210 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 402506.649 ops/s
[info]                  ·gc.alloc.rate:      386.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 1512.220 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 400577.819 ops/s
[info]                  ·gc.alloc.rate:                   399.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2636.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 400581.258 ops/s
[info]                  ·gc.alloc.rate:               398.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          1565.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2636.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   400861.060 ±(99.9%) 6025.440 ops/s [Average]
[info]   (min, avg, max) = (398539.084, 400861.060, 402506.649), stdev = 1564.788
[info]   CI (99.9%): [394835.620, 406886.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   392.935 ±(99.9%) 23.773 MB/sec [Average]
[info]   (min, avg, max) = (386.337, 392.935, 399.180), stdev = 6.174
[info]   CI (99.9%): [369.163, 416.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   1542.638 ±(99.9%) 108.983 B/op [Average]
[info]   (min, avg, max) = (1512.001, 1542.638, 1568.279), stdev = 28.303
[info]   CI (99.9%): [1433.655, 1651.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   370.795 ±(99.9%) 1327.285 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.795, 671.165), stdev = 344.692
[info]   CI (99.9%): [≈ 0, 1698.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1458.736 ±(99.9%) 5218.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1458.736, 2636.763), stdev = 1355.215
[info]   CI (99.9%): [≈ 0, 6677.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.98% complete, ETA 00:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377623.428 ops/s
[info] # Warmup Iteration   2: 1406206.961 ops/s
[info] # Warmup Iteration   3: 1513384.821 ops/s
[info] # Warmup Iteration   4: 1514273.468 ops/s
[info] # Warmup Iteration   5: 1518402.019 ops/s
[info] Iteration   1: 1515003.994 ops/s
[info]                  ·gc.alloc.rate:                   2111.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              2193.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2091.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.670 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1513452.887 ops/s
[info]                  ·gc.alloc.rate:                   2115.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              2199.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2095.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1518836.098 ops/s
[info]                  ·gc.alloc.rate:               2114.573 MB/sec
[info]                  ·gc.alloc.rate.norm:          2190.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2091.081 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1515462.915 ops/s
[info]                  ·gc.alloc.rate:               2137.233 MB/sec
[info]                  ·gc.alloc.rate.norm:          2219.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2098.494 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 1514999.005 ops/s
[info]                  ·gc.alloc.rate:               2136.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          2219.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2102.631 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1515550.980 ±(99.9%) 7654.364 ops/s [Average]
[info]   (min, avg, max) = (1513452.887, 1515550.980, 1518836.098), stdev = 1987.814
[info]   CI (99.9%): [1507896.615, 1523205.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2123.157 ±(99.9%) 48.166 MB/sec [Average]
[info]   (min, avg, max) = (2111.989, 2123.157, 2137.233), stdev = 12.508
[info]   CI (99.9%): [2074.991, 2171.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2204.627 ±(99.9%) 52.828 B/op [Average]
[info]   (min, avg, max) = (2190.984, 2204.627, 2219.338), stdev = 13.719
[info]   CI (99.9%): [2151.799, 2257.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2018.302 ±(99.9%) 16.901 MB/sec [Average]
[info]   (min, avg, max) = (2013.173, 2018.302, 2024.162), stdev = 4.389
[info]   CI (99.9%): [2001.401, 2035.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2095.747 ±(99.9%) 19.055 B/op [Average]
[info]   (min, avg, max) = (2091.081, 2095.747, 2102.631), stdev = 4.948
[info]   CI (99.9%): [2076.692, 2114.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.645), stdev = 0.281
[info]   CI (99.9%): [≈ 0, 1.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.182 ±(99.9%) 1.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.670), stdev = 0.292
[info]   CI (99.9%): [≈ 0, 1.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.18% complete, ETA 00:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.579 ops/s
[info] # Warmup Iteration   2: 2563117.607 ops/s
[info] # Warmup Iteration   3: 2723882.846 ops/s
[info] # Warmup Iteration   4: 2860561.563 ops/s
[info] # Warmup Iteration   5: 2857617.466 ops/s
[info] Iteration   1: 2836473.465 ops/s
[info]                  ·gc.alloc.rate:                   549.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2851262.616 ops/s
[info]                  ·gc.alloc.rate:               560.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367.699 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2844305.742 ops/s
[info]                  ·gc.alloc.rate:                   553.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2774815.188 ops/s
[info]                  ·gc.alloc.rate:      521.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2748265.092 ops/s
[info]                  ·gc.alloc.rate:               530.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381.684 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2811024.421 ±(99.9%) 178798.613 ops/s [Average]
[info]   (min, avg, max) = (2748265.092, 2811024.421, 2851262.616), stdev = 46433.432
[info]   CI (99.9%): [2632225.807, 2989823.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   543.076 ±(99.9%) 62.455 MB/sec [Average]
[info]   (min, avg, max) = (521.956, 543.076, 560.322), stdev = 16.219
[info]   CI (99.9%): [480.621, 605.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   303.964 ±(99.9%) 18.943 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.964, 309.267), stdev = 4.919
[info]   CI (99.9%): [285.021, 322.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.127 ±(99.9%) 1147.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.127, 666.706), stdev = 298.027
[info]   CI (99.9%): [≈ 0, 1680.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   297.547 ±(99.9%) 640.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 297.547, 381.684), stdev = 166.430
[info]   CI (99.9%): [≈ 0, 938.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.38% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209591.515 ops/s
[info] # Warmup Iteration   2: 1474892.932 ops/s
[info] # Warmup Iteration   3: 1716577.494 ops/s
[info] # Warmup Iteration   4: 1706405.539 ops/s
[info] # Warmup Iteration   5: 1701321.211 ops/s
[info] Iteration   1: 1707208.600 ops/s
[info]                  ·gc.alloc.rate:                   933.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              860.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     615.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1717685.596 ops/s
[info]                  ·gc.alloc.rate:                   932.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              854.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     611.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1704219.101 ops/s
[info]                  ·gc.alloc.rate:                   943.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              871.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1716252.368 ops/s
[info]                  ·gc.alloc.rate:               930.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          853.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 613.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1702834.663 ops/s
[info]                  ·gc.alloc.rate:                   936.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              865.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1236.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1709640.066 ±(99.9%) 26543.305 ops/s [Average]
[info]   (min, avg, max) = (1702834.663, 1709640.066, 1717685.596), stdev = 6893.212
[info]   CI (99.9%): [1683096.761, 1736183.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   935.365 ±(99.9%) 19.733 MB/sec [Average]
[info]   (min, avg, max) = (930.844, 935.365, 943.870), stdev = 5.124
[info]   CI (99.9%): [915.633, 955.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   861.007 ±(99.9%) 29.152 B/op [Average]
[info]   (min, avg, max) = (853.544, 861.007, 871.571), stdev = 7.571
[info]   CI (99.9%): [831.855, 890.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.031 ±(99.9%) 1412.130 MB/sec [Average]
[info]   (min, avg, max) = (667.870, 936.031, 1338.389), stdev = 366.726
[info]   CI (99.9%): [≈ 0, 2348.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   862.493 ±(99.9%) 1312.276 B/op [Average]
[info]   (min, avg, max) = (611.903, 862.493, 1236.914), stdev = 340.794
[info]   CI (99.9%): [≈ 0, 2174.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.58% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 742812.854 ops/s
[info] # Warmup Iteration   2: 2381427.556 ops/s
[info] # Warmup Iteration   3: 2352913.779 ops/s
[info] # Warmup Iteration   4: 2363783.218 ops/s
[info] # Warmup Iteration   5: 2390273.901 ops/s
[info] Iteration   1: 2416181.437 ops/s
[info]                  ·gc.alloc.rate:               471.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 333.234 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2366625.161 ops/s
[info]                  ·gc.alloc.rate:      445.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.107 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2362545.444 ops/s
[info]                  ·gc.alloc.rate:               461.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 447.513 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2417897.803 ops/s
[info]                  ·gc.alloc.rate:               476.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          309.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 437.266 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2427536.975 ops/s
[info]                  ·gc.alloc.rate:      456.588 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2398157.364 ±(99.9%) 119310.982 ops/s [Average]
[info]   (min, avg, max) = (2362545.444, 2398157.364, 2427536.975), stdev = 30984.683
[info]   CI (99.9%): [2278846.382, 2517468.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   462.238 ±(99.9%) 46.841 MB/sec [Average]
[info]   (min, avg, max) = (445.315, 462.238, 476.154), stdev = 12.164
[info]   CI (99.9%): [415.397, 509.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   303.323 ±(99.9%) 25.906 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.323, 309.910), stdev = 6.728
[info]   CI (99.9%): [277.417, 329.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.058 ±(99.9%) 1328.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.058, 671.828), stdev = 344.984
[info]   CI (99.9%): [≈ 0, 1699.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   243.603 ±(99.9%) 873.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 243.603, 447.513), stdev = 226.828
[info]   CI (99.9%): [≈ 0, 1117.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 1.673
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.78% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390651.018 ops/s
[info] # Warmup Iteration   2: 1391963.471 ops/s
[info] # Warmup Iteration   3: 1661433.720 ops/s
[info] # Warmup Iteration   4: 1666562.132 ops/s
[info] # Warmup Iteration   5: 1698782.014 ops/s
[info] Iteration   1: 1672936.487 ops/s
[info]                  ·gc.alloc.rate:               951.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          895.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 628.536 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1720934.424 ops/s
[info]                  ·gc.alloc.rate:                   989.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1731425.334 ops/s
[info]                  ·gc.alloc.rate:               973.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 607.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1672443.480 ops/s
[info]                  ·gc.alloc.rate:                   957.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              901.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1696915.055 ops/s
[info]                  ·gc.alloc.rate:               966.268 MB/sec
[info]                  ·gc.alloc.rate.norm:          896.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 621.530 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1698930.956 ±(99.9%) 104063.606 ops/s [Average]
[info]   (min, avg, max) = (1672443.480, 1698930.956, 1731425.334), stdev = 27024.988
[info]   CI (99.9%): [1594867.350, 1802994.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   967.551 ±(99.9%) 56.371 MB/sec [Average]
[info]   (min, avg, max) = (951.494, 967.551, 989.064), stdev = 14.639
[info]   CI (99.9%): [911.180, 1023.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   896.259 ±(99.9%) 28.581 B/op [Average]
[info]   (min, avg, max) = (884.783, 896.259, 904.290), stdev = 7.422
[info]   CI (99.9%): [867.679, 924.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   936.682 ±(99.9%) 1411.129 MB/sec [Average]
[info]   (min, avg, max) = (668.167, 936.682, 1338.999), stdev = 366.466
[info]   CI (99.9%): [≈ 0, 2347.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   868.125 ±(99.9%) 1313.104 B/op [Average]
[info]   (min, avg, max) = (607.935, 868.125, 1259.996), stdev = 341.009
[info]   CI (99.9%): [≈ 0, 2181.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94.98% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484398.835 ops/s
[info] # Warmup Iteration   2: 1300237.575 ops/s
[info] # Warmup Iteration   3: 1408199.362 ops/s
[info] # Warmup Iteration   4: 1416453.082 ops/s
[info] # Warmup Iteration   5: 1380595.764 ops/s
[info] Iteration   1: 1419718.921 ops/s
[info]                  ·gc.alloc.rate:               1539.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          1706.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1491.617 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1414590.418 ops/s
[info]                  ·gc.alloc.rate:                   1523.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              1694.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1497.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1418557.542 ops/s
[info]                  ·gc.alloc.rate:                   1534.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1702.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1494.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1422636.762 ops/s
[info]                  ·gc.alloc.rate:                   1529.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              1692.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1487.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1418258.453 ops/s
[info]                  ·gc.alloc.rate:               1551.691 MB/sec
[info]                  ·gc.alloc.rate.norm:          1721.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2234.566 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1418752.419 ±(99.9%) 11164.622 ops/s [Average]
[info]   (min, avg, max) = (1414590.418, 1418752.419, 1422636.762), stdev = 2899.417
[info]   CI (99.9%): [1407587.797, 1429917.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1535.705 ±(99.9%) 41.252 MB/sec [Average]
[info]   (min, avg, max) = (1523.302, 1535.705, 1551.691), stdev = 10.713
[info]   CI (99.9%): [1494.452, 1576.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   1703.445 ±(99.9%) 45.069 B/op [Average]
[info]   (min, avg, max) = (1692.296, 1703.445, 1721.826), stdev = 11.704
[info]   CI (99.9%): [1658.376, 1748.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1479.418 ±(99.9%) 1150.231 MB/sec [Average]
[info]   (min, avg, max) = (1344.291, 1479.418, 2013.766), stdev = 298.711
[info]   CI (99.9%): [329.188, 2629.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1641.071 ±(99.9%) 1277.631 B/op [Average]
[info]   (min, avg, max) = (1487.089, 1641.071, 2234.566), stdev = 331.797
[info]   CI (99.9%): [363.440, 2918.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 5.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 3.060), stdev = 1.353
[info]   CI (99.9%): [≈ 0, 5.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.711 ±(99.9%) 5.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.711, 3.395), stdev = 1.501
[info]   CI (99.9%): [≈ 0, 6.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95.18% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267537.165 ops/s
[info] # Warmup Iteration   2: 1526994.691 ops/s
[info] # Warmup Iteration   3: 1803091.733 ops/s
[info] # Warmup Iteration   4: 1793731.389 ops/s
[info] # Warmup Iteration   5: 1863298.145 ops/s
[info] Iteration   1: 1856658.199 ops/s
[info]                  ·gc.alloc.rate:               1421.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          1205.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1137.209 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1880457.727 ops/s
[info]                  ·gc.alloc.rate:                   1423.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1191.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1123.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1884956.133 ops/s
[info]                  ·gc.alloc.rate:               1439.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1121.289 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1835730.503 ops/s
[info]                  ·gc.alloc.rate:                   1402.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.572 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1152.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1879604.518 ops/s
[info]                  ·gc.alloc.rate:                   1475.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1235.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1684.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1867481.416 ±(99.9%) 80449.493 ops/s [Average]
[info]   (min, avg, max) = (1835730.503, 1867481.416, 1884956.133), stdev = 20892.478
[info]   CI (99.9%): [1787031.923, 1947930.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1432.544 ±(99.9%) 104.317 MB/sec [Average]
[info]   (min, avg, max) = (1402.823, 1432.544, 1475.049), stdev = 27.091
[info]   CI (99.9%): [1328.227, 1536.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1207.193 ±(99.9%) 63.130 B/op [Average]
[info]   (min, avg, max) = (1191.478, 1207.193, 1235.011), stdev = 16.395
[info]   CI (99.9%): [1144.063, 1270.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1476.618 ±(99.9%) 1152.015 MB/sec [Average]
[info]   (min, avg, max) = (1341.646, 1476.618, 2011.794), stdev = 299.175
[info]   CI (99.9%): [324.603, 2628.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1243.746 ±(99.9%) 949.785 B/op [Average]
[info]   (min, avg, max) = (1121.289, 1243.746, 1684.411), stdev = 246.656
[info]   CI (99.9%): [293.961, 2193.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 5.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.164), stdev = 1.408
[info]   CI (99.9%): [≈ 0, 6.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.553 ±(99.9%) 4.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.553, 2.713), stdev = 1.207
[info]   CI (99.9%): [≈ 0, 5.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.692 ops/s
[info] # Warmup Iteration   2: 2441955.988 ops/s
[info] # Warmup Iteration   3: 2534268.306 ops/s
[info] # Warmup Iteration   4: 2708366.395 ops/s
[info] # Warmup Iteration   5: 2705429.136 ops/s
[info] Iteration   1: 2710959.028 ops/s
[info]                  ·gc.alloc.rate:                   716.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              416.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     386.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2710409.224 ops/s
[info]                  ·gc.alloc.rate:               727.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          422.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 386.980 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2711263.046 ops/s
[info]                  ·gc.alloc.rate:                   726.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              421.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     386.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2711470.557 ops/s
[info]                  ·gc.alloc.rate:                   724.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     387.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2705753.986 ops/s
[info]                  ·gc.alloc.rate:               720.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 387.866 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2709971.168 ±(99.9%) 9207.288 ops/s [Average]
[info]   (min, avg, max) = (2705753.986, 2709971.168, 2711470.557), stdev = 2391.103
[info]   CI (99.9%): [2700763.880, 2719178.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   723.138 ±(99.9%) 17.030 MB/sec [Average]
[info]   (min, avg, max) = (716.822, 723.138, 727.276), stdev = 4.423
[info]   CI (99.9%): [706.108, 740.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   419.919 ±(99.9%) 9.504 B/op [Average]
[info]   (min, avg, max) = (416.110, 419.919, 422.188), stdev = 2.468
[info]   CI (99.9%): [410.415, 429.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.537 ±(99.9%) 1.597 MB/sec [Average]
[info]   (min, avg, max) = (665.849, 666.537, 666.861), stdev = 0.415
[info]   CI (99.9%): [664.940, 668.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   387.052 ±(99.9%) 1.913 B/op [Average]
[info]   (min, avg, max) = (386.521, 387.052, 387.866), stdev = 0.497
[info]   CI (99.9%): [385.139, 388.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.025), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.58% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 324594.328 ops/s
[info] # Warmup Iteration   2: 2783640.247 ops/s
[info] # Warmup Iteration   3: 2914108.600 ops/s
[info] # Warmup Iteration   4: 2961448.399 ops/s
[info] # Warmup Iteration   5: 2976466.022 ops/s
[info] Iteration   1: 2958904.169 ops/s
[info]                  ·gc.alloc.rate:                   1294.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              688.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2909437.261 ops/s
[info]                  ·gc.alloc.rate:                   1283.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              694.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2982896.748 ops/s
[info]                  ·gc.alloc.rate:               1308.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          690.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 353.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2970567.103 ops/s
[info]                  ·gc.alloc.rate:                   1299.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              688.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2966580.733 ops/s
[info]                  ·gc.alloc.rate:                   1307.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2957677.203 ±(99.9%) 109083.470 ops/s [Average]
[info]   (min, avg, max) = (2909437.261, 2957677.203, 2982896.748), stdev = 28328.631
[info]   CI (99.9%): [2848593.733, 3066760.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1298.657 ±(99.9%) 39.390 MB/sec [Average]
[info]   (min, avg, max) = (1283.257, 1298.657, 1308.407), stdev = 10.229
[info]   CI (99.9%): [1259.267, 1338.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   691.019 ±(99.9%) 10.192 B/op [Average]
[info]   (min, avg, max) = (688.450, 691.019, 694.162), stdev = 2.647
[info]   CI (99.9%): [680.827, 701.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.459 ±(99.9%) 1152.317 MB/sec [Average]
[info]   (min, avg, max) = (670.142, 1205.459, 1340.654), stdev = 299.253
[info]   CI (99.9%): [53.142, 2357.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   642.070 ±(99.9%) 621.437 B/op [Average]
[info]   (min, avg, max) = (353.563, 642.070, 724.257), stdev = 161.385
[info]   CI (99.9%): [20.633, 1263.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.383), stdev = 1.500
[info]   CI (99.9%): [≈ 0, 6.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.371 ±(99.9%) 3.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.792), stdev = 0.795
[info]   CI (99.9%): [≈ 0, 3.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.78% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1301484.525 ops/s
[info] # Warmup Iteration   2: 3002580.424 ops/s
[info] # Warmup Iteration   3: 3341253.907 ops/s
[info] # Warmup Iteration   4: 3361761.418 ops/s
[info] # Warmup Iteration   5: 3359943.306 ops/s
[info] Iteration   1: 3364624.327 ops/s
[info]                  ·gc.alloc.rate:                   896.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              419.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3296577.148 ops/s
[info]                  ·gc.alloc.rate:               896.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          427.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 320.413 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3320325.980 ops/s
[info]                  ·gc.alloc.rate:                   892.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              423.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     636.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3340108.542 ops/s
[info]                  ·gc.alloc.rate:               881.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 316.867 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3349535.141 ops/s
[info]                  ·gc.alloc.rate:                   895.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              420.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3334234.228 ±(99.9%) 101945.365 ops/s [Average]
[info]   (min, avg, max) = (3296577.148, 3334234.228, 3364624.327), stdev = 26474.887
[info]   CI (99.9%): [3232288.863, 3436179.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   892.235 ±(99.9%) 24.456 MB/sec [Average]
[info]   (min, avg, max) = (881.154, 892.235, 896.198), stdev = 6.351
[info]   CI (99.9%): [867.779, 916.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   421.150 ±(99.9%) 18.166 B/op [Average]
[info]   (min, avg, max) = (415.157, 421.150, 427.839), stdev = 4.718
[info]   CI (99.9%): [402.984, 439.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.209 ±(99.9%) 1156.986 MB/sec [Average]
[info]   (min, avg, max) = (671.171, 806.209, 1343.697), stdev = 300.466
[info]   CI (99.9%): [≈ 0, 1963.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   380.804 ±(99.9%) 551.267 B/op [Average]
[info]   (min, avg, max) = (313.924, 380.804, 636.866), stdev = 143.162
[info]   CI (99.9%): [≈ 0, 932.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.030), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.98% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1426049.806 ops/s
[info] # Warmup Iteration   2: 3428570.081 ops/s
[info] # Warmup Iteration   3: 3634088.829 ops/s
[info] # Warmup Iteration   4: 3620592.998 ops/s
[info] # Warmup Iteration   5: 3625828.274 ops/s
[info] Iteration   1: 3627967.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3627655.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3625898.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3638096.051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3631132.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3630149.968 ±(99.9%) 18583.494 ops/s [Average]
[info]   (min, avg, max) = (3625898.714, 3630149.968, 3638096.051), stdev = 4826.074
[info]   CI (99.9%): [3611566.474, 3648733.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.18% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664113.615 ops/s
[info] # Warmup Iteration   2: 2456974.642 ops/s
[info] # Warmup Iteration   3: 2855449.998 ops/s
[info] # Warmup Iteration   4: 2847164.846 ops/s
[info] # Warmup Iteration   5: 2862271.064 ops/s
[info] Iteration   1: 2765478.427 ops/s
[info]                  ·gc.alloc.rate:                   1368.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              778.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2867533.728 ops/s
[info]                  ·gc.alloc.rate:               1434.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          787.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 737.220 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2856046.199 ops/s
[info]                  ·gc.alloc.rate:                   1407.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              775.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     740.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2880758.487 ops/s
[info]                  ·gc.alloc.rate:                   1429.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     733.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2846778.489 ops/s
[info]                  ·gc.alloc.rate:               1415.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          782.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 741.339 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2843319.066 ±(99.9%) 174570.257 ops/s [Average]
[info]   (min, avg, max) = (2765478.427, 2843319.066, 2880758.487), stdev = 45335.341
[info]   CI (99.9%): [2668748.809, 3017889.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1411.273 ±(99.9%) 100.767 MB/sec [Average]
[info]   (min, avg, max) = (1368.659, 1411.273, 1434.690), stdev = 26.169
[info]   CI (99.9%): [1310.506, 1512.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   781.087 ±(99.9%) 16.920 B/op [Average]
[info]   (min, avg, max) = (775.559, 781.087, 787.353), stdev = 4.394
[info]   CI (99.9%): [764.167, 798.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1342.736 ±(99.9%) 4.283 MB/sec [Average]
[info]   (min, avg, max) = (1341.064, 1342.736, 1343.964), stdev = 1.112
[info]   CI (99.9%): [1338.453, 1347.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   743.323 ±(99.9%) 45.718 B/op [Average]
[info]   (min, avg, max) = (733.654, 743.323, 763.853), stdev = 11.873
[info]   CI (99.9%): [697.605, 789.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 2.998), stdev = 1.313
[info]   CI (99.9%): [≈ 0, 5.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.362 ±(99.9%) 2.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.362, 1.652), stdev = 0.724
[info]   CI (99.9%): [≈ 0, 3.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.39% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2285.215 ops/s
[info] # Warmup Iteration   2: 5334.498 ops/s
[info] # Warmup Iteration   3: 10941.954 ops/s
[info] # Warmup Iteration   4: 11766.140 ops/s
[info] # Warmup Iteration   5: 11706.167 ops/s
[info] Iteration   1: 11769.277 ops/s
[info]                  ·gc.alloc.rate:                   1391.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              186109.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178488.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11734.042 ops/s
[info]                  ·gc.alloc.rate:                   1385.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              185844.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179125.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11732.671 ops/s
[info]                  ·gc.alloc.rate:                   1395.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              187119.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179230.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11794.220 ops/s
[info]                  ·gc.alloc.rate:                   1386.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              184962.936 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178481.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 502.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 11818.314 ops/s
[info]                  ·gc.alloc.rate:                   1403.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              186830.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177763.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11769.705 ±(99.9%) 144.173 ops/s [Average]
[info]   (min, avg, max) = (11732.671, 11769.705, 11818.314), stdev = 37.441
[info]   CI (99.9%): [11625.532, 11913.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1392.450 ±(99.9%) 27.578 MB/sec [Average]
[info]   (min, avg, max) = (1385.750, 1392.450, 1403.103), stdev = 7.162
[info]   CI (99.9%): [1364.872, 1420.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   186173.241 ±(99.9%) 3281.089 B/op [Average]
[info]   (min, avg, max) = (184962.936, 186173.241, 187119.107), stdev = 852.088
[info]   CI (99.9%): [182892.152, 189454.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1335.932 ±(99.9%) 4.433 MB/sec [Average]
[info]   (min, avg, max) = (1334.884, 1335.932, 1337.667), stdev = 1.151
[info]   CI (99.9%): [1331.499, 1340.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   178617.776 ±(99.9%) 2275.732 B/op [Average]
[info]   (min, avg, max) = (177763.836, 178617.776, 179230.015), stdev = 591.000
[info]   CI (99.9%): [176342.044, 180893.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.837, 3.769), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   111.611 ±(99.9%) 845.635 B/op [Average]
[info]   (min, avg, max) = (0.003, 111.611, 502.950), stdev = 219.609
[info]   CI (99.9%): [≈ 0, 957.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.59% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411.770 ops/s
[info] # Warmup Iteration   2: 11860.719 ops/s
[info] # Warmup Iteration   3: 22004.064 ops/s
[info] # Warmup Iteration   4: 21769.333 ops/s
[info] # Warmup Iteration   5: 22059.592 ops/s
[info] Iteration   1: 22017.940 ops/s
[info]                  ·gc.alloc.rate:               340.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          24330.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36568.267 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 22008.129 ops/s
[info]                  ·gc.alloc.rate:               349.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          24980.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36584.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 22162.104 ops/s
[info]                  ·gc.alloc.rate:      329.098 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21888.711 ops/s
[info]                  ·gc.alloc.rate:               339.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          24420.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47440.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 22180.649 ops/s
[info]                  ·gc.alloc.rate:      329.369 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22051.506 ±(99.9%) 465.355 ops/s [Average]
[info]   (min, avg, max) = (21888.711, 22051.506, 22180.649), stdev = 120.851
[info]   CI (99.9%): [21586.151, 22516.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   337.607 ±(99.9%) 32.962 MB/sec [Average]
[info]   (min, avg, max) = (329.098, 337.607, 349.464), stdev = 8.560
[info]   CI (99.9%): [304.645, 370.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24093.473 ±(99.9%) 2724.418 B/op [Average]
[info]   (min, avg, max) = (23368.019, 24093.473, 24980.411), stdev = 707.523
[info]   CI (99.9%): [21369.056, 26817.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.667 ±(99.9%) 1206.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.667, 659.871), stdev = 313.228
[info]   CI (99.9%): [≈ 0, 1542.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24118.726 ±(99.9%) 86483.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24118.726, 47440.485), stdev = 22459.555
[info]   CI (99.9%): [≈ 0, 110602.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.79% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10644.500 ops/s
[info] # Warmup Iteration   2: 20340.102 ops/s
[info] # Warmup Iteration   3: 22563.934 ops/s
[info] # Warmup Iteration   4: 22195.507 ops/s
[info] # Warmup Iteration   5: 22693.112 ops/s
[info] Iteration   1: 22266.692 ops/s
[info]                  ·gc.alloc.rate:               264.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          18663.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36159.417 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22333.245 ops/s
[info]                  ·gc.alloc.rate:      251.744 MB/sec
[info]                  ·gc.alloc.rate.norm: 17739.192 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22460.077 ops/s
[info]                  ·gc.alloc.rate:                   262.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              18372.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35847.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22549.400 ops/s
[info]                  ·gc.alloc.rate:      245.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22402.386 ops/s
[info]                  ·gc.alloc.rate:               261.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          18368.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35941.550 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22402.360 ±(99.9%) 422.409 ops/s [Average]
[info]   (min, avg, max) = (22266.692, 22402.360, 22549.400), stdev = 109.698
[info]   CI (99.9%): [21979.951, 22824.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   256.918 ±(99.9%) 31.441 MB/sec [Average]
[info]   (min, avg, max) = (245.090, 256.918, 264.084), stdev = 8.165
[info]   CI (99.9%): [225.477, 288.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18049.524 ±(99.9%) 2415.064 B/op [Average]
[info]   (min, avg, max) = (17104.019, 18049.524, 18663.821), stdev = 627.184
[info]   CI (99.9%): [15634.460, 20464.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.972 ±(99.9%) 1079.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.972, 511.637), stdev = 280.226
[info]   CI (99.9%): [≈ 0, 1386.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21589.625 ±(99.9%) 75891.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21589.625, 36159.417), stdev = 19708.866
[info]   CI (99.9%): [≈ 0, 97481.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.750 ±(99.9%) 15.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.750, 8.752), stdev = 3.914
[info]   CI (99.9%): [≈ 0, 16.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.99% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165.902 ops/s
[info] # Warmup Iteration   2: 1829.563 ops/s
[info] # Warmup Iteration   3: 5349.237 ops/s
[info] # Warmup Iteration   4: 7222.636 ops/s
[info] # Warmup Iteration   5: 7355.198 ops/s
[info] Iteration   1: 7191.315 ops/s
[info]                  ·gc.alloc.rate:                   2046.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              447823.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435011.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7144.781 ops/s
[info]                  ·gc.alloc.rate:                   2035.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              448334.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     439474.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 389.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7127.168 ops/s
[info]                  ·gc.alloc.rate:                   2024.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              447088.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441405.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7264.951 ops/s
[info]                  ·gc.alloc.rate:               2065.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          447339.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 433672.102 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 7342.398 ops/s
[info]                  ·gc.alloc.rate:               2086.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          447203.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 429923.298 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7214.123 ±(99.9%) 344.023 ops/s [Average]
[info]   (min, avg, max) = (7127.168, 7214.123, 7342.398), stdev = 89.342
[info]   CI (99.9%): [6870.100, 7558.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2051.807 ±(99.9%) 94.533 MB/sec [Average]
[info]   (min, avg, max) = (2024.938, 2051.807, 2086.692), stdev = 24.550
[info]   CI (99.9%): [1957.274, 2146.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   447557.937 ±(99.9%) 1989.224 B/op [Average]
[info]   (min, avg, max) = (447088.422, 447557.937, 448334.513), stdev = 516.595
[info]   CI (99.9%): [445568.713, 449547.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1998.157 ±(99.9%) 26.558 MB/sec [Average]
[info]   (min, avg, max) = (1988.018, 1998.157, 2006.060), stdev = 6.897
[info]   CI (99.9%): [1971.600, 2024.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   435897.364 ±(99.9%) 17704.196 B/op [Average]
[info]   (min, avg, max) = (429923.298, 435897.364, 441405.046), stdev = 4597.723
[info]   CI (99.9%): [418193.168, 453601.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.408 ±(99.9%) 2.954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 1.770), stdev = 0.767
[info]   CI (99.9%): [≈ 0, 3.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   89.888 ±(99.9%) 650.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.888, 389.768), stdev = 168.937
[info]   CI (99.9%): [≈ 0, 740.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.19% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17251.322 ops/s
[info] # Warmup Iteration   2: 57219.755 ops/s
[info] # Warmup Iteration   3: 62706.367 ops/s
[info] # Warmup Iteration   4: 61146.431 ops/s
[info] # Warmup Iteration   5: 63001.411 ops/s
[info] Iteration   1: 62538.599 ops/s
[info]                  ·gc.alloc.rate:                   822.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              20704.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33402.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 62688.060 ops/s
[info]                  ·gc.alloc.rate:               809.048 MB/sec
[info]                  ·gc.alloc.rate.norm:          20310.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16673.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 62008.208 ops/s
[info]                  ·gc.alloc.rate:                   800.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              20310.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16881.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60139.860 ops/s
[info]                  ·gc.alloc.rate:               783.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          20499.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17405.668 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 60451.387 ops/s
[info]                  ·gc.alloc.rate:                   776.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              20222.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17333.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   61565.223 ±(99.9%) 4587.259 ops/s [Average]
[info]   (min, avg, max) = (60139.860, 61565.223, 62688.060), stdev = 1191.297
[info]   CI (99.9%): [56977.964, 66152.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   798.469 ±(99.9%) 72.143 MB/sec [Average]
[info]   (min, avg, max) = (776.778, 798.469, 822.788), stdev = 18.735
[info]   CI (99.9%): [726.326, 870.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20409.384 ±(99.9%) 744.997 B/op [Average]
[info]   (min, avg, max) = (20222.063, 20409.384, 20704.169), stdev = 193.473
[info]   CI (99.9%): [19664.387, 21154.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.550 ±(99.9%) 1140.584 MB/sec [Average]
[info]   (min, avg, max) = (664.171, 797.550, 1327.419), stdev = 296.206
[info]   CI (99.9%): [≈ 0, 1938.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20339.140 ±(99.9%) 28144.389 B/op [Average]
[info]   (min, avg, max) = (16673.263, 20339.140, 33402.415), stdev = 7309.008
[info]   CI (99.9%): [≈ 0, 48483.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.023 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.052), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.586 ±(99.9%) 2.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 1.355), stdev = 0.611
[info]   CI (99.9%): [≈ 0, 2.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.39% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31300.026 ops/s
[info] # Warmup Iteration   2: 59070.515 ops/s
[info] # Warmup Iteration   3: 68077.325 ops/s
[info] # Warmup Iteration   4: 69392.038 ops/s
[info] # Warmup Iteration   5: 66674.581 ops/s
[info] Iteration   1: 69224.958 ops/s
[info]                  ·gc.alloc.rate:                   465.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              10570.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11630.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 69015.362 ops/s
[info]                  ·gc.alloc.rate:               464.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          10601.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15213.155 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 69804.387 ops/s
[info]                  ·gc.alloc.rate:      454.900 MB/sec
[info]                  ·gc.alloc.rate.norm: 10256.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 69468.673 ops/s
[info]                  ·gc.alloc.rate:               471.530 MB/sec
[info]                  ·gc.alloc.rate.norm:          10681.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15113.535 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 69394.862 ops/s
[info]                  ·gc.alloc.rate:               470.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          10678.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15144.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   69381.648 ±(99.9%) 1131.154 ops/s [Average]
[info]   (min, avg, max) = (69015.362, 69381.648, 69804.387), stdev = 293.757
[info]   CI (99.9%): [68250.495, 70512.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   465.444 ±(99.9%) 25.702 MB/sec [Average]
[info]   (min, avg, max) = (454.900, 465.444, 471.530), stdev = 6.675
[info]   CI (99.9%): [439.742, 491.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10557.629 ±(99.9%) 675.321 B/op [Average]
[info]   (min, avg, max) = (10256.007, 10557.629, 10681.992), stdev = 175.379
[info]   CI (99.9%): [9882.308, 11232.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   502.752 ±(99.9%) 1112.935 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.752, 667.812), stdev = 289.026
[info]   CI (99.9%): [≈ 0, 1615.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11420.322 ±(99.9%) 25276.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11420.322, 15213.155), stdev = 6564.297
[info]   CI (99.9%): [≈ 0, 36697.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.284 ±(99.9%) 2.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 1.420), stdev = 0.635
[info]   CI (99.9%): [≈ 0, 2.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.59% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33554.021 ops/s
[info] # Warmup Iteration   2: 66418.429 ops/s
[info] # Warmup Iteration   3: 74392.685 ops/s
[info] # Warmup Iteration   4: 76138.475 ops/s
[info] # Warmup Iteration   5: 76188.728 ops/s
[info] Iteration   1: 74535.712 ops/s
[info]                  ·gc.alloc.rate:               32.946 MB/sec
[info]                  ·gc.alloc.rate.norm:          695.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10802.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 76100.691 ops/s
[info]                  ·gc.alloc.rate:      20.533 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.618 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75998.204 ops/s
[info]                  ·gc.alloc.rate:      20.476 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 75834.160 ops/s
[info]                  ·gc.alloc.rate:      20.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75834.804 ops/s
[info]                  ·gc.alloc.rate:      20.431 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   75660.714 ±(99.9%) 2460.724 ops/s [Average]
[info]   (min, avg, max) = (74535.712, 75660.714, 76100.691), stdev = 639.042
[info]   CI (99.9%): [73199.990, 78121.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   22.965 ±(99.9%) 21.486 MB/sec [Average]
[info]   (min, avg, max) = (20.431, 22.965, 32.946), stdev = 5.580
[info]   CI (99.9%): [1.478, 44.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   478.453 ±(99.9%) 467.494 B/op [Average]
[info]   (min, avg, max) = (424.006, 478.453, 695.632), stdev = 121.407
[info]   CI (99.9%): [10.960, 945.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102.323 ±(99.9%) 881.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.323, 511.615), stdev = 228.801
[info]   CI (99.9%): [≈ 0, 983.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2160.475 ±(99.9%) 18602.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2160.475, 10802.377), stdev = 4830.970
[info]   CI (99.9%): [≈ 0, 20762.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.79% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79813.701 ops/s
[info] # Warmup Iteration   2: 286952.209 ops/s
[info] # Warmup Iteration   3: 309561.461 ops/s
[info] # Warmup Iteration   4: 311848.539 ops/s
[info] # Warmup Iteration   5: 312827.150 ops/s
[info] Iteration   1: 312742.640 ops/s
[info]                  ·gc.alloc.rate:                   1867.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              9396.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10140.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 307973.972 ops/s
[info]                  ·gc.alloc.rate:                   1849.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              9450.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10297.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 315138.836 ops/s
[info]                  ·gc.alloc.rate:               1891.848 MB/sec
[info]                  ·gc.alloc.rate.norm:          9447.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10036.974 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 315291.585 ops/s
[info]                  ·gc.alloc.rate:               1866.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          9317.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6683.297 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 314781.909 ops/s
[info]                  ·gc.alloc.rate:               1904.234 MB/sec
[info]                  ·gc.alloc.rate.norm:          9520.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10044.769 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   313185.789 ±(99.9%) 11892.786 ops/s [Average]
[info]   (min, avg, max) = (307973.972, 313185.789, 315291.585), stdev = 3088.519
[info]   CI (99.9%): [301293.003, 325078.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1875.936 ±(99.9%) 84.147 MB/sec [Average]
[info]   (min, avg, max) = (1849.522, 1875.936, 1904.234), stdev = 21.853
[info]   CI (99.9%): [1791.790, 1960.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9426.554 ±(99.9%) 289.131 B/op [Average]
[info]   (min, avg, max) = (9317.824, 9426.554, 9520.292), stdev = 75.086
[info]   CI (99.9%): [9137.423, 9715.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.653 ±(99.9%) 1159.656 MB/sec [Average]
[info]   (min, avg, max) = (1338.948, 1877.653, 2015.187), stdev = 301.159
[info]   CI (99.9%): [717.997, 3037.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9440.469 ±(99.9%) 5948.742 B/op [Average]
[info]   (min, avg, max) = (6683.297, 9440.469, 10297.244), stdev = 1544.869
[info]   CI (99.9%): [3491.727, 15389.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 6.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.581), stdev = 1.595
[info]   CI (99.9%): [≈ 0, 6.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.722 ±(99.9%) 31.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.722, 18.297), stdev = 8.149
[info]   CI (99.9%): [≈ 0, 35.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97.99% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59028.479 ops/s
[info] # Warmup Iteration   2: 445972.884 ops/s
[info] # Warmup Iteration   3: 486363.821 ops/s
[info] # Warmup Iteration   4: 492188.722 ops/s
[info] # Warmup Iteration   5: 475773.405 ops/s
[info] Iteration   1: 482120.280 ops/s
[info]                  ·gc.alloc.rate:               546.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          1783.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1670.019 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 491441.842 ops/s
[info]                  ·gc.alloc.rate:               554.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          1774.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2130.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 492557.875 ops/s
[info]                  ·gc.alloc.rate:                   551.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1760.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2125.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 492957.262 ops/s
[info]                  ·gc.alloc.rate:               544.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          1738.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2127.764 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 494693.020 ops/s
[info]                  ·gc.alloc.rate:      533.097 MB/sec
[info]                  ·gc.alloc.rate.norm: 1696.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   490754.056 ±(99.9%) 19121.701 ops/s [Average]
[info]   (min, avg, max) = (482120.280, 490754.056, 494693.020), stdev = 4965.845
[info]   CI (99.9%): [471632.355, 509875.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   545.873 ±(99.9%) 31.206 MB/sec [Average]
[info]   (min, avg, max) = (533.097, 545.873, 554.191), stdev = 8.104
[info]   CI (99.9%): [514.667, 577.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1750.594 ±(99.9%) 134.370 B/op [Average]
[info]   (min, avg, max) = (1696.001, 1750.594, 1783.037), stdev = 34.896
[info]   CI (99.9%): [1616.224, 1884.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   501.722 ±(99.9%) 1110.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.722, 666.501), stdev = 288.275
[info]   CI (99.9%): [≈ 0, 1611.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1610.604 ±(99.9%) 3549.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1610.604, 2130.025), stdev = 921.907
[info]   CI (99.9%): [≈ 0, 5160.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.19% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637696.961 ops/s
[info] # Warmup Iteration   2: 1243365.749 ops/s
[info] # Warmup Iteration   3: 1208602.453 ops/s
[info] # Warmup Iteration   4: 1262277.675 ops/s
[info] # Warmup Iteration   5: 1203047.448 ops/s
[info] Iteration   1: 1265582.111 ops/s
[info]                  ·gc.alloc.rate:                   688.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1265735.293 ops/s
[info]                  ·gc.alloc.rate:               679.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          844.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 833.269 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1265599.969 ops/s
[info]                  ·gc.alloc.rate:               676.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          840.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 834.133 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1245537.605 ops/s
[info]                  ·gc.alloc.rate:               672.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          850.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 847.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1255595.750 ops/s
[info]                  ·gc.alloc.rate:                   676.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1259610.146 ±(99.9%) 34613.603 ops/s [Average]
[info]   (min, avg, max) = (1245537.605, 1259610.146, 1265735.293), stdev = 8989.043
[info]   CI (99.9%): [1224996.542, 1294223.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   678.667 ±(99.9%) 23.638 MB/sec [Average]
[info]   (min, avg, max) = (672.881, 678.667, 688.912), stdev = 6.139
[info]   CI (99.9%): [655.029, 702.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   847.931 ±(99.9%) 23.307 B/op [Average]
[info]   (min, avg, max) = (840.684, 847.931, 856.650), stdev = 6.053
[info]   CI (99.9%): [824.624, 871.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.695 ±(99.9%) 2.017 MB/sec [Average]
[info]   (min, avg, max) = (670.195, 670.695, 671.457), stdev = 0.524
[info]   CI (99.9%): [668.678, 672.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   838.001 ±(99.9%) 24.645 B/op [Average]
[info]   (min, avg, max) = (833.269, 838.001, 847.600), stdev = 6.400
[info]   CI (99.9%): [813.355, 862.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18165.742 ops/s
[info] # Warmup Iteration   2: 96846.760 ops/s
[info] # Warmup Iteration   3: 110245.856 ops/s
[info] # Warmup Iteration   4: 111146.372 ops/s
[info] # Warmup Iteration   5: 112172.303 ops/s
[info] Iteration   1: 111990.517 ops/s
[info]                  ·gc.alloc.rate:               3424.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          48127.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3339.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46922.592 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 111612.717 ops/s
[info]                  ·gc.alloc.rate:                   3428.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              48344.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3347.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47191.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 112296.509 ops/s
[info]                  ·gc.alloc.rate:               3449.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          48343.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47093.917 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 111675.180 ops/s
[info]                  ·gc.alloc.rate:               3432.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          48365.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3372.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47525.995 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 108728.641 ops/s
[info]                  ·gc.alloc.rate:               3345.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          48422.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48969.863 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   111260.713 ±(99.9%) 5550.995 ops/s [Average]
[info]   (min, avg, max) = (108728.641, 111260.713, 112296.509), stdev = 1441.576
[info]   CI (99.9%): [105709.718, 116811.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3416.228 ±(99.9%) 156.503 MB/sec [Average]
[info]   (min, avg, max) = (3345.512, 3416.228, 3449.663), stdev = 40.643
[info]   CI (99.9%): [3259.725, 3572.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   48320.614 ±(99.9%) 433.875 B/op [Average]
[info]   (min, avg, max) = (48127.359, 48320.614, 48422.190), stdev = 112.676
[info]   CI (99.9%): [47886.739, 48754.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3360.547 ±(99.9%) 69.361 MB/sec [Average]
[info]   (min, avg, max) = (3339.221, 3360.547, 3383.351), stdev = 18.013
[info]   CI (99.9%): [3291.186, 3429.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47540.803 ±(99.9%) 3190.598 B/op [Average]
[info]   (min, avg, max) = (46922.592, 47540.803, 48969.863), stdev = 828.588
[info]   CI (99.9%): [44350.205, 50731.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.294), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252074.489 ops/s
[info] # Warmup Iteration   2: 568871.548 ops/s
[info] # Warmup Iteration   3: 615280.470 ops/s
[info] # Warmup Iteration   4: 616230.488 ops/s
[info] # Warmup Iteration   5: 612867.733 ops/s
[info] Iteration   1: 618298.980 ops/s
[info]                  ·gc.alloc.rate:               1837.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          4676.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3424.979 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 608319.660 ops/s
[info]                  ·gc.alloc.rate:                   1844.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              4770.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5220.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 612392.795 ops/s
[info]                  ·gc.alloc.rate:               1843.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          4738.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5173.444 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 612083.186 ops/s
[info]                  ·gc.alloc.rate:                   1819.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              4678.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3449.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 611344.946 ops/s
[info]                  ·gc.alloc.rate:                   1857.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              4782.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5186.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   612487.913 ±(99.9%) 13966.490 ops/s [Average]
[info]   (min, avg, max) = (608319.660, 612487.913, 618298.980), stdev = 3627.053
[info]   CI (99.9%): [598521.424, 626454.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1840.557 ±(99.9%) 53.209 MB/sec [Average]
[info]   (min, avg, max) = (1819.656, 1840.557, 1857.690), stdev = 13.818
[info]   CI (99.9%): [1787.348, 1893.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4729.437 ±(99.9%) 192.299 B/op [Average]
[info]   (min, avg, max) = (4676.713, 4729.437, 4782.623), stdev = 49.939
[info]   CI (99.9%): [4537.138, 4921.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1746.574 ±(99.9%) 1416.504 MB/sec [Average]
[info]   (min, avg, max) = (1341.569, 1746.574, 2017.855), stdev = 367.862
[info]   CI (99.9%): [330.070, 3163.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4490.950 ±(99.9%) 3704.821 B/op [Average]
[info]   (min, avg, max) = (3424.979, 4490.950, 5220.269), stdev = 962.130
[info]   CI (99.9%): [786.129, 8195.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.604 ±(99.9%) 5.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.604, 2.935), stdev = 1.304
[info]   CI (99.9%): [≈ 0, 5.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1.562 ±(99.9%) 12.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.562, 7.594), stdev = 3.373
[info]   CI (99.9%): [≈ 0, 14.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.80% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97504.308 ops/s
[info] # Warmup Iteration   2: 333310.067 ops/s
[info] # Warmup Iteration   3: 331862.803 ops/s
[info] # Warmup Iteration   4: 343347.154 ops/s
[info] # Warmup Iteration   5: 342021.667 ops/s
[info] Iteration   1: 342452.415 ops/s
[info]                  ·gc.alloc.rate:               1180.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          5423.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3079.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 337090.954 ops/s
[info]                  ·gc.alloc.rate:                   1174.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              5483.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6260.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 339753.526 ops/s
[info]                  ·gc.alloc.rate:                   1182.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              5475.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6215.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 341755.245 ops/s
[info]                  ·gc.alloc.rate:               1174.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          5410.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3090.633 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 342125.004 ops/s
[info]                  ·gc.alloc.rate:                   1213.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              5583.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6177.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   340635.429 ±(99.9%) 8635.089 ops/s [Average]
[info]   (min, avg, max) = (337090.954, 340635.429, 342452.415), stdev = 2242.505
[info]   CI (99.9%): [332000.340, 349270.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1185.269 ±(99.9%) 62.663 MB/sec [Average]
[info]   (min, avg, max) = (1174.945, 1185.269, 1213.800), stdev = 16.273
[info]   CI (99.9%): [1122.607, 1247.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5475.366 ±(99.9%) 262.565 B/op [Average]
[info]   (min, avg, max) = (5410.348, 5475.366, 5583.328), stdev = 68.187
[info]   CI (99.9%): [5212.801, 5737.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.577 ±(99.9%) 1416.088 MB/sec [Average]
[info]   (min, avg, max) = (670.265, 1073.577, 1342.999), stdev = 367.754
[info]   CI (99.9%): [≈ 0, 2489.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4964.885 ±(99.9%) 6608.510 B/op [Average]
[info]   (min, avg, max) = (3079.671, 4964.885, 6260.536), stdev = 1716.209
[info]   CI (99.9%): [≈ 0, 11573.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.456), stdev = 1.539
[info]   CI (99.9%): [≈ 0, 6.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.237 ±(99.9%) 27.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.237, 15.896), stdev = 7.077
[info]   CI (99.9%): [≈ 0, 30.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218513.293 ops/s
[info] # Warmup Iteration   2: 668058.779 ops/s
[info] # Warmup Iteration   3: 737377.128 ops/s
[info] # Warmup Iteration   4: 744659.473 ops/s
[info] # Warmup Iteration   5: 716002.073 ops/s
[info] Iteration   1: 717493.924 ops/s
[info]                  ·gc.alloc.rate:               572.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          1253.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1456.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 718281.659 ops/s
[info]                  ·gc.alloc.rate:      547.689 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 716352.898 ops/s
[info]                  ·gc.alloc.rate:               560.792 MB/sec
[info]                  ·gc.alloc.rate.norm:          1231.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1464.185 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 719934.994 ops/s
[info]                  ·gc.alloc.rate:               565.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          1236.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1458.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 725481.764 ops/s
[info]                  ·gc.alloc.rate:               572.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          1241.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1447.208 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   719509.048 ±(99.9%) 13801.115 ops/s [Average]
[info]   (min, avg, max) = (716352.898, 719509.048, 725481.764), stdev = 3584.106
[info]   CI (99.9%): [705707.932, 733310.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   563.889 ±(99.9%) 39.738 MB/sec [Average]
[info]   (min, avg, max) = (547.689, 563.889, 572.639), stdev = 10.320
[info]   CI (99.9%): [524.151, 603.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1232.958 ±(99.9%) 77.575 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1232.958, 1253.929), stdev = 20.146
[info]   CI (99.9%): [1155.383, 1310.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.176 ±(99.9%) 1147.706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.176, 667.282), stdev = 298.056
[info]   CI (99.9%): [≈ 0, 1680.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1165.252 ±(99.9%) 2508.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1165.252, 1464.185), stdev = 651.424
[info]   CI (99.9%): [≈ 0, 3673.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 874245.758 ops/s
[info] # Warmup Iteration   2: 1525596.090 ops/s
[info] # Warmup Iteration   3: 1565697.145 ops/s
[info] # Warmup Iteration   4: 1539813.699 ops/s
[info] # Warmup Iteration   5: 1549293.867 ops/s
[info] Iteration   1: 1557498.467 ops/s
[info]                  ·gc.alloc.rate:               739.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 677.478 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1558417.463 ops/s
[info]                  ·gc.alloc.rate:               743.086 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 678.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1556766.781 ops/s
[info]                  ·gc.alloc.rate:                   739.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              747.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     678.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1619817.188 ops/s
[info]                  ·gc.alloc.rate:               766.611 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1563893.007 ops/s
[info]                  ·gc.alloc.rate:                   738.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              743.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1571278.581 ±(99.9%) 105039.245 ops/s [Average]
[info]   (min, avg, max) = (1556766.781, 1571278.581, 1619817.188), stdev = 27278.358
[info]   CI (99.9%): [1466239.336, 1676317.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   745.416 ±(99.9%) 46.140 MB/sec [Average]
[info]   (min, avg, max) = (738.388, 745.416, 766.611), stdev = 11.982
[info]   CI (99.9%): [699.276, 791.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   746.607 ±(99.9%) 10.583 B/op [Average]
[info]   (min, avg, max) = (743.136, 746.607, 750.319), stdev = 2.748
[info]   CI (99.9%): [736.024, 757.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.422 ±(99.9%) 2.062 MB/sec [Average]
[info]   (min, avg, max) = (670.498, 671.422, 671.835), stdev = 0.536
[info]   CI (99.9%): [669.360, 673.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   672.635 ±(99.9%) 43.001 B/op [Average]
[info]   (min, avg, max) = (652.741, 672.635, 678.805), stdev = 11.167
[info]   CI (99.9%): [629.635, 715.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 934269.357 ops/s
[info] # Warmup Iteration   2: 1627408.572 ops/s
[info] # Warmup Iteration   3: 1794204.109 ops/s
[info] # Warmup Iteration   4: 1791227.868 ops/s
[info] # Warmup Iteration   5: 1791822.927 ops/s
[info] Iteration   1: 1789892.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1797382.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1793697.439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1795185.766 ops/s
[info]                  ·gc.alloc.rate:      1.725 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.513 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1770448.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1789321.558 ±(99.9%) 41962.255 ops/s [Average]
[info]   (min, avg, max) = (1770448.973, 1789321.558, 1797382.616), stdev = 10897.464
[info]   CI (99.9%): [1747359.303, 1831283.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.345 ±(99.9%) 2.971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.345, 1.725), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.303 ±(99.9%) 2.604 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.303, 1.513), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 2.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123121.584 ops/s
[info] # Warmup Iteration   2: 427185.891 ops/s
[info] # Warmup Iteration   3: 458683.236 ops/s
[info] # Warmup Iteration   4: 459590.192 ops/s
[info] # Warmup Iteration   5: 459218.223 ops/s
[info] Iteration   1: 456832.462 ops/s
[info]                  ·gc.alloc.rate:               696.651 MB/sec
[info]                  ·gc.alloc.rate.norm:          2399.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2300.581 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 457411.817 ops/s
[info]                  ·gc.alloc.rate:               718.480 MB/sec
[info]                  ·gc.alloc.rate.norm:          2471.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4597.630 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 458527.250 ops/s
[info]                  ·gc.alloc.rate:                   697.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              2393.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2294.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 443922.020 ops/s
[info]                  ·gc.alloc.rate:               676.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          2398.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2372.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 442577.519 ops/s
[info]                  ·gc.alloc.rate:               671.937 MB/sec
[info]                  ·gc.alloc.rate.norm:          2389.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2379.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   451854.214 ±(99.9%) 30391.808 ops/s [Average]
[info]   (min, avg, max) = (442577.519, 451854.214, 458527.250), stdev = 7892.656
[info]   CI (99.9%): [421462.406, 482246.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   692.241 ±(99.9%) 71.771 MB/sec [Average]
[info]   (min, avg, max) = (671.937, 692.241, 718.480), stdev = 18.639
[info]   CI (99.9%): [620.470, 764.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2410.766 ±(99.9%) 132.758 B/op [Average]
[info]   (min, avg, max) = (2389.365, 2410.766, 2471.980), stdev = 34.477
[info]   CI (99.9%): [2278.007, 2543.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.184 ±(99.9%) 1149.725 MB/sec [Average]
[info]   (min, avg, max) = (667.830, 802.184, 1336.299), stdev = 298.580
[info]   CI (99.9%): [≈ 0, 1951.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2788.834 ±(99.9%) 3896.511 B/op [Average]
[info]   (min, avg, max) = (2294.359, 2788.834, 4597.630), stdev = 1011.911
[info]   CI (99.9%): [≈ 0, 6685.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.214), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99.80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83477.301 ops/s
[info] # Warmup Iteration   2: 153072.140 ops/s
[info] # Warmup Iteration   3: 159568.402 ops/s
[info] # Warmup Iteration   4: 160884.843 ops/s
[info] # Warmup Iteration   5: 161158.742 ops/s
[info] Iteration   1: 160353.452 ops/s
[info]                  ·gc.alloc.rate:               975.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          9570.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13187.209 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 161144.643 ops/s
[info]                  ·gc.alloc.rate:               957.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          9349.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6564.212 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 159898.677 ops/s
[info]                  ·gc.alloc.rate:               963.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          9484.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13233.901 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 161191.481 ops/s
[info]                  ·gc.alloc.rate:               966.283 MB/sec
[info]                  ·gc.alloc.rate.norm:          9433.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6565.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 160583.346 ops/s
[info]                  ·gc.alloc.rate:                   950.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              9311.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6593.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   160634.320 ±(99.9%) 2103.376 ops/s [Average]
[info]   (min, avg, max) = (159898.677, 160634.320, 161191.481), stdev = 546.240
[info]   CI (99.9%): [158530.944, 162737.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   962.500 ±(99.9%) 36.342 MB/sec [Average]
[info]   (min, avg, max) = (950.009, 962.500, 975.117), stdev = 9.438
[info]   CI (99.9%): [926.158, 998.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   9429.703 ±(99.9%) 400.172 B/op [Average]
[info]   (min, avg, max) = (9311.382, 9429.703, 9570.047), stdev = 103.923
[info]   CI (99.9%): [9029.531, 9829.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941.158 ±(99.9%) 1416.570 MB/sec [Average]
[info]   (min, avg, max) = (672.256, 941.158, 1344.618), stdev = 367.879
[info]   CI (99.9%): [≈ 0, 2357.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9228.933 ±(99.9%) 13996.181 B/op [Average]
[info]   (min, avg, max) = (6564.212, 9228.933, 13233.901), stdev = 3634.764
[info]   CI (99.9%): [≈ 0, 23225.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.408), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # Run complete. Total time: 02:13:45
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    809672.139 ±   43293.192   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2341.736 ±     176.355  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4550.911 ±     150.223    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2275.444 ±    1409.617  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4417.462 ±    2570.027    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.812 ±       6.857  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.595 ±      13.472    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1942741.486 ±   24551.808   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1340.555 ±      58.597  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1085.742 ±      45.375    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1202.298 ±    1148.704  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       973.909 ±     932.233    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.847 ±       7.185  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.687 ±       5.822    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        29.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   5809599.303 ±  624913.626   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       395.307 ±      35.272  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.125 ±      11.898    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       338.900 ±    1217.416  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        92.946 ±     331.557    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.001 ±       0.010    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    305428.912 ±   27135.046   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2696.307 ±     186.739  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13894.115 ±     333.146    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2692.605 ±      30.691  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     13880.239 ±    1377.549    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.302 ±       2.424  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         1.536 ±      12.340    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        20.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    912361.026 ±   44526.909   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2441.126 ±     159.815  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4210.483 ±     121.525    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2412.744 ±    1420.696  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4162.339 ±    2465.568    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.787 ±       6.065  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.383 ±      10.679    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2793243.497 ±  170260.217   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1200.921 ±      98.728  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       676.560 ±      26.757    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1203.946 ±    1151.861  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       677.987 ±     645.033    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.804 ±       6.786  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.454 ±       3.838    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  14910914.027 ±  896495.045   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       774.800 ±      49.119  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        81.774 ±       0.965    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       671.499 ±       1.501  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        70.886 ±       4.283    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.007    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        14.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  17211021.341 ±   69545.797   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    482375.834 ±   16015.027   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1431.712 ±      29.765  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4670.672 ±      57.987    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      1334.041 ±       6.409  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4352.182 ±     136.081    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.939 ±       6.921  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         3.040 ±      22.405    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2138826.684 ±   43545.342   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2995.021 ±      66.252  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2203.483 ±      27.388    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2819.081 ±    1128.027  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2074.783 ±     867.260    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.029 ±       0.091  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.021 ±       0.068    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  10023889.233 ±  517032.238   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1252.730 ±      61.012  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       196.678 ±       5.977    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1201.936 ±    1148.855  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       188.826 ±     182.038    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.872 ±       7.256  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.140 ±       1.165    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3192924.267 ±  141172.067   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      1992.605 ±      71.912  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       982.049 ±      38.399    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      1869.636 ±    1144.323  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       922.659 ±     592.274    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.848 ±       7.253  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.418 ±       3.576    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13687127.726 ±  709392.928   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1794.446 ±      76.958  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.336 ±       6.683    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1749.623 ±    1419.449  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       201.035 ±     160.042    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.575 ±       4.813  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.066 ±       0.549    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1177281.844 ±   50292.199   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2889.769 ±     158.086  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3862.525 ±      59.114    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2820.170 ±    1106.455  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3772.345 ±    1611.208    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.087 ±       0.582  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.117 ±       0.781    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2431294.209 ±  157476.033   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2147.377 ±     125.291  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1389.927 ±      30.800    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2143.703 ±    1153.025  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1386.548 ±     698.344    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.716 ±       5.730  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.472 ±       3.787    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  20154515.668 ±  349717.593   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       630.303 ±      31.471  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.217 ±       2.846    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       533.014 ±    1147.355  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        41.676 ±      89.715    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.014 ±       0.075  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.006    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        13.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6305777.845 ±  669695.432   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1785.271 ±     213.602  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       445.514 ±      10.755    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1736.442 ±    1408.147  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       433.324 ±     349.125    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.797 ±       6.597  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.203 ±       1.678    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  27832219.701 ± 2447064.330   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       875.835 ±      78.809  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.521 ±       0.659    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       806.062 ±    1157.934  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        45.473 ±      63.199    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34810195.488 ±  246468.543   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5         0.301 ±       2.414  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5         0.014 ±       0.109    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1902422.899 ±   20779.624   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2871.502 ±      97.920  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2375.339 ±      82.644    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2826.894 ±    1198.383  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2338.649 ±    1002.067    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.058 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.048 ±       0.109    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        31.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    310468.187 ±   10725.016   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1905.864 ±      58.434  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9660.461 ±     143.003    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1743.442 ±    1411.813  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8843.332 ±    7283.665    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.737 ±       6.256  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.733 ±      31.688    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    503520.360 ±    5316.555   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       659.697 ±       8.569  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2061.881 ±      24.920    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.549 ±       2.668  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2080.182 ±      27.972    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.039 ±       0.137    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1302434.873 ±  109259.404   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       895.227 ±      91.507  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1081.644 ±      48.506    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       940.889 ±    1418.127  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1137.827 ±    1724.624    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.010 ±       0.053    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        20.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    113793.133 ±    6120.604   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3617.835 ±     167.931  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     50029.317 ±    1076.971    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3498.100 ±    1158.371  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     48385.232 ±   16536.131    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.230 ±       0.931    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                          128  thrpt    5    541165.172 ±   34667.896   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1691.767 ±     118.335  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4918.976 ±     114.295    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1478.017 ±    1153.975  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4291.702 ±    3158.756    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.604 ±       5.064  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.726 ±      14.469    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        20.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    344243.606 ±   30422.475   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1183.997 ±     121.653  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5411.965 ±     143.825    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1073.574 ±    1415.803  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4916.574 ±    6574.920    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.699 ±       5.799  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.127 ±      25.894    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    869816.059 ±   84594.857   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       646.061 ±      66.848  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1168.874 ±      27.361    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       665.561 ±       2.783  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1204.787 ±     116.580    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.015 ±       0.078    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2535079.343 ±  161279.143   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1208.586 ±      82.284  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       750.230 ±      14.236    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1210.480 ±    1158.783  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       750.885 ±     712.450    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.595 ±       4.262  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.376 ±       2.712    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2859988.068 ±  112972.475   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    474528.340 ±    9134.960   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       704.262 ±       9.681  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2335.254 ±      30.668    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.952 ±       1.363  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2218.196 ±      44.601    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                         128  thrpt    5    159940.614 ±    1218.998   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5       956.643 ±      21.457  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5      9412.760 ±     235.892    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       940.913 ±    1415.759  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      9261.868 ±   13985.011    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.164 ±       1.031    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        20.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     16960.210 ±     948.767   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1369.202 ±     100.435  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    127043.458 ±    3600.542    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.668 ±       6.281  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    124606.909 ±    6809.080    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.745 ±       6.328  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        67.764 ±     575.043    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     37666.183 ±    2205.463   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1040.058 ±     101.725  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43450.656 ±    2528.776    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1069.444 ±    1407.677  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     44600.040 ±   57732.508    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.210 ±       3.796    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     40710.570 ±    3701.093   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       606.792 ±      66.869  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     23454.959 ±     824.231    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       535.512 ±    1152.731  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     20539.815 ±   44239.286    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.562 ±       4.839  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        21.413 ±     184.371    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30063.974 ±     330.300   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1520.940 ±      67.025  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79609.201 ±    3030.717    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1469.943 ±    1151.289  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     76939.880 ±   60224.859    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.891 ±       6.524  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        46.615 ±     341.235    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     24608.998 ±     695.545   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1785.824 ±      26.772  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    114196.078 ±    3089.327    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1742.702 ±    1413.309  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    111569.844 ±   93130.842    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.766 ±       6.328  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        48.537 ±     400.697    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     24676.221 ±     883.426   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1574.326 ±      90.731  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    100393.846 ±    3038.121    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1469.698 ±    1156.908  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     93652.965 ±   71481.716    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.808 ±       5.631  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        51.208 ±     355.786    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     26668.275 ±    1179.406   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1579.509 ±      75.259  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93203.234 ±    1458.103    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1612.499 ±    1415.284  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     95128.707 ±   82946.725    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.679 ±       4.053  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        40.025 ±     238.188    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27720.268 ±     588.395   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1584.000 ±      15.726  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     89925.511 ±    1530.895    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1479.442 ±    1163.188  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     84051.987 ±   67895.712    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.670 ±       3.576  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        38.198 ±     204.399    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7805.625 ±     213.046   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1166.216 ±      51.349  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    235110.882 ±   11258.393    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1206.722 ±    1155.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    243479.231 ±  235511.112    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.799 ±       6.793  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       160.430 ±    1363.488    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17827.024 ±    1074.034   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1636.232 ±      47.311  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144463.038 ±    8762.070    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.410 ±    1413.505  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    142522.423 ±  132620.562    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.741 ±       4.084  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        66.160 ±     367.778    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     41991.121 ±    2433.729   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1186.008 ±      70.266  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44449.923 ±    1661.563    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1200.099 ±    1147.229  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     45021.082 ±   43564.802    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.310 ±       1.637    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        15.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     62542.123 ±    1306.574   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       832.829 ±      49.342  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     20956.159 ±    1151.655    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       806.122 ±    1154.181  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20288.294 ±   29116.144    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.523 ±       2.843    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     32249.872 ±    1391.324   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2133.259 ±     104.306  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    104079.193 ±    3492.264    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2147.439 ±    1161.857  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    104735.038 ±   54981.877    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.200 ±       1.588  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         9.757 ±      77.538    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27365.649 ±    1437.205   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1757.652 ±     120.960  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101074.832 ±    3949.191    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1737.900 ±    1408.015  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    100027.743 ±   82725.632    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.779 ±       6.615  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        44.734 ±     379.919    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34656.847 ±     297.858   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1559.986 ±      32.904  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     70837.218 ±    1282.308    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1479.323 ±    1162.137  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67186.932 ±   53139.974    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.620 ±       5.073  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        28.224 ±     230.823    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34392.981 ±     205.332   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1490.409 ±      41.392  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68194.969 ±    1757.999    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1345.205 ±       6.305  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     61551.297 ±     550.273    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.629 ±       5.279  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        28.755 ±     241.442    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    327939.276 ±    3836.219   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1859.585 ±      63.487  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8923.375 ±     265.055    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1877.021 ±    1156.812  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      9008.590 ±    5586.404    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.749 ±       6.230  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.593 ±      29.863    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1507485.406 ±   56968.848   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       487.970 ±      55.007  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       509.330 ±      48.302    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       399.839 ±    1405.490  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       416.264 ±    1463.254    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.063  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.013 ±       0.066    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    664721.196 ±   41724.178   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       523.942 ±      31.637  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1240.551 ±      86.846    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       399.697 ±    1404.993  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       953.056 ±    3350.144    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.086    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1869724.422 ±   79771.058   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       374.002 ±      41.119  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       314.863 ±      46.227    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.807 ±    1216.900  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       286.769 ±    1033.934    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    102523.871 ±    4303.366   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3445.386 ±     230.240  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52880.341 ±    1427.139    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3223.527 ±    1196.693  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     49444.611 ±   16747.776    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.127 ±       1.091    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                                128  thrpt    5    682515.901 ±   19681.772   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1828.283 ±      54.117  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      4215.579 ±      17.354    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1745.909 ±    1414.070  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      4024.535 ±    3235.685    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.666 ±       5.691  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.546 ±      13.213    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    321950.380 ±   23431.506   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1107.559 ±     113.624  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5413.230 ±     232.991    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1072.820 ±    1412.883  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5228.575 ±    6702.672    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.633 ±       5.315  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.199 ±      26.893    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1577751.497 ±   65005.919   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       755.075 ±      66.528  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       753.098 ±      45.266    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       799.607 ±    1147.446  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       796.400 ±    1120.860    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.013 ±       0.045  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.013 ±       0.045    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1001332.623 ±   69030.130   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       725.757 ±      50.519  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1140.614 ±      16.910    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       667.779 ±       2.787  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1049.775 ±      76.190    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.013 ±       0.068    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2774063.467 ±  212472.085   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1313.612 ±     104.803  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       745.215 ±      11.856    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1210.961 ±    1158.520  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       688.534 ±     676.568    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.625 ±       4.443  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.350 ±       2.491    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3190524.198 ±   31427.095   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    587477.350 ±   29057.518   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       655.491 ±      27.049  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1755.990 ±      27.946    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       666.820 ±       3.133  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1786.550 ±      97.659    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.749 ±       6.408  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.054 ±      17.569    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                               128  thrpt    5    171029.707 ±   11292.228   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1015.872 ±      33.348  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      9348.250 ±     427.370    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941.542 ±    1418.292  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      8702.000 ±   13581.575    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.076 ±       0.402    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        20.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    161667.783 ±    2341.478   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2045.225 ±      45.244  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19909.201 ±     445.264    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2011.706 ±      13.444  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     19583.073 ±     377.860    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.754 ±       4.714  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.358 ±      46.120    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    448214.382 ±   45335.126   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       369.114 ±      41.975  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1296.010 ±     115.778    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.975 ±    1212.622  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1196.062 ±    4272.882    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.029 ±       0.153    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1263469.762 ±   54593.490   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       253.137 ±      25.251  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       315.355 ±      38.692    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       306.969 ±    1079.041  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       383.711 ±    1349.024    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.010 ±       0.055    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     82840.582 ±    5866.082   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3320.361 ±     243.360  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63075.810 ±    1465.772    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3221.298 ±    1136.750  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     61258.751 ±   24095.150    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.402 ±       2.676    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        24.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                   128  thrpt    5    297249.202 ±   31782.025   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1393.152 ±     149.454  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7375.833 ±     154.684    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1344.723 ±       5.735  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      7123.848 ±     777.105    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.662 ±       4.801  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.568 ±      26.079    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    294599.198 ±   11919.813   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1667.452 ±      80.886  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8906.527 ±     255.192    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1742.503 ±    1413.938  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9315.076 ±    7703.450    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.724 ±       5.137  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.897 ±      27.644    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1899917.432 ±  115987.309   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1003.382 ±      24.104  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       831.210 ±      34.832    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.570 ±    1410.872  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       889.459 ±    1200.991    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.011 ±       0.061    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2850234.485 ±   77284.142   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       790.713 ±      54.498  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       436.535 ±      23.688    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806.282 ±    1155.626  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       444.881 ±     632.690    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.007 ±       0.024    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3047427.995 ±   33646.995   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         1.981 ±      13.672  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         1.027 ±       7.093    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     47712.860 ±    2977.581   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2162.651 ±     170.102  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71329.912 ±    2533.716    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2141.798 ±    1145.665  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     70587.457 ±   35028.557    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.862 ±       6.796  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        28.209 ±     222.231    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                  128  thrpt    5    145503.721 ±    3692.425   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5      1060.496 ±      35.509  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11470.406 ±     531.489    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1076.212 ±    1419.011  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     11644.616 ±   15403.296    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.558 ±       4.714  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         6.015 ±      50.821    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    236937.141 ±   17206.378   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2607.455 ±     200.658  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17316.375 ±     286.443    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2550.573 ±    1149.336  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     16944.807 ±    7785.498    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.112 ±       0.881  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.755 ±       5.917    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    379033.062 ±   32319.256   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1960.022 ±     180.176  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8137.713 ±     258.277    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1872.125 ±    1146.200  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7767.517 ±    4608.502    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.820 ±       6.973  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.364 ±      28.598    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2256336.371 ±  141947.185   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       801.239 ±      49.849  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       558.807 ±      22.078    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.007 ±    1156.622  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       561.578 ±     794.764    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.012 ±       0.048    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     88201.479 ±    2070.812   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3484.054 ±     117.050  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62159.559 ±     915.843    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3379.362 ±      52.508  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     60293.940 ±    1570.422    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.373 ±       2.494    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        36.000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                   128  thrpt    5    409956.432 ±   74360.445   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1996.370 ±     379.115  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5      7662.225 ±     158.869    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2015.664 ±      10.817  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      7751.862 ±    1530.995    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.675 ±       4.296  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         2.764 ±      18.090    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    261291.122 ±   14438.272   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2119.518 ±     122.693  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12765.675 ±     166.926    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2009.771 ±      11.204  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12106.685 ±     664.488    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.724 ±       5.973  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.389 ±      36.163    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1502723.955 ±   12616.240   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       899.802 ±      34.439  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       942.289 ±      39.844    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.636 ±    1150.603  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       840.928 ±    1212.651    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.013 ±       0.075    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2753332.633 ±  496834.287   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       971.203 ±     124.561  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       555.459 ±      41.100    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       941.287 ±    1419.666  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       543.449 ±     883.413    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.005 ±       0.040    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3138251.086 ±   84533.459   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         3.397 ±      27.149  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         1.724 ±      13.789    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    396158.218 ±   28506.245   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2560.041 ±     181.477  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10169.194 ±     189.199    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                                128  thrpt    5         0.002 ±       0.021  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                           128  thrpt    5         0.010 ±       0.088    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Metaspace                                             128  thrpt    5         0.007 ±       0.062  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                        128  thrpt    5         0.030 ±       0.256    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2545.539 ±    1164.066  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10121.103 ±    4910.578    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen                                            128  thrpt    5         0.441 ±       3.793  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm                                       128  thrpt    5         1.809 ±      15.580    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.137 ±       0.628  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.551 ±       2.510    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        21.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        56.000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                  128  thrpt    5     95238.501 ±    8747.092   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       730.817 ±      69.659  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     12075.812 ±      91.526    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.829 ±       1.591  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     11106.566 ±    1065.056    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.136 ±       1.171    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     25885.392 ±    1324.531   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1664.229 ±      62.535  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101177.504 ±    2449.871    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.430 ±    1421.326  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     98121.746 ±   91146.496    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.758 ±       4.347  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        46.131 ±     263.050    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     99952.075 ±    1462.401   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       971.396 ±      35.110  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15293.825 ±     674.004    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1067.032 ±    1406.303  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16812.281 ±   22300.616    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.009 ±       0.041  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.145 ±       0.651    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     67161.665 ±    5443.255   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1201.729 ±      99.459  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28158.426 ±     496.400    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1071.341 ±    1412.476  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     25162.910 ±   33778.524    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.829 ±       5.450  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.095 ±     125.921    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    138231.156 ±    6315.924   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       957.221 ±      50.653  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10895.779 ±     548.565    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940.581 ±    1414.156  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10732.056 ±   16459.236    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.238 ±       0.919    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     37492.600 ±     499.987   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1877.134 ±      40.694  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78785.149 ±     964.434    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1871.113 ±    1154.053  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     78540.994 ±   48630.438    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.895 ±       7.529  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.684 ±     316.973    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                                 128  thrpt    5     69160.719 ±    4268.624   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1352.851 ±      52.504  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30785.243 ±     900.855    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1344.346 ±       4.635  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     30595.307 ±    1863.512    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.691 ±       4.377  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        15.932 ±     101.260    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32349.483 ±     376.407   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       532.815 ±      36.803  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25920.136 ±    1918.222    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       503.977 ±    1116.304  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     24532.127 ±   54288.769    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.608 ±       2.138    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     31211.823 ±    2994.098   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       396.822 ±      40.328  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     20013.180 ±    2387.667    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       471.669 ±    1058.778  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     23731.177 ±   52965.385    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     34409.928 ±     242.359   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       426.828 ±      32.365  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19520.444 ±    1603.601    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.812 ±    1327.332  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16977.411 ±   60762.796    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.381 ±       2.011    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34153.546 ±    1794.064   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       380.292 ±      32.916  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17523.224 ±    1664.935    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       338.864 ±    1217.208  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     15726.209 ±   56757.894    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.590 ±       5.077    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                                128  thrpt    5     26956.278 ±    1246.871   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       711.374 ±       5.435  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     41534.863 ±    2224.305    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       672.160 ±       1.567  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     39244.640 ±    1850.266    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.484 ±       4.163    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15005.319 ±     168.817   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1103.373 ±      29.763  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    115714.068 ±    3842.105    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1074.305 ±    1417.145  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    112666.858 ±  148650.029    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.637 ±       5.397  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        66.529 ±     563.427    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     14921.737 ±    1456.067   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       980.635 ±      93.870  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    103424.433 ±    5993.397    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       802.476 ±    1151.884  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     84996.255 ±  127995.416    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.318 ±       4.636    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        22.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    103546.726 ±    1189.036   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       278.056 ±      29.788  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4225.779 ±     482.584    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       307.026 ±    1079.241  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4673.912 ±   16429.544    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.063 ±       0.546    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13012.119 ±     526.717   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1270.778 ±      32.129  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    153702.514 ±    7503.126    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.082 ±    1155.098  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    146147.883 ±  141757.634    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.899 ±       4.994  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       109.656 ±     607.362    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        32.000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                               128  thrpt    5     14532.285 ±    1146.365   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1018.025 ±      90.085  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    110218.095 ±    5072.744    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       940.405 ±    1415.038  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    101977.827 ±  155337.308    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2.253 ±       6.035    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        22.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     44967.756 ±    1460.867   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1144.363 ±      27.007  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40048.104 ±    1804.486    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1073.035 ±    1413.339  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     37603.490 ±   50113.319    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.679 ±       5.800  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        23.710 ±     202.589    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     64032.848 ±    1203.025   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1124.311 ±      22.871  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27631.062 ±     971.796    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1071.057 ±    1411.801  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26351.187 ±   35057.059    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.746 ±       6.287  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        18.439 ±     155.462    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    175296.361 ±    6296.109   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       286.793 ±      25.859  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2575.032 ±     287.817    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.972 ±    1079.051  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2766.980 ±    9727.070    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.113 ±       0.645    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    183351.029 ±    9357.880   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         4.000 ±      34.435  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        35.160 ±     302.712    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     59451.459 ±    2052.736   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1147.098 ±      44.626  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30365.358 ±    1052.288    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1073.192 ±    1414.306  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     28446.537 ±   37901.472    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.783 ±       6.516  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        20.652 ±     171.923    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                              128  thrpt    5     16902.887 ±     301.782   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       609.610 ±      15.067  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     56755.266 ±    2392.534    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       671.791 ±       1.196  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     62542.945 ±    1043.128    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.773 ±       4.073    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        16.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     96384.765 ±    4037.721   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2145.936 ±     132.154  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     35030.796 ±    1106.793    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2140.776 ±    1151.968  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     34929.541 ±   17972.961    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.808 ±       6.335  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        13.320 ±     104.587    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    151145.632 ±    2298.565   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       919.598 ±      33.799  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      9572.923 ±     271.806    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       800.819 ±    1149.509  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      8338.717 ±   12007.588    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.130 ±       0.747    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    164587.811 ±   11443.434   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1542.208 ±     144.632  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14744.940 ±     514.274    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1477.540 ±    1161.554  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14120.063 ±   10800.928    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.668 ±       5.672  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.329 ±      53.767    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     50337.521 ±    2884.926   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2705.098 ±     207.776  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84565.509 ±    2019.014    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2560.400 ±    1148.499  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     80092.273 ±   37287.501    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.146 ±       1.122  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         4.563 ±      35.090    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                   128  thrpt    5    111831.239 ±    2611.584   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      2147.577 ±      82.079  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     30218.570 ±     623.232    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2013.302 ±      11.213  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     28330.345 ±     645.882    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.737 ±       5.813  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        10.371 ±      81.832    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        15.000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    174481.089 ±    6770.921   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1166.257 ±      60.793  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10518.363 ±     224.477    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1201.275 ±    1149.552  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     10827.397 ±   10275.563    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0.112 ±       0.644    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    535392.019 ±    8467.451   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       559.154 ±      38.632  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1643.595 ±     120.675    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       533.478 ±    1148.352  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1569.273 ±    3378.123    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.025 ±       0.211    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    712574.168 ±   34978.206   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       561.505 ±      56.230  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1239.934 ±      75.519    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.675 ±    1155.234  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1182.612 ±    2546.444    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.018 ±       0.097    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    776875.047 ±    3580.103   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.009 ±       0.077  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.019 ±       0.156    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    319019.637 ±    6860.990   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       905.342 ±      22.430  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4465.878 ±     128.445    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       801.097 ±    1149.646  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      3951.374 ±    5665.519    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.021 ±       0.177    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        21.000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                  128  thrpt    5     42990.151 ±     734.854   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       467.239 ±      44.467  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     17105.478 ±    1863.356    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       401.571 ±    1411.578  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14732.342 ±   51787.316    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.633 ±       5.404  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        23.172 ±     197.883    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     37281.407 ±    1515.677   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1904.433 ±      62.572  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80391.758 ±    2358.002    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.788 ±    1151.182  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     79344.422 ±   50396.361    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.770 ±       4.675  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        32.232 ±     195.336    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    296348.011 ±    2395.495   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       314.653 ±      37.620  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1670.793 ±     210.910    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       266.492 ±    1405.133  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1417.890 ±    7476.127    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.853 ±       7.341  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4.537 ±      39.068    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    113177.720 ±    8634.337   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1352.312 ±      91.139  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18803.376 ±     319.714    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1338.422 ±       5.973  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18615.212 ±    1402.541    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.837 ±       6.460  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.837 ±      91.437    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    483440.932 ±    4183.884   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       324.862 ±      36.984  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1057.504 ±     117.996    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.805 ±    1216.953  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1102.643 ±    3962.535    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.027 ±       0.233    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     41715.208 ±     587.632   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2066.950 ±      64.152  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     77973.205 ±    1616.339    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2004.064 ±      14.547  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     75602.743 ±    1547.250    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.912 ±       6.104  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34.543 ±     231.428    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                  128  thrpt    5     86494.821 ±    3373.194   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1620.359 ±      96.915  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     29481.829 ±    1245.909    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1612.248 ±    1417.556  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     29371.849 ±   26616.500    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.708 ±       4.274  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        12.841 ±      77.617    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     75376.005 ±     516.991   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       613.376 ±      32.299  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12805.623 ±     714.972    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       400.675 ±    1408.430  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      8368.394 ±   29416.379    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.087 ±       0.750    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         5.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     88601.315 ±     695.406   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       334.144 ±      29.942  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      5934.407 ±     563.007    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       235.490 ±    1259.202  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4188.788 ±   22396.456    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.003 ±       0.028  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.058 ±       0.500    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     77493.736 ±     663.062   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       472.201 ±      26.128  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9588.402 ±     543.391    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       502.982 ±    1113.542  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10221.110 ±   22617.359    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.085 ±       0.728    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     86660.735 ±    4038.650   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       506.319 ±      31.293  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9195.854 ±     834.828    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.979 ±    1119.061  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9194.915 ±   20400.103    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     87312.531 ±    2422.527   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       439.800 ±      47.171  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7927.784 ±     956.128    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.652 ±    1326.715  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6697.185 ±   23931.479    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     10311.247 ±     280.448   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1690.735 ±      33.373  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    258052.631 ±    8324.529    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1609.423 ±    1415.592  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    245826.592 ±  220334.524    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.816 ±       5.024  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       124.171 ±     764.715    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5     10032.813 ±     506.245   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1551.469 ±      72.702  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    243366.408 ±    9230.416    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1470.556 ±    1146.431  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    230916.876 ±  186825.936    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.862 ±       6.433  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       134.574 ±    1001.712    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    155527.825 ±    5008.081   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       415.815 ±      45.334  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4207.518 ±     455.948    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.782 ±    1327.260  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3750.122 ±   13431.120    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.042 ±       0.361    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5823.418 ±      36.606   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1504.634 ±      82.470  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    406596.245 ±   21744.938    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1471.150 ±    1151.921  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    397553.182 ±  311388.177    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.958 ±       6.493  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       258.845 ±    1754.351    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                                128  thrpt    5      9757.650 ±     627.039   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1562.577 ±      80.631  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5    252017.949 ±    6807.720    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1610.473 ±    1410.144  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    259844.074 ±  229441.899    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.783 ±       6.165  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       127.156 ±    1001.759    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     19768.374 ±     600.890   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1539.341 ±      44.747  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122544.571 ±    3197.214    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1474.306 ±    1148.166  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    117331.814 ±   90284.699    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.779 ±       6.391  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        61.954 ±     508.672    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23052.691 ±    1248.029   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1566.156 ±      90.206  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106911.558 ±    3084.367    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1473.195 ±    1158.015  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    100541.812 ±   78045.585    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.801 ±       6.805  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        54.442 ±     462.583    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        24.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    134322.461 ±    1574.052   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       302.875 ±      28.243  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3548.702 ±     361.804    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.641 ±    1079.013  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2403.965 ±   12675.427    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.098 ±       0.841    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    139796.181 ±    1253.668   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.129 ±       0.825  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         1.452 ±       9.309    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23321.056 ±     922.765   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1619.684 ±      60.669  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109295.779 ±    2185.588    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1473.296 ±    1155.741  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     99575.465 ±   82546.408    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.831 ±       5.131  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        56.035 ±     344.445    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                               128  thrpt    5      9749.120 ±      51.068   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5       858.727 ±      20.839  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5    138572.579 ±    3030.655    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       806.406 ±    1153.123  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    130126.130 ±  186005.204    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.341 ±      11.543    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5        20.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    124134.849 ±    3055.494   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1771.576 ±      57.318  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22459.366 ±     835.485    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1743.642 ±    1414.655  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     22118.297 ±   18212.190    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.754 ±       5.924  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.539 ±      74.971    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    561194.711 ±    7238.250   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       602.764 ±      20.413  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1690.245 ±      37.113    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       665.980 ±       1.699  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1867.554 ±      25.716    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.005 ±       0.035  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.013 ±       0.099    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    330401.505 ±   16190.286   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       480.699 ±      28.515  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2289.732 ±     148.511    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       502.062 ±    1111.014  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2395.563 ±    5278.208    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.020 ±       0.170    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    752371.660 ±   26390.274   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       506.823 ±      36.995  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1060.142 ±      86.854    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.784 ±    1118.486  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1057.368 ±    2346.575    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.018 ±       0.152    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     75724.961 ±    3759.125   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3128.244 ±     210.806  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65003.412 ±    1553.325    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2948.861 ±    1409.872  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     61265.848 ±   28601.672    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.062 ±       0.453  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1.316 ±       9.572    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        22.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        32.000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                    128  thrpt    5    227829.696 ±   17221.725   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1310.917 ±      72.959  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5      9055.855 ±     387.350    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1344.374 ±       4.216  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9288.801 ±     719.059    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.629 ±       5.189  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.403 ±      36.362    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    199869.417 ±    9433.544   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1466.006 ±      82.078  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11542.708 ±     188.714    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1474.789 ±    1156.730  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11636.202 ±    9793.213    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.708 ±       6.005  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.556 ±      47.127    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    653079.884 ±   16896.004   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       366.759 ±      43.188  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       883.789 ±     105.245    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.683 ±    1318.442  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       889.427 ±    3176.896    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.009 ±       0.050  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.023 ±       0.121    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    656953.561 ±    9120.474   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       501.668 ±      34.336  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1201.706 ±      88.476    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       502.656 ±    1112.685  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1204.748 ±    2664.746    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.020 ±       0.105    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1082815.778 ±  122662.557   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       604.395 ±      63.985  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       878.458 ±      52.234    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       536.986 ±    1155.903  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       787.034 ±    1696.330    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.012 ±       0.101    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1192721.925 ±    3605.186   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34122.584 ±    2576.794   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1941.365 ±     172.154  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     89521.804 ±    1886.603    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1874.200 ±    1157.487  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     86367.841 ±   51756.335    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.833 ±       5.123  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        39.000 ±     240.659    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    123013.723 ±     666.013   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1359.712 ±      35.957  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     17394.675 ±     430.641    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1344.466 ±       5.170  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     17199.686 ±     104.788    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.670 ±       4.944  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         8.587 ±      63.352    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    128779.810 ±    3005.284   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1817.650 ±      45.112  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     22209.584 ±     216.217    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1741.542 ±    1411.286  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     21295.232 ±   17566.059    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.783 ±       6.166  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.521 ±      74.903    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    205556.926 ±    2073.910   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1251.102 ±      34.436  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9577.421 ±     311.355    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1204.149 ±    1151.962  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9221.848 ±    8869.193    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.820 ±       5.913  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.291 ±      45.381    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    256841.935 ±    2402.566   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1379.708 ±      14.005  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8453.484 ±     127.838    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1344.393 ±       5.023  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8237.095 ±      71.188    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.620 ±       4.181  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.797 ±      25.568    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     70341.598 ±    1525.590   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2838.937 ±      53.476  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63513.052 ±    1064.825    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2696.481 ±      33.207  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60326.651 ±    1300.631    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.037 ±       0.200  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.837 ±       4.440    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                               128  thrpt    5    175599.584 ±   13709.609   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1383.411 ±     133.884  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     12396.875 ±     461.558    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1343.599 ±       5.913  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12044.806 ±     964.422    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.729 ±       4.899  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6.459 ±      43.404    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    177255.849 ±    4907.853   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1179.717 ±      38.765  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10473.873 ±     356.771    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.698 ±    1154.899  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10730.919 ±   10366.245    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.679 ±       5.799  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6.060 ±      51.779    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    673009.125 ±   12974.745   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       700.796 ±      15.002  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1638.662 ±      36.925    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.459 ±       2.575  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1560.721 ±      26.533    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.029 ±       0.103    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        17.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    712031.031 ±    7020.662   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       562.030 ±      35.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1242.229 ±      80.167    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.789 ±    1155.480  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1186.365 ±    2553.780    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.018 ±       0.159    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    771916.609 ±    2525.774   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.008 ±       0.068  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.017 ±       0.139    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    357574.252 ±    3928.301   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1012.451 ±      30.995  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4455.771 ±     137.209    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1068.084 ±    1407.945  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4703.678 ±    6234.082    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.055 ±       0.194    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                              128  thrpt    5     43132.669 ±     361.179   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       470.928 ±      32.368  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     17182.558 ±    1316.441    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.761 ±    1118.462  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     18433.307 ±   40841.196    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.152 ±       1.308    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     10744.735 ±     347.186   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1359.063 ±      57.294  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    199047.114 ±    3151.185    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1342.966 ±       6.201  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    196702.458 ±    5962.708    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.787 ±       6.156  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       115.900 ±     906.546    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10789.950 ±     482.945   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1259.553 ±      61.561  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    183656.569 ±    7625.716    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1203.922 ±    1150.512  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    175591.265 ±  168427.159    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.879 ±       5.909  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       128.602 ±     862.838    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    276990.309 ±    2717.617   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1863.027 ±      69.630  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10584.774 ±     332.583    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1748.884 ±    1422.708  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      9933.034 ±    8012.206    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.213 ±       0.675    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8692.386 ±     111.496   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1560.443 ±      24.768  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    282490.624 ±    3829.079    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1471.165 ±    1157.493  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    266395.504 ±  211519.855    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.904 ±       6.915  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       163.982 ±    1255.231    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                          128  thrpt    5     10234.373 ±     353.101   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1241.113 ±      58.651  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5    190824.866 ±    5416.122    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1209.812 ±    1158.033  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    185979.675 ±  177615.336    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.766 ±       5.936  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       118.606 ±     919.894    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     25890.261 ±    1620.512   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1365.684 ±      81.535  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     83012.477 ±    2203.303    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.517 ±       4.659  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     81558.344 ±    5088.638    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.749 ±       6.318  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        45.922 ±     387.211    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     29277.951 ±    2442.264   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1217.346 ±     125.671  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65428.453 ±    2234.510    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.386 ±    1153.471  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     64667.881 ±   60346.089    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.797 ±       5.390  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        41.949 ±     283.652    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    631569.383 ±   26282.349   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1177.354 ±      52.953  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2933.917 ±     163.105    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1076.400 ±    1418.643  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2687.116 ±    3594.635    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.575 ±       4.181  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.434 ±      10.465    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        19.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    770435.984 ±    9184.748   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     30243.985 ±     450.311   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1376.322 ±      22.761  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71618.135 ±    1875.495    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1340.191 ±       5.854  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     69737.457 ±     787.815    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.833 ±       5.271  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        43.219 ±     272.917    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                         128  thrpt    5     13842.927 ±     283.504   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5       911.171 ±      44.105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    103586.833 ±    5496.589    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941.425 ±    1418.605  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    107083.943 ±  162109.781    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.471 ±       4.056    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        19.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     32019.301 ±    2212.185   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1697.747 ±     148.847  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83430.113 ±    3139.122    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1609.627 ±    1420.475  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     78939.963 ±   65741.897    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.762 ±       5.426  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        36.996 ±     263.490    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     33800.210 ±     669.055   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1498.777 ±      68.482  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69777.850 ±    2141.485    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1471.912 ±    1151.114  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     68520.758 ±   53328.672    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.871 ±       5.825  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        40.491 ±     270.872    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    464688.998 ±   29492.421   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1244.070 ±      71.521  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4213.133 ±      85.813    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1210.906 ±    1158.269  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4106.405 ±    3994.830    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.612 ±       4.377  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.061 ±      14.733    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     18544.254 ±     911.178   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1894.991 ±      68.142  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    160800.542 ±    3086.589    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1868.011 ±    1141.537  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    158517.872 ±   97057.116    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.924 ±       7.302  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        78.576 ±     620.007    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                              128  thrpt    5     34470.533 ±    3127.636   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1587.313 ±     157.230  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     72464.269 ±    1234.822    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1477.470 ±    1160.949  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     67399.339 ±   50794.843    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.745 ±       6.373  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        33.586 ±     287.069    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     56045.933 ±    2099.319   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1722.675 ±     107.669  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48369.099 ±    1878.347    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1608.696 ±    1415.457  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     45200.879 ±   40418.639    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.737 ±       6.213  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        20.999 ±     177.048    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    153233.468 ±    1709.923   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1855.986 ±      61.777  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19061.225 ±     735.500    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1739.591 ±    1410.551  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     17868.381 ±   14543.910    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.787 ±       6.337  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         8.068 ±      64.900    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1180608.394 ±   44723.776   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1302.510 ±      29.701  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1736.278 ±      73.014    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211.219 ±    1159.721  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1616.896 ±    1576.368    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.633 ±       4.961  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.852 ±       6.687    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1364034.328 ±    6894.418   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         0.015 ±       0.127  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.017 ±       0.147    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     66021.654 ±    4861.097   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1670.175 ±     154.275  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39805.052 ±    1019.714    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1607.699 ±    1419.477  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     38266.423 ±   32546.204    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.808 ±       5.347  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.138 ±     127.439    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                             128  thrpt    5     27768.979 ±      60.983   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       653.605 ±      13.441  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     37038.948 ±     780.598    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.926 ±       1.585  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     38077.189 ±      93.817    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     17429.262 ±    1740.568   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1531.087 ±     110.542  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    138246.117 ±    7057.071    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1475.440 ±    1153.545  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    133646.180 ±  115990.482    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.766 ±       6.462  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        67.477 ±     568.580    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     16599.168 ±    1151.674   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1337.489 ±     100.837  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    126788.812 ±    2926.103    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1337.405 ±       6.144  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    126813.227 ±    8346.474    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.879 ±       7.479  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        80.855 ±     687.593    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    668389.523 ±   48249.705   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1796.985 ±     148.818  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4230.639 ±      57.600    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1747.972 ±    1415.164  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4118.725 ±    3395.575    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.550 ±       4.554  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.291 ±      10.696    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     11943.974 ±     664.610   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1677.032 ±      86.270  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    220968.602 ±    8751.859    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1602.373 ±    1409.442  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    211572.980 ±  195374.933    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.926 ±       7.055  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       123.679 ±     943.399    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                              128  thrpt    5     17689.690 ±    1243.001   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1511.550 ±     139.012  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    134449.627 ±    3461.777    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1477.303 ±    1155.721  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    131319.857 ±   99243.434    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.774 ±       4.852  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        68.359 ±     428.380    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     44209.402 ±    2932.815   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1735.092 ±      93.893  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61768.294 ±    2220.214    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1743.143 ±    1411.396  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     62139.814 ±   51983.569    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.729 ±       5.833  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        25.486 ±     203.573    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     57049.034 ±    1845.172   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1744.843 ±      45.708  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48125.580 ±     751.469    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1737.059 ±    1396.348  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     47935.877 ±   39033.553    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.116 ±       1.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1346966.447 ±   62837.894   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1266.010 ±      77.324  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1478.996 ±      42.050    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211.272 ±    1157.449  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1412.356 ±    1315.504    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.575 ±       4.084  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.681 ±       4.863    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1561868.957 ±    4938.143   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3581.358 ±     248.851   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       488.674 ±      13.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    214743.966 ±   10211.141    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       503.488 ±    1114.923  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    221797.693 ±  488874.878    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.811 ±      15.597    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        15.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                             128  thrpt    5     30401.703 ±     153.361   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       702.630 ±      11.373  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     36368.687 ±     587.621    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       669.808 ±       3.560  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     34669.835 ±     294.226    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.675 ±       5.718  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        34.989 ±     296.640    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    125344.184 ±    3140.696   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1990.116 ±      76.185  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     24986.591 ±     806.309    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1878.223 ±    1168.135  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     23589.607 ±   14845.212    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.052 ±       0.450    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    379745.431 ±   11217.435   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       784.943 ±      30.459  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3252.807 ±      72.947    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       800.267 ±    1147.095  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3317.302 ±    4770.389    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.011 ±       0.095  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.046 ±       0.395    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    255798.381 ±   18892.622   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       575.211 ±      36.957  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3539.065 ±     200.063    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       532.957 ±    1147.231  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3286.533 ±    7081.153    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.051 ±       0.437    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    500648.236 ±   21363.071   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       657.595 ±      28.711  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2066.940 ±      45.216    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.347 ±       1.604  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2110.343 ±      88.267    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.026 ±       0.139    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     72747.612 ±     799.518   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3069.492 ±      68.525  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66400.370 ±    2096.619    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2948.906 ±    1445.445  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     63809.053 ±   31976.072    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.180 ±       0.948    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        32.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    135192.622 ±    1253.066   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1185.494 ±      48.950  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13799.980 ±     537.024    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.718 ±    1415.661  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12499.019 ±   16481.040    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.679 ±       5.754  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         7.884 ±      66.837    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    208459.383 ±    3801.961   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       168.069 ±      24.294  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1268.746 ±     201.837    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.688 ±    1079.261  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1552.505 ±    8185.941    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.381 ±       3.277  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.893 ±      24.906    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    387299.774 ±   27687.833   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       394.126 ±      23.027  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1601.880 ±     144.254    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.524 ±    1058.267  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1925.446 ±    4346.599    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.017 ±       0.151    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    465917.761 ±    9684.355   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       376.711 ±      41.333  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1272.334 ±     144.901    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.882 ±    1217.243  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1144.650 ±    4109.621    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.014 ±       0.121    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    496378.726 ±    1725.208   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     28629.015 ±     985.775   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1561.106 ±      79.518  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     85811.098 ±    1671.977    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1472.753 ±    1147.610  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     80918.630 ±   61818.312    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.841 ±       6.973  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        46.011 ±     381.456    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8249.599 ±     163.164   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1173.008 ±      65.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    223727.734 ±    8731.590    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1209.187 ±    1157.606  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    230410.723 ±  217844.557    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.762 ±       6.292  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       145.118 ±    1198.489    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8166.571 ±     130.194   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1069.592 ±      56.033  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    206115.242 ±    9407.197    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1069.036 ±    1407.569  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    205927.077 ±  270218.939    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.037  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.605 ±       7.169    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    180472.274 ±    8452.167   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1801.994 ±      81.081  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     15712.328 ±      32.105    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1746.788 ±    1408.379  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     15235.398 ±   12366.992    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.050 ±       0.251  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.441 ±       2.238    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7236.948 ±     366.881   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1193.394 ±     106.603  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    259472.798 ±   11675.996    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1200.972 ±    1149.120  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    261019.066 ±  248237.052    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.871 ±       7.362  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       186.821 ±    1579.085    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                         128  thrpt    5      7934.625 ±     245.913   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                          128  thrpt    5      1075.218 ±      19.877  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    213261.067 ±    9335.720    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       940.947 ±    1418.340  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    187027.395 ±  286979.969    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.290 ±      13.231    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                                128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     20070.233 ±     539.069   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1146.802 ±      56.192  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89917.643 ±    2751.500    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207.325 ±    1154.884  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     94655.139 ±   90423.567    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.745 ±       6.284  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        57.916 ±     488.138    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     26226.282 ±     607.724   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1164.929 ±      17.538  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69903.411 ±    1719.948    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1205.392 ±    1152.142  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     72384.417 ±   69832.120    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.800 ±       6.797  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        47.867 ±     406.800    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    373156.039 ±   12343.950   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       867.175 ±      23.857  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3657.307 ±     109.365    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806.468 ±    1158.519  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3407.896 ±    5013.096    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.087 ±       0.476    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    426845.279 ±    2843.433   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     24061.322 ±    1718.270   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1204.207 ±      63.437  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     78762.313 ±    1693.768    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1072.276 ±    1413.142  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     70398.407 ±   95607.664    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.820 ±       5.438  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        54.315 ±     363.665    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                        128  thrpt    5     11025.523 ±     125.940   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                         128  thrpt    5       945.691 ±      59.298  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    134979.961 ±    9902.720    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5       940.456 ±    1416.668  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    134329.799 ±  203629.078    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.187 ±       6.259    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                               128  thrpt    5        19.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     12714.133 ±     732.726   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1267.753 ±      44.980  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    156935.097 ±    8786.453    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1207.777 ±    1155.760  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    149821.177 ±  147171.484    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.795 ±       5.774  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        99.483 ±     721.513    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13263.124 ±     310.474   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1174.318 ±      71.809  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    139322.592 ±    6457.232    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.217 ±    1151.807  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    142674.794 ±  135599.786    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.870 ±       7.359  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       102.195 ±     864.055    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    288616.538 ±   18574.133   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1728.001 ±     103.822  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9422.272 ±     334.591    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1746.234 ±    1414.606  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      9530.055 ±    7878.010    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.658 ±       5.130  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.524 ±      27.395    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12961.278 ±     554.213   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1600.797 ±      46.927  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    194366.624 ±    4835.161    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1601.939 ±    1400.954  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    194780.674 ±  176391.655    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.100 ±       0.816  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        12.360 ±     101.111    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        19.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                             128  thrpt    5     13561.943 ±     805.997   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1282.407 ±      91.841  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5    148796.610 ±    4711.518    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1208.176 ±    1156.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    140361.860 ±  136452.156    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.770 ±       5.887  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        89.241 ±     682.561    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     33111.279 ±    1689.473   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1431.248 ±     103.498  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68020.609 ±    2272.840    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1341.480 ±       5.842  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     63765.981 ±    3273.398    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.741 ±       4.996  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        35.493 ±     240.076    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     78292.183 ±    7171.428   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1971.535 ±     204.625  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39625.637 ±     979.202    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1874.813 ±    1148.647  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     37658.669 ±   22370.043    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.745 ±       4.860  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.240 ±      99.264    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    621168.395 ±   40506.688   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       874.812 ±      51.207  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2216.528 ±      81.477    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.445 ±    1157.847  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2050.426 ±    3066.491    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.022 ±       0.185    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    728316.301 ±   16013.023   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     75259.879 ±    3733.997   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2185.239 ±     160.687  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45689.911 ±    1630.184    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2138.084 ±    1146.373  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     44711.348 ±   24031.530    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.833 ±       6.991  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        17.800 ±     149.533    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                            128  thrpt    5     20460.632 ±     367.316   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       780.243 ±      30.617  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     60011.488 ±    2733.105    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       805.686 ±    1156.168  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61979.098 ±   89145.062    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.280 ±       5.162    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     15970.197 ±    1445.150   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       860.233 ±      61.205  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     84786.008 ±    7070.225    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       939.327 ±    1415.650  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     92408.803 ±  137063.496    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.815 ±       4.298    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17511.458 ±     233.906   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       768.369 ±      20.540  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     69046.267 ±    2294.174    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       801.832 ±    1152.659  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     72076.824 ±  104044.539    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.499 ±       7.905    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    130034.309 ±     698.920   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       339.264 ±      29.424  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4105.872 ±     376.014    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       338.889 ±    1217.356  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4104.309 ±   14746.009    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.101 ±       0.532    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     14347.134 ±     533.851   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1109.921 ±      56.999  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    121748.157 ±    5635.297    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1070.323 ±    1412.441  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    117389.604 ±  154756.184    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.750 ±       6.457  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        81.673 ±     703.230    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                                 128  thrpt    5     15940.830 ±     844.686   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       780.400 ±      60.304  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     77038.214 ±    4237.857    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       806.147 ±    1158.443  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     79511.563 ±  112867.201    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.228 ±       7.055    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     46819.852 ±    1602.660   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1446.125 ±      68.602  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48607.385 ±    1349.745    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1475.564 ±    1158.955  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     49631.282 ±   39907.111    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.749 ±       6.184  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        25.273 ±     208.573    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     76701.109 ±    3353.103   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1627.103 ±      60.541  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33384.913 ±     529.803    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1472.242 ±    1153.695  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     30206.288 ±   23593.825    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.742 ±       5.121  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        15.117 ±     104.143    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    325180.422 ±   18459.412   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       644.961 ±      42.496  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3121.511 ±     182.697    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       671.494 ±       1.567  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3250.313 ±     190.713    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    353894.543 ±   14017.917   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     67685.490 ±    2140.980   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1557.676 ±      22.027  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36217.576 ±    1293.226    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1474.438 ±    1159.331  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     34322.275 ±   28165.128    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.791 ±       6.456  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        18.624 ±     152.062    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                                128  thrpt    5     15186.632 ±     277.468   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       626.353 ±      14.494  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     64906.006 ±    2507.295    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       671.794 ±       1.003  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     69613.641 ±    1294.711    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2.601 ±      14.963    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    145708.501 ±    5561.684   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1913.557 ±      81.010  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20665.486 ±     741.587    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.765 ±    1150.968  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     20284.103 ±   12554.695    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.754 ±       4.547  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.139 ±      49.074    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    855829.317 ±    8041.462   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       487.157 ±      29.849  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       895.749 ±      59.154    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.472 ±    1404.200  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       735.666 ±    2585.977    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.016 ±       0.087  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.030 ±       0.160    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    400281.338 ±    3913.329   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       413.219 ±      36.243  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1624.602 ±     141.987    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       471.242 ±    1057.301  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1853.235 ±    4153.041    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.033 ±       0.282    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1122361.966 ±   81558.643   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       403.487 ±      22.395  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       565.906 ±      57.441    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       472.893 ±    1062.953  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       668.584 ±    1502.473    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     78582.660 ±    1516.753   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3176.219 ±      87.031  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63606.462 ±    1173.925    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3082.921 ±    1418.150  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     61755.939 ±   29056.796    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.062 ±       0.340  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.252 ±       6.811    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        23.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                  128  thrpt    5    284152.029 ±    8729.867   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1417.106 ±      46.263  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5      7848.366 ±     214.499    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1344.630 ±       5.535  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      7447.257 ±     249.107    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.704 ±       4.559  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.913 ±      25.420    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        10.000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    270043.510 ±    2041.149   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1643.836 ±      52.696  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9579.809 ±     337.065    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.332 ±    1412.368  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9380.232 ±    8266.075    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.695 ±       5.086  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.058 ±      29.694    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1241687.928 ±   40985.652   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       434.676 ±      44.880  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       550.835 ±      41.345    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       501.335 ±    1109.027  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       633.185 ±    1400.833    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.005 ±       0.035  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.044    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1531508.057 ±   87116.264   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       918.681 ±      43.937  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       944.066 ±      27.484    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       802.590 ±    1151.838  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       828.091 ±    1246.316    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.021 ±       0.083    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        19.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1835540.856 ±  166672.146   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       645.159 ±      56.202  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       553.156 ±      12.005    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       670.973 ±       1.635  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       575.528 ±      52.335    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.007 ±       0.037    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2044498.132 ±   46041.581   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         1.086 ±       9.177  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0.844 ±       7.138    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     42091.245 ±    2108.490   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2093.952 ±     122.807  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78280.046 ±    1546.661    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2008.050 ±      14.923  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     75081.093 ±    4198.615    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.841 ±       6.665  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        31.970 ±     253.576    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                                 128  thrpt    5    142010.576 ±    4931.423   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1116.855 ±      57.293  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     12376.559 ±     468.134    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1075.957 ±    1417.031  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     11921.000 ±   15668.907    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.579 ±       4.805  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         6.492 ±      53.917    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     14689.875 ±     361.452   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1941.435 ±      48.103  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    207987.335 ±    8026.880    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.419 ±    1159.271  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    201206.106 ±  126125.101    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.749 ±       4.312  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        80.579 ±     464.597    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     96297.079 ±    4164.552   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1291.022 ±      52.295  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21098.391 ±     402.057    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.354 ±       5.752  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21873.635 ±     895.365    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.829 ±       6.350  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.476 ±     103.016    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    257534.730 ±    9180.558   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       860.387 ±      49.472  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5255.815 ±     145.208    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.346 ±    1153.179  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4920.703 ±    6939.425    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.102 ±       0.536    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     13110.241 ±     427.396   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2114.300 ±      67.201  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    253771.532 ±    6461.355    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2137.986 ±    1152.457  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    256633.977 ±  138928.548    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.895 ±       5.642  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       108.206 ±     683.176    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        32.000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                   128  thrpt    5     15037.665 ±     806.324   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1755.113 ±      98.721  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5    183669.062 ±    5091.865    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1746.233 ±    1414.134  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    182862.082 ±  150318.891    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.720 ±       5.071  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        74.369 ±     521.043    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     32615.649 ±     961.934   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2731.377 ±     146.246  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    131775.135 ±    3505.062    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2685.896 ±      31.840  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    129589.295 ±    2484.660    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.079 ±       0.313  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.832 ±      15.155    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    105126.470 ±    8292.337   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1487.843 ±     135.803  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22271.650 ±     694.038    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1471.806 ±    1154.142  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     22022.889 ±   16846.421    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.774 ±       5.924  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.428 ±      87.298    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    176857.529 ±   15635.550   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       581.834 ±      55.674  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5177.717 ±     376.133    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.970 ±    1155.869  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4801.603 ±   10347.844    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    193918.858 ±     447.425   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.008 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.066 ±       0.548    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     49016.114 ±    1890.737   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3471.223 ±     131.266  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111445.291 ±     652.153    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3365.877 ±      63.387  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    108068.766 ±    3223.353    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.033 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.069 ±       2.297    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        36.000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                  128  thrpt    5      8893.247 ±     211.116   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       960.798 ±      43.017  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5    170021.878 ±   10113.404    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       940.891 ±    1415.903  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    166540.551 ±  251211.056    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.029 ±       0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5.160 ±      23.800    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        21.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     26645.380 ±     491.438   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1428.485 ±      20.065  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     84363.950 ±    1252.252    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1342.131 ±       6.201  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     79264.336 ±    1073.308    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.787 ±       5.188  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        46.347 ±     305.320    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     30073.002 ±    2648.068   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1225.610 ±      93.412  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     64135.080 ±    1929.129    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1204.678 ±    1152.626  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     63218.597 ±   62590.636    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.854 ±       5.806  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        45.546 ±     312.049    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    626344.682 ±   19383.743   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1678.230 ±      91.372  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4216.568 ±     136.851    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1613.267 ±    1417.545  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4053.528 ±    3560.261    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.637 ±       4.641  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.602 ±      11.684    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     22119.131 ±     925.477   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1660.696 ±      64.733  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    118151.638 ±    3971.093    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1604.488 ±    1395.864  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    114133.279 ±   98872.197    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.893 ±       3.138    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                              128  thrpt    5     28156.522 ±    1369.419   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1289.729 ±      36.409  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     72088.199 ±    1489.065    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1209.756 ±    1157.217  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     67739.283 ±   66241.151    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.741 ±       4.942  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        42.005 ±     280.509    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     74825.768 ±    2171.883   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1987.384 ±      96.230  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41795.303 ±     853.247    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1875.039 ±    1153.837  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     39412.523 ±   23743.873    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.750 ±       5.515  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        15.859 ±     116.829    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    180906.436 ±   13564.086   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2006.317 ±     110.264  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17461.036 ±     505.440    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1872.590 ±    2146.451  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     16293.940 ±   18366.518    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.770 ±       5.846  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.864 ±      52.202    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1491334.212 ±   71056.538   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1275.096 ±      43.407  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1345.549 ±      38.971    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.081 ±    1159.258  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1279.737 ±    1258.731    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.645 ±       5.378  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.687 ±       5.724    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1763767.546 ±   29666.130   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    151967.540 ±    6834.157   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1973.673 ±     118.076  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20435.900 ±     417.503    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2004.302 ±      27.402  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20755.903 ±     959.527    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.044 ±       0.375    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                             128  thrpt    5     35318.912 ±     381.280   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       749.895 ±       3.860  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     33413.389 ±     455.473    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.238 ±       1.057  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29908.611 ±     313.879    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.185 ±       1.592    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     41748.018 ±    2205.367   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1538.431 ±     133.174  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     57985.827 ±    2128.215    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1471.075 ±    1142.584  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     55349.076 ±   39719.706    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.841 ±       7.063  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.971 ±     268.574    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    764076.214 ±    7714.425   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1539.853 ±      45.430  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3171.386 ±      96.361    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479.360 ±    1161.955  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3047.010 ±    2399.449    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.620 ±       5.029  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.279 ±      10.365    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     31812.689 ±     703.087   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2220.266 ±      90.983  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    109824.954 ±    2742.336    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2149.480 ±    1171.135  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    106321.264 ±   57712.112    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.112 ±       0.968  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5.546 ±      47.755    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        16.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                   128  thrpt    5     41079.895 ±    1407.689   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                    128  thrpt    5      1721.367 ±      80.927  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     65939.795 ±    1417.069    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1745.269 ±    1414.627  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     66910.726 ±   55298.630    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.766 ±       4.759  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        29.371 ±     182.174    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    350446.099 ±    3284.446   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       997.594 ±      22.586  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4479.929 ±     138.370    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       937.077 ±    1412.675  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4211.298 ±    6388.491    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.056 ±       0.323    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1922237.069 ±  110402.859   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1159.331 ±      50.371  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       949.345 ±      82.820    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1076.160 ±    1418.983  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       883.515 ±    1191.354    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.562 ±       4.573  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.460 ±       3.738    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2237799.336 ±   49566.818   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.007 ±       0.053  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.005 ±       0.037    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    252827.713 ±    5767.273   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1682.995 ±      34.497  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10475.827 ±     143.329    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1733.817 ±    1407.884  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10787.743 ±    8666.831    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.026 ±       0.222    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        13.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        17.000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                  128  thrpt    5     52650.879 ±     518.483   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                   128  thrpt    5       565.752 ±      37.042  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     16910.444 ±    1152.110    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5       537.058 ±    1156.058  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     16062.439 ±   34576.068    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.249 ±       1.311    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                         128  thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     72608.749 ±    1260.793   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1603.360 ±      55.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34751.458 ±    1365.715    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1474.391 ±    1158.229  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     31974.504 ±   25657.698    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.829 ±       6.687  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        18.063 ±     145.863    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     86169.765 ±     961.549   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1128.345 ±      51.969  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20606.882 ±     968.217    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1069.621 ±    1408.897  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19538.345 ±   25779.638    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.724 ±       6.014  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        13.252 ±     110.013    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     95147.346 ±    1996.526   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1173.741 ±      40.897  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19413.814 ±     805.503    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1074.968 ±    1417.654  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17800.975 ±   23706.785    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.641 ±       5.387  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        10.596 ±      89.013    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     45872.130 ±    1479.121   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2142.616 ±     117.433  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73486.729 ±    1727.281    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2135.353 ±    1136.574  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     73220.848 ±   38055.898    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.962 ±       7.746  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        33.458 ±     269.808    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                                 128  thrpt    5     78650.699 ±    4605.133   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1431.916 ±     126.073  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     28647.245 ±    1350.314    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1476.631 ±    1146.307  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     29512.786 ±   21883.269    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.808 ±       5.184  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        16.387 ±     105.912    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    112415.391 ±    1087.828   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1078.160 ±      49.658  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15091.598 ±     653.186    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1071.936 ±    1413.608  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     15004.482 ±   19785.803    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.716 ±       6.077  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        10.004 ±      84.886    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    325849.391 ±    7196.098   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       500.770 ±      40.575  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2418.440 ±     189.002    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.449 ±    1112.113  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2425.854 ±    5371.307    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.020 ±       0.175    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    520809.103 ±   32949.569   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       665.308 ±      28.982  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2010.509 ±      45.620    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       670.962 ±       1.720  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2027.874 ±     123.299    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.051 ±       0.317    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    758617.598 ±   74732.046   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.651 ±       5.603  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         1.408 ±      12.119    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    249133.565 ±     497.903   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       821.871 ±      41.624  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5191.645 ±     269.080    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802.404 ±    1150.842  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5069.134 ±    7278.932    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.053 ±       0.277    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                                128  thrpt    5     26537.818 ±    1595.415   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       366.560 ±      34.263  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     21739.477 ±    2297.402    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       338.716 ±    1216.437  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     20194.571 ±   72333.647    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.739 ±       6.359    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3.000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    122221.963 ±    2574.728   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1720.866 ±      33.348  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22157.234 ±     542.444    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1604.613 ±    1411.447  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     20676.282 ±   18535.732    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.791 ±       6.544  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.256 ±      84.876    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    183696.319 ±    1764.254   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1118.922 ±      33.094  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9586.016 ±     353.150    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1068.543 ±    1407.444  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9159.467 ±   12121.253    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.774 ±       6.489  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.609 ±      55.371    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    407299.230 ±   51949.590   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       809.486 ±     108.575  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3127.382 ±      60.338    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       671.694 ±       1.519  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2597.383 ±     327.406    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.033 ±       0.284    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        13.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     68477.260 ±     811.771   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2759.934 ±      87.042  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63426.724 ±    1739.121    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2694.941 ±      39.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61933.366 ±     685.845    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.179 ±       1.497  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.133 ±      34.568    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                             128  thrpt    5    165512.054 ±   10768.082   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1831.310 ±     148.672  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17411.682 ±     596.087    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1745.391 ±    1414.320  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     16616.875 ±   13875.947    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.712 ±       5.597  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.750 ±      53.076    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    185587.084 ±    6528.220   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1210.364 ±      68.501  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10263.544 ±     354.274    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.756 ±    1155.838  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10234.518 ±    9708.265    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.708 ±       4.974  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5.978 ±      42.072    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    542257.210 ±    5099.718   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       549.164 ±      29.650  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1593.760 ±      96.253    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       534.284 ±    1150.088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1552.035 ±    3340.882    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.024 ±       0.209    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        13.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1136593.906 ±   74580.380   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       862.926 ±      57.300  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1194.826 ±      38.541    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       805.950 ±    1155.967  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1118.060 ±    1638.511    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.006 ±       0.050    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1280269.727 ±    7504.504   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    357952.126 ±   21643.377   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       996.239 ±      88.895  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4379.116 ±     198.890    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       932.695 ±    1403.117  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4090.896 ±    6031.323    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.037 ±       0.194    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                            128  thrpt    5     45095.501 ±     645.346   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       347.841 ±      36.584  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     12139.256 ±    1414.453    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370.674 ±    1326.795  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12965.525 ±   46392.319    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.629 ±       5.369  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        21.960 ±     187.513    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       602.363 ±      16.418   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1286.446 ±      44.298  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3359769.775 ±  153401.126    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.524 ±    1150.670  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3145955.853 ± 3041753.625    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.153 ±       8.157  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2991.769 ±   21128.916    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       588.183 ±      31.992   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1246.181 ±      87.994  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3332849.275 ±  123248.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1199.040 ±    1145.417  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3203909.092 ± 3024960.807    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.169 ±       8.734  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3163.038 ±   23639.853    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        33.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     42198.832 ±    1153.681   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       712.344 ±      22.245  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26563.261 ±     489.879    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       670.213 ±       0.457  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24993.129 ±     682.253    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.780 ±       3.008    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        18.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       579.579 ±      31.306   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1269.700 ±      53.956  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3447247.699 ±  121619.434    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1200.156 ±    1148.071  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3261785.868 ± 3161586.389    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.220 ±       8.499  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3288.493 ±   22782.908    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                          128  thrpt    5       584.164 ±      33.124   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1244.950 ±     103.560  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5   3352224.137 ±  170183.602    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1203.613 ±    1150.551  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5   3239237.614 ± 3074819.754    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         1.115 ±       8.187  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3040.943 ±   22409.214    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14120.483 ±     128.050   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1129.720 ±      40.980  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    125900.300 ±    5303.189    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.023 ±    1407.264  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    119050.640 ±  157168.246    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.995 ±       8.478  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       111.076 ±     946.425    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     19134.615 ±     212.414   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1165.882 ±      48.100  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     95888.546 ±    4979.149    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1066.792 ±    1407.056  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     87800.117 ±  116500.862    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         1.170 ±       9.849  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        96.239 ±     810.237    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        30.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    210882.991 ±   23838.790   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       787.527 ±      73.449  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5878.238 ±     344.465    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       804.438 ±    1153.521  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6017.063 ±    8818.886    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.124 ±       0.656    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    231516.117 ±    2611.282   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.189 ±       1.621  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.287 ±      11.068    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     17770.735 ±     387.082   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1153.472 ±      35.219  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    102148.709 ±    3252.620    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1200.737 ±    1149.360  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    106412.082 ±  102793.182    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.224 ±      10.449  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       108.312 ±     924.674    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        36.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                         128  thrpt    5      7132.349 ±     138.256   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                          128  thrpt    5       988.178 ±      50.009  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                     128  thrpt    5    218027.246 ±    9186.421    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                 128  thrpt    5       939.189 ±    1414.799  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    207236.148 ±  312332.932    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.015 ±       0.035  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.274 ±       7.784    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                                128  thrpt    5        26.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1549851.549 ±   28831.141   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        67.654 ±      38.677  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        68.734 ±      40.756    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.321 ±     881.016  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       104.766 ±     902.067    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     81113.718 ±    3403.711   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3462.877 ±     141.710  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67181.492 ±    1887.410    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3379.881 ±      49.121  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     65576.466 ±    3106.683    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.029 ±       0.209  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.563 ±       4.028    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        25.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        36.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1798116.043 ±   37871.337   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       968.914 ±      48.678  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       848.055 ±      60.315    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       935.722 ±    1408.270  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       820.327 ±    1251.812    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.007 ±       0.038    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2208925.105 ±  131498.008   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       637.295 ±      36.810  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       454.028 ±       5.660    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.101 ±       0.910  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       478.198 ±      27.745    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.009 ±       0.051    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2384851.185 ±   39005.157   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.256 ±       0.359  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.005 ±       0.044    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     50183.529 ±    3126.592   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2176.286 ±     160.186  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     68237.320 ±    2375.682    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2137.242 ±    1145.614  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     66981.942 ±   34239.577    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.866 ±       7.280  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        27.818 ±     233.965    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    864252.429 ±   19354.327   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2792.186 ±     105.583  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5082.979 ±     104.697    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2815.096 ±    1139.225  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      5123.614 ±    2009.030    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.167 ±       1.345  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.304 ±       2.453    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5087032.111 ±  430218.011   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       318.388 ±      56.133  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        98.475 ±      13.408    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       235.427 ±    1258.896  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        72.384 ±     386.946    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5    965305.908 ±   66181.321   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1136.992 ±      82.635  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1853.679 ±      64.690    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1202.497 ±    1150.235  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1963.197 ±    1910.010    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.849 ±       7.135  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.374 ±      11.535    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        32.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   8606360.282 ±  554970.850   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       402.404 ±      25.491  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        73.592 ±       5.677    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       338.946 ±    1217.659  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        62.394 ±     223.159    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.002 ±       0.013    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    482813.904 ±   26293.155   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2285.869 ±     187.590  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      7449.984 ±     276.404    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2150.670 ±    1153.115  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      7005.605 ±    3553.902    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.287 ±       2.475  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.925 ±       7.967    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        25.000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                  N/A  thrpt    5   1295158.597 ±   19427.587   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1832.526 ±      62.932  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5      2226.696 ±      94.015    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1745.129 ±    1415.269  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2121.489 ±    1741.119    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.712 ±       6.086  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.867 ±       7.413    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        24.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4559.801 ±     230.319   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2296.617 ±     120.135  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    792625.330 ±   25868.358    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2269.216 ±    1412.824  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    784434.774 ±  525030.836    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.988 ±       7.126  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       345.139 ±    2495.857    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        33.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6826.303 ±      83.958   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2335.445 ±      64.959  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    538381.167 ±   13355.071    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2280.904 ±    1404.398  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    525880.856 ±  325981.552    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.258 ±       1.563  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        59.706 ±     361.738    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     46173.787 ±     438.374   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       765.741 ±      21.851  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26098.718 ±     701.900    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       668.437 ±       1.412  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     22782.414 ±     234.142    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.284 ±       1.496    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5         7.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4973.096 ±      61.686   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1041.413 ±      41.577  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    329558.147 ±   15065.436    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       936.784 ±    1411.365  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    296593.987 ±  448719.402    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.021 ±       0.113  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         6.649 ±      35.582    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        25.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5106.109 ±      88.100   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       645.911 ±      16.371  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    199057.503 ±    3586.641    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       662.360 ±       5.843  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    204130.084 ±    3798.448    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         2.580 ±      22.212    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6590.038 ±      58.043   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       336.218 ±      59.590  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     80288.433 ±   14684.305    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       370.658 ±    1326.745  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     88643.871 ±  317254.069    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         1.992 ±      10.501    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6616.540 ±     184.519   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       285.453 ±      36.090  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     67905.321 ±   10229.465    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       306.952 ±    1078.978  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     73224.234 ±  257408.823    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         2.006 ±      17.270    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7803.098 ±     334.419   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1681.771 ±      71.800  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    339159.598 ±    4469.666    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1605.396 ±    1416.304  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    323748.080 ±  285127.842    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.853 ±       5.885  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       170.724 ±    1177.516    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     18908.453 ±    1285.965   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       480.346 ±      40.800  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     39987.409 ±    4422.383    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       398.644 ±    1401.291  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     33456.532 ±  117644.257    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.005 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.433 ±       3.731    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     15944.032 ±     121.243   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       432.234 ±      28.480  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     42661.827 ±    3132.762    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       365.986 ±    1307.227  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     36175.093 ±  129234.921    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.824 ±       7.092    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     23483.726 ±     297.021   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       445.652 ±      29.821  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29864.693 ±    2240.510    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       370.655 ±    1326.723  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     24862.043 ±   88939.341    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.279 ±       2.403    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4079.953 ±     180.209   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2479.834 ±      87.950  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    956468.732 ±   23843.629    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2419.620 ±    1425.240  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    933812.732 ±  566409.757    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.339 ±       2.240  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       130.902 ±     864.767    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                  N/A  thrpt    5      9931.083 ±     102.932   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                   N/A  thrpt    5      1258.203 ±      33.676  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                              N/A  thrpt    5    199362.375 ±    6384.709    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1208.862 ±    1155.647  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    191610.499 ±  183987.174    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.742 ±       5.175  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       117.841 ±     822.024    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                        N/A  thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                         N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10347.152 ±     285.149   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2217.882 ±     104.758  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    337308.474 ±   10360.493    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2141.184 ±    1161.165  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    325511.812 ±  170647.814    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.792 ±       6.375  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       121.127 ±     976.021    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     54630.210 ±    3103.378   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       526.224 ±      35.034  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15159.539 ±    1046.105    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       532.188 ±    1145.576  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     15341.415 ±   33040.475    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.015 ±       0.082  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.442 ±       2.340    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     44509.108 ±    3302.456   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       658.228 ±      44.749  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23273.385 ±     457.377    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       663.044 ±       3.186  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     23450.205 ±    1835.895    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.877 ±       7.461  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        31.463 ±     267.701    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     89758.527 ±    1916.353   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       693.731 ±      13.817  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12162.489 ±     250.727    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       670.855 ±       1.469  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     11761.549 ±     233.881    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.014 ±       0.081  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.238 ±       1.407    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    103975.162 ±    1276.053   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7655.774 ±     180.943   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2293.852 ±      89.295  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    471495.478 ±   11593.287    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2149.436 ±    1134.345  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    441917.220 ±  237015.887    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.266 ±       1.743  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        54.875 ±     359.402    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                                 N/A  thrpt    5      4537.814 ±      54.509   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                  N/A  thrpt    5       481.503 ±      34.773  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                             N/A  thrpt    5    166980.516 ±   13139.802    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       504.308 ±    1117.223  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    175012.503 ±  387349.712    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.011 ±       0.058  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         3.708 ±      20.310    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                       N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                        N/A  thrpt    5        13.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   9070719.874 ±  195420.747   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4891.816 ±      96.123  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       848.707 ±       1.802    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4742.684 ±      77.672  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       822.866 ±      30.099    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.037 ±       0.105  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.006 ±       0.018    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        35.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        46.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38028627.164 ±  279026.899   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5   9875358.312 ±  433140.848   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3864.627 ±     136.442  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       615.872 ±       9.729    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3775.234 ±    1421.366  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       601.989 ±     242.720    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.003 ±       0.011    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        28.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        37.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  48118918.777 ±  128448.494   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         0.133 ±       1.139  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.004 ±       0.037    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31443697.949 ± 1343384.736   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       819.846 ±       6.449  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.035 ±       1.608    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.669 ±    1156.704  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.504 ±      60.393    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.001 ±       0.002    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   9087158.701 ±  116593.262   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3844.741 ±      89.742  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       665.819 ±       9.651    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3775.247 ±    1420.928  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       653.711 ±     242.249    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.002 ±       0.008    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        28.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        40.000                    ms
[info] IntBenchmark.readUPickle                                                                            N/A  thrpt    5  11459604.629 ±  386851.035   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                             N/A  thrpt    5      4910.043 ±     186.160  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                        N/A  thrpt    5       674.265 ±       5.167    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      4612.008 ±    1144.045  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       633.126 ±     140.078    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0.121 ±       0.398  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0.017 ±       0.055    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                  N/A  thrpt    5        34.000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                   N/A  thrpt    5        45.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  13607778.847 ±  673320.909   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1638.247 ±      83.597  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       189.468 ±       6.099    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.398 ±    1414.618  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       186.454 ±     168.180    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.666 ±       4.563  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.077 ±       0.523    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        24.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  41919177.823 ± 1906372.809   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       875.322 ±      46.604  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.862 ±       1.615    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       800.224 ±    1148.445  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        30.091 ±      44.033    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.010 ±       0.055  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        19.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13179266.720 ±  238920.911   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2708.285 ±      84.799  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.388 ±       5.055    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2546.745 ±    1133.145  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       304.009 ±     131.858    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.042 ±       0.272  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.005 ±       0.033    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        19.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  48974931.166 ± 3303578.414   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1021.751 ±      66.143  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.833 ±       1.277    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       941.081 ±    1417.708  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        30.361 ±      47.218    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        19.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  62490692.113 ±  579753.324   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.130 ±       1.120  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.003 ±       0.028    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17882791.906 ±  157279.806   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1689.632 ±      64.936  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148.693 ±       5.639    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1614.521 ±    1430.093  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       142.080 ±     125.781    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.021 ±       0.057  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.002 ±       0.005    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        17.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2730176.215 ±  111742.933   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2197.331 ±     148.723  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1266.539 ±      43.579    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2145.372 ±    1149.487  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1236.304 ±     645.673    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.722 ±       5.780  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.415 ±       3.314    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.writeUPickle                                                                           N/A  thrpt    5  11540129.803 ±  482982.944   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                            N/A  thrpt    5      2246.764 ±     148.148  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                       N/A  thrpt    5       306.364 ±      10.380    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2151.632 ±    1156.201  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       293.305 ±     152.902    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.604 ±       5.066  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.084 ±       0.702    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                                 N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                  N/A  thrpt    5        23.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    169429.421 ±    4504.552   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3231.501 ±     124.063  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     30013.646 ±     377.619    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3100.909 ±    1398.303  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28785.163 ±   12316.069    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.037 ±       0.154  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.347 ±       1.419    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        33.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     33347.628 ±    1577.291   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2516.646 ±     115.332  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    118762.919 ±    3852.501    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2419.289 ±    1418.274  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    114217.186 ±   68263.589    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.258 ±       2.133  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        12.199 ±     100.835    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    144199.101 ±    3599.862   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1245.757 ±      49.211  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13595.261 ±     389.236    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.643 ±    1153.280  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13142.194 ±   12669.544    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.808 ±       6.776  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8.915 ±      74.816    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        27.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    442802.323 ±    6502.386   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1770.121 ±      27.367  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6291.141 ±      79.739    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1612.637 ±    1416.015  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      5734.004 ±    5090.776    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.595 ±       5.126  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.118 ±      18.235    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        21.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    481344.985 ±   14583.393   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1379.184 ±      62.541  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4508.575 ±      79.221    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1344.948 ±       3.914  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4396.969 ±     131.848    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.591 ±       4.441  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1.935 ±      14.551    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        23.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     62317.748 ±    4604.865   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1481.088 ±     122.484  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     37398.516 ±     762.815    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1474.943 ±    1162.874  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     37264.266 ±   29754.938    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.142 ±       0.996  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3.586 ±      25.225    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    319814.527 ±    4233.518   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2397.612 ±      57.968  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11797.552 ±     293.987    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2414.600 ±    1421.715  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11883.968 ±    7079.739    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.737 ±       6.168  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.644 ±      30.496    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        18.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    496702.113 ±   24021.338   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1321.991 ±      71.349  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4187.944 ±     117.554    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1202.644 ±    1150.529  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3807.119 ±    3608.979    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.899 ±       7.565  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.870 ±      24.156    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1335498.217 ±   32490.530   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2711.203 ±      51.183  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3194.868 ±      35.810    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2702.375 ±      35.823  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3184.529 ±      83.728    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.058 ±       0.280  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.069 ±       0.328    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    103215.538 ±    5408.505   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3462.746 ±     203.824  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52793.767 ±     626.487    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3226.845 ±    1137.098  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     49175.354 ±   16120.371    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.251 ±       1.009    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        24.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        34.000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                                 128  thrpt    5    596340.701 ±   14214.701   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2693.864 ±      99.925  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7108.612 ±     144.141    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2556.880 ±    1162.671  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      6747.643 ±    3079.865    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.042 ±       0.272  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.110 ±       0.723    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    346892.113 ±   14624.030   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1193.398 ±      46.099  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5414.230 ±     176.544    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1207.508 ±    1154.459  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5483.262 ±    5303.585    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.679 ±       5.844  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.064 ±      26.386    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    825736.390 ±   82647.894   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       610.895 ±      74.278  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1164.134 ±      64.276    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       532.513 ±    1146.276  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1010.705 ±    2178.526    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.774 ±       6.624  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.434 ±      12.263    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2113570.469 ±   56878.914   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1004.215 ±      55.778  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       747.711 ±      31.030    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941.306 ±    1419.653  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       700.494 ±    1051.331    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.006 ±       0.033    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2337735.646 ±   16128.742   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.008 ±       0.067  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.005 ±       0.045    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    465345.574 ±   36756.156   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       690.070 ±      60.117  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2333.605 ±      49.705    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       668.860 ±       1.785  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2262.718 ±     184.729    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.084 ±       0.440    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        17.000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                                128  thrpt    5    159654.316 ±    1404.285   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       950.607 ±      38.182  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9369.512 ±     446.361    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       940.928 ±    1416.263  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9279.279 ±   14033.816    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.246 ±       1.030    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5        21.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     59846.649 ±    2301.757   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2100.424 ±      76.546  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55230.023 ±    1598.536    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2145.030 ±    1146.424  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     56397.085 ±   29848.969    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.745 ±       4.815  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        19.604 ±     126.904    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        32.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     94352.227 ±    2550.927   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1744.476 ±      90.181  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     29096.481 ±     789.799    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1736.217 ±    1408.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28953.008 ±   23343.883    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.937 ±       6.011  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.722 ±     101.243    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        31.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    155524.895 ±    6238.414   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2473.816 ±     147.882  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25030.489 ±     676.836    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2420.144 ±    1427.365  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24478.493 ±   14123.974    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.037 ±       0.236  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.382 ±       2.412    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        18.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     33016.732 ±    1169.016   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2210.028 ±      53.764  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105341.249 ±    2269.603    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2015.221 ±      20.267  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     96059.299 ±    3527.834    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.235 ±       1.769  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        11.183 ±      83.883    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    160969.025 ±    2859.655   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1081.553 ±      39.813  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10573.347 ±     365.201    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069.121 ±    1410.656  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10456.403 ±   13846.346    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.779 ±       6.572  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.616 ±      64.267    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    436880.278 ±   23434.018   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       501.297 ±      21.037  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1805.832 ±      93.386    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.809 ±    1118.481  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1826.974 ±    4037.322    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.030 ±       0.258    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        11.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    482295.873 ±    2221.202   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         4.904 ±       0.022  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     64216.447 ±    4234.150   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1347.041 ±     105.958  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     33007.448 ±     707.952    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                         128  thrpt    5         0.003 ±       0.027  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                    128  thrpt    5         0.077 ±       0.662    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace                                      128  thrpt    5         0.009 ±       0.078  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                 128  thrpt    5         0.226 ±       1.942    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1338.457 ±      28.603  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     32807.461 ±    2637.160    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.962 ±       8.014  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        23.972 ±     199.802    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        60.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2901528.636 ±   93601.978   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3740.119 ±     138.758  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2028.545 ±      24.959    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3638.780 ±    1382.173  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      1973.222 ±     727.329    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.021 ±       0.098  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.011 ±       0.053    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        27.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        36.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    797359.961 ±   45696.632   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       470.298 ±      44.899  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       928.040 ±      56.825    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       399.905 ±    1405.724  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       793.578 ±    2790.273    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.011 ±       0.089  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.023 ±       0.179    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    362957.291 ±   21923.861   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       850.960 ±      61.946  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3689.332 ±     142.151    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800.901 ±    1148.636  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3470.610 ±    4937.259    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.054 ±       0.311    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    740747.498 ±   19271.120   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       673.302 ±      36.679  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1430.359 ±      60.244    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       671.857 ±       2.495  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1427.365 ±      40.733    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.018 ±       0.153    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3281063.985 ±  124698.619   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      1989.428 ±      66.621  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       954.228 ±      22.590    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      2019.456 ±       6.740  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       968.684 ±      37.205    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.525 ±       4.472  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.250 ±       2.135    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   7913388.662 ±  219460.273   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       868.696 ±      16.007  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       172.745 ±       5.181    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       807.253 ±    1158.621  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       160.679 ±     233.362    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.002 ±       0.014    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    236703.368 ±    6284.499   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2104.416 ±      70.265  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13991.157 ±     147.517    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2149.388 ±    1172.385  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     14286.335 ±    7620.690    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.287 ±       1.617  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.902 ±      10.658    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        16.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                                N/A  thrpt    5    309134.340 ±   21082.128   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5       610.208 ±      45.281  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      3106.279 ±     220.104    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       536.609 ±    1155.093  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2752.737 ±    5925.700    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.021 ±       0.184    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5        12.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1579730.995 ±    9595.599   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        91.480 ±      26.652  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        91.140 ±      27.036    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.319 ±     880.994  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       102.160 ±     879.628    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.158 ±       1.363  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.158 ±       1.361    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         2.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     74994.132 ±    2830.960   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3312.315 ±     191.746  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69497.620 ±    2156.181    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3245.862 ±    1148.878  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     68083.613 ±   22998.141    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.033 ±       0.244  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.699 ±       5.138    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        35.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1545057.583 ±   76220.928   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       834.549 ±      61.154  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       850.106 ±      68.807    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       801.408 ±    1147.160  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       818.127 ±    1202.830    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.008 ±       0.045    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1920025.368 ±   48072.206   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       534.132 ±      33.568  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       437.831 ±      32.161    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       402.364 ±    1414.367  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       329.750 ±    1159.153    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.007 ±       0.036    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1798803.461 ±    7815.722   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.493 ±       1.756  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.179 ±       1.542    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     50921.609 ±    1999.844   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2207.246 ±      57.858  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     68215.740 ±    2775.702    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2136.972 ±    1144.603  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     66100.879 ±   37709.441    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.891 ±       7.538  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        27.439 ±     232.089    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    270584.644 ±    6045.349   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1092.323 ±      54.002  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6352.798 ±     290.239    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1076.079 ±    1417.308  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6256.172 ±    8215.491    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.558 ±       4.715  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.226 ±      27.257    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     39372.381 ±    1808.159   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2015.127 ±     157.028  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     80535.164 ±    2848.455    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1879.616 ±    1166.706  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     75045.745 ±   44646.175    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.275 ±       2.232  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        10.955 ±      88.972    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        14.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        23.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    113825.388 ±    1604.273   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1150.300 ±      52.811  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15902.342 ±     534.880    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1203.498 ±    1151.641  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     16626.529 ±   15769.442    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.829 ±       7.000  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11.418 ±      96.456    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        28.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    332529.822 ±   11210.846   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       464.459 ±      42.832  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2197.856 ±     177.171    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       370.574 ±    1326.390  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      1756.498 ±    6286.240    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.020 ±       0.169    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         3.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         8.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    364902.506 ±    2145.354   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.896 ±       1.576  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.803 ±       6.900    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     51620.328 ±    4337.634   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1378.476 ±      62.565  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     42031.987 ±    1862.936    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1336.766 ±      18.095  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     40766.369 ±    3094.598    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.121 ±       0.733  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         3.648 ±      22.089    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        17.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73487.150 ±    2275.067   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1581.691 ±      56.838  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     33873.862 ±    1668.324    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1610.184 ±    1412.406  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     34529.592 ±   31295.960    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.754 ±       6.088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.140 ±     130.365    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        27.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    135894.408 ±    6688.488   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       683.016 ±      38.083  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5      7909.437 ±      78.906    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       666.375 ±       2.004  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      7717.911 ±     393.674    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.048 ±       0.414    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        18.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    259726.535 ±    7463.162   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1099.078 ±      36.664  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6660.048 ±     354.263    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075.115 ±    1416.438  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6522.127 ±    8676.423    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.579 ±       4.938  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.500 ±      29.866    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     28373.346 ±     449.256   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1531.195 ±      29.601  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     84926.193 ±    1027.903    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1472.032 ±    1145.339  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     81638.079 ±   63309.119    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.275 ±       1.976  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        15.261 ±     109.831    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    177263.229 ±    2301.970   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1007.141 ±      36.050  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8941.093 ±     312.014    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       935.882 ±    1411.992  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      8312.422 ±   12590.291    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.074 ±       0.390    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    475640.179 ±    5381.673   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1434.205 ±      55.808  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4744.979 ±     148.456    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1478.522 ±    1162.228  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4890.852 ±    3820.430    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.637 ±       5.041  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         2.104 ±      16.648    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    526614.746 ±    6436.970   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       996.090 ±      27.479  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2976.372 ±      84.050    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       940.808 ±    1415.821  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2811.967 ±    4241.475    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.012 ±       0.108  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.037 ±       0.322    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     66359.418 ±    2211.099   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1483.135 ±      25.914  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     35174.195 ±    1214.482    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1473.357 ±    1155.050  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     34969.240 ±   28206.753    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.112 ±       0.749  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         2.683 ±      17.918    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     90929.763 ±    5039.594   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1493.540 ±      99.572  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25839.893 ±     638.616    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1342.983 ±       8.724  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     23239.400 ±    1287.754    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.771 ±       5.799  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        13.080 ±      98.182    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    166615.309 ±    8544.194   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       708.096 ±      43.661  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6684.790 ±     310.471    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       798.805 ±    1143.299  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      7534.758 ±   10659.068    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.039 ±       0.336    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        22.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    276068.575 ±   17346.426   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1017.229 ±      62.582  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5799.226 ±     346.558    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1075.211 ±    1417.347  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      6144.978 ±    8270.317    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.072 ±       0.252    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        23.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     68054.585 ±    1013.663   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2660.482 ±      87.561  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     61522.042 ±    1608.557    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2541.567 ±    1159.947  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     58783.486 ±   27185.932    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.167 ±       1.301  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.871 ±      30.265    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                               128  thrpt    5    157435.761 ±    5391.250   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1326.924 ±      35.453  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     13263.772 ±     254.060    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1344.314 ±       5.992  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     13438.181 ±     477.596    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.810 ±       5.774  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         8.079 ±      57.404    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    204259.664 ±    7317.901   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1420.330 ±      65.854  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10942.394 ±     183.534    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1341.486 ±       4.499  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10335.846 ±     369.276    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.712 ±       5.064  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.452 ±      38.787    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    506102.123 ±    2114.758   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       411.109 ±      33.386  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1278.361 ±     102.793    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       470.965 ±    1056.352  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1464.705 ±    3284.013    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.105  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.052 ±       0.325    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    636439.185 ±   43497.356   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       354.043 ±      47.335  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       875.401 ±      96.571    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.823 ±    1217.054  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       839.298 ±    3031.215    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.021 ±       0.181    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        10.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    694763.978 ±    2553.225   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.258 ±       1.681  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.440 ±       3.782    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35659.414 ±    1663.780   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1937.059 ±     125.730  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85481.489 ±    2282.333    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1874.778 ±    1156.342  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     82733.494 ±   50929.700    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.825 ±       4.929  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        36.872 ±     221.800    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                              128  thrpt    5    127389.930 ±    1185.080   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5      1362.245 ±      39.743  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     16828.364 ±     389.166    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1344.355 ±       5.204  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     16607.544 ±     174.689    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.675 ±       4.630  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         8.318 ±      57.030    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] NestedStructsBenchmark.readCirce                                                                    128  thrpt    5     82167.523 ±    1617.846   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      3092.087 ±     123.148  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     59218.446 ±    1446.530    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2955.673 ±    1414.164  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     56605.285 ±   26996.841    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.037 ±       0.236  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0.722 ±       4.569    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        22.000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        30.000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                             128  thrpt    5    136831.887 ±    2652.783   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1803.473 ±      36.379  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     20742.019 ±     466.756    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1734.355 ±    1407.171  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19957.447 ±   16404.437    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.914 ±       7.645  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10.600 ±      88.706    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        13.000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        28.000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                            128  thrpt    5    654685.220 ±   18057.003   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1768.739 ±      35.169  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      4251.468 ±     105.797    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1746.495 ±    1415.858  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4200.407 ±    3454.748    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.654 ±       5.095  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.565 ±      12.189    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5        13.000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                                 128  thrpt    5     21106.060 ±    1194.426   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2802.499 ±     143.374  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    208967.345 ±   11120.579    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2675.735 ±      38.341  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    199532.817 ±   12091.260    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.379 ±       2.304  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        28.446 ±     172.659    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        20.000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                   128  thrpt    5     82816.572 ±    1380.573   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      3371.889 ±     133.653  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     64069.223 ±    1787.345    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3228.863 ±    1195.067  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     61342.165 ±   22244.052    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.017 ±       0.067  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.317 ±       1.279    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        24.000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        33.000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                            128  thrpt    5    285358.772 ±   11565.542   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1360.342 ±      74.496  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7501.587 ±     129.249    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.720 ±    1152.564  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      6625.613 ±    6188.759    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.791 ±       5.704  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4.325 ±      31.174    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1225297.782 ±   72962.714   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       635.576 ±      49.655  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       816.301 ±      32.093    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.010 ±       2.146  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       861.999 ±      51.247    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.011 ±       0.056    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1319908.308 ±    9653.557   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         0.244 ±       1.919  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0.292 ±       2.295    B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                                128  thrpt    5     47896.178 ±    1088.673   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2610.487 ±      80.366  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85771.638 ±    2200.359    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2543.615 ±    1138.318  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     83552.913 ±   36629.642    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.046 ±       0.243  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.510 ±       8.018    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        19.000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    850162.849 ±   50240.894   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2295.729 ±     195.527  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4249.325 ±     150.359    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2143.176 ±    1149.709  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3964.570 ±    1998.808    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.812 ±       6.590  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.514 ±      12.289    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1861179.253 ±   51259.699   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1184.297 ±      66.588  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1001.390 ±      31.603    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1202.396 ±    1151.419  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      1015.348 ±     955.296    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.893 ±       7.599  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.752 ±       6.398    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        33.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8449547.243 ±  367415.697   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       267.175 ±      34.480  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.762 ±       6.258    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.976 ±    1079.065  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        57.244 ±     201.244    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.001 ±       0.007    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    322067.988 ±   14474.302   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2090.334 ±     117.921  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10213.810 ±     136.821    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2012.650 ±      12.892  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      9835.543 ±     438.007    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.396 ±       2.919  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.943 ±      14.331    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1115395.031 ±   10957.182   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1816.448 ±      25.868  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2562.863 ±      36.164    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1738.552 ±    1404.714  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2453.792 ±    1999.529    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.006 ±       0.050    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2706591.533 ±  253056.423   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1189.711 ±     105.231  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       691.751 ±      25.931    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1204.120 ±    1152.270  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       701.075 ±     682.718    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.787 ±       6.664  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.471 ±       3.993    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6105708.634 ±  498611.413   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       707.959 ±      81.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       182.446 ±       8.032    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       805.416 ±    1158.562  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       206.940 ±     285.030    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6746844.874 ±  180981.472   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       425.198 ±      25.468  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        99.183 ±       7.033    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.851 ±    1062.820  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       110.570 ±     248.964    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    413589.008 ±   18184.509   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2597.526 ±     117.196  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      9883.305 ±     271.972    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2536.354 ±    1158.085  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      9650.943 ±    4414.247    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.108 ±       0.674  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.408 ±       2.525    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     77832.202 ±    3228.312   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2180.436 ±     105.902  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44086.342 ±     569.915    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2145.785 ±    1165.712  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     43411.978 ±   24501.953    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.745 ±       6.283  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        15.190 ±     128.065    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    130014.127 ±    8998.542   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      2054.912 ±     112.830  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24873.080 ±     551.414    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2002.302 ±      15.050  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     24241.063 ±    1692.497    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.920 ±       6.041  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.113 ±      73.240    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        30.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    182733.788 ±    4252.445   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2783.095 ±      65.148  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23968.320 ±     444.740    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2691.024 ±      25.008  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     23176.084 ±     730.022    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.071 ±       0.399  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.608 ±       3.428    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        20.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     58924.609 ±     242.312   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      2995.384 ±      63.171  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79993.070 ±    1657.009    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2947.057 ±    1426.197  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     78701.555 ±   38051.437    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.017 ±       0.088  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.445 ±       2.345    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                      128  thrpt    5    115437.144 ±    3816.350   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                       128  thrpt    5      2313.285 ±     121.963  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                  128  thrpt    5     31533.056 ±     736.656    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2148.489 ±    1148.512  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     29275.164 ±   15095.632    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.187 ±       1.216  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         2.579 ±      16.795    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                            128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                             128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    188905.245 ±    3253.319   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1335.625 ±      35.127  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11127.051 ±     296.990    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1341.495 ±       4.651  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     11176.031 ±     190.597    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.741 ±       6.068  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         6.149 ±      50.331    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        10.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    457535.152 ±   41478.618   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       406.611 ±      28.170  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1398.876 ±      93.578    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       470.968 ±    1056.371  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1629.413 ±    3662.473    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.017 ±       0.088  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.059 ±       0.310    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        13.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    643935.836 ±   22164.524   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       357.443 ±      38.894  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       873.584 ±      96.343    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.752 ±    1216.665  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       828.629 ±    2979.841    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.010 ±       0.086    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    710051.232 ±    6519.678   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.219 ±       0.066  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     34780.100 ±    1714.393   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1890.274 ±      73.375  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85528.551 ±    1978.113    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1741.125 ±    1409.550  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     78796.010 ±   64126.081    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.816 ±       6.669  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        37.325 ±     305.161    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        13.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                     128  thrpt    5    120220.021 ±     813.049   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                      128  thrpt    5      1295.514 ±      41.301  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                                 128  thrpt    5     16958.463 ±     451.473    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1344.459 ±       4.581  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     17599.325 ±     136.119    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.666 ±       5.557  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         8.709 ±      72.644    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                           128  thrpt    5        10.000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                            128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3653974.185 ±   86092.354   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2948.245 ±     101.484  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1269.766 ±      32.092    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2824.755 ±    1139.296  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1216.985 ±     510.527    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.005 ±       0.019    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   6005374.561 ±   67486.173   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1161.673 ±      28.263  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       304.411 ±      10.530    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1068.096 ±    1409.082  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       280.074 ±     371.554    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.831 ±       7.119  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.218 ±       1.867    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4114128.190 ±  182978.802   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2274.772 ±     117.637  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       870.139 ±      24.999    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2140.603 ±    1142.882  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       818.624 ±     427.023    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.795 ±       6.758  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.302 ±       2.570    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6908052.098 ±  198403.444   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1341.782 ±      46.921  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       305.664 ±      10.350    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1211.031 ±    1157.867  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       276.044 ±     265.940    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.583 ±       4.796  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.132 ±       1.087    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4270061.440 ±  100324.036   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2449.111 ±      56.676  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       902.637 ±      19.371    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2277.771 ±    1406.423  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       839.740 ±     526.272    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.104 ±       0.810  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.039 ±       0.300    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                             128  thrpt    5   3939033.597 ±  258348.226   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      2239.362 ±     155.058  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5       894.630 ±       9.817    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      2151.270 ±    1152.347  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       860.928 ±     514.090    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.658 ±       5.222  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.266 ±       2.114    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2187915.404 ±   22814.068   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1314.025 ±      38.069  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       945.177 ±      29.059    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1342.600 ±       4.359  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       965.731 ±       9.821    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.637 ±       5.396  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.457 ±       3.872    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5876654.953 ±  128875.116   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       587.057 ±      24.305  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       157.206 ±       5.322    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       533.067 ±    1147.467  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       142.934 ±     307.696    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.007 ±       0.064  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.002 ±       0.017    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4369886.435 ±   69609.073   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1395.221 ±      48.333  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       502.444 ±      11.213    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1339.464 ±       5.487  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       482.378 ±       8.729    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.745 ±       5.554  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.268 ±       2.000    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   5816141.611 ±  612695.105   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       581.578 ±      43.575  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       157.405 ±      11.078    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       536.945 ±    1155.814  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       144.975 ±     312.641    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.108  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.003 ±       0.029    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6459478.119 ±   23763.584   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.034 ±       0.292  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.008 ±       0.071    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4624368.424 ±   53281.409   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1315.174 ±      51.984  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       447.567 ±      12.958    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.702 ±       4.023  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       456.605 ±       5.606    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.758 ±       6.301  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.257 ±       2.140    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                            128  thrpt    5    400861.060 ±    6025.440   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       392.935 ±      23.773  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      1542.638 ±     108.983    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370.795 ±    1327.285  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1458.736 ±    5218.451    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.016 ±       0.141    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3.000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1515550.980 ±    7654.364   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2123.157 ±      48.166  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2204.627 ±      52.828    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2018.302 ±      16.901  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2095.747 ±      19.055    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.175 ±       1.082  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.182 ±       1.124    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2811024.421 ±  178798.613   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       543.076 ±      62.455  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       303.964 ±      18.943    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       533.127 ±    1147.597  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       297.547 ±     640.864    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.006 ±       0.042  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.003 ±       0.023    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1709640.066 ±   26543.305   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       935.365 ±      19.733  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       861.007 ±      29.152    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       936.031 ±    1412.130  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       862.493 ±    1312.276    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.017 ±       0.054  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.015 ±       0.050    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2398157.364 ±  119310.982   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       462.238 ±      46.841  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       303.323 ±      25.906    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.058 ±    1328.410  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       243.603 ±     873.433    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1698930.956 ±  104063.606   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       967.551 ±      56.371  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       896.259 ±      28.581    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       936.682 ±    1411.129  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       868.125 ±    1313.104    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.010 ±       0.057  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.010 ±       0.053    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                          128  thrpt    5   1418752.419 ±   11164.622   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                           128  thrpt    5      1535.705 ±      41.252  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      1703.445 ±      45.069    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1479.418 ±    1150.231  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1641.071 ±    1277.631    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.641 ±       5.210  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.711 ±       5.780    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                                128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                                 128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1867481.416 ±   80449.493   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1432.544 ±     104.317  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1207.193 ±      63.130    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1476.618 ±    1152.015  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1243.746 ±     949.785    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.645 ±       5.423  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.553 ±       4.649    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2709971.168 ±    9207.288   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       723.138 ±      17.030  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       419.919 ±       9.504    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       666.537 ±       1.597  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       387.052 ±       1.913    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.046  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.007 ±       0.026    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2957677.203 ±  109083.470   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1298.657 ±      39.390  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       691.019 ±      10.192    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.459 ±    1152.317  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       642.070 ±     621.437    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.699 ±       5.778  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.371 ±       3.061    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        30.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3334234.228 ±  101945.365   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       892.235 ±      24.456  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       421.150 ±      18.166    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       806.209 ±    1156.986  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       380.804 ±     551.267    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.021 ±       0.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.010 ±       0.047    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3630149.968 ±   18583.494   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2843319.066 ±  174570.257   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1411.273 ±     100.767  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       781.087 ±      16.920    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1342.736 ±       4.283  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       743.323 ±      45.718    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.658 ±       5.056  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.362 ±       2.786    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     11769.705 ±     144.173   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1392.450 ±      27.578  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    186173.241 ±    3281.089    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1335.932 ±       4.433  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    178617.776 ±    2275.732    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.837 ±       6.338  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       111.611 ±     845.635    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        33.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     22051.506 ±     465.355   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       337.607 ±      32.962  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24093.473 ±    2724.418    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.667 ±    1206.128  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     24118.726 ±   86483.747    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22402.360 ±     422.409   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       256.918 ±      31.441  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     18049.524 ±    2415.064    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.972 ±    1079.049  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21589.625 ±   75891.825    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.025 ±       0.215  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         1.750 ±      15.071    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      7214.123 ±     344.023   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2051.807 ±      94.533  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    447557.937 ±    1989.224    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1998.157 ±      26.558  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    435897.364 ±   17704.196    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.408 ±       2.954  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5        89.888 ±     650.517    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        15.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     61565.223 ±    4587.259   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       798.469 ±      72.143  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20409.384 ±     744.997    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       797.550 ±    1140.584  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     20339.140 ±   28144.389    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.023 ±       0.091  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.586 ±       2.353    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     69381.648 ±    1131.154   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       465.444 ±      25.702  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10557.629 ±     675.321    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       502.752 ±    1112.935  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11420.322 ±   25276.771    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.284 ±       2.445    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     75660.714 ±    2460.724   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        22.965 ±      21.486  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       478.453 ±     467.494    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       102.323 ±     881.032  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5      2160.475 ±   18602.344    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5         3.000                    ms
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    313185.789 ±   11892.786   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1875.936 ±      84.147  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9426.554 ±     289.131    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1877.653 ±    1159.656  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9440.469 ±    5948.742    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.729 ±       6.140  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.722 ±      31.377    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    490754.056 ±   19121.701   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       545.873 ±      31.206  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1750.594 ±     134.370    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       501.722 ±    1110.045  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1610.604 ±    3549.936    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.013 ±       0.115    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1259610.146 ±   34613.603   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       678.667 ±      23.638  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       847.931 ±      23.307    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       670.695 ±       2.017  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       838.001 ±      24.645    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.025 ±       0.143  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.031 ±       0.178    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    111260.713 ±    5550.995   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3416.228 ±     156.503  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     48320.614 ±     433.875    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3360.547 ±      69.361  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     47540.803 ±    3190.598    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.059 ±       0.505    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        25.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        34.000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    612487.913 ±   13966.490   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1840.557 ±      53.209  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      4729.437 ±     192.299    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1746.574 ±    1416.504  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4490.950 ±    3704.821    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.604 ±       5.020  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.562 ±      12.987    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        22.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    340635.429 ±    8635.089   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1185.269 ±      62.663  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5475.366 ±     262.565    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1073.577 ±    1416.088  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      4964.885 ±    6608.510    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.704 ±       5.925  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.237 ±      27.251    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    719509.048 ±   13801.115   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       563.889 ±      39.738  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1232.958 ±      77.575    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       533.176 ±    1147.706  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1165.252 ±    2508.402    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1571278.581 ±  105039.245   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       745.416 ±      46.140  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       746.607 ±      10.583    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       671.422 ±       2.062  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       672.635 ±      43.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.008 ±       0.044    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1789321.558 ±   41962.255   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.345 ±       2.971  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.303 ±       2.604    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    451854.214 ±   30391.808   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       692.241 ±      71.771  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2410.766 ±     132.758    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.184 ±    1149.725  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2788.834 ±    3896.511    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.108  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.043 ±       0.369    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    160634.320 ±    2103.376   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       962.500 ±      36.342  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      9429.703 ±     400.172    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       941.158 ±    1416.570  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      9228.933 ±   13996.181    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.082 ±       0.703    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5        19.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 8293 s, completed Jun 1, 2018 12:31:22 AM
